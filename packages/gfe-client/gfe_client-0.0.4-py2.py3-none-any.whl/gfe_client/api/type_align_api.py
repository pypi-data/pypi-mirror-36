# coding: utf-8

"""
    Allele Calling Service

    The Allele Calling  service provides an API for converting raw sequence data to GFE and HLA allele calls.  # noqa: E501

    OpenAPI spec version: 0.0.5
    Contact: mhalagan@nmdp.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from gfe_client.configuration import Configuration
from gfe_client.api_client import ApiClient


class TypeAlignApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            config = Configuration()
            api_client = ApiClient(configuration=config)
        self.api_client = api_client

    def typealign_get(self, sequence, **kwargs):  # noqa: E501
        """typealign_get  # noqa: E501

        Get HLA and GFE from consensus sequence or GFE notation  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.typealign_get(locus, sequence, async=True)
        >>> result = thread.get()

        :param async bool
        :param str locus: Valid HLA locus (required)
        :param str sequence: Consensus sequence (required)
        :param str imgthla_version: IMGT/HLA DB Version
        :param str neo4j_url: URL for the neo4j graph
        :param str user: Username for the neo4j graph
        :param str password: Password for the neo4j graph
        :param bool verbose: Flag for running service in verbose
        :return: Typing
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.typealign_get_with_http_info(locus, sequence, **kwargs)  # noqa: E501
        else:
            (data) = self.typealign_get_with_http_info(locus, sequence, **kwargs)  # noqa: E501
            return data

    def typealign_get_with_http_info(self, sequence, **kwargs):  # noqa: E501
        """typealign_get  # noqa: E501

        Get HLA and GFE from consensus sequence or GFE notation  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.typealign_get_with_http_info(locus, sequence, async=True)
        >>> result = thread.get()

        :param async bool
        :param str locus: Valid HLA locus (required)
        :param str sequence: Consensus sequence (required)
        :param str imgthla_version: IMGT/HLA DB Version
        :param str neo4j_url: URL for the neo4j graph
        :param str user: Username for the neo4j graph
        :param str password: Password for the neo4j graph
        :param bool verbose: Flag for running service in verbose
        :return: Typing
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['locus', 'sequence', 'imgthla_version', 'neo4j_url', 'user', 'password', 'verbose']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method typealign_get" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'sequence' is set
        if ('sequence' not in params or
                params['sequence'] is None):
            raise ValueError("Missing the required parameter `sequence` when calling `typealign_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'locus' in params:
            query_params.append(('locus', params['locus']))  # noqa: E501
        if 'sequence' in params:
            query_params.append(('sequence', params['sequence']))  # noqa: E501
        if 'imgthla_version' in params:
            query_params.append(('imgthla_version', params['imgthla_version']))  # noqa: E501
        if 'neo4j_url' in params:
            query_params.append(('neo4j_url', params['neo4j_url']))  # noqa: E501
        if 'user' in params:
            query_params.append(('user', params['user']))  # noqa: E501
        if 'password' in params:
            query_params.append(('password', params['password']))  # noqa: E501
        if 'verbose' in params:
            query_params.append(('verbose', params['verbose']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/type_align', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Typing',  # noqa: E501
            auth_settings=auth_settings,
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
