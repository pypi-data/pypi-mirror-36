# coding: utf-8

"""
    Allele Calling Service

    The Allele Calling  service provides an API for converting raw sequence data to GFE and HLA allele calls.  # noqa: E501

    OpenAPI spec version: 0.0.5
    Contact: mhalagan@nmdp.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class Seqdiff(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'term': 'str',
        'rank': 'int',
        'location': 'int',
        'ref': 'str',
        'inseq': 'str'
    }

    attribute_map = {
        'term': 'term',
        'rank': 'rank',
        'location': 'location',
        'ref': 'ref',
        'inseq': 'inseq'
    }

    def __init__(self, term=None, rank=None, location=None, ref=None, inseq=None):  # noqa: E501
        """Seqdiff - a model defined in Swagger"""  # noqa: E501

        self._term = None
        self._rank = None
        self._location = None
        self._ref = None
        self._inseq = None
        self.discriminator = None

        if term is not None:
            self.term = term
        if rank is not None:
            self.rank = rank
        if location is not None:
            self.location = location
        if ref is not None:
            self.ref = ref
        if inseq is not None:
            self.inseq = inseq

    @property
    def term(self):
        """Gets the term of this Seqdiff.  # noqa: E501


        :return: The term of this Seqdiff.  # noqa: E501
        :rtype: str
        """
        return self._term

    @term.setter
    def term(self, term):
        """Sets the term of this Seqdiff.


        :param term: The term of this Seqdiff.  # noqa: E501
        :type: str
        """

        self._term = term

    @property
    def rank(self):
        """Gets the rank of this Seqdiff.  # noqa: E501


        :return: The rank of this Seqdiff.  # noqa: E501
        :rtype: int
        """
        return self._rank

    @rank.setter
    def rank(self, rank):
        """Sets the rank of this Seqdiff.


        :param rank: The rank of this Seqdiff.  # noqa: E501
        :type: int
        """

        self._rank = rank

    @property
    def location(self):
        """Gets the location of this Seqdiff.  # noqa: E501


        :return: The location of this Seqdiff.  # noqa: E501
        :rtype: int
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this Seqdiff.


        :param location: The location of this Seqdiff.  # noqa: E501
        :type: int
        """

        self._location = location

    @property
    def ref(self):
        """Gets the ref of this Seqdiff.  # noqa: E501


        :return: The ref of this Seqdiff.  # noqa: E501
        :rtype: str
        """
        return self._ref

    @ref.setter
    def ref(self, ref):
        """Sets the ref of this Seqdiff.


        :param ref: The ref of this Seqdiff.  # noqa: E501
        :type: str
        """

        self._ref = ref

    @property
    def inseq(self):
        """Gets the inseq of this Seqdiff.  # noqa: E501


        :return: The inseq of this Seqdiff.  # noqa: E501
        :rtype: str
        """
        return self._inseq

    @inseq.setter
    def inseq(self, inseq):
        """Sets the inseq of this Seqdiff.


        :param inseq: The inseq of this Seqdiff.  # noqa: E501
        :type: str
        """

        self._inseq = inseq

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Seqdiff):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
