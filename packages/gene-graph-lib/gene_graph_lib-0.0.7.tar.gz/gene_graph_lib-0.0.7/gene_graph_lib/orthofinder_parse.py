import argparse
from . import reverse
from collections import OrderedDict
import manage_db

parser = argparse.ArgumentParser()
parser.add_argument('-i', '--input_file', default='no', type=str, help='input_file, generated by Orthofinder')
parser.add_argument('-o', '--out_file', default='paths', type=str, help='output file prefix (default paths)')
args = parser.parse_args()


graph = OrderedDict()
length_table = OrderedDict()
coord_table = OrderedDict()


for line in open(args.input_file, 'r'):

	OG, string = line.split(': ')[0], line.split(': ')[1][:-1]


	stamms = string.split(' ')
	for stamm in stamms:
		name = stamm.split('|')[0]
		start_coord = int(stamm.split('|')[-2])
		end_coord = int(stamm.split('|')[-1])
		coord = int(stamm.split('|')[1])
		description = stamm.split('|')[2]
		contig_name = stamm.split('|')[3]

		if name not in graph:
			graph[name] = {contig_name:[(start_coord, OG)]}
			coord_table[name] = {}
			length_table[name] = {}

		elif contig_name not in graph[name]:
			graph[name][contig_name] = [(start_coord, OG)]

		else:
			graph[name][contig_name].append((start_coord,OG))
		
		coord_table[name].update([(OG, (start_coord, end_coord, description))])
		length_table[name].update([(OG, end_coord - start_coord)])


for name in graph:
	 for contig in graph[name]:
		 graph[name][contig].sort()
		 graph[name][contig] = [graph[name][contig][i][1] for i in range(len(graph[name][contig]))]




out = open(args.out_file + '.sif', 'a+')
out_freq = open(args.out_file + '_freq.sif', 'a+')


for name in graph:
	S = set([])
	G = set([])
	for contig in graph[name]:
		for gene in graph[name][contig]:
			if gene in S:
				G.add(gene)
				continue

			S.add(gene)

for name in graph:
	for contig in graph[name]:
		graph[name][contig] = [gene for gene in graph[name][contig] if gene not in G]

graph, reversed_chains = reverse.reverse(graph, length_table)

for stamm in graph:
	for contig in range(len(graph[stamm])):
		if contig in reversed_chains[stamm]:
			start = coord_table[stamm][graph[stamm][contig][0]][0]
			end = coord_table[stamm][graph[stamm][contig][-1]][1]
			for i in graph[stamm][contig]:
				coord_table[stamm][i][0] = start + end - coord_table[stamm][i][0]
				coord_table[stamm][i][1] = start + end - coord_table[stamm][i][1]


db = manage_db.create_connection(args.out_file + '.db')
sql_exec = """ CREATE TABLE IF NOT EXISTS stamms_table (
					id integer PRIMARY KEY,
					stamm text
				); """
manage_db.create_table(db, sql_exec)
cursor = db.cursor()

sql_exec = """ CREATE TABLE IF NOT EXISTS contigs_table (
					id integer PRIMARY KEY,
					stamm_key text,
					contig text
				); """
manage_db.create_table(db, sql_exec)

sql_exec = """ CREATE TABLE IF NOT EXISTS og_table (
					id integer PRIMARY KEY,
					contig integer,
					og text,
					description text,
					start_coord integer,
					end_coord integer,
					win_var float,
					prob_win_var float,
					io float,
					prob_io float
				); """


manage_db.create_table(db, sql_exec)

stamm_key = 0
contig_key = 0
og_key = 0
for name in graph:
	print(name)
	print('---')
	cursor.execute('INSERT INTO stamms_table VALUES (' + str(stamm_key) + ',"' + name + '")')
	for contig in graph[name]:
		
		cursor.execute('INSERT INTO contigs_table VALUES (' + str(contig_key) + ',' + str(stamm_key) + ',"' + str(contig) + '")')
		
		for i in range(len(graph[name][contig])):
			gene = graph[name][contig][i]
			cursor.execute('INSERT INTO og_table VALUES('+ str(og_key) + ',' + str(contig_key) + ',"' + gene + '","' + coord_table[name][gene][2] + '",' + str(coord_table[name][gene][0]) + ',' + str(coord_table[name][gene][1]) + ',' + '0.0,0.0,0.0,0.0)')

			og_key += 1
					

			if i == len(graph[name][contig]) - 1:
				continue
			line = graph[name][contig][i] + ' ' + graph[name][contig][i + 1] + ' ' + name + ' ' + contig + '\n'
			out.write(line)
		contig_key += 1	
	stamm_key += 1


db.commit()

db.close()

freq = {}
for name in graph:
	for contig in graph[name]:
		for i in range(len(graph[name][contig]) - 1):
			if graph[name][contig][i] + ' ' + graph[name][contig][i + 1] not in freq:
				freq.update([(graph[name][contig][i] + ' ' + graph[name][contig][i + 1], [name])])

			else:
				freq[graph[name][contig][i] + ' ' + graph[name][contig][i + 1]].append(name)

for pair in freq:
	out_freq.write(pair + ' ' + str(len(freq[pair])) + ' ')
	for name in freq[pair]:
		out_freq.write(name)
		if name == freq[pair][-1]:
			out_freq.write('\n')
			continue
		out_freq.write('|')


