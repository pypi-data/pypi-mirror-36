[
  {"name": "forin","language": "C++","snippet": "for(### $$$: %%%){\n{{inside_block}}\n}"},

  {"name": "struct","language": "C++","snippet": "{{template}}struct !!!{{extend}} {\n{{inside_block}}\n};"},
  {"name": "extend","language": "C++","snippet": ": %%% :::{{opt_extend}}"},
  {"name": "opt_extend","language": "C++","snippet": ", %%% :::{{opt_extend}}"},

  {"name": "class","language": "C++","snippet": "{{template}}class !!!{{extend}} {\n{{block}}\n};"},
  {"name": "public","language": "C++","snippet": "public:\n{{inside_wblock}}"},
  {"name": "private","language": "C++","snippet": "private:\n{{inside_wblock}}"},
  {"name": "protected","language": "C++","snippet": "protected:\n{{inside_wblock}}"},

  {"name": "method","language": "C++","snippet": "{{template}}### @@@({{params}}){\n{{inside_block}}\n}"},
  {"name": "nimethod","language": "C++","snippet": "{{template}}### @@@({{params}});"},
  {"name": "amethod","language": "C++","snippet": "{{template}}virtual ### @@@({{params}}) = 0;"},
  {"name": "dmethod","language": "C++","snippet": "{{template}}### @@@({{params}}) = delete;"},
  {"name": "cmethod","language": "C++","snippet": "{{template}}### @@@({{params}}) const{\n{{inside_block}}\n}"},
  {"name": "nicmethod","language": "C++","snippet": "{{template}}### @@@({{params}}) const;"},
  {"name": "acmethod","language": "C++","snippet": "{{template}}virtual ### @@@({{params}}) const = 0;"},
  {"name": "dcmethod","language": "C++","snippet": "{{template}}### @@@({{params}}) const = delete;"},
  {"name": "methodi1","language": "C++","snippet": "{{template}}### !!!::@@@({{params}}){\n{{inside_block}}\n}"},
  {"name": "methodi","language": "C++","snippet": "{{template}}### {{?!!!}}::@@@({{params}}){\n{{inside_block}}\n}"},

  {"name": "func","language": "C++","snippet": "{{template}}### @@@({{params}}){\n{{inside_block}}\n}"},

  {"name": "constr","language": "C++","snippet": "{{?!!!}}({{params}}){\n{{inside_block}}\n}"},
  {"name": "niconstr","language": "C++","snippet": "{{?!!!}}({{params}});"},
  {"name": "econstr","language": "C++","snippet": "{{?!!!}}({{params}}){}"},
  {"name": "dconstr","language": "C++","snippet": "{{?!!!}}({{params}}) = delete;"},
  {"name": "constri1","language": "C++","snippet": "!!!::!!!({{params}}){\n{{inside_block}}\n}"},
  {"name": "constri","language": "C++","snippet": "{{?!!!}}::{{?!!!}}({{params}}){\n{{inside_block}}\n}"},

  {"name": "enum","language": ["C++", "C"],"snippet": "enum !!!{{enum_type}} {\n{{enum_body}}\n};"},
  {"name": "enum_body","language": ["C++", "C"],"snippet": "\t>>>{{opt_enum_body}}"},
  {"name": "opt_enum_body","language": ["C++", "C"],"snippet": ",\n\t>>>{{opt_enum_body}}"},
  {"name": "enum1","language": ["C++", "C"],"snippet": "enum !!!{{enum1_type}} { {{enum1_body}} };"},
  {"name": "enum1_body","language": ["C++", "C"],"snippet": ">>>{{opt_enum1_body}}"},
  {"name": "opt_enum1_body","language": ["C++", "C"],"snippet": ", >>>{{opt_enum1_body}}"},

  {"name": "template","language": "C++","snippet": "template <class ^^^{{opt_template_params}}>\n"},
  {"name": "opt_template_params","language": "C++","snippet": ", class ^^^{{opt_template_params}}"},

  {"name": "inc","language": ["C++", "C"],"snippet": "#include \"$$$\""},
  {"name": "stdinc","language": ["C++", "C"],"snippet": "#include <$$$>"},

  {"name": "singleton","language": "C++","snippet": "public>method#{{?\\!\\!\\!}}\\&@getInstance>static {{?\\!\\!\\!}} instance;& &return instance;<<private>block>econstr&niconstr#{{?\\!\\!\\!}} const\\&$origin&nimethod#void@operator=#{{?\\!\\!\\!}} const\\&$origin<"},
  {"name": "compositeclass","language": "C++","snippet": "public>method#void@add#{{?\\:\\:\\:}}$*item>children.puch_back(item);<<private>std\\:\\:vector\\<{{?\\:\\:\\:}}*\\> children;<"},
  {"name": "compositemethod","language": "C++","snippet": "for#int$i%0%children.size()>children[i]-\\>{{?\\@\\@\\@}}();<"},
  {"name": "main","language": ["C++", "C"],"snippet": "func#int@main#int$argc#char*$argv[]"}
]