# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers

class LocalSchedulerInfoMessage(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsLocalSchedulerInfoMessage(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = LocalSchedulerInfoMessage()
        x.Init(buf, n + offset)
        return x

    # LocalSchedulerInfoMessage
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # LocalSchedulerInfoMessage
    def DbClientId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return bytes()

    # LocalSchedulerInfoMessage
    def TotalNumWorkers(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # LocalSchedulerInfoMessage
    def TaskQueueLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # LocalSchedulerInfoMessage
    def AvailableWorkers(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # LocalSchedulerInfoMessage
    def StaticResources(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from .ResourcePair import ResourcePair
            obj = ResourcePair()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # LocalSchedulerInfoMessage
    def StaticResourcesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # LocalSchedulerInfoMessage
    def DynamicResources(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from .ResourcePair import ResourcePair
            obj = ResourcePair()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # LocalSchedulerInfoMessage
    def DynamicResourcesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # LocalSchedulerInfoMessage
    def IsDead(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos)
        return 0

def LocalSchedulerInfoMessageStart(builder): builder.StartObject(7)
def LocalSchedulerInfoMessageAddDbClientId(builder, dbClientId): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(dbClientId), 0)
def LocalSchedulerInfoMessageAddTotalNumWorkers(builder, totalNumWorkers): builder.PrependInt64Slot(1, totalNumWorkers, 0)
def LocalSchedulerInfoMessageAddTaskQueueLength(builder, taskQueueLength): builder.PrependInt64Slot(2, taskQueueLength, 0)
def LocalSchedulerInfoMessageAddAvailableWorkers(builder, availableWorkers): builder.PrependInt64Slot(3, availableWorkers, 0)
def LocalSchedulerInfoMessageAddStaticResources(builder, staticResources): builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(staticResources), 0)
def LocalSchedulerInfoMessageStartStaticResourcesVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def LocalSchedulerInfoMessageAddDynamicResources(builder, dynamicResources): builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(dynamicResources), 0)
def LocalSchedulerInfoMessageStartDynamicResourcesVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def LocalSchedulerInfoMessageAddIsDead(builder, isDead): builder.PrependBoolSlot(6, isDead, 0)
def LocalSchedulerInfoMessageEnd(builder): return builder.EndObject()
