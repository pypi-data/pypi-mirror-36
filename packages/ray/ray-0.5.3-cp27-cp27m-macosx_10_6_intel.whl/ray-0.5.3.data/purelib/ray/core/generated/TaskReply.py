# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers

class TaskReply(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsTaskReply(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = TaskReply()
        x.Init(buf, n + offset)
        return x

    # TaskReply
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # TaskReply
    def TaskId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return bytes()

    # TaskReply
    def State(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # TaskReply
    def LocalSchedulerId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return bytes()

    # TaskReply
    def ExecutionDependencies(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return bytes()

    # TaskReply
    def TaskSpec(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return bytes()

    # TaskReply
    def SpillbackCount(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # TaskReply
    def Updated(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos)
        return 0

def TaskReplyStart(builder): builder.StartObject(7)
def TaskReplyAddTaskId(builder, taskId): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(taskId), 0)
def TaskReplyAddState(builder, state): builder.PrependInt64Slot(1, state, 0)
def TaskReplyAddLocalSchedulerId(builder, localSchedulerId): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(localSchedulerId), 0)
def TaskReplyAddExecutionDependencies(builder, executionDependencies): builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(executionDependencies), 0)
def TaskReplyAddTaskSpec(builder, taskSpec): builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(taskSpec), 0)
def TaskReplyAddSpillbackCount(builder, spillbackCount): builder.PrependInt64Slot(5, spillbackCount, 0)
def TaskReplyAddUpdated(builder, updated): builder.PrependBoolSlot(6, updated, 0)
def TaskReplyEnd(builder): return builder.EndObject()
