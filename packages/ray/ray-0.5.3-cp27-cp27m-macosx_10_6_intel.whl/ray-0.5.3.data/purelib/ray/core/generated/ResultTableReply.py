# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers

class ResultTableReply(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsResultTableReply(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = ResultTableReply()
        x.Init(buf, n + offset)
        return x

    # ResultTableReply
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # ResultTableReply
    def TaskId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return bytes()

    # ResultTableReply
    def IsPut(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos)
        return 0

    # ResultTableReply
    def DataSize(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # ResultTableReply
    def Hash(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return bytes()

def ResultTableReplyStart(builder): builder.StartObject(4)
def ResultTableReplyAddTaskId(builder, taskId): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(taskId), 0)
def ResultTableReplyAddIsPut(builder, isPut): builder.PrependBoolSlot(1, isPut, 0)
def ResultTableReplyAddDataSize(builder, dataSize): builder.PrependInt64Slot(2, dataSize, 0)
def ResultTableReplyAddHash(builder, hash): builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(hash), 0)
def ResultTableReplyEnd(builder): return builder.EndObject()
