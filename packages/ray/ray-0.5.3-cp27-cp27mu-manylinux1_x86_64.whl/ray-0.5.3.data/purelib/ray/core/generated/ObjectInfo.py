# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers

class ObjectInfo(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsObjectInfo(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = ObjectInfo()
        x.Init(buf, n + offset)
        return x

    # ObjectInfo
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # ObjectInfo
    def ObjectId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return bytes()

    # ObjectInfo
    def DataSize(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # ObjectInfo
    def MetadataSize(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # ObjectInfo
    def RefCount(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # ObjectInfo
    def CreateTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # ObjectInfo
    def ConstructDuration(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # ObjectInfo
    def Digest(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return bytes()

    # ObjectInfo
    def IsDeletion(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos)
        return 0

def ObjectInfoStart(builder): builder.StartObject(8)
def ObjectInfoAddObjectId(builder, objectId): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(objectId), 0)
def ObjectInfoAddDataSize(builder, dataSize): builder.PrependInt64Slot(1, dataSize, 0)
def ObjectInfoAddMetadataSize(builder, metadataSize): builder.PrependInt64Slot(2, metadataSize, 0)
def ObjectInfoAddRefCount(builder, refCount): builder.PrependInt32Slot(3, refCount, 0)
def ObjectInfoAddCreateTime(builder, createTime): builder.PrependInt64Slot(4, createTime, 0)
def ObjectInfoAddConstructDuration(builder, constructDuration): builder.PrependInt64Slot(5, constructDuration, 0)
def ObjectInfoAddDigest(builder, digest): builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(digest), 0)
def ObjectInfoAddIsDeletion(builder, isDeletion): builder.PrependBoolSlot(7, isDeletion, 0)
def ObjectInfoEnd(builder): return builder.EndObject()
