# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers

class SubscribeToNotificationsReply(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsSubscribeToNotificationsReply(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = SubscribeToNotificationsReply()
        x.Init(buf, n + offset)
        return x

    # SubscribeToNotificationsReply
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # SubscribeToNotificationsReply
    def ObjectId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return bytes()

    # SubscribeToNotificationsReply
    def ObjectSize(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # SubscribeToNotificationsReply
    def ManagerIds(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # SubscribeToNotificationsReply
    def ManagerIdsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

def SubscribeToNotificationsReplyStart(builder): builder.StartObject(3)
def SubscribeToNotificationsReplyAddObjectId(builder, objectId): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(objectId), 0)
def SubscribeToNotificationsReplyAddObjectSize(builder, objectSize): builder.PrependInt64Slot(1, objectSize, 0)
def SubscribeToNotificationsReplyAddManagerIds(builder, managerIds): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(managerIds), 0)
def SubscribeToNotificationsReplyStartManagerIdsVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def SubscribeToNotificationsReplyEnd(builder): return builder.EndObject()
