# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers

class ActorCreationNotification(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsActorCreationNotification(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = ActorCreationNotification()
        x.Init(buf, n + offset)
        return x

    # ActorCreationNotification
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # ActorCreationNotification
    def ActorId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return bytes()

    # ActorCreationNotification
    def DriverId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return bytes()

    # ActorCreationNotification
    def LocalSchedulerId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return bytes()

def ActorCreationNotificationStart(builder): builder.StartObject(3)
def ActorCreationNotificationAddActorId(builder, actorId): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(actorId), 0)
def ActorCreationNotificationAddDriverId(builder, driverId): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(driverId), 0)
def ActorCreationNotificationAddLocalSchedulerId(builder, localSchedulerId): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(localSchedulerId), 0)
def ActorCreationNotificationEnd(builder): return builder.EndObject()
