"""start

Revision ID: 0001
Revises:
Create Date: 2016-03-17 15:13:05.368405

"""

from alembic import op
from cardinal_pythonlib.sqlalchemy.alembic_ops import ReplaceableObject
from cardinal_pythonlib.sqlalchemy.arrow_types import ArrowMicrosecondType
import sqlalchemy as sa
import sqlalchemy_utils

# revision identifiers, used by Alembic.
revision = '0001'
down_revision = None
branch_labels = None
depends_on = None

subject_session_view = ReplaceableObject(
    'subject_session_view',
    """
        SELECT
            C.subject,
            S.*
        FROM
            config C
            INNER JOIN session S ON S.config_id = C.config_id
    """
)
subject_session_trial_view = ReplaceableObject(
    'subject_session_trial_view',
    """
        SELECT
            C.subject,
            S.started_at AS session_started_at,
            T.*
        FROM
            config C
            INNER JOIN session S ON S.config_id = C.config_id
            INNER JOIN trial T ON T.session_id = S.session_id
    """
)


def upgrade():
    # commands auto generated by Alembic - please adjust! ###
    op.create_table('config',
                    sa.Column('config_id', sa.Integer(), nullable=False),
                    sa.Column('modified_at',
                              ArrowMicrosecondType(),
                              nullable=True),
                    sa.Column('read_only', sa.Boolean(), nullable=True),
                    sa.Column('server', sa.String(length=255), nullable=True),
                    sa.Column('port', sa.Integer(), nullable=True),
                    sa.Column('devicegroup', sa.String(length=255),
                              nullable=True),
                    sa.Column('subject', sa.String(length=255), nullable=True),
                    sa.Column('reinf_n_pellets', sa.Integer(), nullable=True),
                    sa.Column('reinf_pellet_pulse_ms', sa.Integer(),
                              nullable=True),
                    sa.Column('reinf_interpellet_gap_ms', sa.Integer(),
                              nullable=True),
                    sa.Column('iti_duration_ms', sa.Integer(), nullable=True),
                    sa.Column('repeat_incomplete_trials', sa.Boolean(),
                              nullable=True),
                    sa.PrimaryKeyConstraint('config_id', name=op.f('pk_config'))
                    )
    op.create_table('config_stage',
                    sa.Column('config_stage_id', sa.Integer(), nullable=False),
                    sa.Column('modified_at',
                              ArrowMicrosecondType(),
                              nullable=True),
                    sa.Column('config_id', sa.Integer(), nullable=False),
                    sa.Column('stagenum', sa.Integer(), nullable=False),
                    sa.Column('sequence_length', sa.Integer(), nullable=True),
                    sa.Column('limited_hold_s', sa.Float(), nullable=True),
                    sa.Column('progression_criterion_x', sa.Integer(),
                              nullable=True),
                    sa.Column('progression_criterion_y', sa.Integer(),
                              nullable=True),
                    sa.Column('stop_after_n_trials', sa.Integer(),
                              nullable=True),
                    sa.ForeignKeyConstraint(['config_id'], ['config.config_id'],
                                            name=op.f(
                                                'fk_config_stage_config_id_config')),  # noqa
                    sa.PrimaryKeyConstraint('config_stage_id',
                                            name=op.f('pk_config_stage'))
                    )
    op.create_table('session',
                    sa.Column('session_id', sa.Integer(), nullable=False),
                    sa.Column('config_id', sa.Integer(), nullable=False),
                    sa.Column('started_at',
                              ArrowMicrosecondType(),
                              nullable=False),
                    sa.Column('trials_responded', sa.Integer(), nullable=False),
                    sa.Column('trials_correct', sa.Integer(), nullable=False),
                    sa.ForeignKeyConstraint(['config_id'], ['config.config_id'],
                                            name=op.f(
                                                'fk_session_config_id_config')),
                    sa.PrimaryKeyConstraint('session_id',
                                            name=op.f('pk_session'))
                    )
    op.create_table('trial',
                    sa.Column('trial_id', sa.Integer(), nullable=False),
                    sa.Column('session_id', sa.Integer(), nullable=False),
                    sa.Column('trialnum', sa.Integer(), nullable=False),
                    sa.Column('config_stage_id', sa.Integer(), nullable=False),
                    sa.Column('stagenum', sa.Integer(), nullable=False),
                    sa.Column('started_at',
                              ArrowMicrosecondType(),
                              nullable=True),
                    sa.Column('initiated_at',
                              ArrowMicrosecondType(),
                              nullable=True),
                    sa.Column('initiation_latency_s', sa.Float(),
                              nullable=True),
                    sa.Column('sequence_holes',
                              sqlalchemy_utils.types.scalar_list.ScalarListType(),  # noqa
                              nullable=True),
                    sa.Column('sequence_length', sa.Integer(), nullable=True),
                    sa.Column('choice_holes',
                              sqlalchemy_utils.types.scalar_list.ScalarListType(),  # noqa
                              nullable=True),
                    sa.Column('choice_seq_positions',
                              sqlalchemy_utils.types.scalar_list.ScalarListType(),  # noqa
                              nullable=True),
                    sa.Column('choice_hole_left', sa.Integer(), nullable=True),
                    sa.Column('choice_hole_right', sa.Integer(), nullable=True),
                    sa.Column('choice_hole_earliest', sa.Integer(),
                              nullable=True),
                    sa.Column('choice_hole_latest', sa.Integer(),
                              nullable=True),
                    sa.Column('choice_seqpos_earliest', sa.Integer(),
                              nullable=True),
                    sa.Column('choice_seqpos_latest', sa.Integer(),
                              nullable=True),
                    sa.Column('sequence_n_offered', sa.Integer(),
                              nullable=False),
                    sa.Column('choice_offered', sa.Boolean(), nullable=False),
                    sa.Column('choice_offered_at',
                              ArrowMicrosecondType(),
                              nullable=True),
                    sa.Column('responded', sa.Boolean(), nullable=False),
                    sa.Column('responded_at',
                              ArrowMicrosecondType(),
                              nullable=True),
                    sa.Column('responded_hole', sa.Integer(), nullable=True),
                    sa.Column('response_correct', sa.Boolean(), nullable=True),
                    sa.Column('response_latency_s', sa.Float(), nullable=True),
                    sa.Column('reinforced_at',
                              ArrowMicrosecondType(),
                              nullable=True),
                    sa.Column('reinf_collected_at',
                              ArrowMicrosecondType(),
                              nullable=True),
                    sa.Column('reinf_collect_latency_s', sa.Float(),
                              nullable=True),
                    sa.Column('n_premature', sa.Integer(), nullable=False),
                    sa.Column('iti_started_at',
                              ArrowMicrosecondType(),
                              nullable=True),
                    sa.ForeignKeyConstraint(['config_stage_id'],
                                            ['config_stage.config_stage_id'],
                                            name=op.f(
                                                'fk_trial_config_stage_id_config_stage')),  # noqa
                    sa.ForeignKeyConstraint(['session_id'],
                                            ['session.session_id'], name=op.f(
                            'fk_trial_session_id_session')),
                    sa.PrimaryKeyConstraint('trial_id', name=op.f('pk_trial'))
                    )
    op.create_table('event',
                    sa.Column('event_id', sa.Integer(), nullable=False),
                    sa.Column('session_id', sa.Integer(), nullable=False),
                    sa.Column('eventnum_in_session', sa.Integer(),
                              nullable=False),
                    sa.Column('trial_id', sa.Integer(), nullable=True),
                    sa.Column('trialnum', sa.Integer(), nullable=True),
                    sa.Column('eventnum_in_trial', sa.Integer(), nullable=True),
                    sa.Column('event', sa.String(length=40), nullable=False),
                    sa.Column('timestamp',
                              ArrowMicrosecondType(),
                              nullable=False),
                    sa.Column('whisker_timestamp_ms', sa.BigInteger(),
                              nullable=True),
                    sa.Column('from_server', sa.Boolean(), nullable=True),
                    sa.ForeignKeyConstraint(['session_id'],
                                            ['session.session_id'], name=op.f(
                            'fk_event_session_id_session')),
                    sa.ForeignKeyConstraint(['trial_id'], ['trial.trial_id'],
                                            name=op.f(
                                                'fk_event_trial_id_trial')),
                    sa.PrimaryKeyConstraint('event_id', name=op.f('pk_event'))
                    )
    with op.batch_alter_table('event', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_event_eventnum_in_session'),
                              ['eventnum_in_session'], unique=False)

    op.create_table('sequence_timing',
                    sa.Column('sequence_timing_id', sa.Integer(),
                              nullable=False),
                    sa.Column('trial_id', sa.Integer(), nullable=False),
                    sa.Column('seq_pos', sa.Integer(), nullable=False),
                    sa.Column('hole_num', sa.Integer(), nullable=False),
                    sa.Column('hole_lit_at',
                              ArrowMicrosecondType(),
                              nullable=True),
                    sa.Column('hole_response_at',
                              ArrowMicrosecondType(),
                              nullable=True),
                    sa.Column('hole_response_latency_s', sa.Float(),
                              nullable=True),
                    sa.Column('mag_lit_at',
                              ArrowMicrosecondType(),
                              nullable=True),
                    sa.Column('mag_response_at',
                              ArrowMicrosecondType(),
                              nullable=True),
                    sa.Column('mag_response_latency_s', sa.Float(),
                              nullable=True),
                    sa.ForeignKeyConstraint(['trial_id'], ['trial.trial_id'],
                                            name=op.f(
                                                'fk_sequence_timing_trial_id_trial')),  # noqa
                    sa.PrimaryKeyConstraint('sequence_timing_id',
                                            name=op.f('pk_sequence_timing'))
                    )
    # end Alembic commands ###

    op.create_view(subject_session_view)
    op.create_view(subject_session_trial_view)


def downgrade():
    op.drop_view(subject_session_view)
    op.drop_view(subject_session_trial_view)

    # commands auto generated by Alembic - please adjust! ###
    op.drop_table('sequence_timing')
    with op.batch_alter_table('event', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_event_eventnum_in_session'))

    op.drop_table('event')
    op.drop_table('trial')
    op.drop_table('session')
    op.drop_table('config_stage')
    op.drop_table('config')
    # end Alembic commands ###
