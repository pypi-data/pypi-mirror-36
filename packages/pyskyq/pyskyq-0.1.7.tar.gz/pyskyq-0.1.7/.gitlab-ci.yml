image: python:3.6.5

variables:
  GIT_STRATEGY: fetch
  PIPENV_VENV_IN_PROJECT: "true" # makes pipenv use ~/.venv
  PIPENV_CACHE_DIR: "$CI_PROJECT_DIR/.pipenvcache"
  PIP_CACHE_DIR: "$CI_PROJECT_DIR/.pipcache"
stages:
  - Unit tests & Coverage
  - Coverage Reporting
  - Linting
  - Package
  - Release to Test PyPI
  - Release to Live PyPI

cache:
  untracked: true
  paths:
  - "$CI_PROJECT_DIR/.pipcache"
  - "$CI_PROJECT_DIR/.pipenvcache"
  - "$CI_PROJECT_DIR/.venv"
  - "$CI_PROJECT_DIR/.mypy_cache"
  - "$CI_PROJECT_DIR/.pytest_cache"

before_script:
  - pip install --upgrade pip
  - pip install pipenv

unit testing and coverage:
  stage: Unit tests & Coverage
  script:
  - pipenv install --dev --ignore-pipfile
  - pipenv run python setup.py test
  coverage: '/TOTAL.+ ([0-9]{1,3}%)/' # regex used to pull out the coverage percentate in gitlab.
  artifacts:
    paths:
        - htmlcov
    expire_in: 1 day
    reports:
      junit: junit.xml
  except:
  - master



# TODO: Add something like this to enable dir listing https://stackoverflow.com/questions/21395159/shell-script-to-create-a-static-html-directory-listing
pages:
  stage: Coverage Reporting
  script:
    - mkdir -p public/$CI_COMMIT_REF_NAME/$CI_COMMIT_SHA/
    - cp -fr htmlcov/* public/$CI_COMMIT_REF_NAME/$CI_COMMIT_SHA/
  dependencies:
    - unit testing and coverage
  artifacts:
    paths:
    - public
  except:
  - master


static_type_checking:
  stage: Linting
  script:
  - pipenv install --dev --ignore-pipfile
  - pipenv run mypy src --quick-and-dirty --verbose
  except:
    - master

pylint:
  stage: Linting
  script:
  - pipenv install --dev --ignore-pipfile
  - pipenv run pylint src
  except:
  - master

package:
  stage: Package
  artifacts:
    name: "$CI_PROJECT_NAME-$CI_COMMIT_TAG"
    paths:
    - dist/
    when: on_success
    expire_in: 10 mins
  script:
  - pipenv install --dev --ignore-pipfile
  - rm -rf dist
  - pipenv run python setup.py sdist bdist_wheel
  only:
  - /^v?\d+\.\d+\.\d+$/  # only semver strings e.g. 1.0.0 or v1.0.1

deploy_to_test_pypi:
  stage: Release to Test PyPI
  environment:
    name: Test PyPI
    url: https://test.pypi.org/project/pyskyq
  dependencies:
  - package
  script:
  # - if [ -z "$CI_COMMIT_TAG" ]; then echo "Needs a git tag!"; exit 0; fi  # hack to ensure TAG is present as only: with AND doesn't work
  - rm -f .pypirc
  - echo "[distutils]" >> ~/.pypirc
  - echo "index-servers =" >> ~/.pypirc
  - echo "    pypi" >> ~/.pypirc
  - echo "" >> ~/.pypirc
  - echo "[pypi]" >> ~/.pypirc
  - echo "${PYPI_REPO}" >> ~/.pypirc
  - echo "${PYPI_USER}" >> ~/.pypirc
  - echo "${PYPI_PASSWORD}" >> ~/.pypirc
  - ls -la dist/
  - pipenv run twine upload dist/*
  only:
  - /^v?\d+\.\d+\.\d+$/  # only semver strings e.g. 1.0.0 or v1.0.1
  # except:
  # - /^(?!.*(master)$).*$/  # exclude everything that does not match "master" -- DeMorgan's theorem in action.

deploy_to_live_pypi:
  stage: Release to Live PyPI
  environment:
    name: Live PyPI
    url: https://pypi.org/project/pyskyq
  dependencies:
  - package
  script:
  # - if [ -z "$CI_COMMIT_TAG" ]; then echo "Needs a git tag!"; exit 0; fi  # hack to ensure TAG is present as only: with AND doesn't work
  - rm -f .pypirc
  - echo "[distutils]" >> ~/.pypirc
  - echo "index-servers =" >> ~/.pypirc
  - echo "    pypi" >> ~/.pypirc
  - echo "" >> ~/.pypirc
  - echo "[pypi]" >> ~/.pypirc
  - echo "${PYPI_REPO}" >> ~/.pypirc
  - echo "${PYPI_USER}" >> ~/.pypirc
  - echo "${PYPI_PASSWORD}" >> ~/.pypirc
  - pipenv run twine upload dist/*
  only:
  - /^v?\d+\.\d+\.\d+$/  # only semver strings e.g. 1.0.0 or v1.0.1
  # except:
  # - /^(?!.*(master)$).*$/  # exclude everything that does not match "master" -- DeMorgan's theorem in action.
