import datetime
import typing
from autoboto import ShapeBase, OutputShapeBase, TypeInfo
from enum import Enum
import botocore.response
import dataclasses


@dataclasses.dataclass
class AcceptReservedInstancesExchangeQuoteRequest(ShapeBase):
    """
    Contains the parameters for accepting the quote.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "reserved_instance_ids",
                "ReservedInstanceIds",
                TypeInfo(typing.List[str]),
            ),
            (
                "dry_run",
                "DryRun",
                TypeInfo(bool),
            ),
            (
                "target_configurations",
                "TargetConfigurations",
                TypeInfo(typing.List[TargetConfigurationRequest]),
            ),
        ]

    # The IDs of the Convertible Reserved Instances to exchange for another
    # Convertible Reserved Instance of the same or higher value.
    reserved_instance_ids: typing.List[str] = dataclasses.field(
        default_factory=list,
    )

    # Checks whether you have the required permissions for the action, without
    # actually making the request, and provides an error response. If you have
    # the required permissions, the error response is `DryRunOperation`.
    # Otherwise, it is `UnauthorizedOperation`.
    dry_run: bool = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The configuration of the target Convertible Reserved Instance to exchange
    # for your current Convertible Reserved Instances.
    target_configurations: typing.List["TargetConfigurationRequest"
                                      ] = dataclasses.field(
                                          default_factory=list,
                                      )


@dataclasses.dataclass
class AcceptReservedInstancesExchangeQuoteResult(OutputShapeBase):
    """
    The result of the exchange and whether it was `successful`.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "response_metadata",
                "ResponseMetadata",
                TypeInfo(typing.Dict[str, str]),
            ),
            (
                "exchange_id",
                "ExchangeId",
                TypeInfo(str),
            ),
        ]

    response_metadata: typing.Dict[str, str] = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # The ID of the successful exchange.
    exchange_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class AcceptVpcEndpointConnectionsRequest(ShapeBase):
    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "service_id",
                "ServiceId",
                TypeInfo(str),
            ),
            (
                "vpc_endpoint_ids",
                "VpcEndpointIds",
                TypeInfo(typing.List[str]),
            ),
            (
                "dry_run",
                "DryRun",
                TypeInfo(bool),
            ),
        ]

    # The ID of the endpoint service.
    service_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The IDs of one or more interface VPC endpoints.
    vpc_endpoint_ids: typing.List[str] = dataclasses.field(
        default_factory=list,
    )

    # Checks whether you have the required permissions for the action, without
    # actually making the request, and provides an error response. If you have
    # the required permissions, the error response is `DryRunOperation`.
    # Otherwise, it is `UnauthorizedOperation`.
    dry_run: bool = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class AcceptVpcEndpointConnectionsResult(OutputShapeBase):
    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "response_metadata",
                "ResponseMetadata",
                TypeInfo(typing.Dict[str, str]),
            ),
            (
                "unsuccessful",
                "Unsuccessful",
                TypeInfo(typing.List[UnsuccessfulItem]),
            ),
        ]

    response_metadata: typing.Dict[str, str] = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # Information about the interface endpoints that were not accepted, if
    # applicable.
    unsuccessful: typing.List["UnsuccessfulItem"] = dataclasses.field(
        default_factory=list,
    )


@dataclasses.dataclass
class AcceptVpcPeeringConnectionRequest(ShapeBase):
    """
    Contains the parameters for AcceptVpcPeeringConnection.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "dry_run",
                "DryRun",
                TypeInfo(bool),
            ),
            (
                "vpc_peering_connection_id",
                "VpcPeeringConnectionId",
                TypeInfo(str),
            ),
        ]

    # Checks whether you have the required permissions for the action, without
    # actually making the request, and provides an error response. If you have
    # the required permissions, the error response is `DryRunOperation`.
    # Otherwise, it is `UnauthorizedOperation`.
    dry_run: bool = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The ID of the VPC peering connection. You must specify this parameter in
    # the request.
    vpc_peering_connection_id: str = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )


@dataclasses.dataclass
class AcceptVpcPeeringConnectionResult(OutputShapeBase):
    """
    Contains the output of AcceptVpcPeeringConnection.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "response_metadata",
                "ResponseMetadata",
                TypeInfo(typing.Dict[str, str]),
            ),
            (
                "vpc_peering_connection",
                "VpcPeeringConnection",
                TypeInfo(VpcPeeringConnection),
            ),
        ]

    response_metadata: typing.Dict[str, str] = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # Information about the VPC peering connection.
    vpc_peering_connection: "VpcPeeringConnection" = dataclasses.field(
        default_factory=dict,
    )


@dataclasses.dataclass
class AccountAttribute(ShapeBase):
    """
    Describes an account attribute.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "attribute_name",
                "AttributeName",
                TypeInfo(str),
            ),
            (
                "attribute_values",
                "AttributeValues",
                TypeInfo(typing.List[AccountAttributeValue]),
            ),
        ]

    # The name of the account attribute.
    attribute_name: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # One or more values for the account attribute.
    attribute_values: typing.List["AccountAttributeValue"] = dataclasses.field(
        default_factory=list,
    )


class AccountAttributeName(Enum):
    supported_platforms = "supported-platforms"
    default_vpc = "default-vpc"


@dataclasses.dataclass
class AccountAttributeValue(ShapeBase):
    """
    Describes a value of an account attribute.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "attribute_value",
                "AttributeValue",
                TypeInfo(str),
            ),
        ]

    # The value of the attribute.
    attribute_value: str = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class ActiveInstance(ShapeBase):
    """
    Describes a running instance in a Spot Fleet.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "instance_id",
                "InstanceId",
                TypeInfo(str),
            ),
            (
                "instance_type",
                "InstanceType",
                TypeInfo(str),
            ),
            (
                "spot_instance_request_id",
                "SpotInstanceRequestId",
                TypeInfo(str),
            ),
            (
                "instance_health",
                "InstanceHealth",
                TypeInfo(InstanceHealthStatus),
            ),
        ]

    # The ID of the instance.
    instance_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The instance type.
    instance_type: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The ID of the Spot Instance request.
    spot_instance_request_id: str = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # The health status of the instance. If the status of either the instance
    # status check or the system status check is `impaired`, the health status of
    # the instance is `unhealthy`. Otherwise, the health status is `healthy`.
    instance_health: "InstanceHealthStatus" = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )


class ActivityStatus(Enum):
    error = "error"
    pending_fulfillment = "pending_fulfillment"
    pending_termination = "pending_termination"
    fulfilled = "fulfilled"


@dataclasses.dataclass
class Address(ShapeBase):
    """
    Describes an Elastic IP address.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "instance_id",
                "InstanceId",
                TypeInfo(str),
            ),
            (
                "public_ip",
                "PublicIp",
                TypeInfo(str),
            ),
            (
                "allocation_id",
                "AllocationId",
                TypeInfo(str),
            ),
            (
                "association_id",
                "AssociationId",
                TypeInfo(str),
            ),
            (
                "domain",
                "Domain",
                TypeInfo(DomainType),
            ),
            (
                "network_interface_id",
                "NetworkInterfaceId",
                TypeInfo(str),
            ),
            (
                "network_interface_owner_id",
                "NetworkInterfaceOwnerId",
                TypeInfo(str),
            ),
            (
                "private_ip_address",
                "PrivateIpAddress",
                TypeInfo(str),
            ),
            (
                "tags",
                "Tags",
                TypeInfo(typing.List[Tag]),
            ),
        ]

    # The ID of the instance that the address is associated with (if any).
    instance_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The Elastic IP address.
    public_ip: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The ID representing the allocation of the address for use with EC2-VPC.
    allocation_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The ID representing the association of the address with an instance in a
    # VPC.
    association_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # Indicates whether this Elastic IP address is for use with instances in
    # EC2-Classic (`standard`) or instances in a VPC (`vpc`).
    domain: "DomainType" = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The ID of the network interface.
    network_interface_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The ID of the AWS account that owns the network interface.
    network_interface_owner_id: str = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # The private IP address associated with the Elastic IP address.
    private_ip_address: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # Any tags assigned to the Elastic IP address.
    tags: typing.List["Tag"] = dataclasses.field(default_factory=list, )


class Affinity(Enum):
    default = "default"
    host = "host"


@dataclasses.dataclass
class AllocateAddressRequest(ShapeBase):
    """
    Contains the parameters for AllocateAddress.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "domain",
                "Domain",
                TypeInfo(DomainType),
            ),
            (
                "address",
                "Address",
                TypeInfo(str),
            ),
            (
                "dry_run",
                "DryRun",
                TypeInfo(bool),
            ),
        ]

    # Set to `vpc` to allocate the address for use with instances in a VPC.

    # Default: The address is for use with instances in EC2-Classic.
    domain: "DomainType" = dataclasses.field(default=ShapeBase.NOT_SET, )

    # [EC2-VPC] The Elastic IP address to recover.
    address: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # Checks whether you have the required permissions for the action, without
    # actually making the request, and provides an error response. If you have
    # the required permissions, the error response is `DryRunOperation`.
    # Otherwise, it is `UnauthorizedOperation`.
    dry_run: bool = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class AllocateAddressResult(OutputShapeBase):
    """
    Contains the output of AllocateAddress.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "response_metadata",
                "ResponseMetadata",
                TypeInfo(typing.Dict[str, str]),
            ),
            (
                "public_ip",
                "PublicIp",
                TypeInfo(str),
            ),
            (
                "allocation_id",
                "AllocationId",
                TypeInfo(str),
            ),
            (
                "domain",
                "Domain",
                TypeInfo(DomainType),
            ),
        ]

    response_metadata: typing.Dict[str, str] = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # The Elastic IP address.
    public_ip: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # [EC2-VPC] The ID that AWS assigns to represent the allocation of the
    # Elastic IP address for use with instances in a VPC.
    allocation_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # Indicates whether this Elastic IP address is for use with instances in
    # EC2-Classic (`standard`) or instances in a VPC (`vpc`).
    domain: "DomainType" = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class AllocateHostsRequest(ShapeBase):
    """
    Contains the parameters for AllocateHosts.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "availability_zone",
                "AvailabilityZone",
                TypeInfo(str),
            ),
            (
                "instance_type",
                "InstanceType",
                TypeInfo(str),
            ),
            (
                "quantity",
                "Quantity",
                TypeInfo(int),
            ),
            (
                "auto_placement",
                "AutoPlacement",
                TypeInfo(AutoPlacement),
            ),
            (
                "client_token",
                "ClientToken",
                TypeInfo(str),
            ),
        ]

    # The Availability Zone for the Dedicated Hosts.
    availability_zone: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # Specify the instance type for which to configure your Dedicated Hosts. When
    # you specify the instance type, that is the only instance type that you can
    # launch onto that host.
    instance_type: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The number of Dedicated Hosts to allocate to your account with these
    # parameters.
    quantity: int = dataclasses.field(default=ShapeBase.NOT_SET, )

    # This is enabled by default. This property allows instances to be
    # automatically placed onto available Dedicated Hosts, when you are launching
    # instances without specifying a host ID.

    # Default: Enabled
    auto_placement: "AutoPlacement" = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # Unique, case-sensitive identifier that you provide to ensure the
    # idempotency of the request. For more information, see [How to Ensure
    # Idempotency](http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Run_Instance_Idempotency.html)
    # in the _Amazon Elastic Compute Cloud User Guide_.
    client_token: str = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class AllocateHostsResult(OutputShapeBase):
    """
    Contains the output of AllocateHosts.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "response_metadata",
                "ResponseMetadata",
                TypeInfo(typing.Dict[str, str]),
            ),
            (
                "host_ids",
                "HostIds",
                TypeInfo(typing.List[str]),
            ),
        ]

    response_metadata: typing.Dict[str, str] = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # The ID of the allocated Dedicated Host. This is used to launch an instance
    # onto a specific host.
    host_ids: typing.List[str] = dataclasses.field(default_factory=list, )


class AllocationState(Enum):
    available = "available"
    under_assessment = "under-assessment"
    permanent_failure = "permanent-failure"
    released = "released"
    released_permanent_failure = "released-permanent-failure"


class AllocationStrategy(Enum):
    lowestPrice = "lowestPrice"
    diversified = "diversified"


@dataclasses.dataclass
class AllowedPrincipal(ShapeBase):
    """
    Describes a principal.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "principal_type",
                "PrincipalType",
                TypeInfo(PrincipalType),
            ),
            (
                "principal",
                "Principal",
                TypeInfo(str),
            ),
        ]

    # The type of principal.
    principal_type: "PrincipalType" = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # The Amazon Resource Name (ARN) of the principal.
    principal: str = dataclasses.field(default=ShapeBase.NOT_SET, )


class ArchitectureValues(Enum):
    i386 = "i386"
    x86_64 = "x86_64"


@dataclasses.dataclass
class AssignIpv6AddressesRequest(ShapeBase):
    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "network_interface_id",
                "NetworkInterfaceId",
                TypeInfo(str),
            ),
            (
                "ipv6_address_count",
                "Ipv6AddressCount",
                TypeInfo(int),
            ),
            (
                "ipv6_addresses",
                "Ipv6Addresses",
                TypeInfo(typing.List[str]),
            ),
        ]

    # The ID of the network interface.
    network_interface_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The number of IPv6 addresses to assign to the network interface. Amazon EC2
    # automatically selects the IPv6 addresses from the subnet range. You can't
    # use this option if specifying specific IPv6 addresses.
    ipv6_address_count: int = dataclasses.field(default=ShapeBase.NOT_SET, )

    # One or more specific IPv6 addresses to be assigned to the network
    # interface. You can't use this option if you're specifying a number of IPv6
    # addresses.
    ipv6_addresses: typing.List[str] = dataclasses.field(default_factory=list, )


@dataclasses.dataclass
class AssignIpv6AddressesResult(OutputShapeBase):
    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "response_metadata",
                "ResponseMetadata",
                TypeInfo(typing.Dict[str, str]),
            ),
            (
                "assigned_ipv6_addresses",
                "AssignedIpv6Addresses",
                TypeInfo(typing.List[str]),
            ),
            (
                "network_interface_id",
                "NetworkInterfaceId",
                TypeInfo(str),
            ),
        ]

    response_metadata: typing.Dict[str, str] = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # The IPv6 addresses assigned to the network interface.
    assigned_ipv6_addresses: typing.List[str] = dataclasses.field(
        default_factory=list,
    )

    # The ID of the network interface.
    network_interface_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class AssignPrivateIpAddressesRequest(ShapeBase):
    """
    Contains the parameters for AssignPrivateIpAddresses.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "network_interface_id",
                "NetworkInterfaceId",
                TypeInfo(str),
            ),
            (
                "allow_reassignment",
                "AllowReassignment",
                TypeInfo(bool),
            ),
            (
                "private_ip_addresses",
                "PrivateIpAddresses",
                TypeInfo(typing.List[str]),
            ),
            (
                "secondary_private_ip_address_count",
                "SecondaryPrivateIpAddressCount",
                TypeInfo(int),
            ),
        ]

    # The ID of the network interface.
    network_interface_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # Indicates whether to allow an IP address that is already assigned to
    # another network interface or instance to be reassigned to the specified
    # network interface.
    allow_reassignment: bool = dataclasses.field(default=ShapeBase.NOT_SET, )

    # One or more IP addresses to be assigned as a secondary private IP address
    # to the network interface. You can't specify this parameter when also
    # specifying a number of secondary IP addresses.

    # If you don't specify an IP address, Amazon EC2 automatically selects an IP
    # address within the subnet range.
    private_ip_addresses: typing.List[str] = dataclasses.field(
        default_factory=list,
    )

    # The number of secondary IP addresses to assign to the network interface.
    # You can't specify this parameter when also specifying private IP addresses.
    secondary_private_ip_address_count: int = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )


@dataclasses.dataclass
class AssociateAddressRequest(ShapeBase):
    """
    Contains the parameters for AssociateAddress.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "allocation_id",
                "AllocationId",
                TypeInfo(str),
            ),
            (
                "instance_id",
                "InstanceId",
                TypeInfo(str),
            ),
            (
                "public_ip",
                "PublicIp",
                TypeInfo(str),
            ),
            (
                "allow_reassociation",
                "AllowReassociation",
                TypeInfo(bool),
            ),
            (
                "dry_run",
                "DryRun",
                TypeInfo(bool),
            ),
            (
                "network_interface_id",
                "NetworkInterfaceId",
                TypeInfo(str),
            ),
            (
                "private_ip_address",
                "PrivateIpAddress",
                TypeInfo(str),
            ),
        ]

    # [EC2-VPC] The allocation ID. This is required for EC2-VPC.
    allocation_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The ID of the instance. This is required for EC2-Classic. For EC2-VPC, you
    # can specify either the instance ID or the network interface ID, but not
    # both. The operation fails if you specify an instance ID unless exactly one
    # network interface is attached.
    instance_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The Elastic IP address. This is required for EC2-Classic.
    public_ip: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # [EC2-VPC] For a VPC in an EC2-Classic account, specify true to allow an
    # Elastic IP address that is already associated with an instance or network
    # interface to be reassociated with the specified instance or network
    # interface. Otherwise, the operation fails. In a VPC in an EC2-VPC-only
    # account, reassociation is automatic, therefore you can specify false to
    # ensure the operation fails if the Elastic IP address is already associated
    # with another resource.
    allow_reassociation: bool = dataclasses.field(default=ShapeBase.NOT_SET, )

    # Checks whether you have the required permissions for the action, without
    # actually making the request, and provides an error response. If you have
    # the required permissions, the error response is `DryRunOperation`.
    # Otherwise, it is `UnauthorizedOperation`.
    dry_run: bool = dataclasses.field(default=ShapeBase.NOT_SET, )

    # [EC2-VPC] The ID of the network interface. If the instance has more than
    # one network interface, you must specify a network interface ID.
    network_interface_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # [EC2-VPC] The primary or secondary private IP address to associate with the
    # Elastic IP address. If no private IP address is specified, the Elastic IP
    # address is associated with the primary private IP address.
    private_ip_address: str = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class AssociateAddressResult(OutputShapeBase):
    """
    Contains the output of AssociateAddress.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "response_metadata",
                "ResponseMetadata",
                TypeInfo(typing.Dict[str, str]),
            ),
            (
                "association_id",
                "AssociationId",
                TypeInfo(str),
            ),
        ]

    response_metadata: typing.Dict[str, str] = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # [EC2-VPC] The ID that represents the association of the Elastic IP address
    # with an instance.
    association_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class AssociateDhcpOptionsRequest(ShapeBase):
    """
    Contains the parameters for AssociateDhcpOptions.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "dhcp_options_id",
                "DhcpOptionsId",
                TypeInfo(str),
            ),
            (
                "vpc_id",
                "VpcId",
                TypeInfo(str),
            ),
            (
                "dry_run",
                "DryRun",
                TypeInfo(bool),
            ),
        ]

    # The ID of the DHCP options set, or `default` to associate no DHCP options
    # with the VPC.
    dhcp_options_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The ID of the VPC.
    vpc_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # Checks whether you have the required permissions for the action, without
    # actually making the request, and provides an error response. If you have
    # the required permissions, the error response is `DryRunOperation`.
    # Otherwise, it is `UnauthorizedOperation`.
    dry_run: bool = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class AssociateIamInstanceProfileRequest(ShapeBase):
    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "iam_instance_profile",
                "IamInstanceProfile",
                TypeInfo(IamInstanceProfileSpecification),
            ),
            (
                "instance_id",
                "InstanceId",
                TypeInfo(str),
            ),
        ]

    # The IAM instance profile.
    iam_instance_profile: "IamInstanceProfileSpecification" = dataclasses.field(
        default_factory=dict,
    )

    # The ID of the instance.
    instance_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class AssociateIamInstanceProfileResult(OutputShapeBase):
    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "response_metadata",
                "ResponseMetadata",
                TypeInfo(typing.Dict[str, str]),
            ),
            (
                "iam_instance_profile_association",
                "IamInstanceProfileAssociation",
                TypeInfo(IamInstanceProfileAssociation),
            ),
        ]

    response_metadata: typing.Dict[str, str] = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # Information about the IAM instance profile association.
    iam_instance_profile_association: "IamInstanceProfileAssociation" = dataclasses.field(
        default_factory=dict,
    )


@dataclasses.dataclass
class AssociateRouteTableRequest(ShapeBase):
    """
    Contains the parameters for AssociateRouteTable.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "route_table_id",
                "RouteTableId",
                TypeInfo(str),
            ),
            (
                "subnet_id",
                "SubnetId",
                TypeInfo(str),
            ),
            (
                "dry_run",
                "DryRun",
                TypeInfo(bool),
            ),
        ]

    # The ID of the route table.
    route_table_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The ID of the subnet.
    subnet_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # Checks whether you have the required permissions for the action, without
    # actually making the request, and provides an error response. If you have
    # the required permissions, the error response is `DryRunOperation`.
    # Otherwise, it is `UnauthorizedOperation`.
    dry_run: bool = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class AssociateRouteTableResult(OutputShapeBase):
    """
    Contains the output of AssociateRouteTable.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "response_metadata",
                "ResponseMetadata",
                TypeInfo(typing.Dict[str, str]),
            ),
            (
                "association_id",
                "AssociationId",
                TypeInfo(str),
            ),
        ]

    response_metadata: typing.Dict[str, str] = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # The route table association ID. This ID is required for disassociating the
    # route table.
    association_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class AssociateSubnetCidrBlockRequest(ShapeBase):
    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "ipv6_cidr_block",
                "Ipv6CidrBlock",
                TypeInfo(str),
            ),
            (
                "subnet_id",
                "SubnetId",
                TypeInfo(str),
            ),
        ]

    # The IPv6 CIDR block for your subnet. The subnet must have a /64 prefix
    # length.
    ipv6_cidr_block: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The ID of your subnet.
    subnet_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class AssociateSubnetCidrBlockResult(OutputShapeBase):
    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "response_metadata",
                "ResponseMetadata",
                TypeInfo(typing.Dict[str, str]),
            ),
            (
                "ipv6_cidr_block_association",
                "Ipv6CidrBlockAssociation",
                TypeInfo(SubnetIpv6CidrBlockAssociation),
            ),
            (
                "subnet_id",
                "SubnetId",
                TypeInfo(str),
            ),
        ]

    response_metadata: typing.Dict[str, str] = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # Information about the IPv6 CIDR block association.
    ipv6_cidr_block_association: "SubnetIpv6CidrBlockAssociation" = dataclasses.field(
        default_factory=dict,
    )

    # The ID of the subnet.
    subnet_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class AssociateVpcCidrBlockRequest(ShapeBase):
    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "vpc_id",
                "VpcId",
                TypeInfo(str),
            ),
            (
                "amazon_provided_ipv6_cidr_block",
                "AmazonProvidedIpv6CidrBlock",
                TypeInfo(bool),
            ),
            (
                "cidr_block",
                "CidrBlock",
                TypeInfo(str),
            ),
        ]

    # The ID of the VPC.
    vpc_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # Requests an Amazon-provided IPv6 CIDR block with a /56 prefix length for
    # the VPC. You cannot specify the range of IPv6 addresses, or the size of the
    # CIDR block.
    amazon_provided_ipv6_cidr_block: bool = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # An IPv4 CIDR block to associate with the VPC.
    cidr_block: str = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class AssociateVpcCidrBlockResult(OutputShapeBase):
    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "response_metadata",
                "ResponseMetadata",
                TypeInfo(typing.Dict[str, str]),
            ),
            (
                "ipv6_cidr_block_association",
                "Ipv6CidrBlockAssociation",
                TypeInfo(VpcIpv6CidrBlockAssociation),
            ),
            (
                "cidr_block_association",
                "CidrBlockAssociation",
                TypeInfo(VpcCidrBlockAssociation),
            ),
            (
                "vpc_id",
                "VpcId",
                TypeInfo(str),
            ),
        ]

    response_metadata: typing.Dict[str, str] = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # Information about the IPv6 CIDR block association.
    ipv6_cidr_block_association: "VpcIpv6CidrBlockAssociation" = dataclasses.field(
        default_factory=dict,
    )

    # Information about the IPv4 CIDR block association.
    cidr_block_association: "VpcCidrBlockAssociation" = dataclasses.field(
        default_factory=dict,
    )

    # The ID of the VPC.
    vpc_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class AttachClassicLinkVpcRequest(ShapeBase):
    """
    Contains the parameters for AttachClassicLinkVpc.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "groups",
                "Groups",
                TypeInfo(typing.List[str]),
            ),
            (
                "instance_id",
                "InstanceId",
                TypeInfo(str),
            ),
            (
                "vpc_id",
                "VpcId",
                TypeInfo(str),
            ),
            (
                "dry_run",
                "DryRun",
                TypeInfo(bool),
            ),
        ]

    # The ID of one or more of the VPC's security groups. You cannot specify
    # security groups from a different VPC.
    groups: typing.List[str] = dataclasses.field(default_factory=list, )

    # The ID of an EC2-Classic instance to link to the ClassicLink-enabled VPC.
    instance_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The ID of a ClassicLink-enabled VPC.
    vpc_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # Checks whether you have the required permissions for the action, without
    # actually making the request, and provides an error response. If you have
    # the required permissions, the error response is `DryRunOperation`.
    # Otherwise, it is `UnauthorizedOperation`.
    dry_run: bool = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class AttachClassicLinkVpcResult(OutputShapeBase):
    """
    Contains the output of AttachClassicLinkVpc.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "response_metadata",
                "ResponseMetadata",
                TypeInfo(typing.Dict[str, str]),
            ),
            (
                "return_",
                "Return",
                TypeInfo(bool),
            ),
        ]

    response_metadata: typing.Dict[str, str] = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # Returns `true` if the request succeeds; otherwise, it returns an error.
    return_: bool = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class AttachInternetGatewayRequest(ShapeBase):
    """
    Contains the parameters for AttachInternetGateway.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "internet_gateway_id",
                "InternetGatewayId",
                TypeInfo(str),
            ),
            (
                "vpc_id",
                "VpcId",
                TypeInfo(str),
            ),
            (
                "dry_run",
                "DryRun",
                TypeInfo(bool),
            ),
        ]

    # The ID of the internet gateway.
    internet_gateway_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The ID of the VPC.
    vpc_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # Checks whether you have the required permissions for the action, without
    # actually making the request, and provides an error response. If you have
    # the required permissions, the error response is `DryRunOperation`.
    # Otherwise, it is `UnauthorizedOperation`.
    dry_run: bool = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class AttachNetworkInterfaceRequest(ShapeBase):
    """
    Contains the parameters for AttachNetworkInterface.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "device_index",
                "DeviceIndex",
                TypeInfo(int),
            ),
            (
                "instance_id",
                "InstanceId",
                TypeInfo(str),
            ),
            (
                "network_interface_id",
                "NetworkInterfaceId",
                TypeInfo(str),
            ),
            (
                "dry_run",
                "DryRun",
                TypeInfo(bool),
            ),
        ]

    # The index of the device for the network interface attachment.
    device_index: int = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The ID of the instance.
    instance_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The ID of the network interface.
    network_interface_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # Checks whether you have the required permissions for the action, without
    # actually making the request, and provides an error response. If you have
    # the required permissions, the error response is `DryRunOperation`.
    # Otherwise, it is `UnauthorizedOperation`.
    dry_run: bool = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class AttachNetworkInterfaceResult(OutputShapeBase):
    """
    Contains the output of AttachNetworkInterface.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "response_metadata",
                "ResponseMetadata",
                TypeInfo(typing.Dict[str, str]),
            ),
            (
                "attachment_id",
                "AttachmentId",
                TypeInfo(str),
            ),
        ]

    response_metadata: typing.Dict[str, str] = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # The ID of the network interface attachment.
    attachment_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class AttachVolumeRequest(ShapeBase):
    """
    Contains the parameters for AttachVolume.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "device",
                "Device",
                TypeInfo(str),
            ),
            (
                "instance_id",
                "InstanceId",
                TypeInfo(str),
            ),
            (
                "volume_id",
                "VolumeId",
                TypeInfo(str),
            ),
            (
                "dry_run",
                "DryRun",
                TypeInfo(bool),
            ),
        ]

    # The device name (for example, `/dev/sdh` or `xvdh`).
    device: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The ID of the instance.
    instance_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The ID of the EBS volume. The volume and instance must be within the same
    # Availability Zone.
    volume_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # Checks whether you have the required permissions for the action, without
    # actually making the request, and provides an error response. If you have
    # the required permissions, the error response is `DryRunOperation`.
    # Otherwise, it is `UnauthorizedOperation`.
    dry_run: bool = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class AttachVpnGatewayRequest(ShapeBase):
    """
    Contains the parameters for AttachVpnGateway.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "vpc_id",
                "VpcId",
                TypeInfo(str),
            ),
            (
                "vpn_gateway_id",
                "VpnGatewayId",
                TypeInfo(str),
            ),
            (
                "dry_run",
                "DryRun",
                TypeInfo(bool),
            ),
        ]

    # The ID of the VPC.
    vpc_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The ID of the virtual private gateway.
    vpn_gateway_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # Checks whether you have the required permissions for the action, without
    # actually making the request, and provides an error response. If you have
    # the required permissions, the error response is `DryRunOperation`.
    # Otherwise, it is `UnauthorizedOperation`.
    dry_run: bool = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class AttachVpnGatewayResult(OutputShapeBase):
    """
    Contains the output of AttachVpnGateway.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "response_metadata",
                "ResponseMetadata",
                TypeInfo(typing.Dict[str, str]),
            ),
            (
                "vpc_attachment",
                "VpcAttachment",
                TypeInfo(VpcAttachment),
            ),
        ]

    response_metadata: typing.Dict[str, str] = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # Information about the attachment.
    vpc_attachment: "VpcAttachment" = dataclasses.field(default_factory=dict, )


class AttachmentStatus(Enum):
    attaching = "attaching"
    attached = "attached"
    detaching = "detaching"
    detached = "detached"


@dataclasses.dataclass
class AttributeBooleanValue(ShapeBase):
    """
    Describes a value for a resource attribute that is a Boolean value.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "value",
                "Value",
                TypeInfo(bool),
            ),
        ]

    # The attribute value. The valid values are `true` or `false`.
    value: bool = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class AttributeValue(ShapeBase):
    """
    Describes a value for a resource attribute that is a String.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "value",
                "Value",
                TypeInfo(str),
            ),
        ]

    # The attribute value. The value is case-sensitive.
    value: str = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class AuthorizeSecurityGroupEgressRequest(ShapeBase):
    """
    Contains the parameters for AuthorizeSecurityGroupEgress.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "group_id",
                "GroupId",
                TypeInfo(str),
            ),
            (
                "dry_run",
                "DryRun",
                TypeInfo(bool),
            ),
            (
                "ip_permissions",
                "IpPermissions",
                TypeInfo(typing.List[IpPermission]),
            ),
            (
                "cidr_ip",
                "CidrIp",
                TypeInfo(str),
            ),
            (
                "from_port",
                "FromPort",
                TypeInfo(int),
            ),
            (
                "ip_protocol",
                "IpProtocol",
                TypeInfo(str),
            ),
            (
                "to_port",
                "ToPort",
                TypeInfo(int),
            ),
            (
                "source_security_group_name",
                "SourceSecurityGroupName",
                TypeInfo(str),
            ),
            (
                "source_security_group_owner_id",
                "SourceSecurityGroupOwnerId",
                TypeInfo(str),
            ),
        ]

    # The ID of the security group.
    group_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # Checks whether you have the required permissions for the action, without
    # actually making the request, and provides an error response. If you have
    # the required permissions, the error response is `DryRunOperation`.
    # Otherwise, it is `UnauthorizedOperation`.
    dry_run: bool = dataclasses.field(default=ShapeBase.NOT_SET, )

    # One or more sets of IP permissions. You can't specify a destination
    # security group and a CIDR IP address range in the same set of permissions.
    ip_permissions: typing.List["IpPermission"] = dataclasses.field(
        default_factory=list,
    )

    # Not supported. Use a set of IP permissions to specify the CIDR.
    cidr_ip: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # Not supported. Use a set of IP permissions to specify the port.
    from_port: int = dataclasses.field(default=ShapeBase.NOT_SET, )

    # Not supported. Use a set of IP permissions to specify the protocol name or
    # number.
    ip_protocol: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # Not supported. Use a set of IP permissions to specify the port.
    to_port: int = dataclasses.field(default=ShapeBase.NOT_SET, )

    # Not supported. Use a set of IP permissions to specify a destination
    # security group.
    source_security_group_name: str = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # Not supported. Use a set of IP permissions to specify a destination
    # security group.
    source_security_group_owner_id: str = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )


@dataclasses.dataclass
class AuthorizeSecurityGroupIngressRequest(ShapeBase):
    """
    Contains the parameters for AuthorizeSecurityGroupIngress.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "cidr_ip",
                "CidrIp",
                TypeInfo(str),
            ),
            (
                "from_port",
                "FromPort",
                TypeInfo(int),
            ),
            (
                "group_id",
                "GroupId",
                TypeInfo(str),
            ),
            (
                "group_name",
                "GroupName",
                TypeInfo(str),
            ),
            (
                "ip_permissions",
                "IpPermissions",
                TypeInfo(typing.List[IpPermission]),
            ),
            (
                "ip_protocol",
                "IpProtocol",
                TypeInfo(str),
            ),
            (
                "source_security_group_name",
                "SourceSecurityGroupName",
                TypeInfo(str),
            ),
            (
                "source_security_group_owner_id",
                "SourceSecurityGroupOwnerId",
                TypeInfo(str),
            ),
            (
                "to_port",
                "ToPort",
                TypeInfo(int),
            ),
            (
                "dry_run",
                "DryRun",
                TypeInfo(bool),
            ),
        ]

    # The CIDR IPv4 address range. You can't specify this parameter when
    # specifying a source security group.
    cidr_ip: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The start of port range for the TCP and UDP protocols, or an ICMP/ICMPv6
    # type number. For the ICMP/ICMPv6 type number, use `-1` to specify all
    # types. If you specify all ICMP/ICMPv6 types, you must specify all codes.
    from_port: int = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The ID of the security group. You must specify either the security group ID
    # or the security group name in the request. For security groups in a
    # nondefault VPC, you must specify the security group ID.
    group_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # [EC2-Classic, default VPC] The name of the security group. You must specify
    # either the security group ID or the security group name in the request.
    group_name: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # One or more sets of IP permissions. Can be used to specify multiple rules
    # in a single command.
    ip_permissions: typing.List["IpPermission"] = dataclasses.field(
        default_factory=list,
    )

    # The IP protocol name (`tcp`, `udp`, `icmp`) or number (see [Protocol
    # Numbers](http://www.iana.org/assignments/protocol-numbers/protocol-
    # numbers.xhtml)). (VPC only) Use `-1` to specify all protocols. If you
    # specify `-1`, or a protocol number other than `tcp`, `udp`, `icmp`, or `58`
    # (ICMPv6), traffic on all ports is allowed, regardless of any ports you
    # specify. For `tcp`, `udp`, and `icmp`, you must specify a port range. For
    # protocol `58` (ICMPv6), you can optionally specify a port range; if you
    # don't, traffic for all types and codes is allowed.
    ip_protocol: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # [EC2-Classic, default VPC] The name of the source security group. You can't
    # specify this parameter in combination with the following parameters: the
    # CIDR IP address range, the start of the port range, the IP protocol, and
    # the end of the port range. Creates rules that grant full ICMP, UDP, and TCP
    # access. To create a rule with a specific IP protocol and port range, use a
    # set of IP permissions instead. For EC2-VPC, the source security group must
    # be in the same VPC.
    source_security_group_name: str = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # [EC2-Classic] The AWS account ID for the source security group, if the
    # source security group is in a different account. You can't specify this
    # parameter in combination with the following parameters: the CIDR IP address
    # range, the IP protocol, the start of the port range, and the end of the
    # port range. Creates rules that grant full ICMP, UDP, and TCP access. To
    # create a rule with a specific IP protocol and port range, use a set of IP
    # permissions instead.
    source_security_group_owner_id: str = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # The end of port range for the TCP and UDP protocols, or an ICMP/ICMPv6 code
    # number. For the ICMP/ICMPv6 code number, use `-1` to specify all codes. If
    # you specify all ICMP/ICMPv6 types, you must specify all codes.
    to_port: int = dataclasses.field(default=ShapeBase.NOT_SET, )

    # Checks whether you have the required permissions for the action, without
    # actually making the request, and provides an error response. If you have
    # the required permissions, the error response is `DryRunOperation`.
    # Otherwise, it is `UnauthorizedOperation`.
    dry_run: bool = dataclasses.field(default=ShapeBase.NOT_SET, )


class AutoPlacement(Enum):
    on = "on"
    off = "off"


@dataclasses.dataclass
class AvailabilityZone(ShapeBase):
    """
    Describes an Availability Zone.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "state",
                "State",
                TypeInfo(AvailabilityZoneState),
            ),
            (
                "messages",
                "Messages",
                TypeInfo(typing.List[AvailabilityZoneMessage]),
            ),
            (
                "region_name",
                "RegionName",
                TypeInfo(str),
            ),
            (
                "zone_name",
                "ZoneName",
                TypeInfo(str),
            ),
        ]

    # The state of the Availability Zone.
    state: "AvailabilityZoneState" = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # Any messages about the Availability Zone.
    messages: typing.List["AvailabilityZoneMessage"] = dataclasses.field(
        default_factory=list,
    )

    # The name of the region.
    region_name: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The name of the Availability Zone.
    zone_name: str = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class AvailabilityZoneMessage(ShapeBase):
    """
    Describes a message about an Availability Zone.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "message",
                "Message",
                TypeInfo(str),
            ),
        ]

    # The message about the Availability Zone.
    message: str = dataclasses.field(default=ShapeBase.NOT_SET, )


class AvailabilityZoneState(Enum):
    available = "available"
    information = "information"
    impaired = "impaired"
    unavailable = "unavailable"


@dataclasses.dataclass
class AvailableCapacity(ShapeBase):
    """
    The capacity information for instances launched onto the Dedicated Host.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "available_instance_capacity",
                "AvailableInstanceCapacity",
                TypeInfo(typing.List[InstanceCapacity]),
            ),
            (
                "available_v_cpus",
                "AvailableVCpus",
                TypeInfo(int),
            ),
        ]

    # The total number of instances supported by the Dedicated Host.
    available_instance_capacity: typing.List["InstanceCapacity"
                                            ] = dataclasses.field(
                                                default_factory=list,
                                            )

    # The number of vCPUs available on the Dedicated Host.
    available_v_cpus: int = dataclasses.field(default=ShapeBase.NOT_SET, )


class BatchState(Enum):
    submitted = "submitted"
    active = "active"
    cancelled = "cancelled"
    failed = "failed"
    cancelled_running = "cancelled_running"
    cancelled_terminating = "cancelled_terminating"
    modifying = "modifying"


class Blob(botocore.response.StreamingBody):
    pass


@dataclasses.dataclass
class BlobAttributeValue(ShapeBase):
    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "value",
                "Value",
                TypeInfo(typing.Any),
            ),
        ]

    value: typing.Any = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class BlockDeviceMapping(ShapeBase):
    """
    Describes a block device mapping.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "device_name",
                "DeviceName",
                TypeInfo(str),
            ),
            (
                "virtual_name",
                "VirtualName",
                TypeInfo(str),
            ),
            (
                "ebs",
                "Ebs",
                TypeInfo(EbsBlockDevice),
            ),
            (
                "no_device",
                "NoDevice",
                TypeInfo(str),
            ),
        ]

    # The device name (for example, `/dev/sdh` or `xvdh`).
    device_name: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The virtual device name (`ephemeral`N). Instance store volumes are numbered
    # starting from 0. An instance type with 2 available instance store volumes
    # can specify mappings for `ephemeral0` and `ephemeral1`. The number of
    # available instance store volumes depends on the instance type. After you
    # connect to the instance, you must mount the volume.

    # NVMe instance store volumes are automatically enumerated and assigned a
    # device name. Including them in your block device mapping has no effect.

    # Constraints: For M3 instances, you must specify instance store volumes in
    # the block device mapping for the instance. When you launch an M3 instance,
    # we ignore any instance store volumes specified in the block device mapping
    # for the AMI.
    virtual_name: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # Parameters used to automatically set up EBS volumes when the instance is
    # launched.
    ebs: "EbsBlockDevice" = dataclasses.field(default_factory=dict, )

    # Suppresses the specified device included in the block device mapping of the
    # AMI.
    no_device: str = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class BundleInstanceRequest(ShapeBase):
    """
    Contains the parameters for BundleInstance.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "instance_id",
                "InstanceId",
                TypeInfo(str),
            ),
            (
                "storage",
                "Storage",
                TypeInfo(Storage),
            ),
            (
                "dry_run",
                "DryRun",
                TypeInfo(bool),
            ),
        ]

    # The ID of the instance to bundle.

    # Type: String

    # Default: None

    # Required: Yes
    instance_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The bucket in which to store the AMI. You can specify a bucket that you
    # already own or a new bucket that Amazon EC2 creates on your behalf. If you
    # specify a bucket that belongs to someone else, Amazon EC2 returns an error.
    storage: "Storage" = dataclasses.field(default_factory=dict, )

    # Checks whether you have the required permissions for the action, without
    # actually making the request, and provides an error response. If you have
    # the required permissions, the error response is `DryRunOperation`.
    # Otherwise, it is `UnauthorizedOperation`.
    dry_run: bool = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class BundleInstanceResult(OutputShapeBase):
    """
    Contains the output of BundleInstance.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "response_metadata",
                "ResponseMetadata",
                TypeInfo(typing.Dict[str, str]),
            ),
            (
                "bundle_task",
                "BundleTask",
                TypeInfo(BundleTask),
            ),
        ]

    response_metadata: typing.Dict[str, str] = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # Information about the bundle task.
    bundle_task: "BundleTask" = dataclasses.field(default_factory=dict, )


@dataclasses.dataclass
class BundleTask(ShapeBase):
    """
    Describes a bundle task.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "bundle_id",
                "BundleId",
                TypeInfo(str),
            ),
            (
                "bundle_task_error",
                "BundleTaskError",
                TypeInfo(BundleTaskError),
            ),
            (
                "instance_id",
                "InstanceId",
                TypeInfo(str),
            ),
            (
                "progress",
                "Progress",
                TypeInfo(str),
            ),
            (
                "start_time",
                "StartTime",
                TypeInfo(datetime.datetime),
            ),
            (
                "state",
                "State",
                TypeInfo(BundleTaskState),
            ),
            (
                "storage",
                "Storage",
                TypeInfo(Storage),
            ),
            (
                "update_time",
                "UpdateTime",
                TypeInfo(datetime.datetime),
            ),
        ]

    # The ID of the bundle task.
    bundle_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # If the task fails, a description of the error.
    bundle_task_error: "BundleTaskError" = dataclasses.field(
        default_factory=dict,
    )

    # The ID of the instance associated with this bundle task.
    instance_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The level of task completion, as a percent (for example, 20%).
    progress: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The time this task started.
    start_time: datetime.datetime = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # The state of the task.
    state: "BundleTaskState" = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The Amazon S3 storage locations.
    storage: "Storage" = dataclasses.field(default_factory=dict, )

    # The time of the most recent update for the task.
    update_time: datetime.datetime = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )


@dataclasses.dataclass
class BundleTaskError(ShapeBase):
    """
    Describes an error for BundleInstance.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "code",
                "Code",
                TypeInfo(str),
            ),
            (
                "message",
                "Message",
                TypeInfo(str),
            ),
        ]

    # The error code.
    code: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The error message.
    message: str = dataclasses.field(default=ShapeBase.NOT_SET, )


class BundleTaskState(Enum):
    pending = "pending"
    waiting_for_shutdown = "waiting-for-shutdown"
    bundling = "bundling"
    storing = "storing"
    cancelling = "cancelling"
    complete = "complete"
    failed = "failed"


class CancelBatchErrorCode(Enum):
    fleetRequestIdDoesNotExist = "fleetRequestIdDoesNotExist"
    fleetRequestIdMalformed = "fleetRequestIdMalformed"
    fleetRequestNotInCancellableState = "fleetRequestNotInCancellableState"
    unexpectedError = "unexpectedError"


@dataclasses.dataclass
class CancelBundleTaskRequest(ShapeBase):
    """
    Contains the parameters for CancelBundleTask.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "bundle_id",
                "BundleId",
                TypeInfo(str),
            ),
            (
                "dry_run",
                "DryRun",
                TypeInfo(bool),
            ),
        ]

    # The ID of the bundle task.
    bundle_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # Checks whether you have the required permissions for the action, without
    # actually making the request, and provides an error response. If you have
    # the required permissions, the error response is `DryRunOperation`.
    # Otherwise, it is `UnauthorizedOperation`.
    dry_run: bool = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class CancelBundleTaskResult(OutputShapeBase):
    """
    Contains the output of CancelBundleTask.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "response_metadata",
                "ResponseMetadata",
                TypeInfo(typing.Dict[str, str]),
            ),
            (
                "bundle_task",
                "BundleTask",
                TypeInfo(BundleTask),
            ),
        ]

    response_metadata: typing.Dict[str, str] = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # Information about the bundle task.
    bundle_task: "BundleTask" = dataclasses.field(default_factory=dict, )


@dataclasses.dataclass
class CancelConversionRequest(ShapeBase):
    """
    Contains the parameters for CancelConversionTask.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "conversion_task_id",
                "ConversionTaskId",
                TypeInfo(str),
            ),
            (
                "dry_run",
                "DryRun",
                TypeInfo(bool),
            ),
            (
                "reason_message",
                "ReasonMessage",
                TypeInfo(str),
            ),
        ]

    # The ID of the conversion task.
    conversion_task_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # Checks whether you have the required permissions for the action, without
    # actually making the request, and provides an error response. If you have
    # the required permissions, the error response is `DryRunOperation`.
    # Otherwise, it is `UnauthorizedOperation`.
    dry_run: bool = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The reason for canceling the conversion task.
    reason_message: str = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class CancelExportTaskRequest(ShapeBase):
    """
    Contains the parameters for CancelExportTask.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "export_task_id",
                "ExportTaskId",
                TypeInfo(str),
            ),
        ]

    # The ID of the export task. This is the ID returned by
    # `CreateInstanceExportTask`.
    export_task_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class CancelImportTaskRequest(ShapeBase):
    """
    Contains the parameters for CancelImportTask.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "cancel_reason",
                "CancelReason",
                TypeInfo(str),
            ),
            (
                "dry_run",
                "DryRun",
                TypeInfo(bool),
            ),
            (
                "import_task_id",
                "ImportTaskId",
                TypeInfo(str),
            ),
        ]

    # The reason for canceling the task.
    cancel_reason: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # Checks whether you have the required permissions for the action, without
    # actually making the request, and provides an error response. If you have
    # the required permissions, the error response is `DryRunOperation`.
    # Otherwise, it is `UnauthorizedOperation`.
    dry_run: bool = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The ID of the import image or import snapshot task to be canceled.
    import_task_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class CancelImportTaskResult(OutputShapeBase):
    """
    Contains the output for CancelImportTask.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "response_metadata",
                "ResponseMetadata",
                TypeInfo(typing.Dict[str, str]),
            ),
            (
                "import_task_id",
                "ImportTaskId",
                TypeInfo(str),
            ),
            (
                "previous_state",
                "PreviousState",
                TypeInfo(str),
            ),
            (
                "state",
                "State",
                TypeInfo(str),
            ),
        ]

    response_metadata: typing.Dict[str, str] = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # The ID of the task being canceled.
    import_task_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The current state of the task being canceled.
    previous_state: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The current state of the task being canceled.
    state: str = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class CancelReservedInstancesListingRequest(ShapeBase):
    """
    Contains the parameters for CancelReservedInstancesListing.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "reserved_instances_listing_id",
                "ReservedInstancesListingId",
                TypeInfo(str),
            ),
        ]

    # The ID of the Reserved Instance listing.
    reserved_instances_listing_id: str = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )


@dataclasses.dataclass
class CancelReservedInstancesListingResult(OutputShapeBase):
    """
    Contains the output of CancelReservedInstancesListing.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "response_metadata",
                "ResponseMetadata",
                TypeInfo(typing.Dict[str, str]),
            ),
            (
                "reserved_instances_listings",
                "ReservedInstancesListings",
                TypeInfo(typing.List[ReservedInstancesListing]),
            ),
        ]

    response_metadata: typing.Dict[str, str] = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # The Reserved Instance listing.
    reserved_instances_listings: typing.List["ReservedInstancesListing"
                                            ] = dataclasses.field(
                                                default_factory=list,
                                            )


@dataclasses.dataclass
class CancelSpotFleetRequestsError(ShapeBase):
    """
    Describes a Spot Fleet error.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "code",
                "Code",
                TypeInfo(CancelBatchErrorCode),
            ),
            (
                "message",
                "Message",
                TypeInfo(str),
            ),
        ]

    # The error code.
    code: "CancelBatchErrorCode" = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # The description for the error code.
    message: str = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class CancelSpotFleetRequestsErrorItem(ShapeBase):
    """
    Describes a Spot Fleet request that was not successfully canceled.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "error",
                "Error",
                TypeInfo(CancelSpotFleetRequestsError),
            ),
            (
                "spot_fleet_request_id",
                "SpotFleetRequestId",
                TypeInfo(str),
            ),
        ]

    # The error.
    error: "CancelSpotFleetRequestsError" = dataclasses.field(
        default_factory=dict,
    )

    # The ID of the Spot Fleet request.
    spot_fleet_request_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class CancelSpotFleetRequestsRequest(ShapeBase):
    """
    Contains the parameters for CancelSpotFleetRequests.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "spot_fleet_request_ids",
                "SpotFleetRequestIds",
                TypeInfo(typing.List[str]),
            ),
            (
                "terminate_instances",
                "TerminateInstances",
                TypeInfo(bool),
            ),
            (
                "dry_run",
                "DryRun",
                TypeInfo(bool),
            ),
        ]

    # The IDs of the Spot Fleet requests.
    spot_fleet_request_ids: typing.List[str] = dataclasses.field(
        default_factory=list,
    )

    # Indicates whether to terminate instances for a Spot Fleet request if it is
    # canceled successfully.
    terminate_instances: bool = dataclasses.field(default=ShapeBase.NOT_SET, )

    # Checks whether you have the required permissions for the action, without
    # actually making the request, and provides an error response. If you have
    # the required permissions, the error response is `DryRunOperation`.
    # Otherwise, it is `UnauthorizedOperation`.
    dry_run: bool = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class CancelSpotFleetRequestsResponse(OutputShapeBase):
    """
    Contains the output of CancelSpotFleetRequests.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "response_metadata",
                "ResponseMetadata",
                TypeInfo(typing.Dict[str, str]),
            ),
            (
                "successful_fleet_requests",
                "SuccessfulFleetRequests",
                TypeInfo(typing.List[CancelSpotFleetRequestsSuccessItem]),
            ),
            (
                "unsuccessful_fleet_requests",
                "UnsuccessfulFleetRequests",
                TypeInfo(typing.List[CancelSpotFleetRequestsErrorItem]),
            ),
        ]

    response_metadata: typing.Dict[str, str] = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # Information about the Spot Fleet requests that are successfully canceled.
    successful_fleet_requests: typing.List["CancelSpotFleetRequestsSuccessItem"
                                          ] = dataclasses.field(
                                              default_factory=list,
                                          )

    # Information about the Spot Fleet requests that are not successfully
    # canceled.
    unsuccessful_fleet_requests: typing.List["CancelSpotFleetRequestsErrorItem"
                                            ] = dataclasses.field(
                                                default_factory=list,
                                            )


@dataclasses.dataclass
class CancelSpotFleetRequestsSuccessItem(ShapeBase):
    """
    Describes a Spot Fleet request that was successfully canceled.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "current_spot_fleet_request_state",
                "CurrentSpotFleetRequestState",
                TypeInfo(BatchState),
            ),
            (
                "previous_spot_fleet_request_state",
                "PreviousSpotFleetRequestState",
                TypeInfo(BatchState),
            ),
            (
                "spot_fleet_request_id",
                "SpotFleetRequestId",
                TypeInfo(str),
            ),
        ]

    # The current state of the Spot Fleet request.
    current_spot_fleet_request_state: "BatchState" = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # The previous state of the Spot Fleet request.
    previous_spot_fleet_request_state: "BatchState" = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # The ID of the Spot Fleet request.
    spot_fleet_request_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )


class CancelSpotInstanceRequestState(Enum):
    active = "active"
    open = "open"
    closed = "closed"
    cancelled = "cancelled"
    completed = "completed"


@dataclasses.dataclass
class CancelSpotInstanceRequestsRequest(ShapeBase):
    """
    Contains the parameters for CancelSpotInstanceRequests.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "spot_instance_request_ids",
                "SpotInstanceRequestIds",
                TypeInfo(typing.List[str]),
            ),
            (
                "dry_run",
                "DryRun",
                TypeInfo(bool),
            ),
        ]

    # One or more Spot Instance request IDs.
    spot_instance_request_ids: typing.List[str] = dataclasses.field(
        default_factory=list,
    )

    # Checks whether you have the required permissions for the action, without
    # actually making the request, and provides an error response. If you have
    # the required permissions, the error response is `DryRunOperation`.
    # Otherwise, it is `UnauthorizedOperation`.
    dry_run: bool = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class CancelSpotInstanceRequestsResult(OutputShapeBase):
    """
    Contains the output of CancelSpotInstanceRequests.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "response_metadata",
                "ResponseMetadata",
                TypeInfo(typing.Dict[str, str]),
            ),
            (
                "cancelled_spot_instance_requests",
                "CancelledSpotInstanceRequests",
                TypeInfo(typing.List[CancelledSpotInstanceRequest]),
            ),
        ]

    response_metadata: typing.Dict[str, str] = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # One or more Spot Instance requests.
    cancelled_spot_instance_requests: typing.List["CancelledSpotInstanceRequest"
                                                 ] = dataclasses.field(
                                                     default_factory=list,
                                                 )


@dataclasses.dataclass
class CancelledSpotInstanceRequest(ShapeBase):
    """
    Describes a request to cancel a Spot Instance.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "spot_instance_request_id",
                "SpotInstanceRequestId",
                TypeInfo(str),
            ),
            (
                "state",
                "State",
                TypeInfo(CancelSpotInstanceRequestState),
            ),
        ]

    # The ID of the Spot Instance request.
    spot_instance_request_id: str = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # The state of the Spot Instance request.
    state: "CancelSpotInstanceRequestState" = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )


@dataclasses.dataclass
class CidrBlock(ShapeBase):
    """
    Describes an IPv4 CIDR block.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "cidr_block",
                "CidrBlock",
                TypeInfo(str),
            ),
        ]

    # The IPv4 CIDR block.
    cidr_block: str = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class ClassicLinkDnsSupport(ShapeBase):
    """
    Describes the ClassicLink DNS support status of a VPC.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "classic_link_dns_supported",
                "ClassicLinkDnsSupported",
                TypeInfo(bool),
            ),
            (
                "vpc_id",
                "VpcId",
                TypeInfo(str),
            ),
        ]

    # Indicates whether ClassicLink DNS support is enabled for the VPC.
    classic_link_dns_supported: bool = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # The ID of the VPC.
    vpc_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class ClassicLinkInstance(ShapeBase):
    """
    Describes a linked EC2-Classic instance.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "groups",
                "Groups",
                TypeInfo(typing.List[GroupIdentifier]),
            ),
            (
                "instance_id",
                "InstanceId",
                TypeInfo(str),
            ),
            (
                "tags",
                "Tags",
                TypeInfo(typing.List[Tag]),
            ),
            (
                "vpc_id",
                "VpcId",
                TypeInfo(str),
            ),
        ]

    # A list of security groups.
    groups: typing.List["GroupIdentifier"] = dataclasses.field(
        default_factory=list,
    )

    # The ID of the instance.
    instance_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # Any tags assigned to the instance.
    tags: typing.List["Tag"] = dataclasses.field(default_factory=list, )

    # The ID of the VPC.
    vpc_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class ClassicLoadBalancer(ShapeBase):
    """
    Describes a Classic Load Balancer.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "name",
                "Name",
                TypeInfo(str),
            ),
        ]

    # The name of the load balancer.
    name: str = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class ClassicLoadBalancersConfig(ShapeBase):
    """
    Describes the Classic Load Balancers to attach to a Spot Fleet. Spot Fleet
    registers the running Spot Instances with these Classic Load Balancers.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "classic_load_balancers",
                "ClassicLoadBalancers",
                TypeInfo(typing.List[ClassicLoadBalancer]),
            ),
        ]

    # One or more Classic Load Balancers.
    classic_load_balancers: typing.List["ClassicLoadBalancer"
                                       ] = dataclasses.field(
                                           default_factory=list,
                                       )


@dataclasses.dataclass
class ClientData(ShapeBase):
    """
    Describes the client-specific data.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "comment",
                "Comment",
                TypeInfo(str),
            ),
            (
                "upload_end",
                "UploadEnd",
                TypeInfo(datetime.datetime),
            ),
            (
                "upload_size",
                "UploadSize",
                TypeInfo(float),
            ),
            (
                "upload_start",
                "UploadStart",
                TypeInfo(datetime.datetime),
            ),
        ]

    # A user-defined comment about the disk upload.
    comment: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The time that the disk upload ends.
    upload_end: datetime.datetime = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # The size of the uploaded disk image, in GiB.
    upload_size: float = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The time that the disk upload starts.
    upload_start: datetime.datetime = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )


@dataclasses.dataclass
class ConfirmProductInstanceRequest(ShapeBase):
    """
    Contains the parameters for ConfirmProductInstance.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "instance_id",
                "InstanceId",
                TypeInfo(str),
            ),
            (
                "product_code",
                "ProductCode",
                TypeInfo(str),
            ),
            (
                "dry_run",
                "DryRun",
                TypeInfo(bool),
            ),
        ]

    # The ID of the instance.
    instance_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The product code. This must be a product code that you own.
    product_code: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # Checks whether you have the required permissions for the action, without
    # actually making the request, and provides an error response. If you have
    # the required permissions, the error response is `DryRunOperation`.
    # Otherwise, it is `UnauthorizedOperation`.
    dry_run: bool = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class ConfirmProductInstanceResult(OutputShapeBase):
    """
    Contains the output of ConfirmProductInstance.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "response_metadata",
                "ResponseMetadata",
                TypeInfo(typing.Dict[str, str]),
            ),
            (
                "owner_id",
                "OwnerId",
                TypeInfo(str),
            ),
            (
                "return_",
                "Return",
                TypeInfo(bool),
            ),
        ]

    response_metadata: typing.Dict[str, str] = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # The AWS account ID of the instance owner. This is only present if the
    # product code is attached to the instance.
    owner_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The return value of the request. Returns `true` if the specified product
    # code is owned by the requester and associated with the specified instance.
    return_: bool = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class ConnectionNotification(ShapeBase):
    """
    Describes a connection notification for a VPC endpoint or VPC endpoint service.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "connection_notification_id",
                "ConnectionNotificationId",
                TypeInfo(str),
            ),
            (
                "service_id",
                "ServiceId",
                TypeInfo(str),
            ),
            (
                "vpc_endpoint_id",
                "VpcEndpointId",
                TypeInfo(str),
            ),
            (
                "connection_notification_type",
                "ConnectionNotificationType",
                TypeInfo(ConnectionNotificationType),
            ),
            (
                "connection_notification_arn",
                "ConnectionNotificationArn",
                TypeInfo(str),
            ),
            (
                "connection_events",
                "ConnectionEvents",
                TypeInfo(typing.List[str]),
            ),
            (
                "connection_notification_state",
                "ConnectionNotificationState",
                TypeInfo(ConnectionNotificationState),
            ),
        ]

    # The ID of the notification.
    connection_notification_id: str = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # The ID of the endpoint service.
    service_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The ID of the VPC endpoint.
    vpc_endpoint_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The type of notification.
    connection_notification_type: "ConnectionNotificationType" = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # The ARN of the SNS topic for the notification.
    connection_notification_arn: str = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # The events for the notification. Valid values are `Accept`, `Connect`,
    # `Delete`, and `Reject`.
    connection_events: typing.List[str] = dataclasses.field(
        default_factory=list,
    )

    # The state of the notification.
    connection_notification_state: "ConnectionNotificationState" = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )


class ConnectionNotificationState(Enum):
    Enabled = "Enabled"
    Disabled = "Disabled"


class ConnectionNotificationType(Enum):
    Topic = "Topic"


class ContainerFormat(Enum):
    ova = "ova"


@dataclasses.dataclass
class ConversionTask(ShapeBase):
    """
    Describes a conversion task.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "conversion_task_id",
                "ConversionTaskId",
                TypeInfo(str),
            ),
            (
                "expiration_time",
                "ExpirationTime",
                TypeInfo(str),
            ),
            (
                "import_instance",
                "ImportInstance",
                TypeInfo(ImportInstanceTaskDetails),
            ),
            (
                "import_volume",
                "ImportVolume",
                TypeInfo(ImportVolumeTaskDetails),
            ),
            (
                "state",
                "State",
                TypeInfo(ConversionTaskState),
            ),
            (
                "status_message",
                "StatusMessage",
                TypeInfo(str),
            ),
            (
                "tags",
                "Tags",
                TypeInfo(typing.List[Tag]),
            ),
        ]

    # The ID of the conversion task.
    conversion_task_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The time when the task expires. If the upload isn't complete before the
    # expiration time, we automatically cancel the task.
    expiration_time: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # If the task is for importing an instance, this contains information about
    # the import instance task.
    import_instance: "ImportInstanceTaskDetails" = dataclasses.field(
        default_factory=dict,
    )

    # If the task is for importing a volume, this contains information about the
    # import volume task.
    import_volume: "ImportVolumeTaskDetails" = dataclasses.field(
        default_factory=dict,
    )

    # The state of the conversion task.
    state: "ConversionTaskState" = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # The status message related to the conversion task.
    status_message: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # Any tags assigned to the task.
    tags: typing.List["Tag"] = dataclasses.field(default_factory=list, )


class ConversionTaskState(Enum):
    active = "active"
    cancelling = "cancelling"
    cancelled = "cancelled"
    completed = "completed"


@dataclasses.dataclass
class CopyFpgaImageRequest(ShapeBase):
    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "source_fpga_image_id",
                "SourceFpgaImageId",
                TypeInfo(str),
            ),
            (
                "source_region",
                "SourceRegion",
                TypeInfo(str),
            ),
            (
                "dry_run",
                "DryRun",
                TypeInfo(bool),
            ),
            (
                "description",
                "Description",
                TypeInfo(str),
            ),
            (
                "name",
                "Name",
                TypeInfo(str),
            ),
            (
                "client_token",
                "ClientToken",
                TypeInfo(str),
            ),
        ]

    # The ID of the source AFI.
    source_fpga_image_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The region that contains the source AFI.
    source_region: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # Checks whether you have the required permissions for the action, without
    # actually making the request, and provides an error response. If you have
    # the required permissions, the error response is `DryRunOperation`.
    # Otherwise, it is `UnauthorizedOperation`.
    dry_run: bool = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The description for the new AFI.
    description: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The name for the new AFI. The default is the name of the source AFI.
    name: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # Unique, case-sensitive identifier that you provide to ensure the
    # idempotency of the request. For more information, see [Ensuring
    # Idempotency](http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Run_Instance_Idempotency.html).
    client_token: str = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class CopyFpgaImageResult(OutputShapeBase):
    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "response_metadata",
                "ResponseMetadata",
                TypeInfo(typing.Dict[str, str]),
            ),
            (
                "fpga_image_id",
                "FpgaImageId",
                TypeInfo(str),
            ),
        ]

    response_metadata: typing.Dict[str, str] = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # The ID of the new AFI.
    fpga_image_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class CopyImageRequest(ShapeBase):
    """
    Contains the parameters for CopyImage.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "name",
                "Name",
                TypeInfo(str),
            ),
            (
                "source_image_id",
                "SourceImageId",
                TypeInfo(str),
            ),
            (
                "source_region",
                "SourceRegion",
                TypeInfo(str),
            ),
            (
                "client_token",
                "ClientToken",
                TypeInfo(str),
            ),
            (
                "description",
                "Description",
                TypeInfo(str),
            ),
            (
                "encrypted",
                "Encrypted",
                TypeInfo(bool),
            ),
            (
                "kms_key_id",
                "KmsKeyId",
                TypeInfo(str),
            ),
            (
                "dry_run",
                "DryRun",
                TypeInfo(bool),
            ),
        ]

    # The name of the new AMI in the destination region.
    name: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The ID of the AMI to copy.
    source_image_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The name of the region that contains the AMI to copy.
    source_region: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # Unique, case-sensitive identifier you provide to ensure idempotency of the
    # request. For more information, see [How to Ensure
    # Idempotency](http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Run_Instance_Idempotency.html)
    # in the _Amazon Elastic Compute Cloud User Guide_.
    client_token: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # A description for the new AMI in the destination region.
    description: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # Specifies whether the destination snapshots of the copied image should be
    # encrypted. The default CMK for EBS is used unless a non-default AWS Key
    # Management Service (AWS KMS) CMK is specified with `KmsKeyId`. For more
    # information, see [Amazon EBS
    # Encryption](http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSEncryption.html)
    # in the _Amazon Elastic Compute Cloud User Guide_.
    encrypted: bool = dataclasses.field(default=ShapeBase.NOT_SET, )

    # An identifier for the AWS Key Management Service (AWS KMS) customer master
    # key (CMK) to use when creating the encrypted volume. This parameter is only
    # required if you want to use a non-default CMK; if this parameter is not
    # specified, the default CMK for EBS is used. If a `KmsKeyId` is specified,
    # the `Encrypted` flag must also be set.

    # The CMK identifier may be provided in any of the following formats:

    #   * Key ID

    #   * Key alias, in the form `alias/ _ExampleAlias_ `

    #   * ARN using key ID. The ID ARN contains the `arn:aws:kms` namespace, followed by the region of the CMK, the AWS account ID of the CMK owner, the `key` namespace, and then the CMK ID. For example, arn:aws:kms: _us-east-1_ : _012345678910_ :key/ _abcd1234-a123-456a-a12b-a123b4cd56ef_.

    #   * ARN using key alias. The alias ARN contains the `arn:aws:kms` namespace, followed by the region of the CMK, the AWS account ID of the CMK owner, the `alias` namespace, and then the CMK alias. For example, arn:aws:kms: _us-east-1_ : _012345678910_ :alias/ _ExampleAlias_.

    # AWS parses `KmsKeyId` asynchronously, meaning that the action you call may
    # appear to complete even though you provided an invalid identifier. This
    # action will eventually report failure.

    # The specified CMK must exist in the region that the snapshot is being
    # copied to.
    kms_key_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # Checks whether you have the required permissions for the action, without
    # actually making the request, and provides an error response. If you have
    # the required permissions, the error response is `DryRunOperation`.
    # Otherwise, it is `UnauthorizedOperation`.
    dry_run: bool = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class CopyImageResult(OutputShapeBase):
    """
    Contains the output of CopyImage.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "response_metadata",
                "ResponseMetadata",
                TypeInfo(typing.Dict[str, str]),
            ),
            (
                "image_id",
                "ImageId",
                TypeInfo(str),
            ),
        ]

    response_metadata: typing.Dict[str, str] = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # The ID of the new AMI.
    image_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class CopySnapshotRequest(ShapeBase):
    """
    Contains the parameters for CopySnapshot.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "source_region",
                "SourceRegion",
                TypeInfo(str),
            ),
            (
                "source_snapshot_id",
                "SourceSnapshotId",
                TypeInfo(str),
            ),
            (
                "description",
                "Description",
                TypeInfo(str),
            ),
            (
                "destination_region",
                "DestinationRegion",
                TypeInfo(str),
            ),
            (
                "encrypted",
                "Encrypted",
                TypeInfo(bool),
            ),
            (
                "kms_key_id",
                "KmsKeyId",
                TypeInfo(str),
            ),
            (
                "presigned_url",
                "PresignedUrl",
                TypeInfo(str),
            ),
            (
                "dry_run",
                "DryRun",
                TypeInfo(bool),
            ),
        ]

    # The ID of the region that contains the snapshot to be copied.
    source_region: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The ID of the EBS snapshot to copy.
    source_snapshot_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # A description for the EBS snapshot.
    description: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The destination region to use in the `PresignedUrl` parameter of a snapshot
    # copy operation. This parameter is only valid for specifying the destination
    # region in a `PresignedUrl` parameter, where it is required.

    # The snapshot copy is sent to the regional endpoint that you sent the HTTP
    # request to (for example, `ec2.us-east-1.amazonaws.com`). With the AWS CLI,
    # this is specified using the `--region` parameter or the default region in
    # your AWS configuration file.
    destination_region: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # Specifies whether the destination snapshot should be encrypted. You can
    # encrypt a copy of an unencrypted snapshot using this flag, but you cannot
    # use it to create an unencrypted copy from an encrypted snapshot. Your
    # default CMK for EBS is used unless a non-default AWS Key Management Service
    # (AWS KMS) CMK is specified with `KmsKeyId`. For more information, see
    # [Amazon EBS
    # Encryption](http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSEncryption.html)
    # in the _Amazon Elastic Compute Cloud User Guide_.
    encrypted: bool = dataclasses.field(default=ShapeBase.NOT_SET, )

    # An identifier for the AWS Key Management Service (AWS KMS) customer master
    # key (CMK) to use when creating the encrypted volume. This parameter is only
    # required if you want to use a non-default CMK; if this parameter is not
    # specified, the default CMK for EBS is used. If a `KmsKeyId` is specified,
    # the `Encrypted` flag must also be set.

    # The CMK identifier may be provided in any of the following formats:

    #   * Key ID

    #   * Key alias

    #   * ARN using key ID. The ID ARN contains the `arn:aws:kms` namespace, followed by the region of the CMK, the AWS account ID of the CMK owner, the `key` namespace, and then the CMK ID. For example, arn:aws:kms: _us-east-1_ : _012345678910_ :key/ _abcd1234-a123-456a-a12b-a123b4cd56ef_.

    #   * ARN using key alias. The alias ARN contains the `arn:aws:kms` namespace, followed by the region of the CMK, the AWS account ID of the CMK owner, the `alias` namespace, and then the CMK alias. For example, arn:aws:kms: _us-east-1_ : _012345678910_ :alias/ _ExampleAlias_.

    # AWS parses `KmsKeyId` asynchronously, meaning that the action you call may
    # appear to complete even though you provided an invalid identifier. The
    # action will eventually fail.
    kms_key_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # When you copy an encrypted source snapshot using the Amazon EC2 Query API,
    # you must supply a pre-signed URL. This parameter is optional for
    # unencrypted snapshots. For more information, see [Query
    # Requests](http://docs.aws.amazon.com/AWSEC2/latest/APIReference/Query-
    # Requests.html).

    # The `PresignedUrl` should use the snapshot source endpoint, the
    # `CopySnapshot` action, and include the `SourceRegion`, `SourceSnapshotId`,
    # and `DestinationRegion` parameters. The `PresignedUrl` must be signed using
    # AWS Signature Version 4. Because EBS snapshots are stored in Amazon S3, the
    # signing algorithm for this parameter uses the same logic that is described
    # in [Authenticating Requests by Using Query Parameters (AWS Signature
    # Version 4)](http://docs.aws.amazon.com/AmazonS3/latest/API/sigv4-query-
    # string-auth.html) in the _Amazon Simple Storage Service API Reference_. An
    # invalid or improperly signed `PresignedUrl` will cause the copy operation
    # to fail asynchronously, and the snapshot will move to an `error` state.
    presigned_url: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # Checks whether you have the required permissions for the action, without
    # actually making the request, and provides an error response. If you have
    # the required permissions, the error response is `DryRunOperation`.
    # Otherwise, it is `UnauthorizedOperation`.
    dry_run: bool = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class CopySnapshotResult(OutputShapeBase):
    """
    Contains the output of CopySnapshot.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "response_metadata",
                "ResponseMetadata",
                TypeInfo(typing.Dict[str, str]),
            ),
            (
                "snapshot_id",
                "SnapshotId",
                TypeInfo(str),
            ),
        ]

    response_metadata: typing.Dict[str, str] = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # The ID of the new snapshot.
    snapshot_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class CpuOptions(ShapeBase):
    """
    The CPU options for the instance.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "core_count",
                "CoreCount",
                TypeInfo(int),
            ),
            (
                "threads_per_core",
                "ThreadsPerCore",
                TypeInfo(int),
            ),
        ]

    # The number of CPU cores for the instance.
    core_count: int = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The number of threads per CPU core.
    threads_per_core: int = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class CpuOptionsRequest(ShapeBase):
    """
    The CPU options for the instance. Both the core count and threads per core must
    be specified in the request.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "core_count",
                "CoreCount",
                TypeInfo(int),
            ),
            (
                "threads_per_core",
                "ThreadsPerCore",
                TypeInfo(int),
            ),
        ]

    # The number of CPU cores for the instance.
    core_count: int = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The number of threads per CPU core. To disable Intel Hyper-Threading
    # Technology for the instance, specify a value of `1`. Otherwise, specify the
    # default value of `2`.
    threads_per_core: int = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class CreateCustomerGatewayRequest(ShapeBase):
    """
    Contains the parameters for CreateCustomerGateway.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "bgp_asn",
                "BgpAsn",
                TypeInfo(int),
            ),
            (
                "public_ip",
                "PublicIp",
                TypeInfo(str),
            ),
            (
                "type",
                "Type",
                TypeInfo(GatewayType),
            ),
            (
                "dry_run",
                "DryRun",
                TypeInfo(bool),
            ),
        ]

    # For devices that support BGP, the customer gateway's BGP ASN.

    # Default: 65000
    bgp_asn: int = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The Internet-routable IP address for the customer gateway's outside
    # interface. The address must be static.
    public_ip: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The type of VPN connection that this customer gateway supports (`ipsec.1`).
    type: "GatewayType" = dataclasses.field(default=ShapeBase.NOT_SET, )

    # Checks whether you have the required permissions for the action, without
    # actually making the request, and provides an error response. If you have
    # the required permissions, the error response is `DryRunOperation`.
    # Otherwise, it is `UnauthorizedOperation`.
    dry_run: bool = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class CreateCustomerGatewayResult(OutputShapeBase):
    """
    Contains the output of CreateCustomerGateway.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "response_metadata",
                "ResponseMetadata",
                TypeInfo(typing.Dict[str, str]),
            ),
            (
                "customer_gateway",
                "CustomerGateway",
                TypeInfo(CustomerGateway),
            ),
        ]

    response_metadata: typing.Dict[str, str] = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # Information about the customer gateway.
    customer_gateway: "CustomerGateway" = dataclasses.field(
        default_factory=dict,
    )


@dataclasses.dataclass
class CreateDefaultSubnetRequest(ShapeBase):
    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "availability_zone",
                "AvailabilityZone",
                TypeInfo(str),
            ),
            (
                "dry_run",
                "DryRun",
                TypeInfo(bool),
            ),
        ]

    # The Availability Zone in which to create the default subnet.
    availability_zone: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # Checks whether you have the required permissions for the action, without
    # actually making the request, and provides an error response. If you have
    # the required permissions, the error response is `DryRunOperation`.
    # Otherwise, it is `UnauthorizedOperation`.
    dry_run: bool = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class CreateDefaultSubnetResult(OutputShapeBase):
    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "response_metadata",
                "ResponseMetadata",
                TypeInfo(typing.Dict[str, str]),
            ),
            (
                "subnet",
                "Subnet",
                TypeInfo(Subnet),
            ),
        ]

    response_metadata: typing.Dict[str, str] = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # Information about the subnet.
    subnet: "Subnet" = dataclasses.field(default_factory=dict, )


@dataclasses.dataclass
class CreateDefaultVpcRequest(ShapeBase):
    """
    Contains the parameters for CreateDefaultVpc.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "dry_run",
                "DryRun",
                TypeInfo(bool),
            ),
        ]

    # Checks whether you have the required permissions for the action, without
    # actually making the request, and provides an error response. If you have
    # the required permissions, the error response is `DryRunOperation`.
    # Otherwise, it is `UnauthorizedOperation`.
    dry_run: bool = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class CreateDefaultVpcResult(OutputShapeBase):
    """
    Contains the output of CreateDefaultVpc.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "response_metadata",
                "ResponseMetadata",
                TypeInfo(typing.Dict[str, str]),
            ),
            (
                "vpc",
                "Vpc",
                TypeInfo(Vpc),
            ),
        ]

    response_metadata: typing.Dict[str, str] = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # Information about the VPC.
    vpc: "Vpc" = dataclasses.field(default_factory=dict, )


@dataclasses.dataclass
class CreateDhcpOptionsRequest(ShapeBase):
    """
    Contains the parameters for CreateDhcpOptions.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "dhcp_configurations",
                "DhcpConfigurations",
                TypeInfo(typing.List[NewDhcpConfiguration]),
            ),
            (
                "dry_run",
                "DryRun",
                TypeInfo(bool),
            ),
        ]

    # A DHCP configuration option.
    dhcp_configurations: typing.List["NewDhcpConfiguration"
                                    ] = dataclasses.field(
                                        default_factory=list,
                                    )

    # Checks whether you have the required permissions for the action, without
    # actually making the request, and provides an error response. If you have
    # the required permissions, the error response is `DryRunOperation`.
    # Otherwise, it is `UnauthorizedOperation`.
    dry_run: bool = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class CreateDhcpOptionsResult(OutputShapeBase):
    """
    Contains the output of CreateDhcpOptions.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "response_metadata",
                "ResponseMetadata",
                TypeInfo(typing.Dict[str, str]),
            ),
            (
                "dhcp_options",
                "DhcpOptions",
                TypeInfo(DhcpOptions),
            ),
        ]

    response_metadata: typing.Dict[str, str] = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # A set of DHCP options.
    dhcp_options: "DhcpOptions" = dataclasses.field(default_factory=dict, )


@dataclasses.dataclass
class CreateEgressOnlyInternetGatewayRequest(ShapeBase):
    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "vpc_id",
                "VpcId",
                TypeInfo(str),
            ),
            (
                "client_token",
                "ClientToken",
                TypeInfo(str),
            ),
            (
                "dry_run",
                "DryRun",
                TypeInfo(bool),
            ),
        ]

    # The ID of the VPC for which to create the egress-only internet gateway.
    vpc_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # Unique, case-sensitive identifier that you provide to ensure the
    # idempotency of the request. For more information, see [How to Ensure
    # Idempotency](http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Run_Instance_Idempotency.html).
    client_token: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # Checks whether you have the required permissions for the action, without
    # actually making the request, and provides an error response. If you have
    # the required permissions, the error response is `DryRunOperation`.
    # Otherwise, it is `UnauthorizedOperation`.
    dry_run: bool = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class CreateEgressOnlyInternetGatewayResult(OutputShapeBase):
    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "response_metadata",
                "ResponseMetadata",
                TypeInfo(typing.Dict[str, str]),
            ),
            (
                "client_token",
                "ClientToken",
                TypeInfo(str),
            ),
            (
                "egress_only_internet_gateway",
                "EgressOnlyInternetGateway",
                TypeInfo(EgressOnlyInternetGateway),
            ),
        ]

    response_metadata: typing.Dict[str, str] = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # Unique, case-sensitive identifier that you provide to ensure the
    # idempotency of the request.
    client_token: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # Information about the egress-only internet gateway.
    egress_only_internet_gateway: "EgressOnlyInternetGateway" = dataclasses.field(
        default_factory=dict,
    )


@dataclasses.dataclass
class CreateFleetRequest(ShapeBase):
    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "launch_template_configs",
                "LaunchTemplateConfigs",
                TypeInfo(typing.List[FleetLaunchTemplateConfigRequest]),
            ),
            (
                "target_capacity_specification",
                "TargetCapacitySpecification",
                TypeInfo(TargetCapacitySpecificationRequest),
            ),
            (
                "dry_run",
                "DryRun",
                TypeInfo(bool),
            ),
            (
                "client_token",
                "ClientToken",
                TypeInfo(str),
            ),
            (
                "spot_options",
                "SpotOptions",
                TypeInfo(SpotOptionsRequest),
            ),
            (
                "on_demand_options",
                "OnDemandOptions",
                TypeInfo(OnDemandOptionsRequest),
            ),
            (
                "excess_capacity_termination_policy",
                "ExcessCapacityTerminationPolicy",
                TypeInfo(FleetExcessCapacityTerminationPolicy),
            ),
            (
                "terminate_instances_with_expiration",
                "TerminateInstancesWithExpiration",
                TypeInfo(bool),
            ),
            (
                "type",
                "Type",
                TypeInfo(FleetType),
            ),
            (
                "valid_from",
                "ValidFrom",
                TypeInfo(datetime.datetime),
            ),
            (
                "valid_until",
                "ValidUntil",
                TypeInfo(datetime.datetime),
            ),
            (
                "replace_unhealthy_instances",
                "ReplaceUnhealthyInstances",
                TypeInfo(bool),
            ),
            (
                "tag_specifications",
                "TagSpecifications",
                TypeInfo(typing.List[TagSpecification]),
            ),
        ]

    # The configuration for the EC2 Fleet.
    launch_template_configs: typing.List["FleetLaunchTemplateConfigRequest"
                                        ] = dataclasses.field(
                                            default_factory=list,
                                        )

    # The `TotalTargetCapacity`, `OnDemandTargetCapacity`, `SpotTargetCapacity`,
    # and `DefaultCapacityType` structure.
    target_capacity_specification: "TargetCapacitySpecificationRequest" = dataclasses.field(
        default_factory=dict,
    )

    # Checks whether you have the required permissions for the action, without
    # actually making the request, and provides an error response. If you have
    # the required permissions, the error response is `DryRunOperation`.
    # Otherwise, it is `UnauthorizedOperation`.
    dry_run: bool = dataclasses.field(default=ShapeBase.NOT_SET, )

    # Unique, case-sensitive identifier you provide to ensure the idempotency of
    # the request. For more information, see [Ensuring
    # Idempotency](http://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html).
    client_token: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # Describes the configuration of Spot Instances in an EC2 Fleet.
    spot_options: "SpotOptionsRequest" = dataclasses.field(
        default_factory=dict,
    )

    # The allocation strategy of On-Demand Instances in an EC2 Fleet.
    on_demand_options: "OnDemandOptionsRequest" = dataclasses.field(
        default_factory=dict,
    )

    # Indicates whether running instances should be terminated if the total
    # target capacity of the EC2 Fleet is decreased below the current size of the
    # EC2 Fleet.
    excess_capacity_termination_policy: "FleetExcessCapacityTerminationPolicy" = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # Indicates whether running instances should be terminated when the EC2 Fleet
    # expires.
    terminate_instances_with_expiration: bool = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # The type of request. Indicates whether the EC2 Fleet only `requests` the
    # target capacity, or also attempts to `maintain` it. If you request a
    # certain target capacity, EC2 Fleet only places the required requests. It
    # does not attempt to replenish instances if capacity is diminished, and does
    # not submit requests in alternative capacity pools if capacity is
    # unavailable. To maintain a certain target capacity, EC2 Fleet places the
    # required requests to meet this target capacity. It also automatically
    # replenishes any interrupted Spot Instances. Default: `maintain`.
    type: "FleetType" = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The start date and time of the request, in UTC format (for example, _YYYY_
    # - _MM_ - _DD_ T _HH_ : _MM_ : _SS_ Z). The default is to start fulfilling
    # the request immediately.
    valid_from: datetime.datetime = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # The end date and time of the request, in UTC format (for example, _YYYY_ -
    # _MM_ - _DD_ T _HH_ : _MM_ : _SS_ Z). At this point, no new EC2 Fleet
    # requests are placed or able to fulfill the request. The default end date is
    # 7 days from the current date.
    valid_until: datetime.datetime = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # Indicates whether EC2 Fleet should replace unhealthy instances.
    replace_unhealthy_instances: bool = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # The key-value pair for tagging the EC2 Fleet request on creation. The value
    # for `ResourceType` must be `fleet`, otherwise the fleet request fails. To
    # tag instances at launch, specify the tags in the [launch
    # template](http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-launch-
    # templates.html#create-launch-template). For information about tagging after
    # launch, see [Tagging Your
    # Resources](http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Using_Tags.html#tag-
    # resources).
    tag_specifications: typing.List["TagSpecification"] = dataclasses.field(
        default_factory=list,
    )


@dataclasses.dataclass
class CreateFleetResult(OutputShapeBase):
    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "response_metadata",
                "ResponseMetadata",
                TypeInfo(typing.Dict[str, str]),
            ),
            (
                "fleet_id",
                "FleetId",
                TypeInfo(str),
            ),
        ]

    response_metadata: typing.Dict[str, str] = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # The ID of the EC2 Fleet.
    fleet_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class CreateFlowLogsRequest(ShapeBase):
    """
    Contains the parameters for CreateFlowLogs.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "resource_ids",
                "ResourceIds",
                TypeInfo(typing.List[str]),
            ),
            (
                "resource_type",
                "ResourceType",
                TypeInfo(FlowLogsResourceType),
            ),
            (
                "traffic_type",
                "TrafficType",
                TypeInfo(TrafficType),
            ),
            (
                "dry_run",
                "DryRun",
                TypeInfo(bool),
            ),
            (
                "client_token",
                "ClientToken",
                TypeInfo(str),
            ),
            (
                "deliver_logs_permission_arn",
                "DeliverLogsPermissionArn",
                TypeInfo(str),
            ),
            (
                "log_group_name",
                "LogGroupName",
                TypeInfo(str),
            ),
            (
                "log_destination_type",
                "LogDestinationType",
                TypeInfo(LogDestinationType),
            ),
            (
                "log_destination",
                "LogDestination",
                TypeInfo(str),
            ),
        ]

    # One or more subnet, network interface, or VPC IDs.

    # Constraints: Maximum of 1000 resources
    resource_ids: typing.List[str] = dataclasses.field(default_factory=list, )

    # The type of resource on which to create the flow log.
    resource_type: "FlowLogsResourceType" = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # The type of traffic to log.
    traffic_type: "TrafficType" = dataclasses.field(default=ShapeBase.NOT_SET, )

    # Checks whether you have the required permissions for the action, without
    # actually making the request, and provides an error response. If you have
    # the required permissions, the error response is `DryRunOperation`.
    # Otherwise, it is `UnauthorizedOperation`.
    dry_run: bool = dataclasses.field(default=ShapeBase.NOT_SET, )

    # Unique, case-sensitive identifier that you provide to ensure the
    # idempotency of the request. For more information, see [How to Ensure
    # Idempotency](http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Run_Instance_Idempotency.html).
    client_token: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The ARN for the IAM role that's used to post flow logs to a log group.
    deliver_logs_permission_arn: str = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # The name of the log group.
    log_group_name: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # Specifies the type of destination to which the flow log data is to be
    # published. Flow log data can be published to CloudWatch Logs or Amazon S3.
    # To publish flow log data to CloudWatch Logs, specify `cloud-watch-logs`. To
    # publish flow log data to Amazon S3, specify `s3`.

    # Default: `cloud-watch-logs`
    log_destination_type: "LogDestinationType" = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # Specifies the destination to which the flow log data is to be published.
    # Flow log data can be published to an CloudWatch Logs log group or an Amazon
    # S3 bucket. The value specified for this parameter depends on the value
    # specified for LogDestinationType.

    # If LogDestinationType is not specified or `cloud-watch-logs`, specify the
    # Amazon Resource Name (ARN) of the CloudWatch Logs log group.

    # If LogDestinationType is `s3`, specify the ARN of the Amazon S3 bucket. You
    # can also specify a subfolder in the bucket. To specify a subfolder in the
    # bucket, use the following ARN format: `bucket_ARN/subfolder_name/`. For
    # example, to specify a subfolder named `my-logs` in a bucket named `my-
    # bucket`, use the following ARN: `arn:aws:s3:::my-bucket/my-logs/`.
    log_destination: str = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class CreateFlowLogsResult(OutputShapeBase):
    """
    Contains the output of CreateFlowLogs.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "response_metadata",
                "ResponseMetadata",
                TypeInfo(typing.Dict[str, str]),
            ),
            (
                "client_token",
                "ClientToken",
                TypeInfo(str),
            ),
            (
                "flow_log_ids",
                "FlowLogIds",
                TypeInfo(typing.List[str]),
            ),
            (
                "unsuccessful",
                "Unsuccessful",
                TypeInfo(typing.List[UnsuccessfulItem]),
            ),
        ]

    response_metadata: typing.Dict[str, str] = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # Unique, case-sensitive identifier that you provide to ensure the
    # idempotency of the request.
    client_token: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The IDs of the flow logs.
    flow_log_ids: typing.List[str] = dataclasses.field(default_factory=list, )

    # Information about the flow logs that could not be created successfully.
    unsuccessful: typing.List["UnsuccessfulItem"] = dataclasses.field(
        default_factory=list,
    )


@dataclasses.dataclass
class CreateFpgaImageRequest(ShapeBase):
    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "input_storage_location",
                "InputStorageLocation",
                TypeInfo(StorageLocation),
            ),
            (
                "dry_run",
                "DryRun",
                TypeInfo(bool),
            ),
            (
                "logs_storage_location",
                "LogsStorageLocation",
                TypeInfo(StorageLocation),
            ),
            (
                "description",
                "Description",
                TypeInfo(str),
            ),
            (
                "name",
                "Name",
                TypeInfo(str),
            ),
            (
                "client_token",
                "ClientToken",
                TypeInfo(str),
            ),
        ]

    # The location of the encrypted design checkpoint in Amazon S3. The input
    # must be a tarball.
    input_storage_location: "StorageLocation" = dataclasses.field(
        default_factory=dict,
    )

    # Checks whether you have the required permissions for the action, without
    # actually making the request, and provides an error response. If you have
    # the required permissions, the error response is `DryRunOperation`.
    # Otherwise, it is `UnauthorizedOperation`.
    dry_run: bool = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The location in Amazon S3 for the output logs.
    logs_storage_location: "StorageLocation" = dataclasses.field(
        default_factory=dict,
    )

    # A description for the AFI.
    description: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # A name for the AFI.
    name: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # Unique, case-sensitive identifier that you provide to ensure the
    # idempotency of the request. For more information, see [Ensuring
    # Idempotency](http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Run_Instance_Idempotency.html).
    client_token: str = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class CreateFpgaImageResult(OutputShapeBase):
    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "response_metadata",
                "ResponseMetadata",
                TypeInfo(typing.Dict[str, str]),
            ),
            (
                "fpga_image_id",
                "FpgaImageId",
                TypeInfo(str),
            ),
            (
                "fpga_image_global_id",
                "FpgaImageGlobalId",
                TypeInfo(str),
            ),
        ]

    response_metadata: typing.Dict[str, str] = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # The FPGA image identifier (AFI ID).
    fpga_image_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The global FPGA image identifier (AGFI ID).
    fpga_image_global_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class CreateImageRequest(ShapeBase):
    """
    Contains the parameters for CreateImage.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "instance_id",
                "InstanceId",
                TypeInfo(str),
            ),
            (
                "name",
                "Name",
                TypeInfo(str),
            ),
            (
                "block_device_mappings",
                "BlockDeviceMappings",
                TypeInfo(typing.List[BlockDeviceMapping]),
            ),
            (
                "description",
                "Description",
                TypeInfo(str),
            ),
            (
                "dry_run",
                "DryRun",
                TypeInfo(bool),
            ),
            (
                "no_reboot",
                "NoReboot",
                TypeInfo(bool),
            ),
        ]

    # The ID of the instance.
    instance_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # A name for the new image.

    # Constraints: 3-128 alphanumeric characters, parentheses (()), square
    # brackets ([]), spaces ( ), periods (.), slashes (/), dashes (-), single
    # quotes ('), at-signs (@), or underscores(_)
    name: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # Information about one or more block device mappings.
    block_device_mappings: typing.List["BlockDeviceMapping"
                                      ] = dataclasses.field(
                                          default_factory=list,
                                      )

    # A description for the new image.
    description: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # Checks whether you have the required permissions for the action, without
    # actually making the request, and provides an error response. If you have
    # the required permissions, the error response is `DryRunOperation`.
    # Otherwise, it is `UnauthorizedOperation`.
    dry_run: bool = dataclasses.field(default=ShapeBase.NOT_SET, )

    # By default, Amazon EC2 attempts to shut down and reboot the instance before
    # creating the image. If the 'No Reboot' option is set, Amazon EC2 doesn't
    # shut down the instance before creating the image. When this option is used,
    # file system integrity on the created image can't be guaranteed.
    no_reboot: bool = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class CreateImageResult(OutputShapeBase):
    """
    Contains the output of CreateImage.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "response_metadata",
                "ResponseMetadata",
                TypeInfo(typing.Dict[str, str]),
            ),
            (
                "image_id",
                "ImageId",
                TypeInfo(str),
            ),
        ]

    response_metadata: typing.Dict[str, str] = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # The ID of the new AMI.
    image_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class CreateInstanceExportTaskRequest(ShapeBase):
    """
    Contains the parameters for CreateInstanceExportTask.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "instance_id",
                "InstanceId",
                TypeInfo(str),
            ),
            (
                "description",
                "Description",
                TypeInfo(str),
            ),
            (
                "export_to_s3_task",
                "ExportToS3Task",
                TypeInfo(ExportToS3TaskSpecification),
            ),
            (
                "target_environment",
                "TargetEnvironment",
                TypeInfo(ExportEnvironment),
            ),
        ]

    # The ID of the instance.
    instance_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # A description for the conversion task or the resource being exported. The
    # maximum length is 255 bytes.
    description: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The format and location for an instance export task.
    export_to_s3_task: "ExportToS3TaskSpecification" = dataclasses.field(
        default_factory=dict,
    )

    # The target virtualization environment.
    target_environment: "ExportEnvironment" = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )


@dataclasses.dataclass
class CreateInstanceExportTaskResult(OutputShapeBase):
    """
    Contains the output for CreateInstanceExportTask.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "response_metadata",
                "ResponseMetadata",
                TypeInfo(typing.Dict[str, str]),
            ),
            (
                "export_task",
                "ExportTask",
                TypeInfo(ExportTask),
            ),
        ]

    response_metadata: typing.Dict[str, str] = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # Information about the instance export task.
    export_task: "ExportTask" = dataclasses.field(default_factory=dict, )


@dataclasses.dataclass
class CreateInternetGatewayRequest(ShapeBase):
    """
    Contains the parameters for CreateInternetGateway.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "dry_run",
                "DryRun",
                TypeInfo(bool),
            ),
        ]

    # Checks whether you have the required permissions for the action, without
    # actually making the request, and provides an error response. If you have
    # the required permissions, the error response is `DryRunOperation`.
    # Otherwise, it is `UnauthorizedOperation`.
    dry_run: bool = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class CreateInternetGatewayResult(OutputShapeBase):
    """
    Contains the output of CreateInternetGateway.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "response_metadata",
                "ResponseMetadata",
                TypeInfo(typing.Dict[str, str]),
            ),
            (
                "internet_gateway",
                "InternetGateway",
                TypeInfo(InternetGateway),
            ),
        ]

    response_metadata: typing.Dict[str, str] = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # Information about the internet gateway.
    internet_gateway: "InternetGateway" = dataclasses.field(
        default_factory=dict,
    )


@dataclasses.dataclass
class CreateKeyPairRequest(ShapeBase):
    """
    Contains the parameters for CreateKeyPair.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "key_name",
                "KeyName",
                TypeInfo(str),
            ),
            (
                "dry_run",
                "DryRun",
                TypeInfo(bool),
            ),
        ]

    # A unique name for the key pair.

    # Constraints: Up to 255 ASCII characters
    key_name: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # Checks whether you have the required permissions for the action, without
    # actually making the request, and provides an error response. If you have
    # the required permissions, the error response is `DryRunOperation`.
    # Otherwise, it is `UnauthorizedOperation`.
    dry_run: bool = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class CreateLaunchTemplateRequest(ShapeBase):
    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "launch_template_name",
                "LaunchTemplateName",
                TypeInfo(str),
            ),
            (
                "launch_template_data",
                "LaunchTemplateData",
                TypeInfo(RequestLaunchTemplateData),
            ),
            (
                "dry_run",
                "DryRun",
                TypeInfo(bool),
            ),
            (
                "client_token",
                "ClientToken",
                TypeInfo(str),
            ),
            (
                "version_description",
                "VersionDescription",
                TypeInfo(str),
            ),
        ]

    # A name for the launch template.
    launch_template_name: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The information for the launch template.
    launch_template_data: "RequestLaunchTemplateData" = dataclasses.field(
        default_factory=dict,
    )

    # Checks whether you have the required permissions for the action, without
    # actually making the request, and provides an error response. If you have
    # the required permissions, the error response is `DryRunOperation`.
    # Otherwise, it is `UnauthorizedOperation`.
    dry_run: bool = dataclasses.field(default=ShapeBase.NOT_SET, )

    # Unique, case-sensitive identifier you provide to ensure the idempotency of
    # the request. For more information, see [Ensuring
    # Idempotency](http://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html).
    client_token: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # A description for the first version of the launch template.
    version_description: str = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class CreateLaunchTemplateResult(OutputShapeBase):
    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "response_metadata",
                "ResponseMetadata",
                TypeInfo(typing.Dict[str, str]),
            ),
            (
                "launch_template",
                "LaunchTemplate",
                TypeInfo(LaunchTemplate),
            ),
        ]

    response_metadata: typing.Dict[str, str] = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # Information about the launch template.
    launch_template: "LaunchTemplate" = dataclasses.field(
        default_factory=dict,
    )


@dataclasses.dataclass
class CreateLaunchTemplateVersionRequest(ShapeBase):
    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "launch_template_data",
                "LaunchTemplateData",
                TypeInfo(RequestLaunchTemplateData),
            ),
            (
                "dry_run",
                "DryRun",
                TypeInfo(bool),
            ),
            (
                "client_token",
                "ClientToken",
                TypeInfo(str),
            ),
            (
                "launch_template_id",
                "LaunchTemplateId",
                TypeInfo(str),
            ),
            (
                "launch_template_name",
                "LaunchTemplateName",
                TypeInfo(str),
            ),
            (
                "source_version",
                "SourceVersion",
                TypeInfo(str),
            ),
            (
                "version_description",
                "VersionDescription",
                TypeInfo(str),
            ),
        ]

    # The information for the launch template.
    launch_template_data: "RequestLaunchTemplateData" = dataclasses.field(
        default_factory=dict,
    )

    # Checks whether you have the required permissions for the action, without
    # actually making the request, and provides an error response. If you have
    # the required permissions, the error response is `DryRunOperation`.
    # Otherwise, it is `UnauthorizedOperation`.
    dry_run: bool = dataclasses.field(default=ShapeBase.NOT_SET, )

    # Unique, case-sensitive identifier you provide to ensure the idempotency of
    # the request. For more information, see [Ensuring
    # Idempotency](http://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html).
    client_token: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The ID of the launch template. You must specify either the launch template
    # ID or launch template name in the request.
    launch_template_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The name of the launch template. You must specify either the launch
    # template ID or launch template name in the request.
    launch_template_name: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The version number of the launch template version on which to base the new
    # version. The new version inherits the same launch parameters as the source
    # version, except for parameters that you specify in LaunchTemplateData.
    source_version: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # A description for the version of the launch template.
    version_description: str = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class CreateLaunchTemplateVersionResult(OutputShapeBase):
    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "response_metadata",
                "ResponseMetadata",
                TypeInfo(typing.Dict[str, str]),
            ),
            (
                "launch_template_version",
                "LaunchTemplateVersion",
                TypeInfo(LaunchTemplateVersion),
            ),
        ]

    response_metadata: typing.Dict[str, str] = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # Information about the launch template version.
    launch_template_version: "LaunchTemplateVersion" = dataclasses.field(
        default_factory=dict,
    )


@dataclasses.dataclass
class CreateNatGatewayRequest(ShapeBase):
    """
    Contains the parameters for CreateNatGateway.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "allocation_id",
                "AllocationId",
                TypeInfo(str),
            ),
            (
                "subnet_id",
                "SubnetId",
                TypeInfo(str),
            ),
            (
                "client_token",
                "ClientToken",
                TypeInfo(str),
            ),
        ]

    # The allocation ID of an Elastic IP address to associate with the NAT
    # gateway. If the Elastic IP address is associated with another resource, you
    # must first disassociate it.
    allocation_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The subnet in which to create the NAT gateway.
    subnet_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # Unique, case-sensitive identifier that you provide to ensure the
    # idempotency of the request. For more information, see [How to Ensure
    # Idempotency](http://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html).

    # Constraint: Maximum 64 ASCII characters.
    client_token: str = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class CreateNatGatewayResult(OutputShapeBase):
    """
    Contains the output of CreateNatGateway.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "response_metadata",
                "ResponseMetadata",
                TypeInfo(typing.Dict[str, str]),
            ),
            (
                "client_token",
                "ClientToken",
                TypeInfo(str),
            ),
            (
                "nat_gateway",
                "NatGateway",
                TypeInfo(NatGateway),
            ),
        ]

    response_metadata: typing.Dict[str, str] = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # Unique, case-sensitive identifier to ensure the idempotency of the request.
    # Only returned if a client token was provided in the request.
    client_token: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # Information about the NAT gateway.
    nat_gateway: "NatGateway" = dataclasses.field(default_factory=dict, )


@dataclasses.dataclass
class CreateNetworkAclEntryRequest(ShapeBase):
    """
    Contains the parameters for CreateNetworkAclEntry.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "egress",
                "Egress",
                TypeInfo(bool),
            ),
            (
                "network_acl_id",
                "NetworkAclId",
                TypeInfo(str),
            ),
            (
                "protocol",
                "Protocol",
                TypeInfo(str),
            ),
            (
                "rule_action",
                "RuleAction",
                TypeInfo(RuleAction),
            ),
            (
                "rule_number",
                "RuleNumber",
                TypeInfo(int),
            ),
            (
                "cidr_block",
                "CidrBlock",
                TypeInfo(str),
            ),
            (
                "dry_run",
                "DryRun",
                TypeInfo(bool),
            ),
            (
                "icmp_type_code",
                "IcmpTypeCode",
                TypeInfo(IcmpTypeCode),
            ),
            (
                "ipv6_cidr_block",
                "Ipv6CidrBlock",
                TypeInfo(str),
            ),
            (
                "port_range",
                "PortRange",
                TypeInfo(PortRange),
            ),
        ]

    # Indicates whether this is an egress rule (rule is applied to traffic
    # leaving the subnet).
    egress: bool = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The ID of the network ACL.
    network_acl_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The protocol. A value of `-1` or `all` means all protocols. If you specify
    # `all`, `-1`, or a protocol number other than `6` (tcp), `17` (udp), or `1`
    # (icmp), traffic on all ports is allowed, regardless of any ports or ICMP
    # types or codes that you specify. If you specify protocol `58` (ICMPv6) and
    # specify an IPv4 CIDR block, traffic for all ICMP types and codes allowed,
    # regardless of any that you specify. If you specify protocol `58` (ICMPv6)
    # and specify an IPv6 CIDR block, you must specify an ICMP type and code.
    protocol: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # Indicates whether to allow or deny the traffic that matches the rule.
    rule_action: "RuleAction" = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The rule number for the entry (for example, 100). ACL entries are processed
    # in ascending order by rule number.

    # Constraints: Positive integer from 1 to 32766. The range 32767 to 65535 is
    # reserved for internal use.
    rule_number: int = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The IPv4 network range to allow or deny, in CIDR notation (for example
    # `172.16.0.0/24`).
    cidr_block: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # Checks whether you have the required permissions for the action, without
    # actually making the request, and provides an error response. If you have
    # the required permissions, the error response is `DryRunOperation`.
    # Otherwise, it is `UnauthorizedOperation`.
    dry_run: bool = dataclasses.field(default=ShapeBase.NOT_SET, )

    # ICMP protocol: The ICMP or ICMPv6 type and code. Required if specifying the
    # ICMP protocol, or protocol 58 (ICMPv6) with an IPv6 CIDR block.
    icmp_type_code: "IcmpTypeCode" = dataclasses.field(default_factory=dict, )

    # The IPv6 network range to allow or deny, in CIDR notation (for example
    # `2001:db8:1234:1a00::/64`).
    ipv6_cidr_block: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # TCP or UDP protocols: The range of ports the rule applies to.
    port_range: "PortRange" = dataclasses.field(default_factory=dict, )


@dataclasses.dataclass
class CreateNetworkAclRequest(ShapeBase):
    """
    Contains the parameters for CreateNetworkAcl.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "vpc_id",
                "VpcId",
                TypeInfo(str),
            ),
            (
                "dry_run",
                "DryRun",
                TypeInfo(bool),
            ),
        ]

    # The ID of the VPC.
    vpc_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # Checks whether you have the required permissions for the action, without
    # actually making the request, and provides an error response. If you have
    # the required permissions, the error response is `DryRunOperation`.
    # Otherwise, it is `UnauthorizedOperation`.
    dry_run: bool = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class CreateNetworkAclResult(OutputShapeBase):
    """
    Contains the output of CreateNetworkAcl.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "response_metadata",
                "ResponseMetadata",
                TypeInfo(typing.Dict[str, str]),
            ),
            (
                "network_acl",
                "NetworkAcl",
                TypeInfo(NetworkAcl),
            ),
        ]

    response_metadata: typing.Dict[str, str] = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # Information about the network ACL.
    network_acl: "NetworkAcl" = dataclasses.field(default_factory=dict, )


@dataclasses.dataclass
class CreateNetworkInterfacePermissionRequest(ShapeBase):
    """
    Contains the parameters for CreateNetworkInterfacePermission.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "network_interface_id",
                "NetworkInterfaceId",
                TypeInfo(str),
            ),
            (
                "permission",
                "Permission",
                TypeInfo(InterfacePermissionType),
            ),
            (
                "aws_account_id",
                "AwsAccountId",
                TypeInfo(str),
            ),
            (
                "aws_service",
                "AwsService",
                TypeInfo(str),
            ),
            (
                "dry_run",
                "DryRun",
                TypeInfo(bool),
            ),
        ]

    # The ID of the network interface.
    network_interface_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The type of permission to grant.
    permission: "InterfacePermissionType" = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # The AWS account ID.
    aws_account_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The AWS service. Currently not supported.
    aws_service: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # Checks whether you have the required permissions for the action, without
    # actually making the request, and provides an error response. If you have
    # the required permissions, the error response is `DryRunOperation`.
    # Otherwise, it is `UnauthorizedOperation`.
    dry_run: bool = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class CreateNetworkInterfacePermissionResult(OutputShapeBase):
    """
    Contains the output of CreateNetworkInterfacePermission.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "response_metadata",
                "ResponseMetadata",
                TypeInfo(typing.Dict[str, str]),
            ),
            (
                "interface_permission",
                "InterfacePermission",
                TypeInfo(NetworkInterfacePermission),
            ),
        ]

    response_metadata: typing.Dict[str, str] = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # Information about the permission for the network interface.
    interface_permission: "NetworkInterfacePermission" = dataclasses.field(
        default_factory=dict,
    )


@dataclasses.dataclass
class CreateNetworkInterfaceRequest(ShapeBase):
    """
    Contains the parameters for CreateNetworkInterface.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "subnet_id",
                "SubnetId",
                TypeInfo(str),
            ),
            (
                "description",
                "Description",
                TypeInfo(str),
            ),
            (
                "dry_run",
                "DryRun",
                TypeInfo(bool),
            ),
            (
                "groups",
                "Groups",
                TypeInfo(typing.List[str]),
            ),
            (
                "ipv6_address_count",
                "Ipv6AddressCount",
                TypeInfo(int),
            ),
            (
                "ipv6_addresses",
                "Ipv6Addresses",
                TypeInfo(typing.List[InstanceIpv6Address]),
            ),
            (
                "private_ip_address",
                "PrivateIpAddress",
                TypeInfo(str),
            ),
            (
                "private_ip_addresses",
                "PrivateIpAddresses",
                TypeInfo(typing.List[PrivateIpAddressSpecification]),
            ),
            (
                "secondary_private_ip_address_count",
                "SecondaryPrivateIpAddressCount",
                TypeInfo(int),
            ),
        ]

    # The ID of the subnet to associate with the network interface.
    subnet_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # A description for the network interface.
    description: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # Checks whether you have the required permissions for the action, without
    # actually making the request, and provides an error response. If you have
    # the required permissions, the error response is `DryRunOperation`.
    # Otherwise, it is `UnauthorizedOperation`.
    dry_run: bool = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The IDs of one or more security groups.
    groups: typing.List[str] = dataclasses.field(default_factory=list, )

    # The number of IPv6 addresses to assign to a network interface. Amazon EC2
    # automatically selects the IPv6 addresses from the subnet range. You can't
    # use this option if specifying specific IPv6 addresses. If your subnet has
    # the `AssignIpv6AddressOnCreation` attribute set to `true`, you can specify
    # `0` to override this setting.
    ipv6_address_count: int = dataclasses.field(default=ShapeBase.NOT_SET, )

    # One or more specific IPv6 addresses from the IPv6 CIDR block range of your
    # subnet. You can't use this option if you're specifying a number of IPv6
    # addresses.
    ipv6_addresses: typing.List["InstanceIpv6Address"] = dataclasses.field(
        default_factory=list,
    )

    # The primary private IPv4 address of the network interface. If you don't
    # specify an IPv4 address, Amazon EC2 selects one for you from the subnet's
    # IPv4 CIDR range. If you specify an IP address, you cannot indicate any IP
    # addresses specified in `privateIpAddresses` as primary (only one IP address
    # can be designated as primary).
    private_ip_address: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # One or more private IPv4 addresses.
    private_ip_addresses: typing.List["PrivateIpAddressSpecification"
                                     ] = dataclasses.field(
                                         default_factory=list,
                                     )

    # The number of secondary private IPv4 addresses to assign to a network
    # interface. When you specify a number of secondary IPv4 addresses, Amazon
    # EC2 selects these IP addresses within the subnet's IPv4 CIDR range. You
    # can't specify this option and specify more than one private IP address
    # using `privateIpAddresses`.

    # The number of IP addresses you can assign to a network interface varies by
    # instance type. For more information, see [IP Addresses Per ENI Per Instance
    # Type](http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-
    # eni.html#AvailableIpPerENI) in the _Amazon Virtual Private Cloud User
    # Guide_.
    secondary_private_ip_address_count: int = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )


@dataclasses.dataclass
class CreateNetworkInterfaceResult(OutputShapeBase):
    """
    Contains the output of CreateNetworkInterface.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "response_metadata",
                "ResponseMetadata",
                TypeInfo(typing.Dict[str, str]),
            ),
            (
                "network_interface",
                "NetworkInterface",
                TypeInfo(NetworkInterface),
            ),
        ]

    response_metadata: typing.Dict[str, str] = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # Information about the network interface.
    network_interface: "NetworkInterface" = dataclasses.field(
        default_factory=dict,
    )


@dataclasses.dataclass
class CreatePlacementGroupRequest(ShapeBase):
    """
    Contains the parameters for CreatePlacementGroup.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "group_name",
                "GroupName",
                TypeInfo(str),
            ),
            (
                "strategy",
                "Strategy",
                TypeInfo(PlacementStrategy),
            ),
            (
                "dry_run",
                "DryRun",
                TypeInfo(bool),
            ),
        ]

    # A name for the placement group. Must be unique within the scope of your
    # account for the region.

    # Constraints: Up to 255 ASCII characters
    group_name: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The placement strategy.
    strategy: "PlacementStrategy" = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # Checks whether you have the required permissions for the action, without
    # actually making the request, and provides an error response. If you have
    # the required permissions, the error response is `DryRunOperation`.
    # Otherwise, it is `UnauthorizedOperation`.
    dry_run: bool = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class CreateReservedInstancesListingRequest(ShapeBase):
    """
    Contains the parameters for CreateReservedInstancesListing.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "client_token",
                "ClientToken",
                TypeInfo(str),
            ),
            (
                "instance_count",
                "InstanceCount",
                TypeInfo(int),
            ),
            (
                "price_schedules",
                "PriceSchedules",
                TypeInfo(typing.List[PriceScheduleSpecification]),
            ),
            (
                "reserved_instances_id",
                "ReservedInstancesId",
                TypeInfo(str),
            ),
        ]

    # Unique, case-sensitive identifier you provide to ensure idempotency of your
    # listings. This helps avoid duplicate listings. For more information, see
    # [Ensuring
    # Idempotency](http://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html).
    client_token: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The number of instances that are a part of a Reserved Instance account to
    # be listed in the Reserved Instance Marketplace. This number should be less
    # than or equal to the instance count associated with the Reserved Instance
    # ID specified in this call.
    instance_count: int = dataclasses.field(default=ShapeBase.NOT_SET, )

    # A list specifying the price of the Standard Reserved Instance for each
    # month remaining in the Reserved Instance term.
    price_schedules: typing.List["PriceScheduleSpecification"
                                ] = dataclasses.field(
                                    default_factory=list,
                                )

    # The ID of the active Standard Reserved Instance.
    reserved_instances_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class CreateReservedInstancesListingResult(OutputShapeBase):
    """
    Contains the output of CreateReservedInstancesListing.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "response_metadata",
                "ResponseMetadata",
                TypeInfo(typing.Dict[str, str]),
            ),
            (
                "reserved_instances_listings",
                "ReservedInstancesListings",
                TypeInfo(typing.List[ReservedInstancesListing]),
            ),
        ]

    response_metadata: typing.Dict[str, str] = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # Information about the Standard Reserved Instance listing.
    reserved_instances_listings: typing.List["ReservedInstancesListing"
                                            ] = dataclasses.field(
                                                default_factory=list,
                                            )


@dataclasses.dataclass
class CreateRouteRequest(ShapeBase):
    """
    Contains the parameters for CreateRoute.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "route_table_id",
                "RouteTableId",
                TypeInfo(str),
            ),
            (
                "destination_cidr_block",
                "DestinationCidrBlock",
                TypeInfo(str),
            ),
            (
                "destination_ipv6_cidr_block",
                "DestinationIpv6CidrBlock",
                TypeInfo(str),
            ),
            (
                "dry_run",
                "DryRun",
                TypeInfo(bool),
            ),
            (
                "egress_only_internet_gateway_id",
                "EgressOnlyInternetGatewayId",
                TypeInfo(str),
            ),
            (
                "gateway_id",
                "GatewayId",
                TypeInfo(str),
            ),
            (
                "instance_id",
                "InstanceId",
                TypeInfo(str),
            ),
            (
                "nat_gateway_id",
                "NatGatewayId",
                TypeInfo(str),
            ),
            (
                "network_interface_id",
                "NetworkInterfaceId",
                TypeInfo(str),
            ),
            (
                "vpc_peering_connection_id",
                "VpcPeeringConnectionId",
                TypeInfo(str),
            ),
        ]

    # The ID of the route table for the route.
    route_table_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The IPv4 CIDR address block used for the destination match. Routing
    # decisions are based on the most specific match.
    destination_cidr_block: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The IPv6 CIDR block used for the destination match. Routing decisions are
    # based on the most specific match.
    destination_ipv6_cidr_block: str = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # Checks whether you have the required permissions for the action, without
    # actually making the request, and provides an error response. If you have
    # the required permissions, the error response is `DryRunOperation`.
    # Otherwise, it is `UnauthorizedOperation`.
    dry_run: bool = dataclasses.field(default=ShapeBase.NOT_SET, )

    # [IPv6 traffic only] The ID of an egress-only internet gateway.
    egress_only_internet_gateway_id: str = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # The ID of an internet gateway or virtual private gateway attached to your
    # VPC.
    gateway_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The ID of a NAT instance in your VPC. The operation fails if you specify an
    # instance ID unless exactly one network interface is attached.
    instance_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # [IPv4 traffic only] The ID of a NAT gateway.
    nat_gateway_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The ID of a network interface.
    network_interface_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The ID of a VPC peering connection.
    vpc_peering_connection_id: str = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )


@dataclasses.dataclass
class CreateRouteResult(OutputShapeBase):
    """
    Contains the output of CreateRoute.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "response_metadata",
                "ResponseMetadata",
                TypeInfo(typing.Dict[str, str]),
            ),
            (
                "return_",
                "Return",
                TypeInfo(bool),
            ),
        ]

    response_metadata: typing.Dict[str, str] = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # Returns `true` if the request succeeds; otherwise, it returns an error.
    return_: bool = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class CreateRouteTableRequest(ShapeBase):
    """
    Contains the parameters for CreateRouteTable.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "vpc_id",
                "VpcId",
                TypeInfo(str),
            ),
            (
                "dry_run",
                "DryRun",
                TypeInfo(bool),
            ),
        ]

    # The ID of the VPC.
    vpc_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # Checks whether you have the required permissions for the action, without
    # actually making the request, and provides an error response. If you have
    # the required permissions, the error response is `DryRunOperation`.
    # Otherwise, it is `UnauthorizedOperation`.
    dry_run: bool = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class CreateRouteTableResult(OutputShapeBase):
    """
    Contains the output of CreateRouteTable.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "response_metadata",
                "ResponseMetadata",
                TypeInfo(typing.Dict[str, str]),
            ),
            (
                "route_table",
                "RouteTable",
                TypeInfo(RouteTable),
            ),
        ]

    response_metadata: typing.Dict[str, str] = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # Information about the route table.
    route_table: "RouteTable" = dataclasses.field(default_factory=dict, )


@dataclasses.dataclass
class CreateSecurityGroupRequest(ShapeBase):
    """
    Contains the parameters for CreateSecurityGroup.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "description",
                "Description",
                TypeInfo(str),
            ),
            (
                "group_name",
                "GroupName",
                TypeInfo(str),
            ),
            (
                "vpc_id",
                "VpcId",
                TypeInfo(str),
            ),
            (
                "dry_run",
                "DryRun",
                TypeInfo(bool),
            ),
        ]

    # A description for the security group. This is informational only.

    # Constraints: Up to 255 characters in length

    # Constraints for EC2-Classic: ASCII characters

    # Constraints for EC2-VPC: a-z, A-Z, 0-9, spaces, and ._-:/()#,@[]+=&;{}!$*
    description: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The name of the security group.

    # Constraints: Up to 255 characters in length. Cannot start with `sg-`.

    # Constraints for EC2-Classic: ASCII characters

    # Constraints for EC2-VPC: a-z, A-Z, 0-9, spaces, and ._-:/()#,@[]+=&;{}!$*
    group_name: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # [EC2-VPC] The ID of the VPC. Required for EC2-VPC.
    vpc_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # Checks whether you have the required permissions for the action, without
    # actually making the request, and provides an error response. If you have
    # the required permissions, the error response is `DryRunOperation`.
    # Otherwise, it is `UnauthorizedOperation`.
    dry_run: bool = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class CreateSecurityGroupResult(OutputShapeBase):
    """
    Contains the output of CreateSecurityGroup.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "response_metadata",
                "ResponseMetadata",
                TypeInfo(typing.Dict[str, str]),
            ),
            (
                "group_id",
                "GroupId",
                TypeInfo(str),
            ),
        ]

    response_metadata: typing.Dict[str, str] = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # The ID of the security group.
    group_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class CreateSnapshotRequest(ShapeBase):
    """
    Contains the parameters for CreateSnapshot.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "volume_id",
                "VolumeId",
                TypeInfo(str),
            ),
            (
                "description",
                "Description",
                TypeInfo(str),
            ),
            (
                "tag_specifications",
                "TagSpecifications",
                TypeInfo(typing.List[TagSpecification]),
            ),
            (
                "dry_run",
                "DryRun",
                TypeInfo(bool),
            ),
        ]

    # The ID of the EBS volume.
    volume_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # A description for the snapshot.
    description: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The tags to apply to the snapshot during creation.
    tag_specifications: typing.List["TagSpecification"] = dataclasses.field(
        default_factory=list,
    )

    # Checks whether you have the required permissions for the action, without
    # actually making the request, and provides an error response. If you have
    # the required permissions, the error response is `DryRunOperation`.
    # Otherwise, it is `UnauthorizedOperation`.
    dry_run: bool = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class CreateSpotDatafeedSubscriptionRequest(ShapeBase):
    """
    Contains the parameters for CreateSpotDatafeedSubscription.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "bucket",
                "Bucket",
                TypeInfo(str),
            ),
            (
                "dry_run",
                "DryRun",
                TypeInfo(bool),
            ),
            (
                "prefix",
                "Prefix",
                TypeInfo(str),
            ),
        ]

    # The Amazon S3 bucket in which to store the Spot Instance data feed.
    bucket: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # Checks whether you have the required permissions for the action, without
    # actually making the request, and provides an error response. If you have
    # the required permissions, the error response is `DryRunOperation`.
    # Otherwise, it is `UnauthorizedOperation`.
    dry_run: bool = dataclasses.field(default=ShapeBase.NOT_SET, )

    # A prefix for the data feed file names.
    prefix: str = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class CreateSpotDatafeedSubscriptionResult(OutputShapeBase):
    """
    Contains the output of CreateSpotDatafeedSubscription.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "response_metadata",
                "ResponseMetadata",
                TypeInfo(typing.Dict[str, str]),
            ),
            (
                "spot_datafeed_subscription",
                "SpotDatafeedSubscription",
                TypeInfo(SpotDatafeedSubscription),
            ),
        ]

    response_metadata: typing.Dict[str, str] = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # The Spot Instance data feed subscription.
    spot_datafeed_subscription: "SpotDatafeedSubscription" = dataclasses.field(
        default_factory=dict,
    )


@dataclasses.dataclass
class CreateSubnetRequest(ShapeBase):
    """
    Contains the parameters for CreateSubnet.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "cidr_block",
                "CidrBlock",
                TypeInfo(str),
            ),
            (
                "vpc_id",
                "VpcId",
                TypeInfo(str),
            ),
            (
                "availability_zone",
                "AvailabilityZone",
                TypeInfo(str),
            ),
            (
                "ipv6_cidr_block",
                "Ipv6CidrBlock",
                TypeInfo(str),
            ),
            (
                "dry_run",
                "DryRun",
                TypeInfo(bool),
            ),
        ]

    # The IPv4 network range for the subnet, in CIDR notation. For example,
    # `10.0.0.0/24`.
    cidr_block: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The ID of the VPC.
    vpc_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The Availability Zone for the subnet.

    # Default: AWS selects one for you. If you create more than one subnet in
    # your VPC, we may not necessarily select a different zone for each subnet.
    availability_zone: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The IPv6 network range for the subnet, in CIDR notation. The subnet size
    # must use a /64 prefix length.
    ipv6_cidr_block: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # Checks whether you have the required permissions for the action, without
    # actually making the request, and provides an error response. If you have
    # the required permissions, the error response is `DryRunOperation`.
    # Otherwise, it is `UnauthorizedOperation`.
    dry_run: bool = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class CreateSubnetResult(OutputShapeBase):
    """
    Contains the output of CreateSubnet.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "response_metadata",
                "ResponseMetadata",
                TypeInfo(typing.Dict[str, str]),
            ),
            (
                "subnet",
                "Subnet",
                TypeInfo(Subnet),
            ),
        ]

    response_metadata: typing.Dict[str, str] = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # Information about the subnet.
    subnet: "Subnet" = dataclasses.field(default_factory=dict, )


@dataclasses.dataclass
class CreateTagsRequest(ShapeBase):
    """
    Contains the parameters for CreateTags.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "resources",
                "Resources",
                TypeInfo(typing.List[str]),
            ),
            (
                "tags",
                "Tags",
                TypeInfo(typing.List[Tag]),
            ),
            (
                "dry_run",
                "DryRun",
                TypeInfo(bool),
            ),
        ]

    # The IDs of one or more resources to tag. For example, ami-1a2b3c4d.
    resources: typing.List[str] = dataclasses.field(default_factory=list, )

    # One or more tags. The `value` parameter is required, but if you don't want
    # the tag to have a value, specify the parameter with no value, and we set
    # the value to an empty string.
    tags: typing.List["Tag"] = dataclasses.field(default_factory=list, )

    # Checks whether you have the required permissions for the action, without
    # actually making the request, and provides an error response. If you have
    # the required permissions, the error response is `DryRunOperation`.
    # Otherwise, it is `UnauthorizedOperation`.
    dry_run: bool = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class CreateVolumePermission(ShapeBase):
    """
    Describes the user or group to be added or removed from the permissions for a
    volume.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "group",
                "Group",
                TypeInfo(PermissionGroup),
            ),
            (
                "user_id",
                "UserId",
                TypeInfo(str),
            ),
        ]

    # The specific group that is to be added or removed from a volume's list of
    # create volume permissions.
    group: "PermissionGroup" = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The specific AWS account ID that is to be added or removed from a volume's
    # list of create volume permissions.
    user_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class CreateVolumePermissionModifications(ShapeBase):
    """
    Describes modifications to the permissions for a volume.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "add",
                "Add",
                TypeInfo(typing.List[CreateVolumePermission]),
            ),
            (
                "remove",
                "Remove",
                TypeInfo(typing.List[CreateVolumePermission]),
            ),
        ]

    # Adds a specific AWS account ID or group to a volume's list of create volume
    # permissions.
    add: typing.List["CreateVolumePermission"] = dataclasses.field(
        default_factory=list,
    )

    # Removes a specific AWS account ID or group from a volume's list of create
    # volume permissions.
    remove: typing.List["CreateVolumePermission"] = dataclasses.field(
        default_factory=list,
    )


@dataclasses.dataclass
class CreateVolumeRequest(ShapeBase):
    """
    Contains the parameters for CreateVolume.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "availability_zone",
                "AvailabilityZone",
                TypeInfo(str),
            ),
            (
                "encrypted",
                "Encrypted",
                TypeInfo(bool),
            ),
            (
                "iops",
                "Iops",
                TypeInfo(int),
            ),
            (
                "kms_key_id",
                "KmsKeyId",
                TypeInfo(str),
            ),
            (
                "size",
                "Size",
                TypeInfo(int),
            ),
            (
                "snapshot_id",
                "SnapshotId",
                TypeInfo(str),
            ),
            (
                "volume_type",
                "VolumeType",
                TypeInfo(VolumeType),
            ),
            (
                "dry_run",
                "DryRun",
                TypeInfo(bool),
            ),
            (
                "tag_specifications",
                "TagSpecifications",
                TypeInfo(typing.List[TagSpecification]),
            ),
        ]

    # The Availability Zone in which to create the volume. Use
    # DescribeAvailabilityZones to list the Availability Zones that are currently
    # available to you.
    availability_zone: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # Specifies whether the volume should be encrypted. Encrypted Amazon EBS
    # volumes may only be attached to instances that support Amazon EBS
    # encryption. Volumes that are created from encrypted snapshots are
    # automatically encrypted. There is no way to create an encrypted volume from
    # an unencrypted snapshot or vice versa. If your AMI uses encrypted volumes,
    # you can only launch it on supported instance types. For more information,
    # see [Amazon EBS
    # Encryption](http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSEncryption.html)
    # in the _Amazon Elastic Compute Cloud User Guide_.
    encrypted: bool = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The number of I/O operations per second (IOPS) to provision for the volume,
    # with a maximum ratio of 50 IOPS/GiB. Range is 100 to 32000 IOPS for volumes
    # in most regions. For exceptions, see [Amazon EBS Volume
    # Types](http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSVolumeTypes.html)
    # in the _Amazon Elastic Compute Cloud User Guide_.

    # This parameter is valid only for Provisioned IOPS SSD (io1) volumes.
    iops: int = dataclasses.field(default=ShapeBase.NOT_SET, )

    # An identifier for the AWS Key Management Service (AWS KMS) customer master
    # key (CMK) to use when creating the encrypted volume. This parameter is only
    # required if you want to use a non-default CMK; if this parameter is not
    # specified, the default CMK for EBS is used. If a `KmsKeyId` is specified,
    # the `Encrypted` flag must also be set.

    # The CMK identifier may be provided in any of the following formats:

    #   * Key ID

    #   * Key alias

    #   * ARN using key ID. The ID ARN contains the `arn:aws:kms` namespace, followed by the region of the CMK, the AWS account ID of the CMK owner, the `key` namespace, and then the CMK ID. For example, arn:aws:kms: _us-east-1_ : _012345678910_ :key/ _abcd1234-a123-456a-a12b-a123b4cd56ef_.

    #   * ARN using key alias. The alias ARN contains the `arn:aws:kms` namespace, followed by the region of the CMK, the AWS account ID of the CMK owner, the `alias` namespace, and then the CMK alias. For example, arn:aws:kms: _us-east-1_ : _012345678910_ :alias/ _ExampleAlias_.

    # AWS parses `KmsKeyId` asynchronously, meaning that the action you call may
    # appear to complete even though you provided an invalid identifier. The
    # action will eventually fail.
    kms_key_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The size of the volume, in GiBs.

    # Constraints: 1-16384 for `gp2`, 4-16384 for `io1`, 500-16384 for `st1`,
    # 500-16384 for `sc1`, and 1-1024 for `standard`. If you specify a snapshot,
    # the volume size must be equal to or larger than the snapshot size.

    # Default: If you're creating the volume from a snapshot and don't specify a
    # volume size, the default is the snapshot size.
    size: int = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The snapshot from which to create the volume.
    snapshot_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The volume type. This can be `gp2` for General Purpose SSD, `io1` for
    # Provisioned IOPS SSD, `st1` for Throughput Optimized HDD, `sc1` for Cold
    # HDD, or `standard` for Magnetic volumes.

    # Defaults: If no volume type is specified, the default is `standard` in us-
    # east-1, eu-west-1, eu-central-1, us-west-2, us-west-1, sa-east-1, ap-
    # northeast-1, ap-northeast-2, ap-southeast-1, ap-southeast-2, ap-south-1,
    # us-gov-west-1, and cn-north-1. In all other regions, EBS defaults to `gp2`.
    volume_type: "VolumeType" = dataclasses.field(default=ShapeBase.NOT_SET, )

    # Checks whether you have the required permissions for the action, without
    # actually making the request, and provides an error response. If you have
    # the required permissions, the error response is `DryRunOperation`.
    # Otherwise, it is `UnauthorizedOperation`.
    dry_run: bool = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The tags to apply to the volume during creation.
    tag_specifications: typing.List["TagSpecification"] = dataclasses.field(
        default_factory=list,
    )


@dataclasses.dataclass
class CreateVpcEndpointConnectionNotificationRequest(ShapeBase):
    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "connection_notification_arn",
                "ConnectionNotificationArn",
                TypeInfo(str),
            ),
            (
                "connection_events",
                "ConnectionEvents",
                TypeInfo(typing.List[str]),
            ),
            (
                "dry_run",
                "DryRun",
                TypeInfo(bool),
            ),
            (
                "service_id",
                "ServiceId",
                TypeInfo(str),
            ),
            (
                "vpc_endpoint_id",
                "VpcEndpointId",
                TypeInfo(str),
            ),
            (
                "client_token",
                "ClientToken",
                TypeInfo(str),
            ),
        ]

    # The ARN of the SNS topic for the notifications.
    connection_notification_arn: str = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # One or more endpoint events for which to receive notifications. Valid
    # values are `Accept`, `Connect`, `Delete`, and `Reject`.
    connection_events: typing.List[str] = dataclasses.field(
        default_factory=list,
    )

    # Checks whether you have the required permissions for the action, without
    # actually making the request, and provides an error response. If you have
    # the required permissions, the error response is `DryRunOperation`.
    # Otherwise, it is `UnauthorizedOperation`.
    dry_run: bool = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The ID of the endpoint service.
    service_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The ID of the endpoint.
    vpc_endpoint_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # Unique, case-sensitive identifier you provide to ensure the idempotency of
    # the request. For more information, see [How to Ensure
    # Idempotency](http://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html).
    client_token: str = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class CreateVpcEndpointConnectionNotificationResult(OutputShapeBase):
    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "response_metadata",
                "ResponseMetadata",
                TypeInfo(typing.Dict[str, str]),
            ),
            (
                "connection_notification",
                "ConnectionNotification",
                TypeInfo(ConnectionNotification),
            ),
            (
                "client_token",
                "ClientToken",
                TypeInfo(str),
            ),
        ]

    response_metadata: typing.Dict[str, str] = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # Information about the notification.
    connection_notification: "ConnectionNotification" = dataclasses.field(
        default_factory=dict,
    )

    # Unique, case-sensitive identifier you provide to ensure the idempotency of
    # the request.
    client_token: str = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class CreateVpcEndpointRequest(ShapeBase):
    """
    Contains the parameters for CreateVpcEndpoint.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "vpc_id",
                "VpcId",
                TypeInfo(str),
            ),
            (
                "service_name",
                "ServiceName",
                TypeInfo(str),
            ),
            (
                "dry_run",
                "DryRun",
                TypeInfo(bool),
            ),
            (
                "vpc_endpoint_type",
                "VpcEndpointType",
                TypeInfo(VpcEndpointType),
            ),
            (
                "policy_document",
                "PolicyDocument",
                TypeInfo(str),
            ),
            (
                "route_table_ids",
                "RouteTableIds",
                TypeInfo(typing.List[str]),
            ),
            (
                "subnet_ids",
                "SubnetIds",
                TypeInfo(typing.List[str]),
            ),
            (
                "security_group_ids",
                "SecurityGroupIds",
                TypeInfo(typing.List[str]),
            ),
            (
                "client_token",
                "ClientToken",
                TypeInfo(str),
            ),
            (
                "private_dns_enabled",
                "PrivateDnsEnabled",
                TypeInfo(bool),
            ),
        ]

    # The ID of the VPC in which the endpoint will be used.
    vpc_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The service name. To get a list of available services, use the
    # DescribeVpcEndpointServices request, or get the name from the service
    # provider.
    service_name: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # Checks whether you have the required permissions for the action, without
    # actually making the request, and provides an error response. If you have
    # the required permissions, the error response is `DryRunOperation`.
    # Otherwise, it is `UnauthorizedOperation`.
    dry_run: bool = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The type of endpoint.

    # Default: Gateway
    vpc_endpoint_type: "VpcEndpointType" = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # (Gateway endpoint) A policy to attach to the endpoint that controls access
    # to the service. The policy must be in valid JSON format. If this parameter
    # is not specified, we attach a default policy that allows full access to the
    # service.
    policy_document: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # (Gateway endpoint) One or more route table IDs.
    route_table_ids: typing.List[str] = dataclasses.field(
        default_factory=list,
    )

    # (Interface endpoint) The ID of one or more subnets in which to create an
    # endpoint network interface.
    subnet_ids: typing.List[str] = dataclasses.field(default_factory=list, )

    # (Interface endpoint) The ID of one or more security groups to associate
    # with the endpoint network interface.
    security_group_ids: typing.List[str] = dataclasses.field(
        default_factory=list,
    )

    # Unique, case-sensitive identifier you provide to ensure the idempotency of
    # the request. For more information, see [How to Ensure
    # Idempotency](http://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html).
    client_token: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # (Interface endpoint) Indicate whether to associate a private hosted zone
    # with the specified VPC. The private hosted zone contains a record set for
    # the default public DNS name for the service for the region (for example,
    # `kinesis.us-east-1.amazonaws.com`) which resolves to the private IP
    # addresses of the endpoint network interfaces in the VPC. This enables you
    # to make requests to the default public DNS name for the service instead of
    # the public DNS names that are automatically generated by the VPC endpoint
    # service.

    # To use a private hosted zone, you must set the following VPC attributes to
    # `true`: `enableDnsHostnames` and `enableDnsSupport`. Use ModifyVpcAttribute
    # to set the VPC attributes.

    # Default: `true`
    private_dns_enabled: bool = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class CreateVpcEndpointResult(OutputShapeBase):
    """
    Contains the output of CreateVpcEndpoint.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "response_metadata",
                "ResponseMetadata",
                TypeInfo(typing.Dict[str, str]),
            ),
            (
                "vpc_endpoint",
                "VpcEndpoint",
                TypeInfo(VpcEndpoint),
            ),
            (
                "client_token",
                "ClientToken",
                TypeInfo(str),
            ),
        ]

    response_metadata: typing.Dict[str, str] = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # Information about the endpoint.
    vpc_endpoint: "VpcEndpoint" = dataclasses.field(default_factory=dict, )

    # Unique, case-sensitive identifier you provide to ensure the idempotency of
    # the request.
    client_token: str = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class CreateVpcEndpointServiceConfigurationRequest(ShapeBase):
    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "network_load_balancer_arns",
                "NetworkLoadBalancerArns",
                TypeInfo(typing.List[str]),
            ),
            (
                "dry_run",
                "DryRun",
                TypeInfo(bool),
            ),
            (
                "acceptance_required",
                "AcceptanceRequired",
                TypeInfo(bool),
            ),
            (
                "client_token",
                "ClientToken",
                TypeInfo(str),
            ),
        ]

    # The Amazon Resource Names (ARNs) of one or more Network Load Balancers for
    # your service.
    network_load_balancer_arns: typing.List[str] = dataclasses.field(
        default_factory=list,
    )

    # Checks whether you have the required permissions for the action, without
    # actually making the request, and provides an error response. If you have
    # the required permissions, the error response is `DryRunOperation`.
    # Otherwise, it is `UnauthorizedOperation`.
    dry_run: bool = dataclasses.field(default=ShapeBase.NOT_SET, )

    # Indicate whether requests from service consumers to create an endpoint to
    # your service must be accepted. To accept a request, use
    # AcceptVpcEndpointConnections.
    acceptance_required: bool = dataclasses.field(default=ShapeBase.NOT_SET, )

    # Unique, case-sensitive identifier you provide to ensure the idempotency of
    # the request. For more information, see [How to Ensure
    # Idempotency](http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Run_Instance_Idempotency.html).
    client_token: str = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class CreateVpcEndpointServiceConfigurationResult(OutputShapeBase):
    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "response_metadata",
                "ResponseMetadata",
                TypeInfo(typing.Dict[str, str]),
            ),
            (
                "service_configuration",
                "ServiceConfiguration",
                TypeInfo(ServiceConfiguration),
            ),
            (
                "client_token",
                "ClientToken",
                TypeInfo(str),
            ),
        ]

    response_metadata: typing.Dict[str, str] = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # Information about the service configuration.
    service_configuration: "ServiceConfiguration" = dataclasses.field(
        default_factory=dict,
    )

    # Unique, case-sensitive identifier you provide to ensure the idempotency of
    # the request.
    client_token: str = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class CreateVpcPeeringConnectionRequest(ShapeBase):
    """
    Contains the parameters for CreateVpcPeeringConnection.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "dry_run",
                "DryRun",
                TypeInfo(bool),
            ),
            (
                "peer_owner_id",
                "PeerOwnerId",
                TypeInfo(str),
            ),
            (
                "peer_vpc_id",
                "PeerVpcId",
                TypeInfo(str),
            ),
            (
                "vpc_id",
                "VpcId",
                TypeInfo(str),
            ),
            (
                "peer_region",
                "PeerRegion",
                TypeInfo(str),
            ),
        ]

    # Checks whether you have the required permissions for the action, without
    # actually making the request, and provides an error response. If you have
    # the required permissions, the error response is `DryRunOperation`.
    # Otherwise, it is `UnauthorizedOperation`.
    dry_run: bool = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The AWS account ID of the owner of the accepter VPC.

    # Default: Your AWS account ID
    peer_owner_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The ID of the VPC with which you are creating the VPC peering connection.
    # You must specify this parameter in the request.
    peer_vpc_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The ID of the requester VPC. You must specify this parameter in the
    # request.
    vpc_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The region code for the accepter VPC, if the accepter VPC is located in a
    # region other than the region in which you make the request.

    # Default: The region in which you make the request.
    peer_region: str = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class CreateVpcPeeringConnectionResult(OutputShapeBase):
    """
    Contains the output of CreateVpcPeeringConnection.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "response_metadata",
                "ResponseMetadata",
                TypeInfo(typing.Dict[str, str]),
            ),
            (
                "vpc_peering_connection",
                "VpcPeeringConnection",
                TypeInfo(VpcPeeringConnection),
            ),
        ]

    response_metadata: typing.Dict[str, str] = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # Information about the VPC peering connection.
    vpc_peering_connection: "VpcPeeringConnection" = dataclasses.field(
        default_factory=dict,
    )


@dataclasses.dataclass
class CreateVpcRequest(ShapeBase):
    """
    Contains the parameters for CreateVpc.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "cidr_block",
                "CidrBlock",
                TypeInfo(str),
            ),
            (
                "amazon_provided_ipv6_cidr_block",
                "AmazonProvidedIpv6CidrBlock",
                TypeInfo(bool),
            ),
            (
                "dry_run",
                "DryRun",
                TypeInfo(bool),
            ),
            (
                "instance_tenancy",
                "InstanceTenancy",
                TypeInfo(Tenancy),
            ),
        ]

    # The IPv4 network range for the VPC, in CIDR notation. For example,
    # `10.0.0.0/16`.
    cidr_block: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # Requests an Amazon-provided IPv6 CIDR block with a /56 prefix length for
    # the VPC. You cannot specify the range of IP addresses, or the size of the
    # CIDR block.
    amazon_provided_ipv6_cidr_block: bool = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # Checks whether you have the required permissions for the action, without
    # actually making the request, and provides an error response. If you have
    # the required permissions, the error response is `DryRunOperation`.
    # Otherwise, it is `UnauthorizedOperation`.
    dry_run: bool = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The tenancy options for instances launched into the VPC. For `default`,
    # instances are launched with shared tenancy by default. You can launch
    # instances with any tenancy into a shared tenancy VPC. For `dedicated`,
    # instances are launched as dedicated tenancy instances by default. You can
    # only launch instances with a tenancy of `dedicated` or `host` into a
    # dedicated tenancy VPC.

    # **Important:** The `host` value cannot be used with this parameter. Use the
    # `default` or `dedicated` values only.

    # Default: `default`
    instance_tenancy: "Tenancy" = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class CreateVpcResult(OutputShapeBase):
    """
    Contains the output of CreateVpc.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "response_metadata",
                "ResponseMetadata",
                TypeInfo(typing.Dict[str, str]),
            ),
            (
                "vpc",
                "Vpc",
                TypeInfo(Vpc),
            ),
        ]

    response_metadata: typing.Dict[str, str] = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # Information about the VPC.
    vpc: "Vpc" = dataclasses.field(default_factory=dict, )


@dataclasses.dataclass
class CreateVpnConnectionRequest(ShapeBase):
    """
    Contains the parameters for CreateVpnConnection.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "customer_gateway_id",
                "CustomerGatewayId",
                TypeInfo(str),
            ),
            (
                "type",
                "Type",
                TypeInfo(str),
            ),
            (
                "vpn_gateway_id",
                "VpnGatewayId",
                TypeInfo(str),
            ),
            (
                "dry_run",
                "DryRun",
                TypeInfo(bool),
            ),
            (
                "options",
                "Options",
                TypeInfo(VpnConnectionOptionsSpecification),
            ),
        ]

    # The ID of the customer gateway.
    customer_gateway_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The type of VPN connection (`ipsec.1`).
    type: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The ID of the virtual private gateway.
    vpn_gateway_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # Checks whether you have the required permissions for the action, without
    # actually making the request, and provides an error response. If you have
    # the required permissions, the error response is `DryRunOperation`.
    # Otherwise, it is `UnauthorizedOperation`.
    dry_run: bool = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The options for the VPN connection.
    options: "VpnConnectionOptionsSpecification" = dataclasses.field(
        default_factory=dict,
    )


@dataclasses.dataclass
class CreateVpnConnectionResult(OutputShapeBase):
    """
    Contains the output of CreateVpnConnection.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "response_metadata",
                "ResponseMetadata",
                TypeInfo(typing.Dict[str, str]),
            ),
            (
                "vpn_connection",
                "VpnConnection",
                TypeInfo(VpnConnection),
            ),
        ]

    response_metadata: typing.Dict[str, str] = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # Information about the VPN connection.
    vpn_connection: "VpnConnection" = dataclasses.field(default_factory=dict, )


@dataclasses.dataclass
class CreateVpnConnectionRouteRequest(ShapeBase):
    """
    Contains the parameters for CreateVpnConnectionRoute.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "destination_cidr_block",
                "DestinationCidrBlock",
                TypeInfo(str),
            ),
            (
                "vpn_connection_id",
                "VpnConnectionId",
                TypeInfo(str),
            ),
        ]

    # The CIDR block associated with the local subnet of the customer network.
    destination_cidr_block: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The ID of the VPN connection.
    vpn_connection_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class CreateVpnGatewayRequest(ShapeBase):
    """
    Contains the parameters for CreateVpnGateway.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "type",
                "Type",
                TypeInfo(GatewayType),
            ),
            (
                "availability_zone",
                "AvailabilityZone",
                TypeInfo(str),
            ),
            (
                "amazon_side_asn",
                "AmazonSideAsn",
                TypeInfo(int),
            ),
            (
                "dry_run",
                "DryRun",
                TypeInfo(bool),
            ),
        ]

    # The type of VPN connection this virtual private gateway supports.
    type: "GatewayType" = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The Availability Zone for the virtual private gateway.
    availability_zone: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # A private Autonomous System Number (ASN) for the Amazon side of a BGP
    # session. If you're using a 16-bit ASN, it must be in the 64512 to 65534
    # range. If you're using a 32-bit ASN, it must be in the 4200000000 to
    # 4294967294 range.

    # Default: 64512
    amazon_side_asn: int = dataclasses.field(default=ShapeBase.NOT_SET, )

    # Checks whether you have the required permissions for the action, without
    # actually making the request, and provides an error response. If you have
    # the required permissions, the error response is `DryRunOperation`.
    # Otherwise, it is `UnauthorizedOperation`.
    dry_run: bool = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class CreateVpnGatewayResult(OutputShapeBase):
    """
    Contains the output of CreateVpnGateway.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "response_metadata",
                "ResponseMetadata",
                TypeInfo(typing.Dict[str, str]),
            ),
            (
                "vpn_gateway",
                "VpnGateway",
                TypeInfo(VpnGateway),
            ),
        ]

    response_metadata: typing.Dict[str, str] = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # Information about the virtual private gateway.
    vpn_gateway: "VpnGateway" = dataclasses.field(default_factory=dict, )


@dataclasses.dataclass
class CreditSpecification(ShapeBase):
    """
    Describes the credit option for CPU usage of a T2 instance.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "cpu_credits",
                "CpuCredits",
                TypeInfo(str),
            ),
        ]

    # The credit option for CPU usage of a T2 instance. Valid values are
    # `standard` and `unlimited`.
    cpu_credits: str = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class CreditSpecificationRequest(ShapeBase):
    """
    The credit option for CPU usage of a T2 instance.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "cpu_credits",
                "CpuCredits",
                TypeInfo(str),
            ),
        ]

    # The credit option for CPU usage of a T2 instance. Valid values are
    # `standard` and `unlimited`.
    cpu_credits: str = dataclasses.field(default=ShapeBase.NOT_SET, )


class CurrencyCodeValues(Enum):
    USD = "USD"


@dataclasses.dataclass
class CustomerGateway(ShapeBase):
    """
    Describes a customer gateway.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "bgp_asn",
                "BgpAsn",
                TypeInfo(str),
            ),
            (
                "customer_gateway_id",
                "CustomerGatewayId",
                TypeInfo(str),
            ),
            (
                "ip_address",
                "IpAddress",
                TypeInfo(str),
            ),
            (
                "state",
                "State",
                TypeInfo(str),
            ),
            (
                "type",
                "Type",
                TypeInfo(str),
            ),
            (
                "tags",
                "Tags",
                TypeInfo(typing.List[Tag]),
            ),
        ]

    # The customer gateway's Border Gateway Protocol (BGP) Autonomous System
    # Number (ASN).
    bgp_asn: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The ID of the customer gateway.
    customer_gateway_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The Internet-routable IP address of the customer gateway's outside
    # interface.
    ip_address: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The current state of the customer gateway (`pending | available | deleting
    # | deleted`).
    state: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The type of VPN connection the customer gateway supports (`ipsec.1`).
    type: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # Any tags assigned to the customer gateway.
    tags: typing.List["Tag"] = dataclasses.field(default_factory=list, )


class DatafeedSubscriptionState(Enum):
    Active = "Active"
    Inactive = "Inactive"


class DefaultTargetCapacityType(Enum):
    spot = "spot"
    on_demand = "on-demand"


@dataclasses.dataclass
class DeleteCustomerGatewayRequest(ShapeBase):
    """
    Contains the parameters for DeleteCustomerGateway.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "customer_gateway_id",
                "CustomerGatewayId",
                TypeInfo(str),
            ),
            (
                "dry_run",
                "DryRun",
                TypeInfo(bool),
            ),
        ]

    # The ID of the customer gateway.
    customer_gateway_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # Checks whether you have the required permissions for the action, without
    # actually making the request, and provides an error response. If you have
    # the required permissions, the error response is `DryRunOperation`.
    # Otherwise, it is `UnauthorizedOperation`.
    dry_run: bool = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class DeleteDhcpOptionsRequest(ShapeBase):
    """
    Contains the parameters for DeleteDhcpOptions.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "dhcp_options_id",
                "DhcpOptionsId",
                TypeInfo(str),
            ),
            (
                "dry_run",
                "DryRun",
                TypeInfo(bool),
            ),
        ]

    # The ID of the DHCP options set.
    dhcp_options_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # Checks whether you have the required permissions for the action, without
    # actually making the request, and provides an error response. If you have
    # the required permissions, the error response is `DryRunOperation`.
    # Otherwise, it is `UnauthorizedOperation`.
    dry_run: bool = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class DeleteEgressOnlyInternetGatewayRequest(ShapeBase):
    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "egress_only_internet_gateway_id",
                "EgressOnlyInternetGatewayId",
                TypeInfo(str),
            ),
            (
                "dry_run",
                "DryRun",
                TypeInfo(bool),
            ),
        ]

    # The ID of the egress-only internet gateway.
    egress_only_internet_gateway_id: str = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # Checks whether you have the required permissions for the action, without
    # actually making the request, and provides an error response. If you have
    # the required permissions, the error response is `DryRunOperation`.
    # Otherwise, it is `UnauthorizedOperation`.
    dry_run: bool = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class DeleteEgressOnlyInternetGatewayResult(OutputShapeBase):
    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "response_metadata",
                "ResponseMetadata",
                TypeInfo(typing.Dict[str, str]),
            ),
            (
                "return_code",
                "ReturnCode",
                TypeInfo(bool),
            ),
        ]

    response_metadata: typing.Dict[str, str] = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # Returns `true` if the request succeeds; otherwise, it returns an error.
    return_code: bool = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class DeleteFleetError(ShapeBase):
    """
    Describes an EC2 Fleet error.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "code",
                "Code",
                TypeInfo(DeleteFleetErrorCode),
            ),
            (
                "message",
                "Message",
                TypeInfo(str),
            ),
        ]

    # The error code.
    code: "DeleteFleetErrorCode" = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # The description for the error code.
    message: str = dataclasses.field(default=ShapeBase.NOT_SET, )


class DeleteFleetErrorCode(Enum):
    fleetIdDoesNotExist = "fleetIdDoesNotExist"
    fleetIdMalformed = "fleetIdMalformed"
    fleetNotInDeletableState = "fleetNotInDeletableState"
    unexpectedError = "unexpectedError"


@dataclasses.dataclass
class DeleteFleetErrorItem(ShapeBase):
    """
    Describes an EC2 Fleet that was not successfully deleted.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "error",
                "Error",
                TypeInfo(DeleteFleetError),
            ),
            (
                "fleet_id",
                "FleetId",
                TypeInfo(str),
            ),
        ]

    # The error.
    error: "DeleteFleetError" = dataclasses.field(default_factory=dict, )

    # The ID of the EC2 Fleet.
    fleet_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class DeleteFleetSuccessItem(ShapeBase):
    """
    Describes an EC2 Fleet that was successfully deleted.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "current_fleet_state",
                "CurrentFleetState",
                TypeInfo(FleetStateCode),
            ),
            (
                "previous_fleet_state",
                "PreviousFleetState",
                TypeInfo(FleetStateCode),
            ),
            (
                "fleet_id",
                "FleetId",
                TypeInfo(str),
            ),
        ]

    # The current state of the EC2 Fleet.
    current_fleet_state: "FleetStateCode" = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # The previous state of the EC2 Fleet.
    previous_fleet_state: "FleetStateCode" = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # The ID of the EC2 Fleet.
    fleet_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class DeleteFleetsRequest(ShapeBase):
    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "fleet_ids",
                "FleetIds",
                TypeInfo(typing.List[str]),
            ),
            (
                "terminate_instances",
                "TerminateInstances",
                TypeInfo(bool),
            ),
            (
                "dry_run",
                "DryRun",
                TypeInfo(bool),
            ),
        ]

    # The IDs of the EC2 Fleets.
    fleet_ids: typing.List[str] = dataclasses.field(default_factory=list, )

    # Indicates whether to terminate instances for an EC2 Fleet if it is deleted
    # successfully.
    terminate_instances: bool = dataclasses.field(default=ShapeBase.NOT_SET, )

    # Checks whether you have the required permissions for the action, without
    # actually making the request, and provides an error response. If you have
    # the required permissions, the error response is `DryRunOperation`.
    # Otherwise, it is `UnauthorizedOperation`.
    dry_run: bool = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class DeleteFleetsResult(OutputShapeBase):
    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "response_metadata",
                "ResponseMetadata",
                TypeInfo(typing.Dict[str, str]),
            ),
            (
                "successful_fleet_deletions",
                "SuccessfulFleetDeletions",
                TypeInfo(typing.List[DeleteFleetSuccessItem]),
            ),
            (
                "unsuccessful_fleet_deletions",
                "UnsuccessfulFleetDeletions",
                TypeInfo(typing.List[DeleteFleetErrorItem]),
            ),
        ]

    response_metadata: typing.Dict[str, str] = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # Information about the EC2 Fleets that are successfully deleted.
    successful_fleet_deletions: typing.List["DeleteFleetSuccessItem"
                                           ] = dataclasses.field(
                                               default_factory=list,
                                           )

    # Information about the EC2 Fleets that are not successfully deleted.
    unsuccessful_fleet_deletions: typing.List["DeleteFleetErrorItem"
                                             ] = dataclasses.field(
                                                 default_factory=list,
                                             )


@dataclasses.dataclass
class DeleteFlowLogsRequest(ShapeBase):
    """
    Contains the parameters for DeleteFlowLogs.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "flow_log_ids",
                "FlowLogIds",
                TypeInfo(typing.List[str]),
            ),
            (
                "dry_run",
                "DryRun",
                TypeInfo(bool),
            ),
        ]

    # One or more flow log IDs.
    flow_log_ids: typing.List[str] = dataclasses.field(default_factory=list, )

    # Checks whether you have the required permissions for the action, without
    # actually making the request, and provides an error response. If you have
    # the required permissions, the error response is `DryRunOperation`.
    # Otherwise, it is `UnauthorizedOperation`.
    dry_run: bool = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class DeleteFlowLogsResult(OutputShapeBase):
    """
    Contains the output of DeleteFlowLogs.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "response_metadata",
                "ResponseMetadata",
                TypeInfo(typing.Dict[str, str]),
            ),
            (
                "unsuccessful",
                "Unsuccessful",
                TypeInfo(typing.List[UnsuccessfulItem]),
            ),
        ]

    response_metadata: typing.Dict[str, str] = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # Information about the flow logs that could not be deleted successfully.
    unsuccessful: typing.List["UnsuccessfulItem"] = dataclasses.field(
        default_factory=list,
    )


@dataclasses.dataclass
class DeleteFpgaImageRequest(ShapeBase):
    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "fpga_image_id",
                "FpgaImageId",
                TypeInfo(str),
            ),
            (
                "dry_run",
                "DryRun",
                TypeInfo(bool),
            ),
        ]

    # The ID of the AFI.
    fpga_image_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # Checks whether you have the required permissions for the action, without
    # actually making the request, and provides an error response. If you have
    # the required permissions, the error response is `DryRunOperation`.
    # Otherwise, it is `UnauthorizedOperation`.
    dry_run: bool = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class DeleteFpgaImageResult(OutputShapeBase):
    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "response_metadata",
                "ResponseMetadata",
                TypeInfo(typing.Dict[str, str]),
            ),
            (
                "return_",
                "Return",
                TypeInfo(bool),
            ),
        ]

    response_metadata: typing.Dict[str, str] = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # Is `true` if the request succeeds, and an error otherwise.
    return_: bool = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class DeleteInternetGatewayRequest(ShapeBase):
    """
    Contains the parameters for DeleteInternetGateway.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "internet_gateway_id",
                "InternetGatewayId",
                TypeInfo(str),
            ),
            (
                "dry_run",
                "DryRun",
                TypeInfo(bool),
            ),
        ]

    # The ID of the internet gateway.
    internet_gateway_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # Checks whether you have the required permissions for the action, without
    # actually making the request, and provides an error response. If you have
    # the required permissions, the error response is `DryRunOperation`.
    # Otherwise, it is `UnauthorizedOperation`.
    dry_run: bool = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class DeleteKeyPairRequest(ShapeBase):
    """
    Contains the parameters for DeleteKeyPair.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "key_name",
                "KeyName",
                TypeInfo(str),
            ),
            (
                "dry_run",
                "DryRun",
                TypeInfo(bool),
            ),
        ]

    # The name of the key pair.
    key_name: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # Checks whether you have the required permissions for the action, without
    # actually making the request, and provides an error response. If you have
    # the required permissions, the error response is `DryRunOperation`.
    # Otherwise, it is `UnauthorizedOperation`.
    dry_run: bool = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class DeleteLaunchTemplateRequest(ShapeBase):
    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "dry_run",
                "DryRun",
                TypeInfo(bool),
            ),
            (
                "launch_template_id",
                "LaunchTemplateId",
                TypeInfo(str),
            ),
            (
                "launch_template_name",
                "LaunchTemplateName",
                TypeInfo(str),
            ),
        ]

    # Checks whether you have the required permissions for the action, without
    # actually making the request, and provides an error response. If you have
    # the required permissions, the error response is `DryRunOperation`.
    # Otherwise, it is `UnauthorizedOperation`.
    dry_run: bool = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The ID of the launch template. You must specify either the launch template
    # ID or launch template name in the request.
    launch_template_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The name of the launch template. You must specify either the launch
    # template ID or launch template name in the request.
    launch_template_name: str = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class DeleteLaunchTemplateResult(OutputShapeBase):
    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "response_metadata",
                "ResponseMetadata",
                TypeInfo(typing.Dict[str, str]),
            ),
            (
                "launch_template",
                "LaunchTemplate",
                TypeInfo(LaunchTemplate),
            ),
        ]

    response_metadata: typing.Dict[str, str] = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # Information about the launch template.
    launch_template: "LaunchTemplate" = dataclasses.field(
        default_factory=dict,
    )


@dataclasses.dataclass
class DeleteLaunchTemplateVersionsRequest(ShapeBase):
    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "versions",
                "Versions",
                TypeInfo(typing.List[str]),
            ),
            (
                "dry_run",
                "DryRun",
                TypeInfo(bool),
            ),
            (
                "launch_template_id",
                "LaunchTemplateId",
                TypeInfo(str),
            ),
            (
                "launch_template_name",
                "LaunchTemplateName",
                TypeInfo(str),
            ),
        ]

    # The version numbers of one or more launch template versions to delete.
    versions: typing.List[str] = dataclasses.field(default_factory=list, )

    # Checks whether you have the required permissions for the action, without
    # actually making the request, and provides an error response. If you have
    # the required permissions, the error response is `DryRunOperation`.
    # Otherwise, it is `UnauthorizedOperation`.
    dry_run: bool = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The ID of the launch template. You must specify either the launch template
    # ID or launch template name in the request.
    launch_template_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The name of the launch template. You must specify either the launch
    # template ID or launch template name in the request.
    launch_template_name: str = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class DeleteLaunchTemplateVersionsResponseErrorItem(ShapeBase):
    """
    Describes a launch template version that could not be deleted.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "launch_template_id",
                "LaunchTemplateId",
                TypeInfo(str),
            ),
            (
                "launch_template_name",
                "LaunchTemplateName",
                TypeInfo(str),
            ),
            (
                "version_number",
                "VersionNumber",
                TypeInfo(int),
            ),
            (
                "response_error",
                "ResponseError",
                TypeInfo(ResponseError),
            ),
        ]

    # The ID of the launch template.
    launch_template_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The name of the launch template.
    launch_template_name: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The version number of the launch template.
    version_number: int = dataclasses.field(default=ShapeBase.NOT_SET, )

    # Information about the error.
    response_error: "ResponseError" = dataclasses.field(default_factory=dict, )


@dataclasses.dataclass
class DeleteLaunchTemplateVersionsResponseSuccessItem(ShapeBase):
    """
    Describes a launch template version that was successfully deleted.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "launch_template_id",
                "LaunchTemplateId",
                TypeInfo(str),
            ),
            (
                "launch_template_name",
                "LaunchTemplateName",
                TypeInfo(str),
            ),
            (
                "version_number",
                "VersionNumber",
                TypeInfo(int),
            ),
        ]

    # The ID of the launch template.
    launch_template_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The name of the launch template.
    launch_template_name: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The version number of the launch template.
    version_number: int = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class DeleteLaunchTemplateVersionsResult(OutputShapeBase):
    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "response_metadata",
                "ResponseMetadata",
                TypeInfo(typing.Dict[str, str]),
            ),
            (
                "successfully_deleted_launch_template_versions",
                "SuccessfullyDeletedLaunchTemplateVersions",
                TypeInfo(
                    typing.List[DeleteLaunchTemplateVersionsResponseSuccessItem]
                ),
            ),
            (
                "unsuccessfully_deleted_launch_template_versions",
                "UnsuccessfullyDeletedLaunchTemplateVersions",
                TypeInfo(
                    typing.List[DeleteLaunchTemplateVersionsResponseErrorItem]
                ),
            ),
        ]

    response_metadata: typing.Dict[str, str] = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # Information about the launch template versions that were successfully
    # deleted.
    successfully_deleted_launch_template_versions: typing.List[
        "DeleteLaunchTemplateVersionsResponseSuccessItem"
    ] = dataclasses.field(
        default_factory=list,
    )

    # Information about the launch template versions that could not be deleted.
    unsuccessfully_deleted_launch_template_versions: typing.List[
        "DeleteLaunchTemplateVersionsResponseErrorItem"
    ] = dataclasses.field(
        default_factory=list,
    )


@dataclasses.dataclass
class DeleteNatGatewayRequest(ShapeBase):
    """
    Contains the parameters for DeleteNatGateway.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "nat_gateway_id",
                "NatGatewayId",
                TypeInfo(str),
            ),
        ]

    # The ID of the NAT gateway.
    nat_gateway_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class DeleteNatGatewayResult(OutputShapeBase):
    """
    Contains the output of DeleteNatGateway.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "response_metadata",
                "ResponseMetadata",
                TypeInfo(typing.Dict[str, str]),
            ),
            (
                "nat_gateway_id",
                "NatGatewayId",
                TypeInfo(str),
            ),
        ]

    response_metadata: typing.Dict[str, str] = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # The ID of the NAT gateway.
    nat_gateway_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class DeleteNetworkAclEntryRequest(ShapeBase):
    """
    Contains the parameters for DeleteNetworkAclEntry.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "egress",
                "Egress",
                TypeInfo(bool),
            ),
            (
                "network_acl_id",
                "NetworkAclId",
                TypeInfo(str),
            ),
            (
                "rule_number",
                "RuleNumber",
                TypeInfo(int),
            ),
            (
                "dry_run",
                "DryRun",
                TypeInfo(bool),
            ),
        ]

    # Indicates whether the rule is an egress rule.
    egress: bool = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The ID of the network ACL.
    network_acl_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The rule number of the entry to delete.
    rule_number: int = dataclasses.field(default=ShapeBase.NOT_SET, )

    # Checks whether you have the required permissions for the action, without
    # actually making the request, and provides an error response. If you have
    # the required permissions, the error response is `DryRunOperation`.
    # Otherwise, it is `UnauthorizedOperation`.
    dry_run: bool = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class DeleteNetworkAclRequest(ShapeBase):
    """
    Contains the parameters for DeleteNetworkAcl.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "network_acl_id",
                "NetworkAclId",
                TypeInfo(str),
            ),
            (
                "dry_run",
                "DryRun",
                TypeInfo(bool),
            ),
        ]

    # The ID of the network ACL.
    network_acl_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # Checks whether you have the required permissions for the action, without
    # actually making the request, and provides an error response. If you have
    # the required permissions, the error response is `DryRunOperation`.
    # Otherwise, it is `UnauthorizedOperation`.
    dry_run: bool = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class DeleteNetworkInterfacePermissionRequest(ShapeBase):
    """
    Contains the parameters for DeleteNetworkInterfacePermission.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "network_interface_permission_id",
                "NetworkInterfacePermissionId",
                TypeInfo(str),
            ),
            (
                "force",
                "Force",
                TypeInfo(bool),
            ),
            (
                "dry_run",
                "DryRun",
                TypeInfo(bool),
            ),
        ]

    # The ID of the network interface permission.
    network_interface_permission_id: str = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # Specify `true` to remove the permission even if the network interface is
    # attached to an instance.
    force: bool = dataclasses.field(default=ShapeBase.NOT_SET, )

    # Checks whether you have the required permissions for the action, without
    # actually making the request, and provides an error response. If you have
    # the required permissions, the error response is `DryRunOperation`.
    # Otherwise, it is `UnauthorizedOperation`.
    dry_run: bool = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class DeleteNetworkInterfacePermissionResult(OutputShapeBase):
    """
    Contains the output for DeleteNetworkInterfacePermission.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "response_metadata",
                "ResponseMetadata",
                TypeInfo(typing.Dict[str, str]),
            ),
            (
                "return_",
                "Return",
                TypeInfo(bool),
            ),
        ]

    response_metadata: typing.Dict[str, str] = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # Returns `true` if the request succeeds, otherwise returns an error.
    return_: bool = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class DeleteNetworkInterfaceRequest(ShapeBase):
    """
    Contains the parameters for DeleteNetworkInterface.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "network_interface_id",
                "NetworkInterfaceId",
                TypeInfo(str),
            ),
            (
                "dry_run",
                "DryRun",
                TypeInfo(bool),
            ),
        ]

    # The ID of the network interface.
    network_interface_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # Checks whether you have the required permissions for the action, without
    # actually making the request, and provides an error response. If you have
    # the required permissions, the error response is `DryRunOperation`.
    # Otherwise, it is `UnauthorizedOperation`.
    dry_run: bool = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class DeletePlacementGroupRequest(ShapeBase):
    """
    Contains the parameters for DeletePlacementGroup.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "group_name",
                "GroupName",
                TypeInfo(str),
            ),
            (
                "dry_run",
                "DryRun",
                TypeInfo(bool),
            ),
        ]

    # The name of the placement group.
    group_name: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # Checks whether you have the required permissions for the action, without
    # actually making the request, and provides an error response. If you have
    # the required permissions, the error response is `DryRunOperation`.
    # Otherwise, it is `UnauthorizedOperation`.
    dry_run: bool = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class DeleteRouteRequest(ShapeBase):
    """
    Contains the parameters for DeleteRoute.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "route_table_id",
                "RouteTableId",
                TypeInfo(str),
            ),
            (
                "destination_cidr_block",
                "DestinationCidrBlock",
                TypeInfo(str),
            ),
            (
                "destination_ipv6_cidr_block",
                "DestinationIpv6CidrBlock",
                TypeInfo(str),
            ),
            (
                "dry_run",
                "DryRun",
                TypeInfo(bool),
            ),
        ]

    # The ID of the route table.
    route_table_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The IPv4 CIDR range for the route. The value you specify must match the
    # CIDR for the route exactly.
    destination_cidr_block: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The IPv6 CIDR range for the route. The value you specify must match the
    # CIDR for the route exactly.
    destination_ipv6_cidr_block: str = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # Checks whether you have the required permissions for the action, without
    # actually making the request, and provides an error response. If you have
    # the required permissions, the error response is `DryRunOperation`.
    # Otherwise, it is `UnauthorizedOperation`.
    dry_run: bool = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class DeleteRouteTableRequest(ShapeBase):
    """
    Contains the parameters for DeleteRouteTable.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "route_table_id",
                "RouteTableId",
                TypeInfo(str),
            ),
            (
                "dry_run",
                "DryRun",
                TypeInfo(bool),
            ),
        ]

    # The ID of the route table.
    route_table_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # Checks whether you have the required permissions for the action, without
    # actually making the request, and provides an error response. If you have
    # the required permissions, the error response is `DryRunOperation`.
    # Otherwise, it is `UnauthorizedOperation`.
    dry_run: bool = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class DeleteSecurityGroupRequest(ShapeBase):
    """
    Contains the parameters for DeleteSecurityGroup.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "group_id",
                "GroupId",
                TypeInfo(str),
            ),
            (
                "group_name",
                "GroupName",
                TypeInfo(str),
            ),
            (
                "dry_run",
                "DryRun",
                TypeInfo(bool),
            ),
        ]

    # The ID of the security group. Required for a nondefault VPC.
    group_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # [EC2-Classic, default VPC] The name of the security group. You can specify
    # either the security group name or the security group ID.
    group_name: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # Checks whether you have the required permissions for the action, without
    # actually making the request, and provides an error response. If you have
    # the required permissions, the error response is `DryRunOperation`.
    # Otherwise, it is `UnauthorizedOperation`.
    dry_run: bool = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class DeleteSnapshotRequest(ShapeBase):
    """
    Contains the parameters for DeleteSnapshot.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "snapshot_id",
                "SnapshotId",
                TypeInfo(str),
            ),
            (
                "dry_run",
                "DryRun",
                TypeInfo(bool),
            ),
        ]

    # The ID of the EBS snapshot.
    snapshot_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # Checks whether you have the required permissions for the action, without
    # actually making the request, and provides an error response. If you have
    # the required permissions, the error response is `DryRunOperation`.
    # Otherwise, it is `UnauthorizedOperation`.
    dry_run: bool = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class DeleteSpotDatafeedSubscriptionRequest(ShapeBase):
    """
    Contains the parameters for DeleteSpotDatafeedSubscription.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "dry_run",
                "DryRun",
                TypeInfo(bool),
            ),
        ]

    # Checks whether you have the required permissions for the action, without
    # actually making the request, and provides an error response. If you have
    # the required permissions, the error response is `DryRunOperation`.
    # Otherwise, it is `UnauthorizedOperation`.
    dry_run: bool = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class DeleteSubnetRequest(ShapeBase):
    """
    Contains the parameters for DeleteSubnet.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "subnet_id",
                "SubnetId",
                TypeInfo(str),
            ),
            (
                "dry_run",
                "DryRun",
                TypeInfo(bool),
            ),
        ]

    # The ID of the subnet.
    subnet_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # Checks whether you have the required permissions for the action, without
    # actually making the request, and provides an error response. If you have
    # the required permissions, the error response is `DryRunOperation`.
    # Otherwise, it is `UnauthorizedOperation`.
    dry_run: bool = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class DeleteTagsRequest(ShapeBase):
    """
    Contains the parameters for DeleteTags.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "resources",
                "Resources",
                TypeInfo(typing.List[str]),
            ),
            (
                "dry_run",
                "DryRun",
                TypeInfo(bool),
            ),
            (
                "tags",
                "Tags",
                TypeInfo(typing.List[Tag]),
            ),
        ]

    # The IDs of one or more resources.
    resources: typing.List[str] = dataclasses.field(default_factory=list, )

    # Checks whether you have the required permissions for the action, without
    # actually making the request, and provides an error response. If you have
    # the required permissions, the error response is `DryRunOperation`.
    # Otherwise, it is `UnauthorizedOperation`.
    dry_run: bool = dataclasses.field(default=ShapeBase.NOT_SET, )

    # One or more tags to delete. Specify a tag key and an optional tag value to
    # delete specific tags. If you specify a tag key without a tag value, we
    # delete any tag with this key regardless of its value. If you specify a tag
    # key with an empty string as the tag value, we delete the tag only if its
    # value is an empty string.

    # If you omit this parameter, we delete all user-defined tags for the
    # specified resources. We do not delete AWS-generated tags (tags that have
    # the `aws:` prefix).
    tags: typing.List["Tag"] = dataclasses.field(default_factory=list, )


@dataclasses.dataclass
class DeleteVolumeRequest(ShapeBase):
    """
    Contains the parameters for DeleteVolume.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "volume_id",
                "VolumeId",
                TypeInfo(str),
            ),
            (
                "dry_run",
                "DryRun",
                TypeInfo(bool),
            ),
        ]

    # The ID of the volume.
    volume_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # Checks whether you have the required permissions for the action, without
    # actually making the request, and provides an error response. If you have
    # the required permissions, the error response is `DryRunOperation`.
    # Otherwise, it is `UnauthorizedOperation`.
    dry_run: bool = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class DeleteVpcEndpointConnectionNotificationsRequest(ShapeBase):
    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "connection_notification_ids",
                "ConnectionNotificationIds",
                TypeInfo(typing.List[str]),
            ),
            (
                "dry_run",
                "DryRun",
                TypeInfo(bool),
            ),
        ]

    # One or more notification IDs.
    connection_notification_ids: typing.List[str] = dataclasses.field(
        default_factory=list,
    )

    # Checks whether you have the required permissions for the action, without
    # actually making the request, and provides an error response. If you have
    # the required permissions, the error response is `DryRunOperation`.
    # Otherwise, it is `UnauthorizedOperation`.
    dry_run: bool = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class DeleteVpcEndpointConnectionNotificationsResult(OutputShapeBase):
    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "response_metadata",
                "ResponseMetadata",
                TypeInfo(typing.Dict[str, str]),
            ),
            (
                "unsuccessful",
                "Unsuccessful",
                TypeInfo(typing.List[UnsuccessfulItem]),
            ),
        ]

    response_metadata: typing.Dict[str, str] = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # Information about the notifications that could not be deleted successfully.
    unsuccessful: typing.List["UnsuccessfulItem"] = dataclasses.field(
        default_factory=list,
    )


@dataclasses.dataclass
class DeleteVpcEndpointServiceConfigurationsRequest(ShapeBase):
    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "service_ids",
                "ServiceIds",
                TypeInfo(typing.List[str]),
            ),
            (
                "dry_run",
                "DryRun",
                TypeInfo(bool),
            ),
        ]

    # The IDs of one or more services.
    service_ids: typing.List[str] = dataclasses.field(default_factory=list, )

    # Checks whether you have the required permissions for the action, without
    # actually making the request, and provides an error response. If you have
    # the required permissions, the error response is `DryRunOperation`.
    # Otherwise, it is `UnauthorizedOperation`.
    dry_run: bool = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class DeleteVpcEndpointServiceConfigurationsResult(OutputShapeBase):
    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "response_metadata",
                "ResponseMetadata",
                TypeInfo(typing.Dict[str, str]),
            ),
            (
                "unsuccessful",
                "Unsuccessful",
                TypeInfo(typing.List[UnsuccessfulItem]),
            ),
        ]

    response_metadata: typing.Dict[str, str] = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # Information about the service configurations that were not deleted, if
    # applicable.
    unsuccessful: typing.List["UnsuccessfulItem"] = dataclasses.field(
        default_factory=list,
    )


@dataclasses.dataclass
class DeleteVpcEndpointsRequest(ShapeBase):
    """
    Contains the parameters for DeleteVpcEndpoints.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "vpc_endpoint_ids",
                "VpcEndpointIds",
                TypeInfo(typing.List[str]),
            ),
            (
                "dry_run",
                "DryRun",
                TypeInfo(bool),
            ),
        ]

    # One or more VPC endpoint IDs.
    vpc_endpoint_ids: typing.List[str] = dataclasses.field(
        default_factory=list,
    )

    # Checks whether you have the required permissions for the action, without
    # actually making the request, and provides an error response. If you have
    # the required permissions, the error response is `DryRunOperation`.
    # Otherwise, it is `UnauthorizedOperation`.
    dry_run: bool = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class DeleteVpcEndpointsResult(OutputShapeBase):
    """
    Contains the output of DeleteVpcEndpoints.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "response_metadata",
                "ResponseMetadata",
                TypeInfo(typing.Dict[str, str]),
            ),
            (
                "unsuccessful",
                "Unsuccessful",
                TypeInfo(typing.List[UnsuccessfulItem]),
            ),
        ]

    response_metadata: typing.Dict[str, str] = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # Information about the VPC endpoints that were not successfully deleted.
    unsuccessful: typing.List["UnsuccessfulItem"] = dataclasses.field(
        default_factory=list,
    )


@dataclasses.dataclass
class DeleteVpcPeeringConnectionRequest(ShapeBase):
    """
    Contains the parameters for DeleteVpcPeeringConnection.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "vpc_peering_connection_id",
                "VpcPeeringConnectionId",
                TypeInfo(str),
            ),
            (
                "dry_run",
                "DryRun",
                TypeInfo(bool),
            ),
        ]

    # The ID of the VPC peering connection.
    vpc_peering_connection_id: str = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # Checks whether you have the required permissions for the action, without
    # actually making the request, and provides an error response. If you have
    # the required permissions, the error response is `DryRunOperation`.
    # Otherwise, it is `UnauthorizedOperation`.
    dry_run: bool = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class DeleteVpcPeeringConnectionResult(OutputShapeBase):
    """
    Contains the output of DeleteVpcPeeringConnection.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "response_metadata",
                "ResponseMetadata",
                TypeInfo(typing.Dict[str, str]),
            ),
            (
                "return_",
                "Return",
                TypeInfo(bool),
            ),
        ]

    response_metadata: typing.Dict[str, str] = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # Returns `true` if the request succeeds; otherwise, it returns an error.
    return_: bool = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class DeleteVpcRequest(ShapeBase):
    """
    Contains the parameters for DeleteVpc.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "vpc_id",
                "VpcId",
                TypeInfo(str),
            ),
            (
                "dry_run",
                "DryRun",
                TypeInfo(bool),
            ),
        ]

    # The ID of the VPC.
    vpc_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # Checks whether you have the required permissions for the action, without
    # actually making the request, and provides an error response. If you have
    # the required permissions, the error response is `DryRunOperation`.
    # Otherwise, it is `UnauthorizedOperation`.
    dry_run: bool = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class DeleteVpnConnectionRequest(ShapeBase):
    """
    Contains the parameters for DeleteVpnConnection.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "vpn_connection_id",
                "VpnConnectionId",
                TypeInfo(str),
            ),
            (
                "dry_run",
                "DryRun",
                TypeInfo(bool),
            ),
        ]

    # The ID of the VPN connection.
    vpn_connection_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # Checks whether you have the required permissions for the action, without
    # actually making the request, and provides an error response. If you have
    # the required permissions, the error response is `DryRunOperation`.
    # Otherwise, it is `UnauthorizedOperation`.
    dry_run: bool = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class DeleteVpnConnectionRouteRequest(ShapeBase):
    """
    Contains the parameters for DeleteVpnConnectionRoute.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "destination_cidr_block",
                "DestinationCidrBlock",
                TypeInfo(str),
            ),
            (
                "vpn_connection_id",
                "VpnConnectionId",
                TypeInfo(str),
            ),
        ]

    # The CIDR block associated with the local subnet of the customer network.
    destination_cidr_block: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The ID of the VPN connection.
    vpn_connection_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class DeleteVpnGatewayRequest(ShapeBase):
    """
    Contains the parameters for DeleteVpnGateway.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "vpn_gateway_id",
                "VpnGatewayId",
                TypeInfo(str),
            ),
            (
                "dry_run",
                "DryRun",
                TypeInfo(bool),
            ),
        ]

    # The ID of the virtual private gateway.
    vpn_gateway_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # Checks whether you have the required permissions for the action, without
    # actually making the request, and provides an error response. If you have
    # the required permissions, the error response is `DryRunOperation`.
    # Otherwise, it is `UnauthorizedOperation`.
    dry_run: bool = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class DeregisterImageRequest(ShapeBase):
    """
    Contains the parameters for DeregisterImage.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "image_id",
                "ImageId",
                TypeInfo(str),
            ),
            (
                "dry_run",
                "DryRun",
                TypeInfo(bool),
            ),
        ]

    # The ID of the AMI.
    image_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # Checks whether you have the required permissions for the action, without
    # actually making the request, and provides an error response. If you have
    # the required permissions, the error response is `DryRunOperation`.
    # Otherwise, it is `UnauthorizedOperation`.
    dry_run: bool = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class DescribeAccountAttributesRequest(ShapeBase):
    """
    Contains the parameters for DescribeAccountAttributes.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "attribute_names",
                "AttributeNames",
                TypeInfo(typing.List[AccountAttributeName]),
            ),
            (
                "dry_run",
                "DryRun",
                TypeInfo(bool),
            ),
        ]

    # One or more account attribute names.
    attribute_names: typing.List["AccountAttributeName"] = dataclasses.field(
        default_factory=list,
    )

    # Checks whether you have the required permissions for the action, without
    # actually making the request, and provides an error response. If you have
    # the required permissions, the error response is `DryRunOperation`.
    # Otherwise, it is `UnauthorizedOperation`.
    dry_run: bool = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class DescribeAccountAttributesResult(OutputShapeBase):
    """
    Contains the output of DescribeAccountAttributes.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "response_metadata",
                "ResponseMetadata",
                TypeInfo(typing.Dict[str, str]),
            ),
            (
                "account_attributes",
                "AccountAttributes",
                TypeInfo(typing.List[AccountAttribute]),
            ),
        ]

    response_metadata: typing.Dict[str, str] = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # Information about one or more account attributes.
    account_attributes: typing.List["AccountAttribute"] = dataclasses.field(
        default_factory=list,
    )


@dataclasses.dataclass
class DescribeAddressesRequest(ShapeBase):
    """
    Contains the parameters for DescribeAddresses.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "filters",
                "Filters",
                TypeInfo(typing.List[Filter]),
            ),
            (
                "public_ips",
                "PublicIps",
                TypeInfo(typing.List[str]),
            ),
            (
                "allocation_ids",
                "AllocationIds",
                TypeInfo(typing.List[str]),
            ),
            (
                "dry_run",
                "DryRun",
                TypeInfo(bool),
            ),
        ]

    # One or more filters. Filter names and values are case-sensitive.

    #   * `allocation-id` \- [EC2-VPC] The allocation ID for the address.

    #   * `association-id` \- [EC2-VPC] The association ID for the address.

    #   * `domain` \- Indicates whether the address is for use in EC2-Classic (`standard`) or in a VPC (`vpc`).

    #   * `instance-id` \- The ID of the instance the address is associated with, if any.

    #   * `network-interface-id` \- [EC2-VPC] The ID of the network interface that the address is associated with, if any.

    #   * `network-interface-owner-id` \- The AWS account ID of the owner.

    #   * `private-ip-address` \- [EC2-VPC] The private IP address associated with the Elastic IP address.

    #   * `public-ip` \- The Elastic IP address.

    #   * `tag`:<key> \- The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key `Owner` and the value `TeamA`, specify `tag:Owner` for the filter name and `TeamA` for the filter value.

    #   * `tag-key` \- The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.
    filters: typing.List["Filter"] = dataclasses.field(default_factory=list, )

    # [EC2-Classic] One or more Elastic IP addresses.

    # Default: Describes all your Elastic IP addresses.
    public_ips: typing.List[str] = dataclasses.field(default_factory=list, )

    # [EC2-VPC] One or more allocation IDs.

    # Default: Describes all your Elastic IP addresses.
    allocation_ids: typing.List[str] = dataclasses.field(default_factory=list, )

    # Checks whether you have the required permissions for the action, without
    # actually making the request, and provides an error response. If you have
    # the required permissions, the error response is `DryRunOperation`.
    # Otherwise, it is `UnauthorizedOperation`.
    dry_run: bool = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class DescribeAddressesResult(OutputShapeBase):
    """
    Contains the output of DescribeAddresses.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "response_metadata",
                "ResponseMetadata",
                TypeInfo(typing.Dict[str, str]),
            ),
            (
                "addresses",
                "Addresses",
                TypeInfo(typing.List[Address]),
            ),
        ]

    response_metadata: typing.Dict[str, str] = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # Information about one or more Elastic IP addresses.
    addresses: typing.List["Address"] = dataclasses.field(
        default_factory=list,
    )


@dataclasses.dataclass
class DescribeAggregateIdFormatRequest(ShapeBase):
    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "dry_run",
                "DryRun",
                TypeInfo(bool),
            ),
        ]

    # Checks whether you have the required permissions for the action, without
    # actually making the request, and provides an error response. If you have
    # the required permissions, the error response is `DryRunOperation`.
    # Otherwise, it is `UnauthorizedOperation`.
    dry_run: bool = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class DescribeAggregateIdFormatResult(OutputShapeBase):
    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "response_metadata",
                "ResponseMetadata",
                TypeInfo(typing.Dict[str, str]),
            ),
            (
                "use_long_ids_aggregated",
                "UseLongIdsAggregated",
                TypeInfo(bool),
            ),
            (
                "statuses",
                "Statuses",
                TypeInfo(typing.List[IdFormat]),
            ),
        ]

    response_metadata: typing.Dict[str, str] = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # Indicates whether all resource types in the region are configured to use
    # longer IDs. This value is only `true` if all users are configured to use
    # longer IDs for all resources types in the region.
    use_long_ids_aggregated: bool = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # Information about each resource's ID format.
    statuses: typing.List["IdFormat"] = dataclasses.field(
        default_factory=list,
    )


@dataclasses.dataclass
class DescribeAvailabilityZonesRequest(ShapeBase):
    """
    Contains the parameters for DescribeAvailabilityZones.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "filters",
                "Filters",
                TypeInfo(typing.List[Filter]),
            ),
            (
                "zone_names",
                "ZoneNames",
                TypeInfo(typing.List[str]),
            ),
            (
                "dry_run",
                "DryRun",
                TypeInfo(bool),
            ),
        ]

    # One or more filters.

    #   * `message` \- Information about the Availability Zone.

    #   * `region-name` \- The name of the region for the Availability Zone (for example, `us-east-1`).

    #   * `state` \- The state of the Availability Zone (`available` | `information` | `impaired` | `unavailable`).

    #   * `zone-name` \- The name of the Availability Zone (for example, `us-east-1a`).
    filters: typing.List["Filter"] = dataclasses.field(default_factory=list, )

    # The names of one or more Availability Zones.
    zone_names: typing.List[str] = dataclasses.field(default_factory=list, )

    # Checks whether you have the required permissions for the action, without
    # actually making the request, and provides an error response. If you have
    # the required permissions, the error response is `DryRunOperation`.
    # Otherwise, it is `UnauthorizedOperation`.
    dry_run: bool = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class DescribeAvailabilityZonesResult(OutputShapeBase):
    """
    Contains the output of DescribeAvailabiltyZones.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "response_metadata",
                "ResponseMetadata",
                TypeInfo(typing.Dict[str, str]),
            ),
            (
                "availability_zones",
                "AvailabilityZones",
                TypeInfo(typing.List[AvailabilityZone]),
            ),
        ]

    response_metadata: typing.Dict[str, str] = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # Information about one or more Availability Zones.
    availability_zones: typing.List["AvailabilityZone"] = dataclasses.field(
        default_factory=list,
    )


@dataclasses.dataclass
class DescribeBundleTasksRequest(ShapeBase):
    """
    Contains the parameters for DescribeBundleTasks.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "bundle_ids",
                "BundleIds",
                TypeInfo(typing.List[str]),
            ),
            (
                "filters",
                "Filters",
                TypeInfo(typing.List[Filter]),
            ),
            (
                "dry_run",
                "DryRun",
                TypeInfo(bool),
            ),
        ]

    # One or more bundle task IDs.

    # Default: Describes all your bundle tasks.
    bundle_ids: typing.List[str] = dataclasses.field(default_factory=list, )

    # One or more filters.

    #   * `bundle-id` \- The ID of the bundle task.

    #   * `error-code` \- If the task failed, the error code returned.

    #   * `error-message` \- If the task failed, the error message returned.

    #   * `instance-id` \- The ID of the instance.

    #   * `progress` \- The level of task completion, as a percentage (for example, 20%).

    #   * `s3-bucket` \- The Amazon S3 bucket to store the AMI.

    #   * `s3-prefix` \- The beginning of the AMI name.

    #   * `start-time` \- The time the task started (for example, 2013-09-15T17:15:20.000Z).

    #   * `state` \- The state of the task (`pending` | `waiting-for-shutdown` | `bundling` | `storing` | `cancelling` | `complete` | `failed`).

    #   * `update-time` \- The time of the most recent update for the task.
    filters: typing.List["Filter"] = dataclasses.field(default_factory=list, )

    # Checks whether you have the required permissions for the action, without
    # actually making the request, and provides an error response. If you have
    # the required permissions, the error response is `DryRunOperation`.
    # Otherwise, it is `UnauthorizedOperation`.
    dry_run: bool = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class DescribeBundleTasksResult(OutputShapeBase):
    """
    Contains the output of DescribeBundleTasks.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "response_metadata",
                "ResponseMetadata",
                TypeInfo(typing.Dict[str, str]),
            ),
            (
                "bundle_tasks",
                "BundleTasks",
                TypeInfo(typing.List[BundleTask]),
            ),
        ]

    response_metadata: typing.Dict[str, str] = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # Information about one or more bundle tasks.
    bundle_tasks: typing.List["BundleTask"] = dataclasses.field(
        default_factory=list,
    )


@dataclasses.dataclass
class DescribeClassicLinkInstancesRequest(ShapeBase):
    """
    Contains the parameters for DescribeClassicLinkInstances.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "filters",
                "Filters",
                TypeInfo(typing.List[Filter]),
            ),
            (
                "dry_run",
                "DryRun",
                TypeInfo(bool),
            ),
            (
                "instance_ids",
                "InstanceIds",
                TypeInfo(typing.List[str]),
            ),
            (
                "max_results",
                "MaxResults",
                TypeInfo(int),
            ),
            (
                "next_token",
                "NextToken",
                TypeInfo(str),
            ),
        ]

    # One or more filters.

    #   * `group-id` \- The ID of a VPC security group that's associated with the instance.

    #   * `instance-id` \- The ID of the instance.

    #   * `tag`:<key> \- The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key `Owner` and the value `TeamA`, specify `tag:Owner` for the filter name and `TeamA` for the filter value.

    #   * `tag-key` \- The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.

    #   * `vpc-id` \- The ID of the VPC to which the instance is linked.

    # `vpc-id` \- The ID of the VPC that the instance is linked to.
    filters: typing.List["Filter"] = dataclasses.field(default_factory=list, )

    # Checks whether you have the required permissions for the action, without
    # actually making the request, and provides an error response. If you have
    # the required permissions, the error response is `DryRunOperation`.
    # Otherwise, it is `UnauthorizedOperation`.
    dry_run: bool = dataclasses.field(default=ShapeBase.NOT_SET, )

    # One or more instance IDs. Must be instances linked to a VPC through
    # ClassicLink.
    instance_ids: typing.List[str] = dataclasses.field(default_factory=list, )

    # The maximum number of results to return for the request in a single page.
    # The remaining results of the initial request can be seen by sending another
    # request with the returned `NextToken` value. This value can be between 5
    # and 1000. If `MaxResults` is given a value larger than 1000, only 1000
    # results are returned. You cannot specify this parameter and the instance
    # IDs parameter in the same request.

    # Constraint: If the value is greater than 1000, we return only 1000 items.
    max_results: int = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The token to retrieve the next page of results.
    next_token: str = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class DescribeClassicLinkInstancesResult(OutputShapeBase):
    """
    Contains the output of DescribeClassicLinkInstances.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "response_metadata",
                "ResponseMetadata",
                TypeInfo(typing.Dict[str, str]),
            ),
            (
                "instances",
                "Instances",
                TypeInfo(typing.List[ClassicLinkInstance]),
            ),
            (
                "next_token",
                "NextToken",
                TypeInfo(str),
            ),
        ]

    response_metadata: typing.Dict[str, str] = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # Information about one or more linked EC2-Classic instances.
    instances: typing.List["ClassicLinkInstance"] = dataclasses.field(
        default_factory=list,
    )

    # The token to use to retrieve the next page of results. This value is `null`
    # when there are no more results to return.
    next_token: str = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class DescribeConversionTasksRequest(ShapeBase):
    """
    Contains the parameters for DescribeConversionTasks.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "conversion_task_ids",
                "ConversionTaskIds",
                TypeInfo(typing.List[str]),
            ),
            (
                "dry_run",
                "DryRun",
                TypeInfo(bool),
            ),
        ]

    # One or more conversion task IDs.
    conversion_task_ids: typing.List[str] = dataclasses.field(
        default_factory=list,
    )

    # Checks whether you have the required permissions for the action, without
    # actually making the request, and provides an error response. If you have
    # the required permissions, the error response is `DryRunOperation`.
    # Otherwise, it is `UnauthorizedOperation`.
    dry_run: bool = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class DescribeConversionTasksResult(OutputShapeBase):
    """
    Contains the output for DescribeConversionTasks.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "response_metadata",
                "ResponseMetadata",
                TypeInfo(typing.Dict[str, str]),
            ),
            (
                "conversion_tasks",
                "ConversionTasks",
                TypeInfo(typing.List[ConversionTask]),
            ),
        ]

    response_metadata: typing.Dict[str, str] = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # Information about the conversion tasks.
    conversion_tasks: typing.List["ConversionTask"] = dataclasses.field(
        default_factory=list,
    )


@dataclasses.dataclass
class DescribeCustomerGatewaysRequest(ShapeBase):
    """
    Contains the parameters for DescribeCustomerGateways.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "customer_gateway_ids",
                "CustomerGatewayIds",
                TypeInfo(typing.List[str]),
            ),
            (
                "filters",
                "Filters",
                TypeInfo(typing.List[Filter]),
            ),
            (
                "dry_run",
                "DryRun",
                TypeInfo(bool),
            ),
        ]

    # One or more customer gateway IDs.

    # Default: Describes all your customer gateways.
    customer_gateway_ids: typing.List[str] = dataclasses.field(
        default_factory=list,
    )

    # One or more filters.

    #   * `bgp-asn` \- The customer gateway's Border Gateway Protocol (BGP) Autonomous System Number (ASN).

    #   * `customer-gateway-id` \- The ID of the customer gateway.

    #   * `ip-address` \- The IP address of the customer gateway's Internet-routable external interface.

    #   * `state` \- The state of the customer gateway (`pending` | `available` | `deleting` | `deleted`).

    #   * `type` \- The type of customer gateway. Currently, the only supported type is `ipsec.1`.

    #   * `tag`:<key> \- The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key `Owner` and the value `TeamA`, specify `tag:Owner` for the filter name and `TeamA` for the filter value.

    #   * `tag-key` \- The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.
    filters: typing.List["Filter"] = dataclasses.field(default_factory=list, )

    # Checks whether you have the required permissions for the action, without
    # actually making the request, and provides an error response. If you have
    # the required permissions, the error response is `DryRunOperation`.
    # Otherwise, it is `UnauthorizedOperation`.
    dry_run: bool = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class DescribeCustomerGatewaysResult(OutputShapeBase):
    """
    Contains the output of DescribeCustomerGateways.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "response_metadata",
                "ResponseMetadata",
                TypeInfo(typing.Dict[str, str]),
            ),
            (
                "customer_gateways",
                "CustomerGateways",
                TypeInfo(typing.List[CustomerGateway]),
            ),
        ]

    response_metadata: typing.Dict[str, str] = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # Information about one or more customer gateways.
    customer_gateways: typing.List["CustomerGateway"] = dataclasses.field(
        default_factory=list,
    )


@dataclasses.dataclass
class DescribeDhcpOptionsRequest(ShapeBase):
    """
    Contains the parameters for DescribeDhcpOptions.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "dhcp_options_ids",
                "DhcpOptionsIds",
                TypeInfo(typing.List[str]),
            ),
            (
                "filters",
                "Filters",
                TypeInfo(typing.List[Filter]),
            ),
            (
                "dry_run",
                "DryRun",
                TypeInfo(bool),
            ),
        ]

    # The IDs of one or more DHCP options sets.

    # Default: Describes all your DHCP options sets.
    dhcp_options_ids: typing.List[str] = dataclasses.field(
        default_factory=list,
    )

    # One or more filters.

    #   * `dhcp-options-id` \- The ID of a set of DHCP options.

    #   * `key` \- The key for one of the options (for example, `domain-name`).

    #   * `value` \- The value for one of the options.

    #   * `tag`:<key> \- The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key `Owner` and the value `TeamA`, specify `tag:Owner` for the filter name and `TeamA` for the filter value.

    #   * `tag-key` \- The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.
    filters: typing.List["Filter"] = dataclasses.field(default_factory=list, )

    # Checks whether you have the required permissions for the action, without
    # actually making the request, and provides an error response. If you have
    # the required permissions, the error response is `DryRunOperation`.
    # Otherwise, it is `UnauthorizedOperation`.
    dry_run: bool = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class DescribeDhcpOptionsResult(OutputShapeBase):
    """
    Contains the output of DescribeDhcpOptions.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "response_metadata",
                "ResponseMetadata",
                TypeInfo(typing.Dict[str, str]),
            ),
            (
                "dhcp_options",
                "DhcpOptions",
                TypeInfo(typing.List[DhcpOptions]),
            ),
        ]

    response_metadata: typing.Dict[str, str] = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # Information about one or more DHCP options sets.
    dhcp_options: typing.List["DhcpOptions"] = dataclasses.field(
        default_factory=list,
    )


@dataclasses.dataclass
class DescribeEgressOnlyInternetGatewaysRequest(ShapeBase):
    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "dry_run",
                "DryRun",
                TypeInfo(bool),
            ),
            (
                "egress_only_internet_gateway_ids",
                "EgressOnlyInternetGatewayIds",
                TypeInfo(typing.List[str]),
            ),
            (
                "max_results",
                "MaxResults",
                TypeInfo(int),
            ),
            (
                "next_token",
                "NextToken",
                TypeInfo(str),
            ),
        ]

    # Checks whether you have the required permissions for the action, without
    # actually making the request, and provides an error response. If you have
    # the required permissions, the error response is `DryRunOperation`.
    # Otherwise, it is `UnauthorizedOperation`.
    dry_run: bool = dataclasses.field(default=ShapeBase.NOT_SET, )

    # One or more egress-only internet gateway IDs.
    egress_only_internet_gateway_ids: typing.List[str] = dataclasses.field(
        default_factory=list,
    )

    # The maximum number of results to return for the request in a single page.
    # The remaining results can be seen by sending another request with the
    # returned `NextToken` value. This value can be between 5 and 1000. If
    # `MaxResults` is given a value larger than 1000, only 1000 results are
    # returned.
    max_results: int = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The token to retrieve the next page of results.
    next_token: str = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class DescribeEgressOnlyInternetGatewaysResult(OutputShapeBase):
    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "response_metadata",
                "ResponseMetadata",
                TypeInfo(typing.Dict[str, str]),
            ),
            (
                "egress_only_internet_gateways",
                "EgressOnlyInternetGateways",
                TypeInfo(typing.List[EgressOnlyInternetGateway]),
            ),
            (
                "next_token",
                "NextToken",
                TypeInfo(str),
            ),
        ]

    response_metadata: typing.Dict[str, str] = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # Information about the egress-only internet gateways.
    egress_only_internet_gateways: typing.List["EgressOnlyInternetGateway"
                                              ] = dataclasses.field(
                                                  default_factory=list,
                                              )

    # The token to use to retrieve the next page of results.
    next_token: str = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class DescribeElasticGpusRequest(ShapeBase):
    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "elastic_gpu_ids",
                "ElasticGpuIds",
                TypeInfo(typing.List[str]),
            ),
            (
                "dry_run",
                "DryRun",
                TypeInfo(bool),
            ),
            (
                "filters",
                "Filters",
                TypeInfo(typing.List[Filter]),
            ),
            (
                "max_results",
                "MaxResults",
                TypeInfo(int),
            ),
            (
                "next_token",
                "NextToken",
                TypeInfo(str),
            ),
        ]

    # One or more Elastic GPU IDs.
    elastic_gpu_ids: typing.List[str] = dataclasses.field(
        default_factory=list,
    )

    # Checks whether you have the required permissions for the action, without
    # actually making the request, and provides an error response. If you have
    # the required permissions, the error response is `DryRunOperation`.
    # Otherwise, it is `UnauthorizedOperation`.
    dry_run: bool = dataclasses.field(default=ShapeBase.NOT_SET, )

    # One or more filters.

    #   * `availability-zone` \- The Availability Zone in which the Elastic GPU resides.

    #   * `elastic-gpu-health` \- The status of the Elastic GPU (`OK` | `IMPAIRED`).

    #   * `elastic-gpu-state` \- The state of the Elastic GPU (`ATTACHED`).

    #   * `elastic-gpu-type` \- The type of Elastic GPU; for example, `eg1.medium`.

    #   * `instance-id` \- The ID of the instance to which the Elastic GPU is associated.
    filters: typing.List["Filter"] = dataclasses.field(default_factory=list, )

    # The maximum number of results to return in a single call. To retrieve the
    # remaining results, make another call with the returned `NextToken` value.
    # This value can be between 5 and 1000.
    max_results: int = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The token to request the next page of results.
    next_token: str = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class DescribeElasticGpusResult(OutputShapeBase):
    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "response_metadata",
                "ResponseMetadata",
                TypeInfo(typing.Dict[str, str]),
            ),
            (
                "elastic_gpu_set",
                "ElasticGpuSet",
                TypeInfo(typing.List[ElasticGpus]),
            ),
            (
                "max_results",
                "MaxResults",
                TypeInfo(int),
            ),
            (
                "next_token",
                "NextToken",
                TypeInfo(str),
            ),
        ]

    response_metadata: typing.Dict[str, str] = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # Information about the Elastic GPUs.
    elastic_gpu_set: typing.List["ElasticGpus"] = dataclasses.field(
        default_factory=list,
    )

    # The total number of items to return. If the total number of items available
    # is more than the value specified in max-items then a Next-Token will be
    # provided in the output that you can use to resume pagination.
    max_results: int = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The token to use to retrieve the next page of results. This value is `null`
    # when there are no more results to return.
    next_token: str = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class DescribeExportTasksRequest(ShapeBase):
    """
    Contains the parameters for DescribeExportTasks.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "export_task_ids",
                "ExportTaskIds",
                TypeInfo(typing.List[str]),
            ),
        ]

    # One or more export task IDs.
    export_task_ids: typing.List[str] = dataclasses.field(
        default_factory=list,
    )


@dataclasses.dataclass
class DescribeExportTasksResult(OutputShapeBase):
    """
    Contains the output for DescribeExportTasks.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "response_metadata",
                "ResponseMetadata",
                TypeInfo(typing.Dict[str, str]),
            ),
            (
                "export_tasks",
                "ExportTasks",
                TypeInfo(typing.List[ExportTask]),
            ),
        ]

    response_metadata: typing.Dict[str, str] = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # Information about the export tasks.
    export_tasks: typing.List["ExportTask"] = dataclasses.field(
        default_factory=list,
    )


@dataclasses.dataclass
class DescribeFleetHistoryRequest(ShapeBase):
    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "fleet_id",
                "FleetId",
                TypeInfo(str),
            ),
            (
                "start_time",
                "StartTime",
                TypeInfo(datetime.datetime),
            ),
            (
                "dry_run",
                "DryRun",
                TypeInfo(bool),
            ),
            (
                "event_type",
                "EventType",
                TypeInfo(FleetEventType),
            ),
            (
                "max_results",
                "MaxResults",
                TypeInfo(int),
            ),
            (
                "next_token",
                "NextToken",
                TypeInfo(str),
            ),
        ]

    # The ID of the EC2 Fleet.
    fleet_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The start date and time for the events, in UTC format (for example, _YYYY_
    # - _MM_ - _DD_ T _HH_ : _MM_ : _SS_ Z).
    start_time: datetime.datetime = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # Checks whether you have the required permissions for the action, without
    # actually making the request, and provides an error response. If you have
    # the required permissions, the error response is `DryRunOperation`.
    # Otherwise, it is `UnauthorizedOperation`.
    dry_run: bool = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The type of events to describe. By default, all events are described.
    event_type: "FleetEventType" = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # The maximum number of results to return in a single call. Specify a value
    # between 1 and 1000. The default value is 1000. To retrieve the remaining
    # results, make another call with the returned `NextToken` value.
    max_results: int = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The token for the next set of results.
    next_token: str = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class DescribeFleetHistoryResult(OutputShapeBase):
    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "response_metadata",
                "ResponseMetadata",
                TypeInfo(typing.Dict[str, str]),
            ),
            (
                "history_records",
                "HistoryRecords",
                TypeInfo(typing.List[HistoryRecordEntry]),
            ),
            (
                "last_evaluated_time",
                "LastEvaluatedTime",
                TypeInfo(datetime.datetime),
            ),
            (
                "next_token",
                "NextToken",
                TypeInfo(str),
            ),
            (
                "fleet_id",
                "FleetId",
                TypeInfo(str),
            ),
            (
                "start_time",
                "StartTime",
                TypeInfo(datetime.datetime),
            ),
        ]

    response_metadata: typing.Dict[str, str] = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # Information about the events in the history of the EC2 Fleet.
    history_records: typing.List["HistoryRecordEntry"] = dataclasses.field(
        default_factory=list,
    )

    # The last date and time for the events, in UTC format (for example, _YYYY_ -
    # _MM_ - _DD_ T _HH_ : _MM_ : _SS_ Z). All records up to this time were
    # retrieved.

    # If `nextToken` indicates that there are more results, this value is not
    # present.
    last_evaluated_time: datetime.datetime = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # The token for the next set of results.
    next_token: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The ID of the EC Fleet.
    fleet_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The start date and time for the events, in UTC format (for example, _YYYY_
    # - _MM_ - _DD_ T _HH_ : _MM_ : _SS_ Z).
    start_time: datetime.datetime = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )


@dataclasses.dataclass
class DescribeFleetInstancesRequest(ShapeBase):
    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "fleet_id",
                "FleetId",
                TypeInfo(str),
            ),
            (
                "dry_run",
                "DryRun",
                TypeInfo(bool),
            ),
            (
                "max_results",
                "MaxResults",
                TypeInfo(int),
            ),
            (
                "next_token",
                "NextToken",
                TypeInfo(str),
            ),
            (
                "filters",
                "Filters",
                TypeInfo(typing.List[Filter]),
            ),
        ]

    # The ID of the EC2 Fleet.
    fleet_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # Checks whether you have the required permissions for the action, without
    # actually making the request, and provides an error response. If you have
    # the required permissions, the error response is `DryRunOperation`.
    # Otherwise, it is `UnauthorizedOperation`.
    dry_run: bool = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The maximum number of results to return in a single call. Specify a value
    # between 1 and 1000. The default value is 1000. To retrieve the remaining
    # results, make another call with the returned `NextToken` value.
    max_results: int = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The token for the next set of results.
    next_token: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # One or more filters.

    #   * `instance-type` \- The instance type.
    filters: typing.List["Filter"] = dataclasses.field(default_factory=list, )


@dataclasses.dataclass
class DescribeFleetInstancesResult(OutputShapeBase):
    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "response_metadata",
                "ResponseMetadata",
                TypeInfo(typing.Dict[str, str]),
            ),
            (
                "active_instances",
                "ActiveInstances",
                TypeInfo(typing.List[ActiveInstance]),
            ),
            (
                "next_token",
                "NextToken",
                TypeInfo(str),
            ),
            (
                "fleet_id",
                "FleetId",
                TypeInfo(str),
            ),
        ]

    response_metadata: typing.Dict[str, str] = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # The running instances. This list is refreshed periodically and might be out
    # of date.
    active_instances: typing.List["ActiveInstance"] = dataclasses.field(
        default_factory=list,
    )

    # The token for the next set of results.
    next_token: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The ID of the EC2 Fleet.
    fleet_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class DescribeFleetsRequest(ShapeBase):
    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "dry_run",
                "DryRun",
                TypeInfo(bool),
            ),
            (
                "max_results",
                "MaxResults",
                TypeInfo(int),
            ),
            (
                "next_token",
                "NextToken",
                TypeInfo(str),
            ),
            (
                "fleet_ids",
                "FleetIds",
                TypeInfo(typing.List[str]),
            ),
            (
                "filters",
                "Filters",
                TypeInfo(typing.List[Filter]),
            ),
        ]

    # Checks whether you have the required permissions for the action, without
    # actually making the request, and provides an error response. If you have
    # the required permissions, the error response is `DryRunOperation`.
    # Otherwise, it is `UnauthorizedOperation`.
    dry_run: bool = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The maximum number of results to return in a single call. Specify a value
    # between 1 and 1000. The default value is 1000. To retrieve the remaining
    # results, make another call with the returned `NextToken` value.
    max_results: int = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The token for the next set of results.
    next_token: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The ID of the EC2 Fleets.
    fleet_ids: typing.List[str] = dataclasses.field(default_factory=list, )

    # One or more filters.

    #   * `activity-status` \- The progress of the EC2 Fleet ( `error` | `pending-fulfillment` | `pending-termination` | `fulfilled`).

    #   * `excess-capacity-termination-policy` \- Indicates whether to terminate running instances if the target capacity is decreased below the current EC2 Fleet size (`true` | `false`).

    #   * `fleet-state` \- The state of the EC2 Fleet (`submitted` | `active` | `deleted` | `failed` | `deleted-running` | `deleted-terminating` | `modifying`).

    #   * `replace-unhealthy-instances` \- Indicates whether EC2 Fleet should replace unhealthy instances (`true` | `false`).

    #   * `type` \- The type of request (`request` | `maintain`).
    filters: typing.List["Filter"] = dataclasses.field(default_factory=list, )


@dataclasses.dataclass
class DescribeFleetsResult(OutputShapeBase):
    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "response_metadata",
                "ResponseMetadata",
                TypeInfo(typing.Dict[str, str]),
            ),
            (
                "next_token",
                "NextToken",
                TypeInfo(str),
            ),
            (
                "fleets",
                "Fleets",
                TypeInfo(typing.List[FleetData]),
            ),
        ]

    response_metadata: typing.Dict[str, str] = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # The token for the next set of results.
    next_token: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # Information about the EC2 Fleets.
    fleets: typing.List["FleetData"] = dataclasses.field(default_factory=list, )


@dataclasses.dataclass
class DescribeFlowLogsRequest(ShapeBase):
    """
    Contains the parameters for DescribeFlowLogs.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "dry_run",
                "DryRun",
                TypeInfo(bool),
            ),
            (
                "filter",
                "Filter",
                TypeInfo(typing.List[Filter]),
            ),
            (
                "flow_log_ids",
                "FlowLogIds",
                TypeInfo(typing.List[str]),
            ),
            (
                "max_results",
                "MaxResults",
                TypeInfo(int),
            ),
            (
                "next_token",
                "NextToken",
                TypeInfo(str),
            ),
        ]

    # Checks whether you have the required permissions for the action, without
    # actually making the request, and provides an error response. If you have
    # the required permissions, the error response is `DryRunOperation`.
    # Otherwise, it is `UnauthorizedOperation`.
    dry_run: bool = dataclasses.field(default=ShapeBase.NOT_SET, )

    # One or more filters.

    #   * `deliver-log-status` \- The status of the logs delivery (`SUCCESS` | `FAILED`).

    #   * `log-destination-type` \- The type of destination to which the flow log publishes data. Possible destination types include `cloud-watch-logs` and `S3`.

    #   * `flow-log-id` \- The ID of the flow log.

    #   * `log-group-name` \- The name of the log group.

    #   * `resource-id` \- The ID of the VPC, subnet, or network interface.

    #   * `traffic-type` \- The type of traffic (`ACCEPT` | `REJECT` | `ALL`).
    filter: typing.List["Filter"] = dataclasses.field(default_factory=list, )

    # One or more flow log IDs.
    flow_log_ids: typing.List[str] = dataclasses.field(default_factory=list, )

    # The maximum number of results to return for the request in a single page.
    # The remaining results can be seen by sending another request with the
    # returned `NextToken` value. This value can be between 5 and 1000. If
    # `MaxResults` is given a value larger than 1000, only 1000 results are
    # returned. You cannot specify this parameter and the flow log IDs parameter
    # in the same request.
    max_results: int = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The token to retrieve the next page of results.
    next_token: str = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class DescribeFlowLogsResult(OutputShapeBase):
    """
    Contains the output of DescribeFlowLogs.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "response_metadata",
                "ResponseMetadata",
                TypeInfo(typing.Dict[str, str]),
            ),
            (
                "flow_logs",
                "FlowLogs",
                TypeInfo(typing.List[FlowLog]),
            ),
            (
                "next_token",
                "NextToken",
                TypeInfo(str),
            ),
        ]

    response_metadata: typing.Dict[str, str] = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # Information about the flow logs.
    flow_logs: typing.List["FlowLog"] = dataclasses.field(
        default_factory=list,
    )

    # The token to use to retrieve the next page of results. This value is `null`
    # when there are no more results to return.
    next_token: str = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class DescribeFpgaImageAttributeRequest(ShapeBase):
    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "fpga_image_id",
                "FpgaImageId",
                TypeInfo(str),
            ),
            (
                "attribute",
                "Attribute",
                TypeInfo(FpgaImageAttributeName),
            ),
            (
                "dry_run",
                "DryRun",
                TypeInfo(bool),
            ),
        ]

    # The ID of the AFI.
    fpga_image_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The AFI attribute.
    attribute: "FpgaImageAttributeName" = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # Checks whether you have the required permissions for the action, without
    # actually making the request, and provides an error response. If you have
    # the required permissions, the error response is `DryRunOperation`.
    # Otherwise, it is `UnauthorizedOperation`.
    dry_run: bool = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class DescribeFpgaImageAttributeResult(OutputShapeBase):
    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "response_metadata",
                "ResponseMetadata",
                TypeInfo(typing.Dict[str, str]),
            ),
            (
                "fpga_image_attribute",
                "FpgaImageAttribute",
                TypeInfo(FpgaImageAttribute),
            ),
        ]

    response_metadata: typing.Dict[str, str] = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # Information about the attribute.
    fpga_image_attribute: "FpgaImageAttribute" = dataclasses.field(
        default_factory=dict,
    )


@dataclasses.dataclass
class DescribeFpgaImagesRequest(ShapeBase):
    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "dry_run",
                "DryRun",
                TypeInfo(bool),
            ),
            (
                "fpga_image_ids",
                "FpgaImageIds",
                TypeInfo(typing.List[str]),
            ),
            (
                "owners",
                "Owners",
                TypeInfo(typing.List[str]),
            ),
            (
                "filters",
                "Filters",
                TypeInfo(typing.List[Filter]),
            ),
            (
                "next_token",
                "NextToken",
                TypeInfo(str),
            ),
            (
                "max_results",
                "MaxResults",
                TypeInfo(int),
            ),
        ]

    # Checks whether you have the required permissions for the action, without
    # actually making the request, and provides an error response. If you have
    # the required permissions, the error response is `DryRunOperation`.
    # Otherwise, it is `UnauthorizedOperation`.
    dry_run: bool = dataclasses.field(default=ShapeBase.NOT_SET, )

    # One or more AFI IDs.
    fpga_image_ids: typing.List[str] = dataclasses.field(default_factory=list, )

    # Filters the AFI by owner. Specify an AWS account ID, `self` (owner is the
    # sender of the request), or an AWS owner alias (valid values are `amazon` |
    # `aws-marketplace`).
    owners: typing.List[str] = dataclasses.field(default_factory=list, )

    # One or more filters.

    #   * `create-time` \- The creation time of the AFI.

    #   * `fpga-image-id` \- The FPGA image identifier (AFI ID).

    #   * `fpga-image-global-id` \- The global FPGA image identifier (AGFI ID).

    #   * `name` \- The name of the AFI.

    #   * `owner-id` \- The AWS account ID of the AFI owner.

    #   * `product-code` \- The product code.

    #   * `shell-version` \- The version of the AWS Shell that was used to create the bitstream.

    #   * `state` \- The state of the AFI (`pending` | `failed` | `available` | `unavailable`).

    #   * `tag`:<key> \- The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key `Owner` and the value `TeamA`, specify `tag:Owner` for the filter name and `TeamA` for the filter value.

    #   * `tag-key` \- The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.

    #   * `update-time` \- The time of the most recent update.
    filters: typing.List["Filter"] = dataclasses.field(default_factory=list, )

    # The token to retrieve the next page of results.
    next_token: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The maximum number of results to return in a single call.
    max_results: int = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class DescribeFpgaImagesResult(OutputShapeBase):
    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "response_metadata",
                "ResponseMetadata",
                TypeInfo(typing.Dict[str, str]),
            ),
            (
                "fpga_images",
                "FpgaImages",
                TypeInfo(typing.List[FpgaImage]),
            ),
            (
                "next_token",
                "NextToken",
                TypeInfo(str),
            ),
        ]

    response_metadata: typing.Dict[str, str] = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # Information about one or more FPGA images.
    fpga_images: typing.List["FpgaImage"] = dataclasses.field(
        default_factory=list,
    )

    # The token to use to retrieve the next page of results. This value is `null`
    # when there are no more results to return.
    next_token: str = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class DescribeHostReservationOfferingsRequest(ShapeBase):
    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "filter",
                "Filter",
                TypeInfo(typing.List[Filter]),
            ),
            (
                "max_duration",
                "MaxDuration",
                TypeInfo(int),
            ),
            (
                "max_results",
                "MaxResults",
                TypeInfo(int),
            ),
            (
                "min_duration",
                "MinDuration",
                TypeInfo(int),
            ),
            (
                "next_token",
                "NextToken",
                TypeInfo(str),
            ),
            (
                "offering_id",
                "OfferingId",
                TypeInfo(str),
            ),
        ]

    # One or more filters.

    #   * `instance-family` \- The instance family of the offering (for example, `m4`).

    #   * `payment-option` \- The payment option (`NoUpfront` | `PartialUpfront` | `AllUpfront`).
    filter: typing.List["Filter"] = dataclasses.field(default_factory=list, )

    # This is the maximum duration of the reservation to purchase, specified in
    # seconds. Reservations are available in one-year and three-year terms. The
    # number of seconds specified must be the number of seconds in a year
    # (365x24x60x60) times one of the supported durations (1 or 3). For example,
    # specify 94608000 for three years.
    max_duration: int = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The maximum number of results to return for the request in a single page.
    # The remaining results can be seen by sending another request with the
    # returned `nextToken` value. This value can be between 5 and 500. If
    # `maxResults` is given a larger value than 500, you receive an error.
    max_results: int = dataclasses.field(default=ShapeBase.NOT_SET, )

    # This is the minimum duration of the reservation you'd like to purchase,
    # specified in seconds. Reservations are available in one-year and three-year
    # terms. The number of seconds specified must be the number of seconds in a
    # year (365x24x60x60) times one of the supported durations (1 or 3). For
    # example, specify 31536000 for one year.
    min_duration: int = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The token to use to retrieve the next page of results.
    next_token: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The ID of the reservation offering.
    offering_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class DescribeHostReservationOfferingsResult(OutputShapeBase):
    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "response_metadata",
                "ResponseMetadata",
                TypeInfo(typing.Dict[str, str]),
            ),
            (
                "next_token",
                "NextToken",
                TypeInfo(str),
            ),
            (
                "offering_set",
                "OfferingSet",
                TypeInfo(typing.List[HostOffering]),
            ),
        ]

    response_metadata: typing.Dict[str, str] = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # The token to use to retrieve the next page of results. This value is `null`
    # when there are no more results to return.
    next_token: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # Information about the offerings.
    offering_set: typing.List["HostOffering"] = dataclasses.field(
        default_factory=list,
    )


@dataclasses.dataclass
class DescribeHostReservationsRequest(ShapeBase):
    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "filter",
                "Filter",
                TypeInfo(typing.List[Filter]),
            ),
            (
                "host_reservation_id_set",
                "HostReservationIdSet",
                TypeInfo(typing.List[str]),
            ),
            (
                "max_results",
                "MaxResults",
                TypeInfo(int),
            ),
            (
                "next_token",
                "NextToken",
                TypeInfo(str),
            ),
        ]

    # One or more filters.

    #   * `instance-family` \- The instance family (for example, `m4`).

    #   * `payment-option` \- The payment option (`NoUpfront` | `PartialUpfront` | `AllUpfront`).

    #   * `state` \- The state of the reservation (`payment-pending` | `payment-failed` | `active` | `retired`).
    filter: typing.List["Filter"] = dataclasses.field(default_factory=list, )

    # One or more host reservation IDs.
    host_reservation_id_set: typing.List[str] = dataclasses.field(
        default_factory=list,
    )

    # The maximum number of results to return for the request in a single page.
    # The remaining results can be seen by sending another request with the
    # returned `nextToken` value. This value can be between 5 and 500.If
    # `maxResults` is given a larger value than 500, you receive an error.
    max_results: int = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The token to use to retrieve the next page of results.
    next_token: str = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class DescribeHostReservationsResult(OutputShapeBase):
    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "response_metadata",
                "ResponseMetadata",
                TypeInfo(typing.Dict[str, str]),
            ),
            (
                "host_reservation_set",
                "HostReservationSet",
                TypeInfo(typing.List[HostReservation]),
            ),
            (
                "next_token",
                "NextToken",
                TypeInfo(str),
            ),
        ]

    response_metadata: typing.Dict[str, str] = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # Details about the reservation's configuration.
    host_reservation_set: typing.List["HostReservation"] = dataclasses.field(
        default_factory=list,
    )

    # The token to use to retrieve the next page of results. This value is `null`
    # when there are no more results to return.
    next_token: str = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class DescribeHostsRequest(ShapeBase):
    """
    Contains the parameters for DescribeHosts.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "filter",
                "Filter",
                TypeInfo(typing.List[Filter]),
            ),
            (
                "host_ids",
                "HostIds",
                TypeInfo(typing.List[str]),
            ),
            (
                "max_results",
                "MaxResults",
                TypeInfo(int),
            ),
            (
                "next_token",
                "NextToken",
                TypeInfo(str),
            ),
        ]

    # One or more filters.

    #   * `auto-placement` \- Whether auto-placement is enabled or disabled (`on` | `off`).

    #   * `availability-zone` \- The Availability Zone of the host.

    #   * `client-token` \- The idempotency token that you provided when you allocated the host.

    #   * `host-reservation-id` \- The ID of the reservation assigned to this host.

    #   * `instance-type` \- The instance type size that the Dedicated Host is configured to support.

    #   * `state` \- The allocation state of the Dedicated Host (`available` | `under-assessment` | `permanent-failure` | `released` | `released-permanent-failure`).

    #   * `tag-key` \- The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.
    filter: typing.List["Filter"] = dataclasses.field(default_factory=list, )

    # The IDs of the Dedicated Hosts. The IDs are used for targeted instance
    # launches.
    host_ids: typing.List[str] = dataclasses.field(default_factory=list, )

    # The maximum number of results to return for the request in a single page.
    # The remaining results can be seen by sending another request with the
    # returned `nextToken` value. This value can be between 5 and 500. If
    # `maxResults` is given a larger value than 500, you receive an error. You
    # cannot specify this parameter and the host IDs parameter in the same
    # request.
    max_results: int = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The token to retrieve the next page of results.
    next_token: str = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class DescribeHostsResult(OutputShapeBase):
    """
    Contains the output of DescribeHosts.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "response_metadata",
                "ResponseMetadata",
                TypeInfo(typing.Dict[str, str]),
            ),
            (
                "hosts",
                "Hosts",
                TypeInfo(typing.List[Host]),
            ),
            (
                "next_token",
                "NextToken",
                TypeInfo(str),
            ),
        ]

    response_metadata: typing.Dict[str, str] = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # Information about the Dedicated Hosts.
    hosts: typing.List["Host"] = dataclasses.field(default_factory=list, )

    # The token to use to retrieve the next page of results. This value is `null`
    # when there are no more results to return.
    next_token: str = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class DescribeIamInstanceProfileAssociationsRequest(ShapeBase):
    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "association_ids",
                "AssociationIds",
                TypeInfo(typing.List[str]),
            ),
            (
                "filters",
                "Filters",
                TypeInfo(typing.List[Filter]),
            ),
            (
                "max_results",
                "MaxResults",
                TypeInfo(int),
            ),
            (
                "next_token",
                "NextToken",
                TypeInfo(str),
            ),
        ]

    # One or more IAM instance profile associations.
    association_ids: typing.List[str] = dataclasses.field(
        default_factory=list,
    )

    # One or more filters.

    #   * `instance-id` \- The ID of the instance.

    #   * `state` \- The state of the association (`associating` | `associated` | `disassociating` | `disassociated`).
    filters: typing.List["Filter"] = dataclasses.field(default_factory=list, )

    # The maximum number of results to return in a single call. To retrieve the
    # remaining results, make another call with the returned `NextToken` value.
    max_results: int = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The token to request the next page of results.
    next_token: str = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class DescribeIamInstanceProfileAssociationsResult(OutputShapeBase):
    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "response_metadata",
                "ResponseMetadata",
                TypeInfo(typing.Dict[str, str]),
            ),
            (
                "iam_instance_profile_associations",
                "IamInstanceProfileAssociations",
                TypeInfo(typing.List[IamInstanceProfileAssociation]),
            ),
            (
                "next_token",
                "NextToken",
                TypeInfo(str),
            ),
        ]

    response_metadata: typing.Dict[str, str] = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # Information about one or more IAM instance profile associations.
    iam_instance_profile_associations: typing.List[
        "IamInstanceProfileAssociation"
    ] = dataclasses.field(
        default_factory=list,
    )

    # The token to use to retrieve the next page of results. This value is `null`
    # when there are no more results to return.
    next_token: str = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class DescribeIdFormatRequest(ShapeBase):
    """
    Contains the parameters for DescribeIdFormat.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "resource",
                "Resource",
                TypeInfo(str),
            ),
        ]

    # The type of resource: `bundle` | `conversion-task` | `customer-gateway` |
    # `dhcp-options` | `elastic-ip-allocation` | `elastic-ip-association` |
    # `export-task` | `flow-log` | `image` | `import-task` | `instance` |
    # `internet-gateway` | `network-acl` | `network-acl-association` | `network-
    # interface` | `network-interface-attachment` | `prefix-list` | `reservation`
    # | `route-table` | `route-table-association` | `security-group` | `snapshot`
    # | `subnet` | `subnet-cidr-block-association` | `volume` | `vpc` | `vpc-
    # cidr-block-association` | `vpc-endpoint` | `vpc-peering-connection` | `vpn-
    # connection` | `vpn-gateway`
    resource: str = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class DescribeIdFormatResult(OutputShapeBase):
    """
    Contains the output of DescribeIdFormat.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "response_metadata",
                "ResponseMetadata",
                TypeInfo(typing.Dict[str, str]),
            ),
            (
                "statuses",
                "Statuses",
                TypeInfo(typing.List[IdFormat]),
            ),
        ]

    response_metadata: typing.Dict[str, str] = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # Information about the ID format for the resource.
    statuses: typing.List["IdFormat"] = dataclasses.field(
        default_factory=list,
    )


@dataclasses.dataclass
class DescribeIdentityIdFormatRequest(ShapeBase):
    """
    Contains the parameters for DescribeIdentityIdFormat.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "principal_arn",
                "PrincipalArn",
                TypeInfo(str),
            ),
            (
                "resource",
                "Resource",
                TypeInfo(str),
            ),
        ]

    # The ARN of the principal, which can be an IAM role, IAM user, or the root
    # user.
    principal_arn: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The type of resource: `bundle` | `conversion-task` | `customer-gateway` |
    # `dhcp-options` | `elastic-ip-allocation` | `elastic-ip-association` |
    # `export-task` | `flow-log` | `image` | `import-task` | `instance` |
    # `internet-gateway` | `network-acl` | `network-acl-association` | `network-
    # interface` | `network-interface-attachment` | `prefix-list` | `reservation`
    # | `route-table` | `route-table-association` | `security-group` | `snapshot`
    # | `subnet` | `subnet-cidr-block-association` | `volume` | `vpc` | `vpc-
    # cidr-block-association` | `vpc-endpoint` | `vpc-peering-connection` | `vpn-
    # connection` | `vpn-gateway`
    resource: str = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class DescribeIdentityIdFormatResult(OutputShapeBase):
    """
    Contains the output of DescribeIdentityIdFormat.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "response_metadata",
                "ResponseMetadata",
                TypeInfo(typing.Dict[str, str]),
            ),
            (
                "statuses",
                "Statuses",
                TypeInfo(typing.List[IdFormat]),
            ),
        ]

    response_metadata: typing.Dict[str, str] = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # Information about the ID format for the resources.
    statuses: typing.List["IdFormat"] = dataclasses.field(
        default_factory=list,
    )


@dataclasses.dataclass
class DescribeImageAttributeRequest(ShapeBase):
    """
    Contains the parameters for DescribeImageAttribute.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "attribute",
                "Attribute",
                TypeInfo(ImageAttributeName),
            ),
            (
                "image_id",
                "ImageId",
                TypeInfo(str),
            ),
            (
                "dry_run",
                "DryRun",
                TypeInfo(bool),
            ),
        ]

    # The AMI attribute.

    # **Note** : Depending on your account privileges, the `blockDeviceMapping`
    # attribute may return a `Client.AuthFailure` error. If this happens, use
    # DescribeImages to get information about the block device mapping for the
    # AMI.
    attribute: "ImageAttributeName" = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # The ID of the AMI.
    image_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # Checks whether you have the required permissions for the action, without
    # actually making the request, and provides an error response. If you have
    # the required permissions, the error response is `DryRunOperation`.
    # Otherwise, it is `UnauthorizedOperation`.
    dry_run: bool = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class DescribeImagesRequest(ShapeBase):
    """
    Contains the parameters for DescribeImages.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "executable_users",
                "ExecutableUsers",
                TypeInfo(typing.List[str]),
            ),
            (
                "filters",
                "Filters",
                TypeInfo(typing.List[Filter]),
            ),
            (
                "image_ids",
                "ImageIds",
                TypeInfo(typing.List[str]),
            ),
            (
                "owners",
                "Owners",
                TypeInfo(typing.List[str]),
            ),
            (
                "dry_run",
                "DryRun",
                TypeInfo(bool),
            ),
        ]

    # Scopes the images by users with explicit launch permissions. Specify an AWS
    # account ID, `self` (the sender of the request), or `all` (public AMIs).
    executable_users: typing.List[str] = dataclasses.field(
        default_factory=list,
    )

    # One or more filters.

    #   * `architecture` \- The image architecture (`i386` | `x86_64`).

    #   * `block-device-mapping.delete-on-termination` \- A Boolean value that indicates whether the Amazon EBS volume is deleted on instance termination.

    #   * `block-device-mapping.device-name` \- The device name specified in the block device mapping (for example, `/dev/sdh` or `xvdh`).

    #   * `block-device-mapping.snapshot-id` \- The ID of the snapshot used for the EBS volume.

    #   * `block-device-mapping.volume-size` \- The volume size of the EBS volume, in GiB.

    #   * `block-device-mapping.volume-type` \- The volume type of the EBS volume (`gp2` | `io1` | `st1 `| `sc1` | `standard`).

    #   * `description` \- The description of the image (provided during image creation).

    #   * `ena-support` \- A Boolean that indicates whether enhanced networking with ENA is enabled.

    #   * `hypervisor` \- The hypervisor type (`ovm` | `xen`).

    #   * `image-id` \- The ID of the image.

    #   * `image-type` \- The image type (`machine` | `kernel` | `ramdisk`).

    #   * `is-public` \- A Boolean that indicates whether the image is public.

    #   * `kernel-id` \- The kernel ID.

    #   * `manifest-location` \- The location of the image manifest.

    #   * `name` \- The name of the AMI (provided during image creation).

    #   * `owner-alias` \- String value from an Amazon-maintained list (`amazon` | `aws-marketplace` | `microsoft`) of snapshot owners. Not to be confused with the user-configured AWS account alias, which is set from the IAM console.

    #   * `owner-id` \- The AWS account ID of the image owner.

    #   * `platform` \- The platform. To only list Windows-based AMIs, use `windows`.

    #   * `product-code` \- The product code.

    #   * `product-code.type` \- The type of the product code (`devpay` | `marketplace`).

    #   * `ramdisk-id` \- The RAM disk ID.

    #   * `root-device-name` \- The device name of the root device volume (for example, `/dev/sda1`).

    #   * `root-device-type` \- The type of the root device volume (`ebs` | `instance-store`).

    #   * `state` \- The state of the image (`available` | `pending` | `failed`).

    #   * `state-reason-code` \- The reason code for the state change.

    #   * `state-reason-message` \- The message for the state change.

    #   * `sriov-net-support` \- A value of `simple` indicates that enhanced networking with the Intel 82599 VF interface is enabled.

    #   * `tag`:<key> \- The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key `Owner` and the value `TeamA`, specify `tag:Owner` for the filter name and `TeamA` for the filter value.

    #   * `tag-key` \- The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.

    #   * `virtualization-type` \- The virtualization type (`paravirtual` | `hvm`).
    filters: typing.List["Filter"] = dataclasses.field(default_factory=list, )

    # One or more image IDs.

    # Default: Describes all images available to you.
    image_ids: typing.List[str] = dataclasses.field(default_factory=list, )

    # Filters the images by the owner. Specify an AWS account ID, `self` (owner
    # is the sender of the request), or an AWS owner alias (valid values are
    # `amazon` | `aws-marketplace` | `microsoft`). Omitting this option returns
    # all images for which you have launch permissions, regardless of ownership.
    owners: typing.List[str] = dataclasses.field(default_factory=list, )

    # Checks whether you have the required permissions for the action, without
    # actually making the request, and provides an error response. If you have
    # the required permissions, the error response is `DryRunOperation`.
    # Otherwise, it is `UnauthorizedOperation`.
    dry_run: bool = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class DescribeImagesResult(OutputShapeBase):
    """
    Contains the output of DescribeImages.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "response_metadata",
                "ResponseMetadata",
                TypeInfo(typing.Dict[str, str]),
            ),
            (
                "images",
                "Images",
                TypeInfo(typing.List[Image]),
            ),
        ]

    response_metadata: typing.Dict[str, str] = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # Information about one or more images.
    images: typing.List["Image"] = dataclasses.field(default_factory=list, )


@dataclasses.dataclass
class DescribeImportImageTasksRequest(ShapeBase):
    """
    Contains the parameters for DescribeImportImageTasks.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "dry_run",
                "DryRun",
                TypeInfo(bool),
            ),
            (
                "filters",
                "Filters",
                TypeInfo(typing.List[Filter]),
            ),
            (
                "import_task_ids",
                "ImportTaskIds",
                TypeInfo(typing.List[str]),
            ),
            (
                "max_results",
                "MaxResults",
                TypeInfo(int),
            ),
            (
                "next_token",
                "NextToken",
                TypeInfo(str),
            ),
        ]

    # Checks whether you have the required permissions for the action, without
    # actually making the request, and provides an error response. If you have
    # the required permissions, the error response is `DryRunOperation`.
    # Otherwise, it is `UnauthorizedOperation`.
    dry_run: bool = dataclasses.field(default=ShapeBase.NOT_SET, )

    # Filter tasks using the `task-state` filter and one of the following values:
    # active, completed, deleting, deleted.
    filters: typing.List["Filter"] = dataclasses.field(default_factory=list, )

    # A list of import image task IDs.
    import_task_ids: typing.List[str] = dataclasses.field(
        default_factory=list,
    )

    # The maximum number of results to return in a single call. To retrieve the
    # remaining results, make another call with the returned `NextToken` value.
    max_results: int = dataclasses.field(default=ShapeBase.NOT_SET, )

    # A token that indicates the next page of results.
    next_token: str = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class DescribeImportImageTasksResult(OutputShapeBase):
    """
    Contains the output for DescribeImportImageTasks.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "response_metadata",
                "ResponseMetadata",
                TypeInfo(typing.Dict[str, str]),
            ),
            (
                "import_image_tasks",
                "ImportImageTasks",
                TypeInfo(typing.List[ImportImageTask]),
            ),
            (
                "next_token",
                "NextToken",
                TypeInfo(str),
            ),
        ]

    response_metadata: typing.Dict[str, str] = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # A list of zero or more import image tasks that are currently active or were
    # completed or canceled in the previous 7 days.
    import_image_tasks: typing.List["ImportImageTask"] = dataclasses.field(
        default_factory=list,
    )

    # The token to use to get the next page of results. This value is `null` when
    # there are no more results to return.
    next_token: str = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class DescribeImportSnapshotTasksRequest(ShapeBase):
    """
    Contains the parameters for DescribeImportSnapshotTasks.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "dry_run",
                "DryRun",
                TypeInfo(bool),
            ),
            (
                "filters",
                "Filters",
                TypeInfo(typing.List[Filter]),
            ),
            (
                "import_task_ids",
                "ImportTaskIds",
                TypeInfo(typing.List[str]),
            ),
            (
                "max_results",
                "MaxResults",
                TypeInfo(int),
            ),
            (
                "next_token",
                "NextToken",
                TypeInfo(str),
            ),
        ]

    # Checks whether you have the required permissions for the action, without
    # actually making the request, and provides an error response. If you have
    # the required permissions, the error response is `DryRunOperation`.
    # Otherwise, it is `UnauthorizedOperation`.
    dry_run: bool = dataclasses.field(default=ShapeBase.NOT_SET, )

    # One or more filters.
    filters: typing.List["Filter"] = dataclasses.field(default_factory=list, )

    # A list of import snapshot task IDs.
    import_task_ids: typing.List[str] = dataclasses.field(
        default_factory=list,
    )

    # The maximum number of results to return in a single call. To retrieve the
    # remaining results, make another call with the returned `NextToken` value.
    max_results: int = dataclasses.field(default=ShapeBase.NOT_SET, )

    # A token that indicates the next page of results.
    next_token: str = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class DescribeImportSnapshotTasksResult(OutputShapeBase):
    """
    Contains the output for DescribeImportSnapshotTasks.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "response_metadata",
                "ResponseMetadata",
                TypeInfo(typing.Dict[str, str]),
            ),
            (
                "import_snapshot_tasks",
                "ImportSnapshotTasks",
                TypeInfo(typing.List[ImportSnapshotTask]),
            ),
            (
                "next_token",
                "NextToken",
                TypeInfo(str),
            ),
        ]

    response_metadata: typing.Dict[str, str] = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # A list of zero or more import snapshot tasks that are currently active or
    # were completed or canceled in the previous 7 days.
    import_snapshot_tasks: typing.List["ImportSnapshotTask"
                                      ] = dataclasses.field(
                                          default_factory=list,
                                      )

    # The token to use to get the next page of results. This value is `null` when
    # there are no more results to return.
    next_token: str = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class DescribeInstanceAttributeRequest(ShapeBase):
    """
    Contains the parameters for DescribeInstanceAttribute.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "attribute",
                "Attribute",
                TypeInfo(InstanceAttributeName),
            ),
            (
                "instance_id",
                "InstanceId",
                TypeInfo(str),
            ),
            (
                "dry_run",
                "DryRun",
                TypeInfo(bool),
            ),
        ]

    # The instance attribute.

    # Note: The `enaSupport` attribute is not supported at this time.
    attribute: "InstanceAttributeName" = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # The ID of the instance.
    instance_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # Checks whether you have the required permissions for the action, without
    # actually making the request, and provides an error response. If you have
    # the required permissions, the error response is `DryRunOperation`.
    # Otherwise, it is `UnauthorizedOperation`.
    dry_run: bool = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class DescribeInstanceCreditSpecificationsRequest(ShapeBase):
    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "dry_run",
                "DryRun",
                TypeInfo(bool),
            ),
            (
                "filters",
                "Filters",
                TypeInfo(typing.List[Filter]),
            ),
            (
                "instance_ids",
                "InstanceIds",
                TypeInfo(typing.List[str]),
            ),
            (
                "max_results",
                "MaxResults",
                TypeInfo(int),
            ),
            (
                "next_token",
                "NextToken",
                TypeInfo(str),
            ),
        ]

    # Checks whether you have the required permissions for the action, without
    # actually making the request, and provides an error response. If you have
    # the required permissions, the error response is `DryRunOperation`.
    # Otherwise, it is `UnauthorizedOperation`.
    dry_run: bool = dataclasses.field(default=ShapeBase.NOT_SET, )

    # One or more filters.

    #   * `instance-id` \- The ID of the instance.
    filters: typing.List["Filter"] = dataclasses.field(default_factory=list, )

    # One or more instance IDs.

    # Default: Describes all your instances.

    # Constraints: Maximum 1000 explicitly specified instance IDs.
    instance_ids: typing.List[str] = dataclasses.field(default_factory=list, )

    # The maximum number of results to return in a single call. To retrieve the
    # remaining results, make another call with the returned `NextToken` value.
    # This value can be between 5 and 1000. You cannot specify this parameter and
    # the instance IDs parameter in the same call.
    max_results: int = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The token to retrieve the next page of results.
    next_token: str = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class DescribeInstanceCreditSpecificationsResult(OutputShapeBase):
    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "response_metadata",
                "ResponseMetadata",
                TypeInfo(typing.Dict[str, str]),
            ),
            (
                "instance_credit_specifications",
                "InstanceCreditSpecifications",
                TypeInfo(typing.List[InstanceCreditSpecification]),
            ),
            (
                "next_token",
                "NextToken",
                TypeInfo(str),
            ),
        ]

    response_metadata: typing.Dict[str, str] = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # Information about the credit option for CPU usage of an instance.
    instance_credit_specifications: typing.List["InstanceCreditSpecification"
                                               ] = dataclasses.field(
                                                   default_factory=list,
                                               )

    # The token to use to retrieve the next page of results. This value is `null`
    # when there are no more results to return.
    next_token: str = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class DescribeInstanceStatusRequest(ShapeBase):
    """
    Contains the parameters for DescribeInstanceStatus.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "filters",
                "Filters",
                TypeInfo(typing.List[Filter]),
            ),
            (
                "instance_ids",
                "InstanceIds",
                TypeInfo(typing.List[str]),
            ),
            (
                "max_results",
                "MaxResults",
                TypeInfo(int),
            ),
            (
                "next_token",
                "NextToken",
                TypeInfo(str),
            ),
            (
                "dry_run",
                "DryRun",
                TypeInfo(bool),
            ),
            (
                "include_all_instances",
                "IncludeAllInstances",
                TypeInfo(bool),
            ),
        ]

    # One or more filters.

    #   * `availability-zone` \- The Availability Zone of the instance.

    #   * `event.code` \- The code for the scheduled event (`instance-reboot` | `system-reboot` | `system-maintenance` | `instance-retirement` | `instance-stop`).

    #   * `event.description` \- A description of the event.

    #   * `event.not-after` \- The latest end time for the scheduled event (for example, `2014-09-15T17:15:20.000Z`).

    #   * `event.not-before` \- The earliest start time for the scheduled event (for example, `2014-09-15T17:15:20.000Z`).

    #   * `instance-state-code` \- The code for the instance state, as a 16-bit unsigned integer. The high byte is used for internal purposes and should be ignored. The low byte is set based on the state represented. The valid values are 0 (pending), 16 (running), 32 (shutting-down), 48 (terminated), 64 (stopping), and 80 (stopped).

    #   * `instance-state-name` \- The state of the instance (`pending` | `running` | `shutting-down` | `terminated` | `stopping` | `stopped`).

    #   * `instance-status.reachability` \- Filters on instance status where the name is `reachability` (`passed` | `failed` | `initializing` | `insufficient-data`).

    #   * `instance-status.status` \- The status of the instance (`ok` | `impaired` | `initializing` | `insufficient-data` | `not-applicable`).

    #   * `system-status.reachability` \- Filters on system status where the name is `reachability` (`passed` | `failed` | `initializing` | `insufficient-data`).

    #   * `system-status.status` \- The system status of the instance (`ok` | `impaired` | `initializing` | `insufficient-data` | `not-applicable`).
    filters: typing.List["Filter"] = dataclasses.field(default_factory=list, )

    # One or more instance IDs.

    # Default: Describes all your instances.

    # Constraints: Maximum 100 explicitly specified instance IDs.
    instance_ids: typing.List[str] = dataclasses.field(default_factory=list, )

    # The maximum number of results to return in a single call. To retrieve the
    # remaining results, make another call with the returned `NextToken` value.
    # This value can be between 5 and 1000. You cannot specify this parameter and
    # the instance IDs parameter in the same call.
    max_results: int = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The token to retrieve the next page of results.
    next_token: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # Checks whether you have the required permissions for the action, without
    # actually making the request, and provides an error response. If you have
    # the required permissions, the error response is `DryRunOperation`.
    # Otherwise, it is `UnauthorizedOperation`.
    dry_run: bool = dataclasses.field(default=ShapeBase.NOT_SET, )

    # When `true`, includes the health status for all instances. When `false`,
    # includes the health status for running instances only.

    # Default: `false`
    include_all_instances: bool = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class DescribeInstanceStatusResult(OutputShapeBase):
    """
    Contains the output of DescribeInstanceStatus.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "response_metadata",
                "ResponseMetadata",
                TypeInfo(typing.Dict[str, str]),
            ),
            (
                "instance_statuses",
                "InstanceStatuses",
                TypeInfo(typing.List[InstanceStatus]),
            ),
            (
                "next_token",
                "NextToken",
                TypeInfo(str),
            ),
        ]

    response_metadata: typing.Dict[str, str] = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # One or more instance status descriptions.
    instance_statuses: typing.List["InstanceStatus"] = dataclasses.field(
        default_factory=list,
    )

    # The token to use to retrieve the next page of results. This value is `null`
    # when there are no more results to return.
    next_token: str = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class DescribeInstancesRequest(ShapeBase):
    """
    Contains the parameters for DescribeInstances.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "filters",
                "Filters",
                TypeInfo(typing.List[Filter]),
            ),
            (
                "instance_ids",
                "InstanceIds",
                TypeInfo(typing.List[str]),
            ),
            (
                "dry_run",
                "DryRun",
                TypeInfo(bool),
            ),
            (
                "max_results",
                "MaxResults",
                TypeInfo(int),
            ),
            (
                "next_token",
                "NextToken",
                TypeInfo(str),
            ),
        ]

    # One or more filters.

    #   * `affinity` \- The affinity setting for an instance running on a Dedicated Host (`default` | `host`).

    #   * `architecture` \- The instance architecture (`i386` | `x86_64`).

    #   * `availability-zone` \- The Availability Zone of the instance.

    #   * `block-device-mapping.attach-time` \- The attach time for an EBS volume mapped to the instance, for example, `2010-09-15T17:15:20.000Z`.

    #   * `block-device-mapping.delete-on-termination` \- A Boolean that indicates whether the EBS volume is deleted on instance termination.

    #   * `block-device-mapping.device-name` \- The device name specified in the block device mapping (for example, `/dev/sdh` or `xvdh`).

    #   * `block-device-mapping.status` \- The status for the EBS volume (`attaching` | `attached` | `detaching` | `detached`).

    #   * `block-device-mapping.volume-id` \- The volume ID of the EBS volume.

    #   * `client-token` \- The idempotency token you provided when you launched the instance.

    #   * `dns-name` \- The public DNS name of the instance.

    #   * `group-id` \- The ID of the security group for the instance. EC2-Classic only.

    #   * `group-name` \- The name of the security group for the instance. EC2-Classic only.

    #   * `host-id` \- The ID of the Dedicated Host on which the instance is running, if applicable.

    #   * `hypervisor` \- The hypervisor type of the instance (`ovm` | `xen`).

    #   * `iam-instance-profile.arn` \- The instance profile associated with the instance. Specified as an ARN.

    #   * `image-id` \- The ID of the image used to launch the instance.

    #   * `instance-id` \- The ID of the instance.

    #   * `instance-lifecycle` \- Indicates whether this is a Spot Instance or a Scheduled Instance (`spot` | `scheduled`).

    #   * `instance-state-code` \- The state of the instance, as a 16-bit unsigned integer. The high byte is used for internal purposes and should be ignored. The low byte is set based on the state represented. The valid values are: 0 (pending), 16 (running), 32 (shutting-down), 48 (terminated), 64 (stopping), and 80 (stopped).

    #   * `instance-state-name` \- The state of the instance (`pending` | `running` | `shutting-down` | `terminated` | `stopping` | `stopped`).

    #   * `instance-type` \- The type of instance (for example, `t2.micro`).

    #   * `instance.group-id` \- The ID of the security group for the instance.

    #   * `instance.group-name` \- The name of the security group for the instance.

    #   * `ip-address` \- The public IPv4 address of the instance.

    #   * `kernel-id` \- The kernel ID.

    #   * `key-name` \- The name of the key pair used when the instance was launched.

    #   * `launch-index` \- When launching multiple instances, this is the index for the instance in the launch group (for example, 0, 1, 2, and so on).

    #   * `launch-time` \- The time when the instance was launched.

    #   * `monitoring-state` \- Indicates whether detailed monitoring is enabled (`disabled` | `enabled`).

    #   * `network-interface.addresses.private-ip-address` \- The private IPv4 address associated with the network interface.

    #   * `network-interface.addresses.primary` \- Specifies whether the IPv4 address of the network interface is the primary private IPv4 address.

    #   * `network-interface.addresses.association.public-ip` \- The ID of the association of an Elastic IP address (IPv4) with a network interface.

    #   * `network-interface.addresses.association.ip-owner-id` \- The owner ID of the private IPv4 address associated with the network interface.

    #   * `network-interface.association.public-ip` \- The address of the Elastic IP address (IPv4) bound to the network interface.

    #   * `network-interface.association.ip-owner-id` \- The owner of the Elastic IP address (IPv4) associated with the network interface.

    #   * `network-interface.association.allocation-id` \- The allocation ID returned when you allocated the Elastic IP address (IPv4) for your network interface.

    #   * `network-interface.association.association-id` \- The association ID returned when the network interface was associated with an IPv4 address.

    #   * `network-interface.attachment.attachment-id` \- The ID of the interface attachment.

    #   * `network-interface.attachment.instance-id` \- The ID of the instance to which the network interface is attached.

    #   * `network-interface.attachment.instance-owner-id` \- The owner ID of the instance to which the network interface is attached.

    #   * `network-interface.attachment.device-index` \- The device index to which the network interface is attached.

    #   * `network-interface.attachment.status` \- The status of the attachment (`attaching` | `attached` | `detaching` | `detached`).

    #   * `network-interface.attachment.attach-time` \- The time that the network interface was attached to an instance.

    #   * `network-interface.attachment.delete-on-termination` \- Specifies whether the attachment is deleted when an instance is terminated.

    #   * `network-interface.availability-zone` \- The Availability Zone for the network interface.

    #   * `network-interface.description` \- The description of the network interface.

    #   * `network-interface.group-id` \- The ID of a security group associated with the network interface.

    #   * `network-interface.group-name` \- The name of a security group associated with the network interface.

    #   * `network-interface.ipv6-addresses.ipv6-address` \- The IPv6 address associated with the network interface.

    #   * `network-interface.mac-address` \- The MAC address of the network interface.

    #   * `network-interface.network-interface-id` \- The ID of the network interface.

    #   * `network-interface.owner-id` \- The ID of the owner of the network interface.

    #   * `network-interface.private-dns-name` \- The private DNS name of the network interface.

    #   * `network-interface.requester-id` \- The requester ID for the network interface.

    #   * `network-interface.requester-managed` \- Indicates whether the network interface is being managed by AWS.

    #   * `network-interface.status` \- The status of the network interface (`available`) | `in-use`).

    #   * `network-interface.source-dest-check` \- Whether the network interface performs source/destination checking. A value of `true` means that checking is enabled, and `false` means that checking is disabled. The value must be `false` for the network interface to perform network address translation (NAT) in your VPC.

    #   * `network-interface.subnet-id` \- The ID of the subnet for the network interface.

    #   * `network-interface.vpc-id` \- The ID of the VPC for the network interface.

    #   * `owner-id` \- The AWS account ID of the instance owner.

    #   * `placement-group-name` \- The name of the placement group for the instance.

    #   * `platform` \- The platform. Use `windows` if you have Windows instances; otherwise, leave blank.

    #   * `private-dns-name` \- The private IPv4 DNS name of the instance.

    #   * `private-ip-address` \- The private IPv4 address of the instance.

    #   * `product-code` \- The product code associated with the AMI used to launch the instance.

    #   * `product-code.type` \- The type of product code (`devpay` | `marketplace`).

    #   * `ramdisk-id` \- The RAM disk ID.

    #   * `reason` \- The reason for the current state of the instance (for example, shows "User Initiated [date]" when you stop or terminate the instance). Similar to the state-reason-code filter.

    #   * `requester-id` \- The ID of the entity that launched the instance on your behalf (for example, AWS Management Console, Auto Scaling, and so on).

    #   * `reservation-id` \- The ID of the instance's reservation. A reservation ID is created any time you launch an instance. A reservation ID has a one-to-one relationship with an instance launch request, but can be associated with more than one instance if you launch multiple instances using the same launch request. For example, if you launch one instance, you get one reservation ID. If you launch ten instances using the same launch request, you also get one reservation ID.

    #   * `root-device-name` \- The device name of the root device volume (for example, `/dev/sda1`).

    #   * `root-device-type` \- The type of the root device volume (`ebs` | `instance-store`).

    #   * `source-dest-check` \- Indicates whether the instance performs source/destination checking. A value of `true` means that checking is enabled, and `false` means that checking is disabled. The value must be `false` for the instance to perform network address translation (NAT) in your VPC.

    #   * `spot-instance-request-id` \- The ID of the Spot Instance request.

    #   * `state-reason-code` \- The reason code for the state change.

    #   * `state-reason-message` \- A message that describes the state change.

    #   * `subnet-id` \- The ID of the subnet for the instance.

    #   * `tag`:<key> \- The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key `Owner` and the value `TeamA`, specify `tag:Owner` for the filter name and `TeamA` for the filter value.

    #   * `tag-key` \- The key of a tag assigned to the resource. Use this filter to find all resources that have a tag with a specific key, regardless of the tag value.

    #   * `tenancy` \- The tenancy of an instance (`dedicated` | `default` | `host`).

    #   * `virtualization-type` \- The virtualization type of the instance (`paravirtual` | `hvm`).

    #   * `vpc-id` \- The ID of the VPC that the instance is running in.
    filters: typing.List["Filter"] = dataclasses.field(default_factory=list, )

    # One or more instance IDs.

    # Default: Describes all your instances.
    instance_ids: typing.List[str] = dataclasses.field(default_factory=list, )

    # Checks whether you have the required permissions for the action, without
    # actually making the request, and provides an error response. If you have
    # the required permissions, the error response is `DryRunOperation`.
    # Otherwise, it is `UnauthorizedOperation`.
    dry_run: bool = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The maximum number of results to return in a single call. To retrieve the
    # remaining results, make another call with the returned `NextToken` value.
    # This value can be between 5 and 1000. You cannot specify this parameter and
    # the instance IDs parameter in the same call.
    max_results: int = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The token to request the next page of results.
    next_token: str = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class DescribeInstancesResult(OutputShapeBase):
    """
    Contains the output of DescribeInstances.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "response_metadata",
                "ResponseMetadata",
                TypeInfo(typing.Dict[str, str]),
            ),
            (
                "reservations",
                "Reservations",
                TypeInfo(typing.List[Reservation]),
            ),
            (
                "next_token",
                "NextToken",
                TypeInfo(str),
            ),
        ]

    response_metadata: typing.Dict[str, str] = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # Zero or more reservations.
    reservations: typing.List["Reservation"] = dataclasses.field(
        default_factory=list,
    )

    # The token to use to retrieve the next page of results. This value is `null`
    # when there are no more results to return.
    next_token: str = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class DescribeInternetGatewaysRequest(ShapeBase):
    """
    Contains the parameters for DescribeInternetGateways.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "filters",
                "Filters",
                TypeInfo(typing.List[Filter]),
            ),
            (
                "dry_run",
                "DryRun",
                TypeInfo(bool),
            ),
            (
                "internet_gateway_ids",
                "InternetGatewayIds",
                TypeInfo(typing.List[str]),
            ),
        ]

    # One or more filters.

    #   * `attachment.state` \- The current state of the attachment between the gateway and the VPC (`available`). Present only if a VPC is attached.

    #   * `attachment.vpc-id` \- The ID of an attached VPC.

    #   * `internet-gateway-id` \- The ID of the Internet gateway.

    #   * `tag`:<key> \- The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key `Owner` and the value `TeamA`, specify `tag:Owner` for the filter name and `TeamA` for the filter value.

    #   * `tag-key` \- The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.
    filters: typing.List["Filter"] = dataclasses.field(default_factory=list, )

    # Checks whether you have the required permissions for the action, without
    # actually making the request, and provides an error response. If you have
    # the required permissions, the error response is `DryRunOperation`.
    # Otherwise, it is `UnauthorizedOperation`.
    dry_run: bool = dataclasses.field(default=ShapeBase.NOT_SET, )

    # One or more internet gateway IDs.

    # Default: Describes all your internet gateways.
    internet_gateway_ids: typing.List[str] = dataclasses.field(
        default_factory=list,
    )


@dataclasses.dataclass
class DescribeInternetGatewaysResult(OutputShapeBase):
    """
    Contains the output of DescribeInternetGateways.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "response_metadata",
                "ResponseMetadata",
                TypeInfo(typing.Dict[str, str]),
            ),
            (
                "internet_gateways",
                "InternetGateways",
                TypeInfo(typing.List[InternetGateway]),
            ),
        ]

    response_metadata: typing.Dict[str, str] = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # Information about one or more internet gateways.
    internet_gateways: typing.List["InternetGateway"] = dataclasses.field(
        default_factory=list,
    )


@dataclasses.dataclass
class DescribeKeyPairsRequest(ShapeBase):
    """
    Contains the parameters for DescribeKeyPairs.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "filters",
                "Filters",
                TypeInfo(typing.List[Filter]),
            ),
            (
                "key_names",
                "KeyNames",
                TypeInfo(typing.List[str]),
            ),
            (
                "dry_run",
                "DryRun",
                TypeInfo(bool),
            ),
        ]

    # One or more filters.

    #   * `fingerprint` \- The fingerprint of the key pair.

    #   * `key-name` \- The name of the key pair.
    filters: typing.List["Filter"] = dataclasses.field(default_factory=list, )

    # One or more key pair names.

    # Default: Describes all your key pairs.
    key_names: typing.List[str] = dataclasses.field(default_factory=list, )

    # Checks whether you have the required permissions for the action, without
    # actually making the request, and provides an error response. If you have
    # the required permissions, the error response is `DryRunOperation`.
    # Otherwise, it is `UnauthorizedOperation`.
    dry_run: bool = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class DescribeKeyPairsResult(OutputShapeBase):
    """
    Contains the output of DescribeKeyPairs.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "response_metadata",
                "ResponseMetadata",
                TypeInfo(typing.Dict[str, str]),
            ),
            (
                "key_pairs",
                "KeyPairs",
                TypeInfo(typing.List[KeyPairInfo]),
            ),
        ]

    response_metadata: typing.Dict[str, str] = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # Information about one or more key pairs.
    key_pairs: typing.List["KeyPairInfo"] = dataclasses.field(
        default_factory=list,
    )


@dataclasses.dataclass
class DescribeLaunchTemplateVersionsRequest(ShapeBase):
    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "dry_run",
                "DryRun",
                TypeInfo(bool),
            ),
            (
                "launch_template_id",
                "LaunchTemplateId",
                TypeInfo(str),
            ),
            (
                "launch_template_name",
                "LaunchTemplateName",
                TypeInfo(str),
            ),
            (
                "versions",
                "Versions",
                TypeInfo(typing.List[str]),
            ),
            (
                "min_version",
                "MinVersion",
                TypeInfo(str),
            ),
            (
                "max_version",
                "MaxVersion",
                TypeInfo(str),
            ),
            (
                "next_token",
                "NextToken",
                TypeInfo(str),
            ),
            (
                "max_results",
                "MaxResults",
                TypeInfo(int),
            ),
            (
                "filters",
                "Filters",
                TypeInfo(typing.List[Filter]),
            ),
        ]

    # Checks whether you have the required permissions for the action, without
    # actually making the request, and provides an error response. If you have
    # the required permissions, the error response is `DryRunOperation`.
    # Otherwise, it is `UnauthorizedOperation`.
    dry_run: bool = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The ID of the launch template. You must specify either the launch template
    # ID or launch template name in the request.
    launch_template_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The name of the launch template. You must specify either the launch
    # template ID or launch template name in the request.
    launch_template_name: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # One or more versions of the launch template.
    versions: typing.List[str] = dataclasses.field(default_factory=list, )

    # The version number after which to describe launch template versions.
    min_version: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The version number up to which to describe launch template versions.
    max_version: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The token to request the next page of results.
    next_token: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The maximum number of results to return in a single call. To retrieve the
    # remaining results, make another call with the returned `NextToken` value.
    # This value can be between 1 and 200.
    max_results: int = dataclasses.field(default=ShapeBase.NOT_SET, )

    # One or more filters.

    #   * `create-time` \- The time the launch template version was created.

    #   * `ebs-optimized` \- A boolean that indicates whether the instance is optimized for Amazon EBS I/O.

    #   * `iam-instance-profile` \- The ARN of the IAM instance profile.

    #   * `image-id` \- The ID of the AMI.

    #   * `instance-type` \- The instance type.

    #   * `is-default-version` \- A boolean that indicates whether the launch template version is the default version.

    #   * `kernel-id` \- The kernel ID.

    #   * `ram-disk-id` \- The RAM disk ID.
    filters: typing.List["Filter"] = dataclasses.field(default_factory=list, )


@dataclasses.dataclass
class DescribeLaunchTemplateVersionsResult(OutputShapeBase):
    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "response_metadata",
                "ResponseMetadata",
                TypeInfo(typing.Dict[str, str]),
            ),
            (
                "launch_template_versions",
                "LaunchTemplateVersions",
                TypeInfo(typing.List[LaunchTemplateVersion]),
            ),
            (
                "next_token",
                "NextToken",
                TypeInfo(str),
            ),
        ]

    response_metadata: typing.Dict[str, str] = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # Information about the launch template versions.
    launch_template_versions: typing.List["LaunchTemplateVersion"
                                         ] = dataclasses.field(
                                             default_factory=list,
                                         )

    # The token to use to retrieve the next page of results. This value is `null`
    # when there are no more results to return.
    next_token: str = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class DescribeLaunchTemplatesRequest(ShapeBase):
    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "dry_run",
                "DryRun",
                TypeInfo(bool),
            ),
            (
                "launch_template_ids",
                "LaunchTemplateIds",
                TypeInfo(typing.List[str]),
            ),
            (
                "launch_template_names",
                "LaunchTemplateNames",
                TypeInfo(typing.List[str]),
            ),
            (
                "filters",
                "Filters",
                TypeInfo(typing.List[Filter]),
            ),
            (
                "next_token",
                "NextToken",
                TypeInfo(str),
            ),
            (
                "max_results",
                "MaxResults",
                TypeInfo(int),
            ),
        ]

    # Checks whether you have the required permissions for the action, without
    # actually making the request, and provides an error response. If you have
    # the required permissions, the error response is `DryRunOperation`.
    # Otherwise, it is `UnauthorizedOperation`.
    dry_run: bool = dataclasses.field(default=ShapeBase.NOT_SET, )

    # One or more launch template IDs.
    launch_template_ids: typing.List[str] = dataclasses.field(
        default_factory=list,
    )

    # One or more launch template names.
    launch_template_names: typing.List[str] = dataclasses.field(
        default_factory=list,
    )

    # One or more filters.

    #   * `create-time` \- The time the launch template was created.

    #   * `launch-template-name` \- The name of the launch template.

    #   * `tag`:<key> \- The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key `Owner` and the value `TeamA`, specify `tag:Owner` for the filter name and `TeamA` for the filter value.

    #   * `tag-key` \- The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.
    filters: typing.List["Filter"] = dataclasses.field(default_factory=list, )

    # The token to request the next page of results.
    next_token: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The maximum number of results to return in a single call. To retrieve the
    # remaining results, make another call with the returned `NextToken` value.
    # This value can be between 5 and 1000.
    max_results: int = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class DescribeLaunchTemplatesResult(OutputShapeBase):
    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "response_metadata",
                "ResponseMetadata",
                TypeInfo(typing.Dict[str, str]),
            ),
            (
                "launch_templates",
                "LaunchTemplates",
                TypeInfo(typing.List[LaunchTemplate]),
            ),
            (
                "next_token",
                "NextToken",
                TypeInfo(str),
            ),
        ]

    response_metadata: typing.Dict[str, str] = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # Information about the launch templates.
    launch_templates: typing.List["LaunchTemplate"] = dataclasses.field(
        default_factory=list,
    )

    # The token to use to retrieve the next page of results. This value is `null`
    # when there are no more results to return.
    next_token: str = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class DescribeMovingAddressesRequest(ShapeBase):
    """
    Contains the parameters for DescribeMovingAddresses.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "filters",
                "Filters",
                TypeInfo(typing.List[Filter]),
            ),
            (
                "dry_run",
                "DryRun",
                TypeInfo(bool),
            ),
            (
                "max_results",
                "MaxResults",
                TypeInfo(int),
            ),
            (
                "next_token",
                "NextToken",
                TypeInfo(str),
            ),
            (
                "public_ips",
                "PublicIps",
                TypeInfo(typing.List[str]),
            ),
        ]

    # One or more filters.

    #   * `moving-status` \- The status of the Elastic IP address (`MovingToVpc` | `RestoringToClassic`).
    filters: typing.List["Filter"] = dataclasses.field(default_factory=list, )

    # Checks whether you have the required permissions for the action, without
    # actually making the request, and provides an error response. If you have
    # the required permissions, the error response is `DryRunOperation`.
    # Otherwise, it is `UnauthorizedOperation`.
    dry_run: bool = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The maximum number of results to return for the request in a single page.
    # The remaining results of the initial request can be seen by sending another
    # request with the returned `NextToken` value. This value can be between 5
    # and 1000; if `MaxResults` is given a value outside of this range, an error
    # is returned.

    # Default: If no value is provided, the default is 1000.
    max_results: int = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The token to use to retrieve the next page of results.
    next_token: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # One or more Elastic IP addresses.
    public_ips: typing.List[str] = dataclasses.field(default_factory=list, )


@dataclasses.dataclass
class DescribeMovingAddressesResult(OutputShapeBase):
    """
    Contains the output of DescribeMovingAddresses.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "response_metadata",
                "ResponseMetadata",
                TypeInfo(typing.Dict[str, str]),
            ),
            (
                "moving_address_statuses",
                "MovingAddressStatuses",
                TypeInfo(typing.List[MovingAddressStatus]),
            ),
            (
                "next_token",
                "NextToken",
                TypeInfo(str),
            ),
        ]

    response_metadata: typing.Dict[str, str] = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # The status for each Elastic IP address.
    moving_address_statuses: typing.List["MovingAddressStatus"
                                        ] = dataclasses.field(
                                            default_factory=list,
                                        )

    # The token to use to retrieve the next page of results. This value is `null`
    # when there are no more results to return.
    next_token: str = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class DescribeNatGatewaysRequest(ShapeBase):
    """
    Contains the parameters for DescribeNatGateways.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "filter",
                "Filter",
                TypeInfo(typing.List[Filter]),
            ),
            (
                "max_results",
                "MaxResults",
                TypeInfo(int),
            ),
            (
                "nat_gateway_ids",
                "NatGatewayIds",
                TypeInfo(typing.List[str]),
            ),
            (
                "next_token",
                "NextToken",
                TypeInfo(str),
            ),
        ]

    # One or more filters.

    #   * `nat-gateway-id` \- The ID of the NAT gateway.

    #   * `state` \- The state of the NAT gateway (`pending` | `failed` | `available` | `deleting` | `deleted`).

    #   * `subnet-id` \- The ID of the subnet in which the NAT gateway resides.

    #   * `tag`:<key> \- The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key `Owner` and the value `TeamA`, specify `tag:Owner` for the filter name and `TeamA` for the filter value.

    #   * `tag-key` \- The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.

    #   * `vpc-id` \- The ID of the VPC in which the NAT gateway resides.
    filter: typing.List["Filter"] = dataclasses.field(default_factory=list, )

    # The maximum number of items to return for this request. The request returns
    # a token that you can specify in a subsequent call to get the next set of
    # results.

    # Constraint: If the value specified is greater than 1000, we return only
    # 1000 items.
    max_results: int = dataclasses.field(default=ShapeBase.NOT_SET, )

    # One or more NAT gateway IDs.
    nat_gateway_ids: typing.List[str] = dataclasses.field(
        default_factory=list,
    )

    # The token to retrieve the next page of results.
    next_token: str = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class DescribeNatGatewaysResult(OutputShapeBase):
    """
    Contains the output of DescribeNatGateways.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "response_metadata",
                "ResponseMetadata",
                TypeInfo(typing.Dict[str, str]),
            ),
            (
                "nat_gateways",
                "NatGateways",
                TypeInfo(typing.List[NatGateway]),
            ),
            (
                "next_token",
                "NextToken",
                TypeInfo(str),
            ),
        ]

    response_metadata: typing.Dict[str, str] = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # Information about the NAT gateways.
    nat_gateways: typing.List["NatGateway"] = dataclasses.field(
        default_factory=list,
    )

    # The token to use to retrieve the next page of results. This value is `null`
    # when there are no more results to return.
    next_token: str = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class DescribeNetworkAclsRequest(ShapeBase):
    """
    Contains the parameters for DescribeNetworkAcls.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "filters",
                "Filters",
                TypeInfo(typing.List[Filter]),
            ),
            (
                "dry_run",
                "DryRun",
                TypeInfo(bool),
            ),
            (
                "network_acl_ids",
                "NetworkAclIds",
                TypeInfo(typing.List[str]),
            ),
        ]

    # One or more filters.

    #   * `association.association-id` \- The ID of an association ID for the ACL.

    #   * `association.network-acl-id` \- The ID of the network ACL involved in the association.

    #   * `association.subnet-id` \- The ID of the subnet involved in the association.

    #   * `default` \- Indicates whether the ACL is the default network ACL for the VPC.

    #   * `entry.cidr` \- The IPv4 CIDR range specified in the entry.

    #   * `entry.egress` \- Indicates whether the entry applies to egress traffic.

    #   * `entry.icmp.code` \- The ICMP code specified in the entry, if any.

    #   * `entry.icmp.type` \- The ICMP type specified in the entry, if any.

    #   * `entry.ipv6-cidr` \- The IPv6 CIDR range specified in the entry.

    #   * `entry.port-range.from` \- The start of the port range specified in the entry.

    #   * `entry.port-range.to` \- The end of the port range specified in the entry.

    #   * `entry.protocol` \- The protocol specified in the entry (`tcp` | `udp` | `icmp` or a protocol number).

    #   * `entry.rule-action` \- Allows or denies the matching traffic (`allow` | `deny`).

    #   * `entry.rule-number` \- The number of an entry (in other words, rule) in the ACL's set of entries.

    #   * `network-acl-id` \- The ID of the network ACL.

    #   * `tag`:<key> \- The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key `Owner` and the value `TeamA`, specify `tag:Owner` for the filter name and `TeamA` for the filter value.

    #   * `tag-key` \- The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.

    #   * `vpc-id` \- The ID of the VPC for the network ACL.
    filters: typing.List["Filter"] = dataclasses.field(default_factory=list, )

    # Checks whether you have the required permissions for the action, without
    # actually making the request, and provides an error response. If you have
    # the required permissions, the error response is `DryRunOperation`.
    # Otherwise, it is `UnauthorizedOperation`.
    dry_run: bool = dataclasses.field(default=ShapeBase.NOT_SET, )

    # One or more network ACL IDs.

    # Default: Describes all your network ACLs.
    network_acl_ids: typing.List[str] = dataclasses.field(
        default_factory=list,
    )


@dataclasses.dataclass
class DescribeNetworkAclsResult(OutputShapeBase):
    """
    Contains the output of DescribeNetworkAcls.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "response_metadata",
                "ResponseMetadata",
                TypeInfo(typing.Dict[str, str]),
            ),
            (
                "network_acls",
                "NetworkAcls",
                TypeInfo(typing.List[NetworkAcl]),
            ),
        ]

    response_metadata: typing.Dict[str, str] = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # Information about one or more network ACLs.
    network_acls: typing.List["NetworkAcl"] = dataclasses.field(
        default_factory=list,
    )


@dataclasses.dataclass
class DescribeNetworkInterfaceAttributeRequest(ShapeBase):
    """
    Contains the parameters for DescribeNetworkInterfaceAttribute.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "network_interface_id",
                "NetworkInterfaceId",
                TypeInfo(str),
            ),
            (
                "attribute",
                "Attribute",
                TypeInfo(NetworkInterfaceAttribute),
            ),
            (
                "dry_run",
                "DryRun",
                TypeInfo(bool),
            ),
        ]

    # The ID of the network interface.
    network_interface_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The attribute of the network interface. This parameter is required.
    attribute: "NetworkInterfaceAttribute" = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # Checks whether you have the required permissions for the action, without
    # actually making the request, and provides an error response. If you have
    # the required permissions, the error response is `DryRunOperation`.
    # Otherwise, it is `UnauthorizedOperation`.
    dry_run: bool = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class DescribeNetworkInterfaceAttributeResult(OutputShapeBase):
    """
    Contains the output of DescribeNetworkInterfaceAttribute.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "response_metadata",
                "ResponseMetadata",
                TypeInfo(typing.Dict[str, str]),
            ),
            (
                "attachment",
                "Attachment",
                TypeInfo(NetworkInterfaceAttachment),
            ),
            (
                "description",
                "Description",
                TypeInfo(AttributeValue),
            ),
            (
                "groups",
                "Groups",
                TypeInfo(typing.List[GroupIdentifier]),
            ),
            (
                "network_interface_id",
                "NetworkInterfaceId",
                TypeInfo(str),
            ),
            (
                "source_dest_check",
                "SourceDestCheck",
                TypeInfo(AttributeBooleanValue),
            ),
        ]

    response_metadata: typing.Dict[str, str] = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # The attachment (if any) of the network interface.
    attachment: "NetworkInterfaceAttachment" = dataclasses.field(
        default_factory=dict,
    )

    # The description of the network interface.
    description: "AttributeValue" = dataclasses.field(default_factory=dict, )

    # The security groups associated with the network interface.
    groups: typing.List["GroupIdentifier"] = dataclasses.field(
        default_factory=list,
    )

    # The ID of the network interface.
    network_interface_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # Indicates whether source/destination checking is enabled.
    source_dest_check: "AttributeBooleanValue" = dataclasses.field(
        default_factory=dict,
    )


@dataclasses.dataclass
class DescribeNetworkInterfacePermissionsRequest(ShapeBase):
    """
    Contains the parameters for DescribeNetworkInterfacePermissions.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "network_interface_permission_ids",
                "NetworkInterfacePermissionIds",
                TypeInfo(typing.List[str]),
            ),
            (
                "filters",
                "Filters",
                TypeInfo(typing.List[Filter]),
            ),
            (
                "next_token",
                "NextToken",
                TypeInfo(str),
            ),
            (
                "max_results",
                "MaxResults",
                TypeInfo(int),
            ),
        ]

    # One or more network interface permission IDs.
    network_interface_permission_ids: typing.List[str] = dataclasses.field(
        default_factory=list,
    )

    # One or more filters.

    #   * `network-interface-permission.network-interface-permission-id` \- The ID of the permission.

    #   * `network-interface-permission.network-interface-id` \- The ID of the network interface.

    #   * `network-interface-permission.aws-account-id` \- The AWS account ID.

    #   * `network-interface-permission.aws-service` \- The AWS service.

    #   * `network-interface-permission.permission` \- The type of permission (`INSTANCE-ATTACH` | `EIP-ASSOCIATE`).
    filters: typing.List["Filter"] = dataclasses.field(default_factory=list, )

    # The token to request the next page of results.
    next_token: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The maximum number of results to return in a single call. To retrieve the
    # remaining results, make another call with the returned `NextToken` value.
    # If this parameter is not specified, up to 50 results are returned by
    # default.
    max_results: int = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class DescribeNetworkInterfacePermissionsResult(OutputShapeBase):
    """
    Contains the output for DescribeNetworkInterfacePermissions.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "response_metadata",
                "ResponseMetadata",
                TypeInfo(typing.Dict[str, str]),
            ),
            (
                "network_interface_permissions",
                "NetworkInterfacePermissions",
                TypeInfo(typing.List[NetworkInterfacePermission]),
            ),
            (
                "next_token",
                "NextToken",
                TypeInfo(str),
            ),
        ]

    response_metadata: typing.Dict[str, str] = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # The network interface permissions.
    network_interface_permissions: typing.List["NetworkInterfacePermission"
                                              ] = dataclasses.field(
                                                  default_factory=list,
                                              )

    # The token to use to retrieve the next page of results.
    next_token: str = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class DescribeNetworkInterfacesRequest(ShapeBase):
    """
    Contains the parameters for DescribeNetworkInterfaces.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "filters",
                "Filters",
                TypeInfo(typing.List[Filter]),
            ),
            (
                "dry_run",
                "DryRun",
                TypeInfo(bool),
            ),
            (
                "network_interface_ids",
                "NetworkInterfaceIds",
                TypeInfo(typing.List[str]),
            ),
        ]

    # One or more filters.

    #   * `addresses.private-ip-address` \- The private IPv4 addresses associated with the network interface.

    #   * `addresses.primary` \- Whether the private IPv4 address is the primary IP address associated with the network interface.

    #   * `addresses.association.public-ip` \- The association ID returned when the network interface was associated with the Elastic IP address (IPv4).

    #   * `addresses.association.owner-id` \- The owner ID of the addresses associated with the network interface.

    #   * `association.association-id` \- The association ID returned when the network interface was associated with an IPv4 address.

    #   * `association.allocation-id` \- The allocation ID returned when you allocated the Elastic IP address (IPv4) for your network interface.

    #   * `association.ip-owner-id` \- The owner of the Elastic IP address (IPv4) associated with the network interface.

    #   * `association.public-ip` \- The address of the Elastic IP address (IPv4) bound to the network interface.

    #   * `association.public-dns-name` \- The public DNS name for the network interface (IPv4).

    #   * `attachment.attachment-id` \- The ID of the interface attachment.

    #   * `attachment.attach.time` \- The time that the network interface was attached to an instance.

    #   * `attachment.delete-on-termination` \- Indicates whether the attachment is deleted when an instance is terminated.

    #   * `attachment.device-index` \- The device index to which the network interface is attached.

    #   * `attachment.instance-id` \- The ID of the instance to which the network interface is attached.

    #   * `attachment.instance-owner-id` \- The owner ID of the instance to which the network interface is attached.

    #   * `attachment.nat-gateway-id` \- The ID of the NAT gateway to which the network interface is attached.

    #   * `attachment.status` \- The status of the attachment (`attaching` | `attached` | `detaching` | `detached`).

    #   * `availability-zone` \- The Availability Zone of the network interface.

    #   * `description` \- The description of the network interface.

    #   * `group-id` \- The ID of a security group associated with the network interface.

    #   * `group-name` \- The name of a security group associated with the network interface.

    #   * `ipv6-addresses.ipv6-address` \- An IPv6 address associated with the network interface.

    #   * `mac-address` \- The MAC address of the network interface.

    #   * `network-interface-id` \- The ID of the network interface.

    #   * `owner-id` \- The AWS account ID of the network interface owner.

    #   * `private-ip-address` \- The private IPv4 address or addresses of the network interface.

    #   * `private-dns-name` \- The private DNS name of the network interface (IPv4).

    #   * `requester-id` \- The ID of the entity that launched the instance on your behalf (for example, AWS Management Console, Auto Scaling, and so on).

    #   * `requester-managed` \- Indicates whether the network interface is being managed by an AWS service (for example, AWS Management Console, Auto Scaling, and so on).

    #   * `source-desk-check` \- Indicates whether the network interface performs source/destination checking. A value of `true` means checking is enabled, and `false` means checking is disabled. The value must be `false` for the network interface to perform network address translation (NAT) in your VPC.

    #   * `status` \- The status of the network interface. If the network interface is not attached to an instance, the status is `available`; if a network interface is attached to an instance the status is `in-use`.

    #   * `subnet-id` \- The ID of the subnet for the network interface.

    #   * `tag`:<key> \- The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key `Owner` and the value `TeamA`, specify `tag:Owner` for the filter name and `TeamA` for the filter value.

    #   * `tag-key` \- The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.

    #   * `vpc-id` \- The ID of the VPC for the network interface.
    filters: typing.List["Filter"] = dataclasses.field(default_factory=list, )

    # Checks whether you have the required permissions for the action, without
    # actually making the request, and provides an error response. If you have
    # the required permissions, the error response is `DryRunOperation`.
    # Otherwise, it is `UnauthorizedOperation`.
    dry_run: bool = dataclasses.field(default=ShapeBase.NOT_SET, )

    # One or more network interface IDs.

    # Default: Describes all your network interfaces.
    network_interface_ids: typing.List[str] = dataclasses.field(
        default_factory=list,
    )


@dataclasses.dataclass
class DescribeNetworkInterfacesResult(OutputShapeBase):
    """
    Contains the output of DescribeNetworkInterfaces.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "response_metadata",
                "ResponseMetadata",
                TypeInfo(typing.Dict[str, str]),
            ),
            (
                "network_interfaces",
                "NetworkInterfaces",
                TypeInfo(typing.List[NetworkInterface]),
            ),
        ]

    response_metadata: typing.Dict[str, str] = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # Information about one or more network interfaces.
    network_interfaces: typing.List["NetworkInterface"] = dataclasses.field(
        default_factory=list,
    )


@dataclasses.dataclass
class DescribePlacementGroupsRequest(ShapeBase):
    """
    Contains the parameters for DescribePlacementGroups.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "filters",
                "Filters",
                TypeInfo(typing.List[Filter]),
            ),
            (
                "dry_run",
                "DryRun",
                TypeInfo(bool),
            ),
            (
                "group_names",
                "GroupNames",
                TypeInfo(typing.List[str]),
            ),
        ]

    # One or more filters.

    #   * `group-name` \- The name of the placement group.

    #   * `state` \- The state of the placement group (`pending` | `available` | `deleting` | `deleted`).

    #   * `strategy` \- The strategy of the placement group (`cluster` | `spread`).
    filters: typing.List["Filter"] = dataclasses.field(default_factory=list, )

    # Checks whether you have the required permissions for the action, without
    # actually making the request, and provides an error response. If you have
    # the required permissions, the error response is `DryRunOperation`.
    # Otherwise, it is `UnauthorizedOperation`.
    dry_run: bool = dataclasses.field(default=ShapeBase.NOT_SET, )

    # One or more placement group names.

    # Default: Describes all your placement groups, or only those otherwise
    # specified.
    group_names: typing.List[str] = dataclasses.field(default_factory=list, )


@dataclasses.dataclass
class DescribePlacementGroupsResult(OutputShapeBase):
    """
    Contains the output of DescribePlacementGroups.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "response_metadata",
                "ResponseMetadata",
                TypeInfo(typing.Dict[str, str]),
            ),
            (
                "placement_groups",
                "PlacementGroups",
                TypeInfo(typing.List[PlacementGroup]),
            ),
        ]

    response_metadata: typing.Dict[str, str] = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # One or more placement groups.
    placement_groups: typing.List["PlacementGroup"] = dataclasses.field(
        default_factory=list,
    )


@dataclasses.dataclass
class DescribePrefixListsRequest(ShapeBase):
    """
    Contains the parameters for DescribePrefixLists.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "dry_run",
                "DryRun",
                TypeInfo(bool),
            ),
            (
                "filters",
                "Filters",
                TypeInfo(typing.List[Filter]),
            ),
            (
                "max_results",
                "MaxResults",
                TypeInfo(int),
            ),
            (
                "next_token",
                "NextToken",
                TypeInfo(str),
            ),
            (
                "prefix_list_ids",
                "PrefixListIds",
                TypeInfo(typing.List[str]),
            ),
        ]

    # Checks whether you have the required permissions for the action, without
    # actually making the request, and provides an error response. If you have
    # the required permissions, the error response is `DryRunOperation`.
    # Otherwise, it is `UnauthorizedOperation`.
    dry_run: bool = dataclasses.field(default=ShapeBase.NOT_SET, )

    # One or more filters.

    #   * `prefix-list-id`: The ID of a prefix list.

    #   * `prefix-list-name`: The name of a prefix list.
    filters: typing.List["Filter"] = dataclasses.field(default_factory=list, )

    # The maximum number of items to return for this request. The request returns
    # a token that you can specify in a subsequent call to get the next set of
    # results.

    # Constraint: If the value specified is greater than 1000, we return only
    # 1000 items.
    max_results: int = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The token for the next set of items to return. (You received this token
    # from a prior call.)
    next_token: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # One or more prefix list IDs.
    prefix_list_ids: typing.List[str] = dataclasses.field(
        default_factory=list,
    )


@dataclasses.dataclass
class DescribePrefixListsResult(OutputShapeBase):
    """
    Contains the output of DescribePrefixLists.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "response_metadata",
                "ResponseMetadata",
                TypeInfo(typing.Dict[str, str]),
            ),
            (
                "next_token",
                "NextToken",
                TypeInfo(str),
            ),
            (
                "prefix_lists",
                "PrefixLists",
                TypeInfo(typing.List[PrefixList]),
            ),
        ]

    response_metadata: typing.Dict[str, str] = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # The token to use when requesting the next set of items. If there are no
    # additional items to return, the string is empty.
    next_token: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # All available prefix lists.
    prefix_lists: typing.List["PrefixList"] = dataclasses.field(
        default_factory=list,
    )


@dataclasses.dataclass
class DescribePrincipalIdFormatRequest(ShapeBase):
    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "dry_run",
                "DryRun",
                TypeInfo(bool),
            ),
            (
                "resources",
                "Resources",
                TypeInfo(typing.List[str]),
            ),
            (
                "max_results",
                "MaxResults",
                TypeInfo(int),
            ),
            (
                "next_token",
                "NextToken",
                TypeInfo(str),
            ),
        ]

    # Checks whether you have the required permissions for the action, without
    # actually making the request, and provides an error response. If you have
    # the required permissions, the error response is `DryRunOperation`.
    # Otherwise, it is `UnauthorizedOperation`.
    dry_run: bool = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The type of resource: `bundle` | `conversion-task` | `customer-gateway` |
    # `dhcp-options` | `elastic-ip-allocation` | `elastic-ip-association` |
    # `export-task` | `flow-log` | `image` | `import-task` | `instance` |
    # `internet-gateway` | `network-acl` | `network-acl-association` | `network-
    # interface` | `network-interface-attachment` | `prefix-list` | `reservation`
    # | `route-table` | `route-table-association` | `security-group` | `snapshot`
    # | `subnet` | `subnet-cidr-block-association` | `volume` | `vpc` | `vpc-
    # cidr-block-association` | `vpc-endpoint` | `vpc-peering-connection` | `vpn-
    # connection` | `vpn-gateway`
    resources: typing.List[str] = dataclasses.field(default_factory=list, )

    # The maximum number of results to return in a single call. To retrieve the
    # remaining results, make another call with the returned NextToken value.
    max_results: int = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The token to request the next page of results.
    next_token: str = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class DescribePrincipalIdFormatResult(OutputShapeBase):
    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "response_metadata",
                "ResponseMetadata",
                TypeInfo(typing.Dict[str, str]),
            ),
            (
                "principals",
                "Principals",
                TypeInfo(typing.List[PrincipalIdFormat]),
            ),
            (
                "next_token",
                "NextToken",
                TypeInfo(str),
            ),
        ]

    response_metadata: typing.Dict[str, str] = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # Information about the ID format settings for the ARN.
    principals: typing.List["PrincipalIdFormat"] = dataclasses.field(
        default_factory=list,
    )

    # The token to use to retrieve the next page of results. This value is null
    # when there are no more results to return.
    next_token: str = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class DescribeRegionsRequest(ShapeBase):
    """
    Contains the parameters for DescribeRegions.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "filters",
                "Filters",
                TypeInfo(typing.List[Filter]),
            ),
            (
                "region_names",
                "RegionNames",
                TypeInfo(typing.List[str]),
            ),
            (
                "dry_run",
                "DryRun",
                TypeInfo(bool),
            ),
        ]

    # One or more filters.

    #   * `endpoint` \- The endpoint of the region (for example, `ec2.us-east-1.amazonaws.com`).

    #   * `region-name` \- The name of the region (for example, `us-east-1`).
    filters: typing.List["Filter"] = dataclasses.field(default_factory=list, )

    # The names of one or more regions.
    region_names: typing.List[str] = dataclasses.field(default_factory=list, )

    # Checks whether you have the required permissions for the action, without
    # actually making the request, and provides an error response. If you have
    # the required permissions, the error response is `DryRunOperation`.
    # Otherwise, it is `UnauthorizedOperation`.
    dry_run: bool = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class DescribeRegionsResult(OutputShapeBase):
    """
    Contains the output of DescribeRegions.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "response_metadata",
                "ResponseMetadata",
                TypeInfo(typing.Dict[str, str]),
            ),
            (
                "regions",
                "Regions",
                TypeInfo(typing.List[Region]),
            ),
        ]

    response_metadata: typing.Dict[str, str] = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # Information about one or more regions.
    regions: typing.List["Region"] = dataclasses.field(default_factory=list, )


@dataclasses.dataclass
class DescribeReservedInstancesListingsRequest(ShapeBase):
    """
    Contains the parameters for DescribeReservedInstancesListings.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "filters",
                "Filters",
                TypeInfo(typing.List[Filter]),
            ),
            (
                "reserved_instances_id",
                "ReservedInstancesId",
                TypeInfo(str),
            ),
            (
                "reserved_instances_listing_id",
                "ReservedInstancesListingId",
                TypeInfo(str),
            ),
        ]

    # One or more filters.

    #   * `reserved-instances-id` \- The ID of the Reserved Instances.

    #   * `reserved-instances-listing-id` \- The ID of the Reserved Instances listing.

    #   * `status` \- The status of the Reserved Instance listing (`pending` | `active` | `cancelled` | `closed`).

    #   * `status-message` \- The reason for the status.
    filters: typing.List["Filter"] = dataclasses.field(default_factory=list, )

    # One or more Reserved Instance IDs.
    reserved_instances_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # One or more Reserved Instance listing IDs.
    reserved_instances_listing_id: str = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )


@dataclasses.dataclass
class DescribeReservedInstancesListingsResult(OutputShapeBase):
    """
    Contains the output of DescribeReservedInstancesListings.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "response_metadata",
                "ResponseMetadata",
                TypeInfo(typing.Dict[str, str]),
            ),
            (
                "reserved_instances_listings",
                "ReservedInstancesListings",
                TypeInfo(typing.List[ReservedInstancesListing]),
            ),
        ]

    response_metadata: typing.Dict[str, str] = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # Information about the Reserved Instance listing.
    reserved_instances_listings: typing.List["ReservedInstancesListing"
                                            ] = dataclasses.field(
                                                default_factory=list,
                                            )


@dataclasses.dataclass
class DescribeReservedInstancesModificationsRequest(ShapeBase):
    """
    Contains the parameters for DescribeReservedInstancesModifications.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "filters",
                "Filters",
                TypeInfo(typing.List[Filter]),
            ),
            (
                "reserved_instances_modification_ids",
                "ReservedInstancesModificationIds",
                TypeInfo(typing.List[str]),
            ),
            (
                "next_token",
                "NextToken",
                TypeInfo(str),
            ),
        ]

    # One or more filters.

    #   * `client-token` \- The idempotency token for the modification request.

    #   * `create-date` \- The time when the modification request was created.

    #   * `effective-date` \- The time when the modification becomes effective.

    #   * `modification-result.reserved-instances-id` \- The ID for the Reserved Instances created as part of the modification request. This ID is only available when the status of the modification is `fulfilled`.

    #   * `modification-result.target-configuration.availability-zone` \- The Availability Zone for the new Reserved Instances.

    #   * `modification-result.target-configuration.instance-count ` \- The number of new Reserved Instances.

    #   * `modification-result.target-configuration.instance-type` \- The instance type of the new Reserved Instances.

    #   * `modification-result.target-configuration.platform` \- The network platform of the new Reserved Instances (`EC2-Classic` | `EC2-VPC`).

    #   * `reserved-instances-id` \- The ID of the Reserved Instances modified.

    #   * `reserved-instances-modification-id` \- The ID of the modification request.

    #   * `status` \- The status of the Reserved Instances modification request (`processing` | `fulfilled` | `failed`).

    #   * `status-message` \- The reason for the status.

    #   * `update-date` \- The time when the modification request was last updated.
    filters: typing.List["Filter"] = dataclasses.field(default_factory=list, )

    # IDs for the submitted modification request.
    reserved_instances_modification_ids: typing.List[str] = dataclasses.field(
        default_factory=list,
    )

    # The token to retrieve the next page of results.
    next_token: str = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class DescribeReservedInstancesModificationsResult(OutputShapeBase):
    """
    Contains the output of DescribeReservedInstancesModifications.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "response_metadata",
                "ResponseMetadata",
                TypeInfo(typing.Dict[str, str]),
            ),
            (
                "next_token",
                "NextToken",
                TypeInfo(str),
            ),
            (
                "reserved_instances_modifications",
                "ReservedInstancesModifications",
                TypeInfo(typing.List[ReservedInstancesModification]),
            ),
        ]

    response_metadata: typing.Dict[str, str] = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # The token to use to retrieve the next page of results. This value is `null`
    # when there are no more results to return.
    next_token: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The Reserved Instance modification information.
    reserved_instances_modifications: typing.List[
        "ReservedInstancesModification"
    ] = dataclasses.field(
        default_factory=list,
    )


@dataclasses.dataclass
class DescribeReservedInstancesOfferingsRequest(ShapeBase):
    """
    Contains the parameters for DescribeReservedInstancesOfferings.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "availability_zone",
                "AvailabilityZone",
                TypeInfo(str),
            ),
            (
                "filters",
                "Filters",
                TypeInfo(typing.List[Filter]),
            ),
            (
                "include_marketplace",
                "IncludeMarketplace",
                TypeInfo(bool),
            ),
            (
                "instance_type",
                "InstanceType",
                TypeInfo(InstanceType),
            ),
            (
                "max_duration",
                "MaxDuration",
                TypeInfo(int),
            ),
            (
                "max_instance_count",
                "MaxInstanceCount",
                TypeInfo(int),
            ),
            (
                "min_duration",
                "MinDuration",
                TypeInfo(int),
            ),
            (
                "offering_class",
                "OfferingClass",
                TypeInfo(OfferingClassType),
            ),
            (
                "product_description",
                "ProductDescription",
                TypeInfo(RIProductDescription),
            ),
            (
                "reserved_instances_offering_ids",
                "ReservedInstancesOfferingIds",
                TypeInfo(typing.List[str]),
            ),
            (
                "dry_run",
                "DryRun",
                TypeInfo(bool),
            ),
            (
                "instance_tenancy",
                "InstanceTenancy",
                TypeInfo(Tenancy),
            ),
            (
                "max_results",
                "MaxResults",
                TypeInfo(int),
            ),
            (
                "next_token",
                "NextToken",
                TypeInfo(str),
            ),
            (
                "offering_type",
                "OfferingType",
                TypeInfo(OfferingTypeValues),
            ),
        ]

    # The Availability Zone in which the Reserved Instance can be used.
    availability_zone: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # One or more filters.

    #   * `availability-zone` \- The Availability Zone where the Reserved Instance can be used.

    #   * `duration` \- The duration of the Reserved Instance (for example, one year or three years), in seconds (`31536000` | `94608000`).

    #   * `fixed-price` \- The purchase price of the Reserved Instance (for example, 9800.0).

    #   * `instance-type` \- The instance type that is covered by the reservation.

    #   * `marketplace` \- Set to `true` to show only Reserved Instance Marketplace offerings. When this filter is not used, which is the default behavior, all offerings from both AWS and the Reserved Instance Marketplace are listed.

    #   * `product-description` \- The Reserved Instance product platform description. Instances that include `(Amazon VPC)` in the product platform description will only be displayed to EC2-Classic account holders and are for use with Amazon VPC. (`Linux/UNIX` | `Linux/UNIX (Amazon VPC)` | `SUSE Linux` | `SUSE Linux (Amazon VPC)` | `Red Hat Enterprise Linux` | `Red Hat Enterprise Linux (Amazon VPC)` | `Windows` | `Windows (Amazon VPC)` | `Windows with SQL Server Standard` | `Windows with SQL Server Standard (Amazon VPC)` | `Windows with SQL Server Web` | ` Windows with SQL Server Web (Amazon VPC)` | `Windows with SQL Server Enterprise` | `Windows with SQL Server Enterprise (Amazon VPC)`)

    #   * `reserved-instances-offering-id` \- The Reserved Instances offering ID.

    #   * `scope` \- The scope of the Reserved Instance (`Availability Zone` or `Region`).

    #   * `usage-price` \- The usage price of the Reserved Instance, per hour (for example, 0.84).
    filters: typing.List["Filter"] = dataclasses.field(default_factory=list, )

    # Include Reserved Instance Marketplace offerings in the response.
    include_marketplace: bool = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The instance type that the reservation will cover (for example,
    # `m1.small`). For more information, see [Instance
    # Types](http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-
    # types.html) in the _Amazon Elastic Compute Cloud User Guide_.
    instance_type: "InstanceType" = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # The maximum duration (in seconds) to filter when searching for offerings.

    # Default: 94608000 (3 years)
    max_duration: int = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The maximum number of instances to filter when searching for offerings.

    # Default: 20
    max_instance_count: int = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The minimum duration (in seconds) to filter when searching for offerings.

    # Default: 2592000 (1 month)
    min_duration: int = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The offering class of the Reserved Instance. Can be `standard` or
    # `convertible`.
    offering_class: "OfferingClassType" = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # The Reserved Instance product platform description. Instances that include
    # `(Amazon VPC)` in the description are for use with Amazon VPC.
    product_description: "RIProductDescription" = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # One or more Reserved Instances offering IDs.
    reserved_instances_offering_ids: typing.List[str] = dataclasses.field(
        default_factory=list,
    )

    # Checks whether you have the required permissions for the action, without
    # actually making the request, and provides an error response. If you have
    # the required permissions, the error response is `DryRunOperation`.
    # Otherwise, it is `UnauthorizedOperation`.
    dry_run: bool = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The tenancy of the instances covered by the reservation. A Reserved
    # Instance with a tenancy of `dedicated` is applied to instances that run in
    # a VPC on single-tenant hardware (i.e., Dedicated Instances).

    # **Important:** The `host` value cannot be used with this parameter. Use the
    # `default` or `dedicated` values only.

    # Default: `default`
    instance_tenancy: "Tenancy" = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The maximum number of results to return for the request in a single page.
    # The remaining results of the initial request can be seen by sending another
    # request with the returned `NextToken` value. The maximum is 100.

    # Default: 100
    max_results: int = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The token to retrieve the next page of results.
    next_token: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The Reserved Instance offering type. If you are using tools that predate
    # the 2011-11-01 API version, you only have access to the `Medium
    # Utilization` Reserved Instance offering type.
    offering_type: "OfferingTypeValues" = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )


@dataclasses.dataclass
class DescribeReservedInstancesOfferingsResult(OutputShapeBase):
    """
    Contains the output of DescribeReservedInstancesOfferings.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "response_metadata",
                "ResponseMetadata",
                TypeInfo(typing.Dict[str, str]),
            ),
            (
                "reserved_instances_offerings",
                "ReservedInstancesOfferings",
                TypeInfo(typing.List[ReservedInstancesOffering]),
            ),
            (
                "next_token",
                "NextToken",
                TypeInfo(str),
            ),
        ]

    response_metadata: typing.Dict[str, str] = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # A list of Reserved Instances offerings.
    reserved_instances_offerings: typing.List["ReservedInstancesOffering"
                                             ] = dataclasses.field(
                                                 default_factory=list,
                                             )

    # The token to use to retrieve the next page of results. This value is `null`
    # when there are no more results to return.
    next_token: str = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class DescribeReservedInstancesRequest(ShapeBase):
    """
    Contains the parameters for DescribeReservedInstances.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "filters",
                "Filters",
                TypeInfo(typing.List[Filter]),
            ),
            (
                "offering_class",
                "OfferingClass",
                TypeInfo(OfferingClassType),
            ),
            (
                "reserved_instances_ids",
                "ReservedInstancesIds",
                TypeInfo(typing.List[str]),
            ),
            (
                "dry_run",
                "DryRun",
                TypeInfo(bool),
            ),
            (
                "offering_type",
                "OfferingType",
                TypeInfo(OfferingTypeValues),
            ),
        ]

    # One or more filters.

    #   * `availability-zone` \- The Availability Zone where the Reserved Instance can be used.

    #   * `duration` \- The duration of the Reserved Instance (one year or three years), in seconds (`31536000` | `94608000`).

    #   * `end` \- The time when the Reserved Instance expires (for example, 2015-08-07T11:54:42.000Z).

    #   * `fixed-price` \- The purchase price of the Reserved Instance (for example, 9800.0).

    #   * `instance-type` \- The instance type that is covered by the reservation.

    #   * `scope` \- The scope of the Reserved Instance (`Region` or `Availability Zone`).

    #   * `product-description` \- The Reserved Instance product platform description. Instances that include `(Amazon VPC)` in the product platform description will only be displayed to EC2-Classic account holders and are for use with Amazon VPC (`Linux/UNIX` | `Linux/UNIX (Amazon VPC)` | `SUSE Linux` | `SUSE Linux (Amazon VPC)` | `Red Hat Enterprise Linux` | `Red Hat Enterprise Linux (Amazon VPC)` | `Windows` | `Windows (Amazon VPC)` | `Windows with SQL Server Standard` | `Windows with SQL Server Standard (Amazon VPC)` | `Windows with SQL Server Web` | `Windows with SQL Server Web (Amazon VPC)` | `Windows with SQL Server Enterprise` | `Windows with SQL Server Enterprise (Amazon VPC)`).

    #   * `reserved-instances-id` \- The ID of the Reserved Instance.

    #   * `start` \- The time at which the Reserved Instance purchase request was placed (for example, 2014-08-07T11:54:42.000Z).

    #   * `state` \- The state of the Reserved Instance (`payment-pending` | `active` | `payment-failed` | `retired`).

    #   * `tag`:<key> \- The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key `Owner` and the value `TeamA`, specify `tag:Owner` for the filter name and `TeamA` for the filter value.

    #   * `tag-key` \- The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.

    #   * `usage-price` \- The usage price of the Reserved Instance, per hour (for example, 0.84).
    filters: typing.List["Filter"] = dataclasses.field(default_factory=list, )

    # Describes whether the Reserved Instance is Standard or Convertible.
    offering_class: "OfferingClassType" = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # One or more Reserved Instance IDs.

    # Default: Describes all your Reserved Instances, or only those otherwise
    # specified.
    reserved_instances_ids: typing.List[str] = dataclasses.field(
        default_factory=list,
    )

    # Checks whether you have the required permissions for the action, without
    # actually making the request, and provides an error response. If you have
    # the required permissions, the error response is `DryRunOperation`.
    # Otherwise, it is `UnauthorizedOperation`.
    dry_run: bool = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The Reserved Instance offering type. If you are using tools that predate
    # the 2011-11-01 API version, you only have access to the `Medium
    # Utilization` Reserved Instance offering type.
    offering_type: "OfferingTypeValues" = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )


@dataclasses.dataclass
class DescribeReservedInstancesResult(OutputShapeBase):
    """
    Contains the output for DescribeReservedInstances.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "response_metadata",
                "ResponseMetadata",
                TypeInfo(typing.Dict[str, str]),
            ),
            (
                "reserved_instances",
                "ReservedInstances",
                TypeInfo(typing.List[ReservedInstances]),
            ),
        ]

    response_metadata: typing.Dict[str, str] = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # A list of Reserved Instances.
    reserved_instances: typing.List["ReservedInstances"] = dataclasses.field(
        default_factory=list,
    )


@dataclasses.dataclass
class DescribeRouteTablesRequest(ShapeBase):
    """
    Contains the parameters for DescribeRouteTables.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "filters",
                "Filters",
                TypeInfo(typing.List[Filter]),
            ),
            (
                "dry_run",
                "DryRun",
                TypeInfo(bool),
            ),
            (
                "route_table_ids",
                "RouteTableIds",
                TypeInfo(typing.List[str]),
            ),
        ]

    # One or more filters.

    #   * `association.route-table-association-id` \- The ID of an association ID for the route table.

    #   * `association.route-table-id` \- The ID of the route table involved in the association.

    #   * `association.subnet-id` \- The ID of the subnet involved in the association.

    #   * `association.main` \- Indicates whether the route table is the main route table for the VPC (`true` | `false`). Route tables that do not have an association ID are not returned in the response.

    #   * `route-table-id` \- The ID of the route table.

    #   * `route.destination-cidr-block` \- The IPv4 CIDR range specified in a route in the table.

    #   * `route.destination-ipv6-cidr-block` \- The IPv6 CIDR range specified in a route in the route table.

    #   * `route.destination-prefix-list-id` \- The ID (prefix) of the AWS service specified in a route in the table.

    #   * `route.egress-only-internet-gateway-id` \- The ID of an egress-only Internet gateway specified in a route in the route table.

    #   * `route.gateway-id` \- The ID of a gateway specified in a route in the table.

    #   * `route.instance-id` \- The ID of an instance specified in a route in the table.

    #   * `route.nat-gateway-id` \- The ID of a NAT gateway.

    #   * `route.origin` \- Describes how the route was created. `CreateRouteTable` indicates that the route was automatically created when the route table was created; `CreateRoute` indicates that the route was manually added to the route table; `EnableVgwRoutePropagation` indicates that the route was propagated by route propagation.

    #   * `route.state` \- The state of a route in the route table (`active` | `blackhole`). The blackhole state indicates that the route's target isn't available (for example, the specified gateway isn't attached to the VPC, the specified NAT instance has been terminated, and so on).

    #   * `route.vpc-peering-connection-id` \- The ID of a VPC peering connection specified in a route in the table.

    #   * `tag`:<key> \- The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key `Owner` and the value `TeamA`, specify `tag:Owner` for the filter name and `TeamA` for the filter value.

    #   * `tag-key` \- The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.

    #   * `vpc-id` \- The ID of the VPC for the route table.
    filters: typing.List["Filter"] = dataclasses.field(default_factory=list, )

    # Checks whether you have the required permissions for the action, without
    # actually making the request, and provides an error response. If you have
    # the required permissions, the error response is `DryRunOperation`.
    # Otherwise, it is `UnauthorizedOperation`.
    dry_run: bool = dataclasses.field(default=ShapeBase.NOT_SET, )

    # One or more route table IDs.

    # Default: Describes all your route tables.
    route_table_ids: typing.List[str] = dataclasses.field(
        default_factory=list,
    )


@dataclasses.dataclass
class DescribeRouteTablesResult(OutputShapeBase):
    """
    Contains the output of DescribeRouteTables.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "response_metadata",
                "ResponseMetadata",
                TypeInfo(typing.Dict[str, str]),
            ),
            (
                "route_tables",
                "RouteTables",
                TypeInfo(typing.List[RouteTable]),
            ),
        ]

    response_metadata: typing.Dict[str, str] = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # Information about one or more route tables.
    route_tables: typing.List["RouteTable"] = dataclasses.field(
        default_factory=list,
    )


@dataclasses.dataclass
class DescribeScheduledInstanceAvailabilityRequest(ShapeBase):
    """
    Contains the parameters for DescribeScheduledInstanceAvailability.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "first_slot_start_time_range",
                "FirstSlotStartTimeRange",
                TypeInfo(SlotDateTimeRangeRequest),
            ),
            (
                "recurrence",
                "Recurrence",
                TypeInfo(ScheduledInstanceRecurrenceRequest),
            ),
            (
                "dry_run",
                "DryRun",
                TypeInfo(bool),
            ),
            (
                "filters",
                "Filters",
                TypeInfo(typing.List[Filter]),
            ),
            (
                "max_results",
                "MaxResults",
                TypeInfo(int),
            ),
            (
                "max_slot_duration_in_hours",
                "MaxSlotDurationInHours",
                TypeInfo(int),
            ),
            (
                "min_slot_duration_in_hours",
                "MinSlotDurationInHours",
                TypeInfo(int),
            ),
            (
                "next_token",
                "NextToken",
                TypeInfo(str),
            ),
        ]

    # The time period for the first schedule to start.
    first_slot_start_time_range: "SlotDateTimeRangeRequest" = dataclasses.field(
        default_factory=dict,
    )

    # The schedule recurrence.
    recurrence: "ScheduledInstanceRecurrenceRequest" = dataclasses.field(
        default_factory=dict,
    )

    # Checks whether you have the required permissions for the action, without
    # actually making the request, and provides an error response. If you have
    # the required permissions, the error response is `DryRunOperation`.
    # Otherwise, it is `UnauthorizedOperation`.
    dry_run: bool = dataclasses.field(default=ShapeBase.NOT_SET, )

    # One or more filters.

    #   * `availability-zone` \- The Availability Zone (for example, `us-west-2a`).

    #   * `instance-type` \- The instance type (for example, `c4.large`).

    #   * `network-platform` \- The network platform (`EC2-Classic` or `EC2-VPC`).

    #   * `platform` \- The platform (`Linux/UNIX` or `Windows`).
    filters: typing.List["Filter"] = dataclasses.field(default_factory=list, )

    # The maximum number of results to return in a single call. This value can be
    # between 5 and 300. The default value is 300. To retrieve the remaining
    # results, make another call with the returned `NextToken` value.
    max_results: int = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The maximum available duration, in hours. This value must be greater than
    # `MinSlotDurationInHours` and less than 1,720.
    max_slot_duration_in_hours: int = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # The minimum available duration, in hours. The minimum required duration is
    # 1,200 hours per year. For example, the minimum daily schedule is 4 hours,
    # the minimum weekly schedule is 24 hours, and the minimum monthly schedule
    # is 100 hours.
    min_slot_duration_in_hours: int = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # The token for the next set of results.
    next_token: str = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class DescribeScheduledInstanceAvailabilityResult(OutputShapeBase):
    """
    Contains the output of DescribeScheduledInstanceAvailability.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "response_metadata",
                "ResponseMetadata",
                TypeInfo(typing.Dict[str, str]),
            ),
            (
                "next_token",
                "NextToken",
                TypeInfo(str),
            ),
            (
                "scheduled_instance_availability_set",
                "ScheduledInstanceAvailabilitySet",
                TypeInfo(typing.List[ScheduledInstanceAvailability]),
            ),
        ]

    response_metadata: typing.Dict[str, str] = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # The token required to retrieve the next set of results. This value is
    # `null` when there are no more results to return.
    next_token: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # Information about the available Scheduled Instances.
    scheduled_instance_availability_set: typing.List[
        "ScheduledInstanceAvailability"
    ] = dataclasses.field(
        default_factory=list,
    )


@dataclasses.dataclass
class DescribeScheduledInstancesRequest(ShapeBase):
    """
    Contains the parameters for DescribeScheduledInstances.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "dry_run",
                "DryRun",
                TypeInfo(bool),
            ),
            (
                "filters",
                "Filters",
                TypeInfo(typing.List[Filter]),
            ),
            (
                "max_results",
                "MaxResults",
                TypeInfo(int),
            ),
            (
                "next_token",
                "NextToken",
                TypeInfo(str),
            ),
            (
                "scheduled_instance_ids",
                "ScheduledInstanceIds",
                TypeInfo(typing.List[str]),
            ),
            (
                "slot_start_time_range",
                "SlotStartTimeRange",
                TypeInfo(SlotStartTimeRangeRequest),
            ),
        ]

    # Checks whether you have the required permissions for the action, without
    # actually making the request, and provides an error response. If you have
    # the required permissions, the error response is `DryRunOperation`.
    # Otherwise, it is `UnauthorizedOperation`.
    dry_run: bool = dataclasses.field(default=ShapeBase.NOT_SET, )

    # One or more filters.

    #   * `availability-zone` \- The Availability Zone (for example, `us-west-2a`).

    #   * `instance-type` \- The instance type (for example, `c4.large`).

    #   * `network-platform` \- The network platform (`EC2-Classic` or `EC2-VPC`).

    #   * `platform` \- The platform (`Linux/UNIX` or `Windows`).
    filters: typing.List["Filter"] = dataclasses.field(default_factory=list, )

    # The maximum number of results to return in a single call. This value can be
    # between 5 and 300. The default value is 100. To retrieve the remaining
    # results, make another call with the returned `NextToken` value.
    max_results: int = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The token for the next set of results.
    next_token: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # One or more Scheduled Instance IDs.
    scheduled_instance_ids: typing.List[str] = dataclasses.field(
        default_factory=list,
    )

    # The time period for the first schedule to start.
    slot_start_time_range: "SlotStartTimeRangeRequest" = dataclasses.field(
        default_factory=dict,
    )


@dataclasses.dataclass
class DescribeScheduledInstancesResult(OutputShapeBase):
    """
    Contains the output of DescribeScheduledInstances.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "response_metadata",
                "ResponseMetadata",
                TypeInfo(typing.Dict[str, str]),
            ),
            (
                "next_token",
                "NextToken",
                TypeInfo(str),
            ),
            (
                "scheduled_instance_set",
                "ScheduledInstanceSet",
                TypeInfo(typing.List[ScheduledInstance]),
            ),
        ]

    response_metadata: typing.Dict[str, str] = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # The token required to retrieve the next set of results. This value is
    # `null` when there are no more results to return.
    next_token: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # Information about the Scheduled Instances.
    scheduled_instance_set: typing.List["ScheduledInstance"
                                       ] = dataclasses.field(
                                           default_factory=list,
                                       )


@dataclasses.dataclass
class DescribeSecurityGroupReferencesRequest(ShapeBase):
    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "group_id",
                "GroupId",
                TypeInfo(typing.List[str]),
            ),
            (
                "dry_run",
                "DryRun",
                TypeInfo(bool),
            ),
        ]

    # One or more security group IDs in your account.
    group_id: typing.List[str] = dataclasses.field(default_factory=list, )

    # Checks whether you have the required permissions for the operation, without
    # actually making the request, and provides an error response. If you have
    # the required permissions, the error response is DryRunOperation. Otherwise,
    # it is UnauthorizedOperation.
    dry_run: bool = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class DescribeSecurityGroupReferencesResult(OutputShapeBase):
    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "response_metadata",
                "ResponseMetadata",
                TypeInfo(typing.Dict[str, str]),
            ),
            (
                "security_group_reference_set",
                "SecurityGroupReferenceSet",
                TypeInfo(typing.List[SecurityGroupReference]),
            ),
        ]

    response_metadata: typing.Dict[str, str] = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # Information about the VPCs with the referencing security groups.
    security_group_reference_set: typing.List["SecurityGroupReference"
                                             ] = dataclasses.field(
                                                 default_factory=list,
                                             )


@dataclasses.dataclass
class DescribeSecurityGroupsRequest(ShapeBase):
    """
    Contains the parameters for DescribeSecurityGroups.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "filters",
                "Filters",
                TypeInfo(typing.List[Filter]),
            ),
            (
                "group_ids",
                "GroupIds",
                TypeInfo(typing.List[str]),
            ),
            (
                "group_names",
                "GroupNames",
                TypeInfo(typing.List[str]),
            ),
            (
                "dry_run",
                "DryRun",
                TypeInfo(bool),
            ),
            (
                "next_token",
                "NextToken",
                TypeInfo(str),
            ),
            (
                "max_results",
                "MaxResults",
                TypeInfo(int),
            ),
        ]

    # One or more filters. If using multiple filters for rules, the results
    # include security groups for which any combination of rules - not
    # necessarily a single rule - match all filters.

    #   * `description` \- The description of the security group.

    #   * `egress.ip-permission.cidr` \- An IPv4 CIDR block for an outbound security group rule.

    #   * `egress.ip-permission.from-port` \- For an outbound rule, the start of port range for the TCP and UDP protocols, or an ICMP type number.

    #   * `egress.ip-permission.group-id` \- The ID of a security group that has been referenced in an outbound security group rule.

    #   * `egress.ip-permission.group-name` \- The name of a security group that has been referenced in an outbound security group rule.

    #   * `egress.ip-permission.ipv6-cidr` \- An IPv6 CIDR block for an outbound security group rule.

    #   * `egress.ip-permission.prefix-list-id` \- The ID (prefix) of the AWS service to which a security group rule allows outbound access.

    #   * `egress.ip-permission.protocol` \- The IP protocol for an outbound security group rule (`tcp` | `udp` | `icmp` or a protocol number).

    #   * `egress.ip-permission.to-port` \- For an outbound rule, the end of port range for the TCP and UDP protocols, or an ICMP code.

    #   * `egress.ip-permission.user-id` \- The ID of an AWS account that has been referenced in an outbound security group rule.

    #   * `group-id` \- The ID of the security group.

    #   * `group-name` \- The name of the security group.

    #   * `ip-permission.cidr` \- An IPv4 CIDR block for an inbound security group rule.

    #   * `ip-permission.from-port` \- For an inbound rule, the start of port range for the TCP and UDP protocols, or an ICMP type number.

    #   * `ip-permission.group-id` \- The ID of a security group that has been referenced in an inbound security group rule.

    #   * `ip-permission.group-name` \- The name of a security group that has been referenced in an inbound security group rule.

    #   * `ip-permission.ipv6-cidr` \- An IPv6 CIDR block for an inbound security group rule.

    #   * `ip-permission.prefix-list-id` \- The ID (prefix) of the AWS service from which a security group rule allows inbound access.

    #   * `ip-permission.protocol` \- The IP protocol for an inbound security group rule (`tcp` | `udp` | `icmp` or a protocol number).

    #   * `ip-permission.to-port` \- For an inbound rule, the end of port range for the TCP and UDP protocols, or an ICMP code.

    #   * `ip-permission.user-id` \- The ID of an AWS account that has been referenced in an inbound security group rule.

    #   * `owner-id` \- The AWS account ID of the owner of the security group.

    #   * `tag`:<key> \- The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key `Owner` and the value `TeamA`, specify `tag:Owner` for the filter name and `TeamA` for the filter value.

    #   * `tag-key` \- The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.

    #   * `vpc-id` \- The ID of the VPC specified when the security group was created.
    filters: typing.List["Filter"] = dataclasses.field(default_factory=list, )

    # One or more security group IDs. Required for security groups in a
    # nondefault VPC.

    # Default: Describes all your security groups.
    group_ids: typing.List[str] = dataclasses.field(default_factory=list, )

    # [EC2-Classic and default VPC only] One or more security group names. You
    # can specify either the security group name or the security group ID. For
    # security groups in a nondefault VPC, use the `group-name` filter to
    # describe security groups by name.

    # Default: Describes all your security groups.
    group_names: typing.List[str] = dataclasses.field(default_factory=list, )

    # Checks whether you have the required permissions for the action, without
    # actually making the request, and provides an error response. If you have
    # the required permissions, the error response is `DryRunOperation`.
    # Otherwise, it is `UnauthorizedOperation`.
    dry_run: bool = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The token to request the next page of results.
    next_token: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The maximum number of results to return in a single call. To retrieve the
    # remaining results, make another request with the returned `NextToken`
    # value. This value can be between 5 and 1000. If this parameter is not
    # specified, then all results are returned.
    max_results: int = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class DescribeSecurityGroupsResult(OutputShapeBase):
    """
    Contains the output of DescribeSecurityGroups.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "response_metadata",
                "ResponseMetadata",
                TypeInfo(typing.Dict[str, str]),
            ),
            (
                "security_groups",
                "SecurityGroups",
                TypeInfo(typing.List[SecurityGroup]),
            ),
            (
                "next_token",
                "NextToken",
                TypeInfo(str),
            ),
        ]

    response_metadata: typing.Dict[str, str] = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # Information about one or more security groups.
    security_groups: typing.List["SecurityGroup"] = dataclasses.field(
        default_factory=list,
    )

    # The token to use to retrieve the next page of results. This value is `null`
    # when there are no more results to return.
    next_token: str = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class DescribeSnapshotAttributeRequest(ShapeBase):
    """
    Contains the parameters for DescribeSnapshotAttribute.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "attribute",
                "Attribute",
                TypeInfo(SnapshotAttributeName),
            ),
            (
                "snapshot_id",
                "SnapshotId",
                TypeInfo(str),
            ),
            (
                "dry_run",
                "DryRun",
                TypeInfo(bool),
            ),
        ]

    # The snapshot attribute you would like to view.
    attribute: "SnapshotAttributeName" = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # The ID of the EBS snapshot.
    snapshot_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # Checks whether you have the required permissions for the action, without
    # actually making the request, and provides an error response. If you have
    # the required permissions, the error response is `DryRunOperation`.
    # Otherwise, it is `UnauthorizedOperation`.
    dry_run: bool = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class DescribeSnapshotAttributeResult(OutputShapeBase):
    """
    Contains the output of DescribeSnapshotAttribute.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "response_metadata",
                "ResponseMetadata",
                TypeInfo(typing.Dict[str, str]),
            ),
            (
                "create_volume_permissions",
                "CreateVolumePermissions",
                TypeInfo(typing.List[CreateVolumePermission]),
            ),
            (
                "product_codes",
                "ProductCodes",
                TypeInfo(typing.List[ProductCode]),
            ),
            (
                "snapshot_id",
                "SnapshotId",
                TypeInfo(str),
            ),
        ]

    response_metadata: typing.Dict[str, str] = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # A list of permissions for creating volumes from the snapshot.
    create_volume_permissions: typing.List["CreateVolumePermission"
                                          ] = dataclasses.field(
                                              default_factory=list,
                                          )

    # A list of product codes.
    product_codes: typing.List["ProductCode"] = dataclasses.field(
        default_factory=list,
    )

    # The ID of the EBS snapshot.
    snapshot_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class DescribeSnapshotsRequest(ShapeBase):
    """
    Contains the parameters for DescribeSnapshots.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "filters",
                "Filters",
                TypeInfo(typing.List[Filter]),
            ),
            (
                "max_results",
                "MaxResults",
                TypeInfo(int),
            ),
            (
                "next_token",
                "NextToken",
                TypeInfo(str),
            ),
            (
                "owner_ids",
                "OwnerIds",
                TypeInfo(typing.List[str]),
            ),
            (
                "restorable_by_user_ids",
                "RestorableByUserIds",
                TypeInfo(typing.List[str]),
            ),
            (
                "snapshot_ids",
                "SnapshotIds",
                TypeInfo(typing.List[str]),
            ),
            (
                "dry_run",
                "DryRun",
                TypeInfo(bool),
            ),
        ]

    # One or more filters.

    #   * `description` \- A description of the snapshot.

    #   * `owner-alias` \- Value from an Amazon-maintained list (`amazon` | `aws-marketplace` | `microsoft`) of snapshot owners. Not to be confused with the user-configured AWS account alias, which is set from the IAM console.

    #   * `owner-id` \- The ID of the AWS account that owns the snapshot.

    #   * `progress` \- The progress of the snapshot, as a percentage (for example, 80%).

    #   * `snapshot-id` \- The snapshot ID.

    #   * `start-time` \- The time stamp when the snapshot was initiated.

    #   * `status` \- The status of the snapshot (`pending` | `completed` | `error`).

    #   * `tag`:<key> \- The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key `Owner` and the value `TeamA`, specify `tag:Owner` for the filter name and `TeamA` for the filter value.

    #   * `tag-key` \- The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.

    #   * `volume-id` \- The ID of the volume the snapshot is for.

    #   * `volume-size` \- The size of the volume, in GiB.
    filters: typing.List["Filter"] = dataclasses.field(default_factory=list, )

    # The maximum number of snapshot results returned by `DescribeSnapshots` in
    # paginated output. When this parameter is used, `DescribeSnapshots` only
    # returns `MaxResults` results in a single page along with a `NextToken`
    # response element. The remaining results of the initial request can be seen
    # by sending another `DescribeSnapshots` request with the returned
    # `NextToken` value. This value can be between 5 and 1000; if `MaxResults` is
    # given a value larger than 1000, only 1000 results are returned. If this
    # parameter is not used, then `DescribeSnapshots` returns all results. You
    # cannot specify this parameter and the snapshot IDs parameter in the same
    # request.
    max_results: int = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The `NextToken` value returned from a previous paginated
    # `DescribeSnapshots` request where `MaxResults` was used and the results
    # exceeded the value of that parameter. Pagination continues from the end of
    # the previous results that returned the `NextToken` value. This value is
    # `null` when there are no more results to return.
    next_token: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # Returns the snapshots owned by the specified owner. Multiple owners can be
    # specified.
    owner_ids: typing.List[str] = dataclasses.field(default_factory=list, )

    # One or more AWS accounts IDs that can create volumes from the snapshot.
    restorable_by_user_ids: typing.List[str] = dataclasses.field(
        default_factory=list,
    )

    # One or more snapshot IDs.

    # Default: Describes snapshots for which you have launch permissions.
    snapshot_ids: typing.List[str] = dataclasses.field(default_factory=list, )

    # Checks whether you have the required permissions for the action, without
    # actually making the request, and provides an error response. If you have
    # the required permissions, the error response is `DryRunOperation`.
    # Otherwise, it is `UnauthorizedOperation`.
    dry_run: bool = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class DescribeSnapshotsResult(OutputShapeBase):
    """
    Contains the output of DescribeSnapshots.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "response_metadata",
                "ResponseMetadata",
                TypeInfo(typing.Dict[str, str]),
            ),
            (
                "snapshots",
                "Snapshots",
                TypeInfo(typing.List[Snapshot]),
            ),
            (
                "next_token",
                "NextToken",
                TypeInfo(str),
            ),
        ]

    response_metadata: typing.Dict[str, str] = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # Information about the snapshots.
    snapshots: typing.List["Snapshot"] = dataclasses.field(
        default_factory=list,
    )

    # The `NextToken` value to include in a future `DescribeSnapshots` request.
    # When the results of a `DescribeSnapshots` request exceed `MaxResults`, this
    # value can be used to retrieve the next page of results. This value is
    # `null` when there are no more results to return.
    next_token: str = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class DescribeSpotDatafeedSubscriptionRequest(ShapeBase):
    """
    Contains the parameters for DescribeSpotDatafeedSubscription.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "dry_run",
                "DryRun",
                TypeInfo(bool),
            ),
        ]

    # Checks whether you have the required permissions for the action, without
    # actually making the request, and provides an error response. If you have
    # the required permissions, the error response is `DryRunOperation`.
    # Otherwise, it is `UnauthorizedOperation`.
    dry_run: bool = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class DescribeSpotDatafeedSubscriptionResult(OutputShapeBase):
    """
    Contains the output of DescribeSpotDatafeedSubscription.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "response_metadata",
                "ResponseMetadata",
                TypeInfo(typing.Dict[str, str]),
            ),
            (
                "spot_datafeed_subscription",
                "SpotDatafeedSubscription",
                TypeInfo(SpotDatafeedSubscription),
            ),
        ]

    response_metadata: typing.Dict[str, str] = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # The Spot Instance data feed subscription.
    spot_datafeed_subscription: "SpotDatafeedSubscription" = dataclasses.field(
        default_factory=dict,
    )


@dataclasses.dataclass
class DescribeSpotFleetInstancesRequest(ShapeBase):
    """
    Contains the parameters for DescribeSpotFleetInstances.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "spot_fleet_request_id",
                "SpotFleetRequestId",
                TypeInfo(str),
            ),
            (
                "dry_run",
                "DryRun",
                TypeInfo(bool),
            ),
            (
                "max_results",
                "MaxResults",
                TypeInfo(int),
            ),
            (
                "next_token",
                "NextToken",
                TypeInfo(str),
            ),
        ]

    # The ID of the Spot Fleet request.
    spot_fleet_request_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # Checks whether you have the required permissions for the action, without
    # actually making the request, and provides an error response. If you have
    # the required permissions, the error response is `DryRunOperation`.
    # Otherwise, it is `UnauthorizedOperation`.
    dry_run: bool = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The maximum number of results to return in a single call. Specify a value
    # between 1 and 1000. The default value is 1000. To retrieve the remaining
    # results, make another call with the returned `NextToken` value.
    max_results: int = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The token for the next set of results.
    next_token: str = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class DescribeSpotFleetInstancesResponse(OutputShapeBase):
    """
    Contains the output of DescribeSpotFleetInstances.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "response_metadata",
                "ResponseMetadata",
                TypeInfo(typing.Dict[str, str]),
            ),
            (
                "active_instances",
                "ActiveInstances",
                TypeInfo(typing.List[ActiveInstance]),
            ),
            (
                "spot_fleet_request_id",
                "SpotFleetRequestId",
                TypeInfo(str),
            ),
            (
                "next_token",
                "NextToken",
                TypeInfo(str),
            ),
        ]

    response_metadata: typing.Dict[str, str] = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # The running instances. This list is refreshed periodically and might be out
    # of date.
    active_instances: typing.List["ActiveInstance"] = dataclasses.field(
        default_factory=list,
    )

    # The ID of the Spot Fleet request.
    spot_fleet_request_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The token required to retrieve the next set of results. This value is
    # `null` when there are no more results to return.
    next_token: str = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class DescribeSpotFleetRequestHistoryRequest(ShapeBase):
    """
    Contains the parameters for DescribeSpotFleetRequestHistory.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "spot_fleet_request_id",
                "SpotFleetRequestId",
                TypeInfo(str),
            ),
            (
                "start_time",
                "StartTime",
                TypeInfo(datetime.datetime),
            ),
            (
                "dry_run",
                "DryRun",
                TypeInfo(bool),
            ),
            (
                "event_type",
                "EventType",
                TypeInfo(EventType),
            ),
            (
                "max_results",
                "MaxResults",
                TypeInfo(int),
            ),
            (
                "next_token",
                "NextToken",
                TypeInfo(str),
            ),
        ]

    # The ID of the Spot Fleet request.
    spot_fleet_request_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The starting date and time for the events, in UTC format (for example,
    # _YYYY_ - _MM_ - _DD_ T _HH_ : _MM_ : _SS_ Z).
    start_time: datetime.datetime = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # Checks whether you have the required permissions for the action, without
    # actually making the request, and provides an error response. If you have
    # the required permissions, the error response is `DryRunOperation`.
    # Otherwise, it is `UnauthorizedOperation`.
    dry_run: bool = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The type of events to describe. By default, all events are described.
    event_type: "EventType" = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The maximum number of results to return in a single call. Specify a value
    # between 1 and 1000. The default value is 1000. To retrieve the remaining
    # results, make another call with the returned `NextToken` value.
    max_results: int = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The token for the next set of results.
    next_token: str = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class DescribeSpotFleetRequestHistoryResponse(OutputShapeBase):
    """
    Contains the output of DescribeSpotFleetRequestHistory.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "response_metadata",
                "ResponseMetadata",
                TypeInfo(typing.Dict[str, str]),
            ),
            (
                "history_records",
                "HistoryRecords",
                TypeInfo(typing.List[HistoryRecord]),
            ),
            (
                "last_evaluated_time",
                "LastEvaluatedTime",
                TypeInfo(datetime.datetime),
            ),
            (
                "spot_fleet_request_id",
                "SpotFleetRequestId",
                TypeInfo(str),
            ),
            (
                "start_time",
                "StartTime",
                TypeInfo(datetime.datetime),
            ),
            (
                "next_token",
                "NextToken",
                TypeInfo(str),
            ),
        ]

    response_metadata: typing.Dict[str, str] = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # Information about the events in the history of the Spot Fleet request.
    history_records: typing.List["HistoryRecord"] = dataclasses.field(
        default_factory=list,
    )

    # The last date and time for the events, in UTC format (for example, _YYYY_ -
    # _MM_ - _DD_ T _HH_ : _MM_ : _SS_ Z). All records up to this time were
    # retrieved.

    # If `nextToken` indicates that there are more results, this value is not
    # present.
    last_evaluated_time: datetime.datetime = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # The ID of the Spot Fleet request.
    spot_fleet_request_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The starting date and time for the events, in UTC format (for example,
    # _YYYY_ - _MM_ - _DD_ T _HH_ : _MM_ : _SS_ Z).
    start_time: datetime.datetime = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # The token required to retrieve the next set of results. This value is
    # `null` when there are no more results to return.
    next_token: str = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class DescribeSpotFleetRequestsRequest(ShapeBase):
    """
    Contains the parameters for DescribeSpotFleetRequests.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "dry_run",
                "DryRun",
                TypeInfo(bool),
            ),
            (
                "max_results",
                "MaxResults",
                TypeInfo(int),
            ),
            (
                "next_token",
                "NextToken",
                TypeInfo(str),
            ),
            (
                "spot_fleet_request_ids",
                "SpotFleetRequestIds",
                TypeInfo(typing.List[str]),
            ),
        ]

    # Checks whether you have the required permissions for the action, without
    # actually making the request, and provides an error response. If you have
    # the required permissions, the error response is `DryRunOperation`.
    # Otherwise, it is `UnauthorizedOperation`.
    dry_run: bool = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The maximum number of results to return in a single call. Specify a value
    # between 1 and 1000. The default value is 1000. To retrieve the remaining
    # results, make another call with the returned `NextToken` value.
    max_results: int = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The token for the next set of results.
    next_token: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The IDs of the Spot Fleet requests.
    spot_fleet_request_ids: typing.List[str] = dataclasses.field(
        default_factory=list,
    )


@dataclasses.dataclass
class DescribeSpotFleetRequestsResponse(OutputShapeBase):
    """
    Contains the output of DescribeSpotFleetRequests.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "response_metadata",
                "ResponseMetadata",
                TypeInfo(typing.Dict[str, str]),
            ),
            (
                "spot_fleet_request_configs",
                "SpotFleetRequestConfigs",
                TypeInfo(typing.List[SpotFleetRequestConfig]),
            ),
            (
                "next_token",
                "NextToken",
                TypeInfo(str),
            ),
        ]

    response_metadata: typing.Dict[str, str] = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # Information about the configuration of your Spot Fleet.
    spot_fleet_request_configs: typing.List["SpotFleetRequestConfig"
                                           ] = dataclasses.field(
                                               default_factory=list,
                                           )

    # The token required to retrieve the next set of results. This value is
    # `null` when there are no more results to return.
    next_token: str = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class DescribeSpotInstanceRequestsRequest(ShapeBase):
    """
    Contains the parameters for DescribeSpotInstanceRequests.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "filters",
                "Filters",
                TypeInfo(typing.List[Filter]),
            ),
            (
                "dry_run",
                "DryRun",
                TypeInfo(bool),
            ),
            (
                "spot_instance_request_ids",
                "SpotInstanceRequestIds",
                TypeInfo(typing.List[str]),
            ),
        ]

    # One or more filters.

    #   * `availability-zone-group` \- The Availability Zone group.

    #   * `create-time` \- The time stamp when the Spot Instance request was created.

    #   * `fault-code` \- The fault code related to the request.

    #   * `fault-message` \- The fault message related to the request.

    #   * `instance-id` \- The ID of the instance that fulfilled the request.

    #   * `launch-group` \- The Spot Instance launch group.

    #   * `launch.block-device-mapping.delete-on-termination` \- Indicates whether the EBS volume is deleted on instance termination.

    #   * `launch.block-device-mapping.device-name` \- The device name for the volume in the block device mapping (for example, `/dev/sdh` or `xvdh`).

    #   * `launch.block-device-mapping.snapshot-id` \- The ID of the snapshot for the EBS volume.

    #   * `launch.block-device-mapping.volume-size` \- The size of the EBS volume, in GiB.

    #   * `launch.block-device-mapping.volume-type` \- The type of EBS volume: `gp2` for General Purpose SSD, `io1` for Provisioned IOPS SSD, `st1` for Throughput Optimized HDD, `sc1`for Cold HDD, or `standard` for Magnetic.

    #   * `launch.group-id` \- The ID of the security group for the instance.

    #   * `launch.group-name` \- The name of the security group for the instance.

    #   * `launch.image-id` \- The ID of the AMI.

    #   * `launch.instance-type` \- The type of instance (for example, `m3.medium`).

    #   * `launch.kernel-id` \- The kernel ID.

    #   * `launch.key-name` \- The name of the key pair the instance launched with.

    #   * `launch.monitoring-enabled` \- Whether detailed monitoring is enabled for the Spot Instance.

    #   * `launch.ramdisk-id` \- The RAM disk ID.

    #   * `launched-availability-zone` \- The Availability Zone in which the request is launched.

    #   * `network-interface.addresses.primary` \- Indicates whether the IP address is the primary private IP address.

    #   * `network-interface.delete-on-termination` \- Indicates whether the network interface is deleted when the instance is terminated.

    #   * `network-interface.description` \- A description of the network interface.

    #   * `network-interface.device-index` \- The index of the device for the network interface attachment on the instance.

    #   * `network-interface.group-id` \- The ID of the security group associated with the network interface.

    #   * `network-interface.network-interface-id` \- The ID of the network interface.

    #   * `network-interface.private-ip-address` \- The primary private IP address of the network interface.

    #   * `network-interface.subnet-id` \- The ID of the subnet for the instance.

    #   * `product-description` \- The product description associated with the instance (`Linux/UNIX` | `Windows`).

    #   * `spot-instance-request-id` \- The Spot Instance request ID.

    #   * `spot-price` \- The maximum hourly price for any Spot Instance launched to fulfill the request.

    #   * `state` \- The state of the Spot Instance request (`open` | `active` | `closed` | `cancelled` | `failed`). Spot request status information can help you track your Amazon EC2 Spot Instance requests. For more information, see [Spot Request Status](http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/spot-bid-status.html) in the _Amazon EC2 User Guide for Linux Instances_.

    #   * `status-code` \- The short code describing the most recent evaluation of your Spot Instance request.

    #   * `status-message` \- The message explaining the status of the Spot Instance request.

    #   * `tag`:<key> \- The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key `Owner` and the value `TeamA`, specify `tag:Owner` for the filter name and `TeamA` for the filter value.

    #   * `tag-key` \- The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.

    #   * `type` \- The type of Spot Instance request (`one-time` | `persistent`).

    #   * `valid-from` \- The start date of the request.

    #   * `valid-until` \- The end date of the request.
    filters: typing.List["Filter"] = dataclasses.field(default_factory=list, )

    # Checks whether you have the required permissions for the action, without
    # actually making the request, and provides an error response. If you have
    # the required permissions, the error response is `DryRunOperation`.
    # Otherwise, it is `UnauthorizedOperation`.
    dry_run: bool = dataclasses.field(default=ShapeBase.NOT_SET, )

    # One or more Spot Instance request IDs.
    spot_instance_request_ids: typing.List[str] = dataclasses.field(
        default_factory=list,
    )


@dataclasses.dataclass
class DescribeSpotInstanceRequestsResult(OutputShapeBase):
    """
    Contains the output of DescribeSpotInstanceRequests.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "response_metadata",
                "ResponseMetadata",
                TypeInfo(typing.Dict[str, str]),
            ),
            (
                "spot_instance_requests",
                "SpotInstanceRequests",
                TypeInfo(typing.List[SpotInstanceRequest]),
            ),
        ]

    response_metadata: typing.Dict[str, str] = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # One or more Spot Instance requests.
    spot_instance_requests: typing.List["SpotInstanceRequest"
                                       ] = dataclasses.field(
                                           default_factory=list,
                                       )


@dataclasses.dataclass
class DescribeSpotPriceHistoryRequest(ShapeBase):
    """
    Contains the parameters for DescribeSpotPriceHistory.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "filters",
                "Filters",
                TypeInfo(typing.List[Filter]),
            ),
            (
                "availability_zone",
                "AvailabilityZone",
                TypeInfo(str),
            ),
            (
                "dry_run",
                "DryRun",
                TypeInfo(bool),
            ),
            (
                "end_time",
                "EndTime",
                TypeInfo(datetime.datetime),
            ),
            (
                "instance_types",
                "InstanceTypes",
                TypeInfo(typing.List[InstanceType]),
            ),
            (
                "max_results",
                "MaxResults",
                TypeInfo(int),
            ),
            (
                "next_token",
                "NextToken",
                TypeInfo(str),
            ),
            (
                "product_descriptions",
                "ProductDescriptions",
                TypeInfo(typing.List[str]),
            ),
            (
                "start_time",
                "StartTime",
                TypeInfo(datetime.datetime),
            ),
        ]

    # One or more filters.

    #   * `availability-zone` \- The Availability Zone for which prices should be returned.

    #   * `instance-type` \- The type of instance (for example, `m3.medium`).

    #   * `product-description` \- The product description for the Spot price (`Linux/UNIX` | `SUSE Linux` | `Windows` | `Linux/UNIX (Amazon VPC)` | `SUSE Linux (Amazon VPC)` | `Windows (Amazon VPC)`).

    #   * `spot-price` \- The Spot price. The value must match exactly (or use wildcards; greater than or less than comparison is not supported).

    #   * `timestamp` \- The time stamp of the Spot price history, in UTC format (for example, _YYYY_ - _MM_ - _DD_ T _HH_ : _MM_ : _SS_ Z). You can use wildcards (* and ?). Greater than or less than comparison is not supported.
    filters: typing.List["Filter"] = dataclasses.field(default_factory=list, )

    # Filters the results by the specified Availability Zone.
    availability_zone: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # Checks whether you have the required permissions for the action, without
    # actually making the request, and provides an error response. If you have
    # the required permissions, the error response is `DryRunOperation`.
    # Otherwise, it is `UnauthorizedOperation`.
    dry_run: bool = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The date and time, up to the current date, from which to stop retrieving
    # the price history data, in UTC format (for example, _YYYY_ - _MM_ - _DD_ T
    # _HH_ : _MM_ : _SS_ Z).
    end_time: datetime.datetime = dataclasses.field(default=ShapeBase.NOT_SET, )

    # Filters the results by the specified instance types.
    instance_types: typing.List["InstanceType"] = dataclasses.field(
        default_factory=list,
    )

    # The maximum number of results to return in a single call. Specify a value
    # between 1 and 1000. The default value is 1000. To retrieve the remaining
    # results, make another call with the returned `NextToken` value.
    max_results: int = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The token for the next set of results.
    next_token: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # Filters the results by the specified basic product descriptions.
    product_descriptions: typing.List[str] = dataclasses.field(
        default_factory=list,
    )

    # The date and time, up to the past 90 days, from which to start retrieving
    # the price history data, in UTC format (for example, _YYYY_ - _MM_ - _DD_ T
    # _HH_ : _MM_ : _SS_ Z).
    start_time: datetime.datetime = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )


@dataclasses.dataclass
class DescribeSpotPriceHistoryResult(OutputShapeBase):
    """
    Contains the output of DescribeSpotPriceHistory.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "response_metadata",
                "ResponseMetadata",
                TypeInfo(typing.Dict[str, str]),
            ),
            (
                "next_token",
                "NextToken",
                TypeInfo(str),
            ),
            (
                "spot_price_history",
                "SpotPriceHistory",
                TypeInfo(typing.List[SpotPrice]),
            ),
        ]

    response_metadata: typing.Dict[str, str] = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # The token required to retrieve the next set of results. This value is null
    # or an empty string when there are no more results to return.
    next_token: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The historical Spot prices.
    spot_price_history: typing.List["SpotPrice"] = dataclasses.field(
        default_factory=list,
    )


@dataclasses.dataclass
class DescribeStaleSecurityGroupsRequest(ShapeBase):
    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "vpc_id",
                "VpcId",
                TypeInfo(str),
            ),
            (
                "dry_run",
                "DryRun",
                TypeInfo(bool),
            ),
            (
                "max_results",
                "MaxResults",
                TypeInfo(int),
            ),
            (
                "next_token",
                "NextToken",
                TypeInfo(str),
            ),
        ]

    # The ID of the VPC.
    vpc_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # Checks whether you have the required permissions for the operation, without
    # actually making the request, and provides an error response. If you have
    # the required permissions, the error response is DryRunOperation. Otherwise,
    # it is UnauthorizedOperation.
    dry_run: bool = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The maximum number of items to return for this request. The request returns
    # a token that you can specify in a subsequent call to get the next set of
    # results.
    max_results: int = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The token for the next set of items to return. (You received this token
    # from a prior call.)
    next_token: str = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class DescribeStaleSecurityGroupsResult(OutputShapeBase):
    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "response_metadata",
                "ResponseMetadata",
                TypeInfo(typing.Dict[str, str]),
            ),
            (
                "next_token",
                "NextToken",
                TypeInfo(str),
            ),
            (
                "stale_security_group_set",
                "StaleSecurityGroupSet",
                TypeInfo(typing.List[StaleSecurityGroup]),
            ),
        ]

    response_metadata: typing.Dict[str, str] = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # The token to use when requesting the next set of items. If there are no
    # additional items to return, the string is empty.
    next_token: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # Information about the stale security groups.
    stale_security_group_set: typing.List["StaleSecurityGroup"
                                         ] = dataclasses.field(
                                             default_factory=list,
                                         )


@dataclasses.dataclass
class DescribeSubnetsRequest(ShapeBase):
    """
    Contains the parameters for DescribeSubnets.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "filters",
                "Filters",
                TypeInfo(typing.List[Filter]),
            ),
            (
                "subnet_ids",
                "SubnetIds",
                TypeInfo(typing.List[str]),
            ),
            (
                "dry_run",
                "DryRun",
                TypeInfo(bool),
            ),
        ]

    # One or more filters.

    #   * `availabilityZone` \- The Availability Zone for the subnet. You can also use `availability-zone` as the filter name.

    #   * `available-ip-address-count` \- The number of IPv4 addresses in the subnet that are available.

    #   * `cidrBlock` \- The IPv4 CIDR block of the subnet. The CIDR block you specify must exactly match the subnet's CIDR block for information to be returned for the subnet. You can also use `cidr` or `cidr-block` as the filter names.

    #   * `defaultForAz` \- Indicates whether this is the default subnet for the Availability Zone. You can also use `default-for-az` as the filter name.

    #   * `ipv6-cidr-block-association.ipv6-cidr-block` \- An IPv6 CIDR block associated with the subnet.

    #   * `ipv6-cidr-block-association.association-id` \- An association ID for an IPv6 CIDR block associated with the subnet.

    #   * `ipv6-cidr-block-association.state` \- The state of an IPv6 CIDR block associated with the subnet.

    #   * `state` \- The state of the subnet (`pending` | `available`).

    #   * `subnet-id` \- The ID of the subnet.

    #   * `tag`:<key> \- The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key `Owner` and the value `TeamA`, specify `tag:Owner` for the filter name and `TeamA` for the filter value.

    #   * `tag-key` \- The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.

    #   * `vpc-id` \- The ID of the VPC for the subnet.
    filters: typing.List["Filter"] = dataclasses.field(default_factory=list, )

    # One or more subnet IDs.

    # Default: Describes all your subnets.
    subnet_ids: typing.List[str] = dataclasses.field(default_factory=list, )

    # Checks whether you have the required permissions for the action, without
    # actually making the request, and provides an error response. If you have
    # the required permissions, the error response is `DryRunOperation`.
    # Otherwise, it is `UnauthorizedOperation`.
    dry_run: bool = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class DescribeSubnetsResult(OutputShapeBase):
    """
    Contains the output of DescribeSubnets.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "response_metadata",
                "ResponseMetadata",
                TypeInfo(typing.Dict[str, str]),
            ),
            (
                "subnets",
                "Subnets",
                TypeInfo(typing.List[Subnet]),
            ),
        ]

    response_metadata: typing.Dict[str, str] = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # Information about one or more subnets.
    subnets: typing.List["Subnet"] = dataclasses.field(default_factory=list, )


@dataclasses.dataclass
class DescribeTagsRequest(ShapeBase):
    """
    Contains the parameters for DescribeTags.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "dry_run",
                "DryRun",
                TypeInfo(bool),
            ),
            (
                "filters",
                "Filters",
                TypeInfo(typing.List[Filter]),
            ),
            (
                "max_results",
                "MaxResults",
                TypeInfo(int),
            ),
            (
                "next_token",
                "NextToken",
                TypeInfo(str),
            ),
        ]

    # Checks whether you have the required permissions for the action, without
    # actually making the request, and provides an error response. If you have
    # the required permissions, the error response is `DryRunOperation`.
    # Otherwise, it is `UnauthorizedOperation`.
    dry_run: bool = dataclasses.field(default=ShapeBase.NOT_SET, )

    # One or more filters.

    #   * `key` \- The tag key.

    #   * `resource-id` \- The resource ID.

    #   * `resource-type` \- The resource type (`customer-gateway` | `dhcp-options` | `elastic-ip` | `fleet` | `fpga-image` | `image` | `instance` | `internet-gateway` | `launch-template` | `natgateway` | `network-acl` | `network-interface` | `reserved-instances` | `route-table` | `security-group` | `snapshot` | `spot-instances-request` | `subnet` | `volume` | `vpc` | `vpc-peering-connection` | `vpn-connection` | `vpn-gateway`).

    #   * `value` \- The tag value.
    filters: typing.List["Filter"] = dataclasses.field(default_factory=list, )

    # The maximum number of results to return in a single call. This value can be
    # between 5 and 1000. To retrieve the remaining results, make another call
    # with the returned `NextToken` value.
    max_results: int = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The token to retrieve the next page of results.
    next_token: str = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class DescribeTagsResult(OutputShapeBase):
    """
    Contains the output of DescribeTags.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "response_metadata",
                "ResponseMetadata",
                TypeInfo(typing.Dict[str, str]),
            ),
            (
                "next_token",
                "NextToken",
                TypeInfo(str),
            ),
            (
                "tags",
                "Tags",
                TypeInfo(typing.List[TagDescription]),
            ),
        ]

    response_metadata: typing.Dict[str, str] = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # The token to use to retrieve the next page of results. This value is `null`
    # when there are no more results to return.
    next_token: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # A list of tags.
    tags: typing.List["TagDescription"] = dataclasses.field(
        default_factory=list,
    )


@dataclasses.dataclass
class DescribeVolumeAttributeRequest(ShapeBase):
    """
    Contains the parameters for DescribeVolumeAttribute.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "attribute",
                "Attribute",
                TypeInfo(VolumeAttributeName),
            ),
            (
                "volume_id",
                "VolumeId",
                TypeInfo(str),
            ),
            (
                "dry_run",
                "DryRun",
                TypeInfo(bool),
            ),
        ]

    # The attribute of the volume. This parameter is required.
    attribute: "VolumeAttributeName" = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # The ID of the volume.
    volume_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # Checks whether you have the required permissions for the action, without
    # actually making the request, and provides an error response. If you have
    # the required permissions, the error response is `DryRunOperation`.
    # Otherwise, it is `UnauthorizedOperation`.
    dry_run: bool = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class DescribeVolumeAttributeResult(OutputShapeBase):
    """
    Contains the output of DescribeVolumeAttribute.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "response_metadata",
                "ResponseMetadata",
                TypeInfo(typing.Dict[str, str]),
            ),
            (
                "auto_enable_io",
                "AutoEnableIO",
                TypeInfo(AttributeBooleanValue),
            ),
            (
                "product_codes",
                "ProductCodes",
                TypeInfo(typing.List[ProductCode]),
            ),
            (
                "volume_id",
                "VolumeId",
                TypeInfo(str),
            ),
        ]

    response_metadata: typing.Dict[str, str] = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # The state of `autoEnableIO` attribute.
    auto_enable_io: "AttributeBooleanValue" = dataclasses.field(
        default_factory=dict,
    )

    # A list of product codes.
    product_codes: typing.List["ProductCode"] = dataclasses.field(
        default_factory=list,
    )

    # The ID of the volume.
    volume_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class DescribeVolumeStatusRequest(ShapeBase):
    """
    Contains the parameters for DescribeVolumeStatus.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "filters",
                "Filters",
                TypeInfo(typing.List[Filter]),
            ),
            (
                "max_results",
                "MaxResults",
                TypeInfo(int),
            ),
            (
                "next_token",
                "NextToken",
                TypeInfo(str),
            ),
            (
                "volume_ids",
                "VolumeIds",
                TypeInfo(typing.List[str]),
            ),
            (
                "dry_run",
                "DryRun",
                TypeInfo(bool),
            ),
        ]

    # One or more filters.

    #   * `action.code` \- The action code for the event (for example, `enable-volume-io`).

    #   * `action.description` \- A description of the action.

    #   * `action.event-id` \- The event ID associated with the action.

    #   * `availability-zone` \- The Availability Zone of the instance.

    #   * `event.description` \- A description of the event.

    #   * `event.event-id` \- The event ID.

    #   * `event.event-type` \- The event type (for `io-enabled`: `passed` | `failed`; for `io-performance`: `io-performance:degraded` | `io-performance:severely-degraded` | `io-performance:stalled`).

    #   * `event.not-after` \- The latest end time for the event.

    #   * `event.not-before` \- The earliest start time for the event.

    #   * `volume-status.details-name` \- The cause for `volume-status.status` (`io-enabled` | `io-performance`).

    #   * `volume-status.details-status` \- The status of `volume-status.details-name` (for `io-enabled`: `passed` | `failed`; for `io-performance`: `normal` | `degraded` | `severely-degraded` | `stalled`).

    #   * `volume-status.status` \- The status of the volume (`ok` | `impaired` | `warning` | `insufficient-data`).
    filters: typing.List["Filter"] = dataclasses.field(default_factory=list, )

    # The maximum number of volume results returned by `DescribeVolumeStatus` in
    # paginated output. When this parameter is used, the request only returns
    # `MaxResults` results in a single page along with a `NextToken` response
    # element. The remaining results of the initial request can be seen by
    # sending another request with the returned `NextToken` value. This value can
    # be between 5 and 1000; if `MaxResults` is given a value larger than 1000,
    # only 1000 results are returned. If this parameter is not used, then
    # `DescribeVolumeStatus` returns all results. You cannot specify this
    # parameter and the volume IDs parameter in the same request.
    max_results: int = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The `NextToken` value to include in a future `DescribeVolumeStatus`
    # request. When the results of the request exceed `MaxResults`, this value
    # can be used to retrieve the next page of results. This value is `null` when
    # there are no more results to return.
    next_token: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # One or more volume IDs.

    # Default: Describes all your volumes.
    volume_ids: typing.List[str] = dataclasses.field(default_factory=list, )

    # Checks whether you have the required permissions for the action, without
    # actually making the request, and provides an error response. If you have
    # the required permissions, the error response is `DryRunOperation`.
    # Otherwise, it is `UnauthorizedOperation`.
    dry_run: bool = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class DescribeVolumeStatusResult(OutputShapeBase):
    """
    Contains the output of DescribeVolumeStatus.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "response_metadata",
                "ResponseMetadata",
                TypeInfo(typing.Dict[str, str]),
            ),
            (
                "next_token",
                "NextToken",
                TypeInfo(str),
            ),
            (
                "volume_statuses",
                "VolumeStatuses",
                TypeInfo(typing.List[VolumeStatusItem]),
            ),
        ]

    response_metadata: typing.Dict[str, str] = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # The token to use to retrieve the next page of results. This value is `null`
    # when there are no more results to return.
    next_token: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # A list of volumes.
    volume_statuses: typing.List["VolumeStatusItem"] = dataclasses.field(
        default_factory=list,
    )


@dataclasses.dataclass
class DescribeVolumesModificationsRequest(ShapeBase):
    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "dry_run",
                "DryRun",
                TypeInfo(bool),
            ),
            (
                "volume_ids",
                "VolumeIds",
                TypeInfo(typing.List[str]),
            ),
            (
                "filters",
                "Filters",
                TypeInfo(typing.List[Filter]),
            ),
            (
                "next_token",
                "NextToken",
                TypeInfo(str),
            ),
            (
                "max_results",
                "MaxResults",
                TypeInfo(int),
            ),
        ]

    # Checks whether you have the required permissions for the action, without
    # actually making the request, and provides an error response. If you have
    # the required permissions, the error response is `DryRunOperation`.
    # Otherwise, it is `UnauthorizedOperation`.
    dry_run: bool = dataclasses.field(default=ShapeBase.NOT_SET, )

    # One or more volume IDs for which in-progress modifications will be
    # described.
    volume_ids: typing.List[str] = dataclasses.field(default_factory=list, )

    # One or more filters. Supported filters: `volume-id`, `modification-state`,
    # `target-size`, `target-iops`, `target-volume-type`, `original-size`,
    # `original-iops`, `original-volume-type`, `start-time`.
    filters: typing.List["Filter"] = dataclasses.field(default_factory=list, )

    # The `nextToken` value returned by a previous paginated request.
    next_token: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The maximum number of results (up to a limit of 500) to be returned in a
    # paginated request.
    max_results: int = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class DescribeVolumesModificationsResult(OutputShapeBase):
    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "response_metadata",
                "ResponseMetadata",
                TypeInfo(typing.Dict[str, str]),
            ),
            (
                "volumes_modifications",
                "VolumesModifications",
                TypeInfo(typing.List[VolumeModification]),
            ),
            (
                "next_token",
                "NextToken",
                TypeInfo(str),
            ),
        ]

    response_metadata: typing.Dict[str, str] = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # A list of returned VolumeModification objects.
    volumes_modifications: typing.List["VolumeModification"
                                      ] = dataclasses.field(
                                          default_factory=list,
                                      )

    # Token for pagination, null if there are no more results
    next_token: str = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class DescribeVolumesRequest(ShapeBase):
    """
    Contains the parameters for DescribeVolumes.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "filters",
                "Filters",
                TypeInfo(typing.List[Filter]),
            ),
            (
                "volume_ids",
                "VolumeIds",
                TypeInfo(typing.List[str]),
            ),
            (
                "dry_run",
                "DryRun",
                TypeInfo(bool),
            ),
            (
                "max_results",
                "MaxResults",
                TypeInfo(int),
            ),
            (
                "next_token",
                "NextToken",
                TypeInfo(str),
            ),
        ]

    # One or more filters.

    #   * `attachment.attach-time` \- The time stamp when the attachment initiated.

    #   * `attachment.delete-on-termination` \- Whether the volume is deleted on instance termination.

    #   * `attachment.device` \- The device name specified in the block device mapping (for example, `/dev/sda1`).

    #   * `attachment.instance-id` \- The ID of the instance the volume is attached to.

    #   * `attachment.status` \- The attachment state (`attaching` | `attached` | `detaching`).

    #   * `availability-zone` \- The Availability Zone in which the volume was created.

    #   * `create-time` \- The time stamp when the volume was created.

    #   * `encrypted` \- The encryption status of the volume.

    #   * `size` \- The size of the volume, in GiB.

    #   * `snapshot-id` \- The snapshot from which the volume was created.

    #   * `status` \- The status of the volume (`creating` | `available` | `in-use` | `deleting` | `deleted` | `error`).

    #   * `tag`:<key> \- The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key `Owner` and the value `TeamA`, specify `tag:Owner` for the filter name and `TeamA` for the filter value.

    #   * `tag-key` \- The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.

    #   * `volume-id` \- The volume ID.

    #   * `volume-type` \- The Amazon EBS volume type. This can be `gp2` for General Purpose SSD, `io1` for Provisioned IOPS SSD, `st1` for Throughput Optimized HDD, `sc1` for Cold HDD, or `standard` for Magnetic volumes.
    filters: typing.List["Filter"] = dataclasses.field(default_factory=list, )

    # One or more volume IDs.
    volume_ids: typing.List[str] = dataclasses.field(default_factory=list, )

    # Checks whether you have the required permissions for the action, without
    # actually making the request, and provides an error response. If you have
    # the required permissions, the error response is `DryRunOperation`.
    # Otherwise, it is `UnauthorizedOperation`.
    dry_run: bool = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The maximum number of volume results returned by `DescribeVolumes` in
    # paginated output. When this parameter is used, `DescribeVolumes` only
    # returns `MaxResults` results in a single page along with a `NextToken`
    # response element. The remaining results of the initial request can be seen
    # by sending another `DescribeVolumes` request with the returned `NextToken`
    # value. This value can be between 5 and 500; if `MaxResults` is given a
    # value larger than 500, only 500 results are returned. If this parameter is
    # not used, then `DescribeVolumes` returns all results. You cannot specify
    # this parameter and the volume IDs parameter in the same request.
    max_results: int = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The `NextToken` value returned from a previous paginated `DescribeVolumes`
    # request where `MaxResults` was used and the results exceeded the value of
    # that parameter. Pagination continues from the end of the previous results
    # that returned the `NextToken` value. This value is `null` when there are no
    # more results to return.
    next_token: str = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class DescribeVolumesResult(OutputShapeBase):
    """
    Contains the output of DescribeVolumes.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "response_metadata",
                "ResponseMetadata",
                TypeInfo(typing.Dict[str, str]),
            ),
            (
                "volumes",
                "Volumes",
                TypeInfo(typing.List[Volume]),
            ),
            (
                "next_token",
                "NextToken",
                TypeInfo(str),
            ),
        ]

    response_metadata: typing.Dict[str, str] = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # Information about the volumes.
    volumes: typing.List["Volume"] = dataclasses.field(default_factory=list, )

    # The `NextToken` value to include in a future `DescribeVolumes` request.
    # When the results of a `DescribeVolumes` request exceed `MaxResults`, this
    # value can be used to retrieve the next page of results. This value is
    # `null` when there are no more results to return.
    next_token: str = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class DescribeVpcAttributeRequest(ShapeBase):
    """
    Contains the parameters for DescribeVpcAttribute.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "attribute",
                "Attribute",
                TypeInfo(VpcAttributeName),
            ),
            (
                "vpc_id",
                "VpcId",
                TypeInfo(str),
            ),
            (
                "dry_run",
                "DryRun",
                TypeInfo(bool),
            ),
        ]

    # The VPC attribute.
    attribute: "VpcAttributeName" = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # The ID of the VPC.
    vpc_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # Checks whether you have the required permissions for the action, without
    # actually making the request, and provides an error response. If you have
    # the required permissions, the error response is `DryRunOperation`.
    # Otherwise, it is `UnauthorizedOperation`.
    dry_run: bool = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class DescribeVpcAttributeResult(OutputShapeBase):
    """
    Contains the output of DescribeVpcAttribute.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "response_metadata",
                "ResponseMetadata",
                TypeInfo(typing.Dict[str, str]),
            ),
            (
                "vpc_id",
                "VpcId",
                TypeInfo(str),
            ),
            (
                "enable_dns_hostnames",
                "EnableDnsHostnames",
                TypeInfo(AttributeBooleanValue),
            ),
            (
                "enable_dns_support",
                "EnableDnsSupport",
                TypeInfo(AttributeBooleanValue),
            ),
        ]

    response_metadata: typing.Dict[str, str] = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # The ID of the VPC.
    vpc_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # Indicates whether the instances launched in the VPC get DNS hostnames. If
    # this attribute is `true`, instances in the VPC get DNS hostnames;
    # otherwise, they do not.
    enable_dns_hostnames: "AttributeBooleanValue" = dataclasses.field(
        default_factory=dict,
    )

    # Indicates whether DNS resolution is enabled for the VPC. If this attribute
    # is `true`, the Amazon DNS server resolves DNS hostnames for your instances
    # to their corresponding IP addresses; otherwise, it does not.
    enable_dns_support: "AttributeBooleanValue" = dataclasses.field(
        default_factory=dict,
    )


@dataclasses.dataclass
class DescribeVpcClassicLinkDnsSupportRequest(ShapeBase):
    """
    Contains the parameters for DescribeVpcClassicLinkDnsSupport.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "max_results",
                "MaxResults",
                TypeInfo(int),
            ),
            (
                "next_token",
                "NextToken",
                TypeInfo(str),
            ),
            (
                "vpc_ids",
                "VpcIds",
                TypeInfo(typing.List[str]),
            ),
        ]

    # The maximum number of items to return for this request. The request returns
    # a token that you can specify in a subsequent call to get the next set of
    # results.
    max_results: int = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The token for the next set of items to return. (You received this token
    # from a prior call.)
    next_token: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # One or more VPC IDs.
    vpc_ids: typing.List[str] = dataclasses.field(default_factory=list, )


@dataclasses.dataclass
class DescribeVpcClassicLinkDnsSupportResult(OutputShapeBase):
    """
    Contains the output of DescribeVpcClassicLinkDnsSupport.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "response_metadata",
                "ResponseMetadata",
                TypeInfo(typing.Dict[str, str]),
            ),
            (
                "next_token",
                "NextToken",
                TypeInfo(str),
            ),
            (
                "vpcs",
                "Vpcs",
                TypeInfo(typing.List[ClassicLinkDnsSupport]),
            ),
        ]

    response_metadata: typing.Dict[str, str] = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # The token to use when requesting the next set of items.
    next_token: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # Information about the ClassicLink DNS support status of the VPCs.
    vpcs: typing.List["ClassicLinkDnsSupport"] = dataclasses.field(
        default_factory=list,
    )


@dataclasses.dataclass
class DescribeVpcClassicLinkRequest(ShapeBase):
    """
    Contains the parameters for DescribeVpcClassicLink.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "filters",
                "Filters",
                TypeInfo(typing.List[Filter]),
            ),
            (
                "dry_run",
                "DryRun",
                TypeInfo(bool),
            ),
            (
                "vpc_ids",
                "VpcIds",
                TypeInfo(typing.List[str]),
            ),
        ]

    # One or more filters.

    #   * `is-classic-link-enabled` \- Whether the VPC is enabled for ClassicLink (`true` | `false`).

    #   * `tag`:<key> \- The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key `Owner` and the value `TeamA`, specify `tag:Owner` for the filter name and `TeamA` for the filter value.

    #   * `tag-key` \- The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.
    filters: typing.List["Filter"] = dataclasses.field(default_factory=list, )

    # Checks whether you have the required permissions for the action, without
    # actually making the request, and provides an error response. If you have
    # the required permissions, the error response is `DryRunOperation`.
    # Otherwise, it is `UnauthorizedOperation`.
    dry_run: bool = dataclasses.field(default=ShapeBase.NOT_SET, )

    # One or more VPCs for which you want to describe the ClassicLink status.
    vpc_ids: typing.List[str] = dataclasses.field(default_factory=list, )


@dataclasses.dataclass
class DescribeVpcClassicLinkResult(OutputShapeBase):
    """
    Contains the output of DescribeVpcClassicLink.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "response_metadata",
                "ResponseMetadata",
                TypeInfo(typing.Dict[str, str]),
            ),
            (
                "vpcs",
                "Vpcs",
                TypeInfo(typing.List[VpcClassicLink]),
            ),
        ]

    response_metadata: typing.Dict[str, str] = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # The ClassicLink status of one or more VPCs.
    vpcs: typing.List["VpcClassicLink"] = dataclasses.field(
        default_factory=list,
    )


@dataclasses.dataclass
class DescribeVpcEndpointConnectionNotificationsRequest(ShapeBase):
    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "dry_run",
                "DryRun",
                TypeInfo(bool),
            ),
            (
                "connection_notification_id",
                "ConnectionNotificationId",
                TypeInfo(str),
            ),
            (
                "filters",
                "Filters",
                TypeInfo(typing.List[Filter]),
            ),
            (
                "max_results",
                "MaxResults",
                TypeInfo(int),
            ),
            (
                "next_token",
                "NextToken",
                TypeInfo(str),
            ),
        ]

    # Checks whether you have the required permissions for the action, without
    # actually making the request, and provides an error response. If you have
    # the required permissions, the error response is `DryRunOperation`.
    # Otherwise, it is `UnauthorizedOperation`.
    dry_run: bool = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The ID of the notification.
    connection_notification_id: str = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # One or more filters.

    #   * `connection-notification-arn` \- The ARN of SNS topic for the notification.

    #   * `connection-notification-id` \- The ID of the notification.

    #   * `connection-notification-state` \- The state of the notification (`Enabled` | `Disabled`).

    #   * `connection-notification-type` \- The type of notification (`Topic`).

    #   * `service-id` \- The ID of the endpoint service.

    #   * `vpc-endpoint-id` \- The ID of the VPC endpoint.
    filters: typing.List["Filter"] = dataclasses.field(default_factory=list, )

    # The maximum number of results to return in a single call. To retrieve the
    # remaining results, make another request with the returned `NextToken`
    # value.
    max_results: int = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The token to request the next page of results.
    next_token: str = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class DescribeVpcEndpointConnectionNotificationsResult(OutputShapeBase):
    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "response_metadata",
                "ResponseMetadata",
                TypeInfo(typing.Dict[str, str]),
            ),
            (
                "connection_notification_set",
                "ConnectionNotificationSet",
                TypeInfo(typing.List[ConnectionNotification]),
            ),
            (
                "next_token",
                "NextToken",
                TypeInfo(str),
            ),
        ]

    response_metadata: typing.Dict[str, str] = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # One or more notifications.
    connection_notification_set: typing.List["ConnectionNotification"
                                            ] = dataclasses.field(
                                                default_factory=list,
                                            )

    # The token to use to retrieve the next page of results. This value is `null`
    # when there are no more results to return.
    next_token: str = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class DescribeVpcEndpointConnectionsRequest(ShapeBase):
    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "dry_run",
                "DryRun",
                TypeInfo(bool),
            ),
            (
                "filters",
                "Filters",
                TypeInfo(typing.List[Filter]),
            ),
            (
                "max_results",
                "MaxResults",
                TypeInfo(int),
            ),
            (
                "next_token",
                "NextToken",
                TypeInfo(str),
            ),
        ]

    # Checks whether you have the required permissions for the action, without
    # actually making the request, and provides an error response. If you have
    # the required permissions, the error response is `DryRunOperation`.
    # Otherwise, it is `UnauthorizedOperation`.
    dry_run: bool = dataclasses.field(default=ShapeBase.NOT_SET, )

    # One or more filters.

    #   * `service-id` \- The ID of the service.

    #   * `vpc-endpoint-owner` \- The AWS account number of the owner of the endpoint.

    #   * `vpc-endpoint-state` \- The state of the endpoint (`pendingAcceptance` | `pending` | `available` | `deleting` | `deleted` | `rejected` | `failed`).

    #   * `vpc-endpoint-id` \- The ID of the endpoint.
    filters: typing.List["Filter"] = dataclasses.field(default_factory=list, )

    # The maximum number of results to return for the request in a single page.
    # The remaining results of the initial request can be seen by sending another
    # request with the returned `NextToken` value. This value can be between 5
    # and 1000; if `MaxResults` is given a value larger than 1000, only 1000
    # results are returned.
    max_results: int = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The token to retrieve the next page of results.
    next_token: str = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class DescribeVpcEndpointConnectionsResult(OutputShapeBase):
    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "response_metadata",
                "ResponseMetadata",
                TypeInfo(typing.Dict[str, str]),
            ),
            (
                "vpc_endpoint_connections",
                "VpcEndpointConnections",
                TypeInfo(typing.List[VpcEndpointConnection]),
            ),
            (
                "next_token",
                "NextToken",
                TypeInfo(str),
            ),
        ]

    response_metadata: typing.Dict[str, str] = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # Information about one or more VPC endpoint connections.
    vpc_endpoint_connections: typing.List["VpcEndpointConnection"
                                         ] = dataclasses.field(
                                             default_factory=list,
                                         )

    # The token to use to retrieve the next page of results. This value is `null`
    # when there are no more results to return.
    next_token: str = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class DescribeVpcEndpointServiceConfigurationsRequest(ShapeBase):
    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "dry_run",
                "DryRun",
                TypeInfo(bool),
            ),
            (
                "service_ids",
                "ServiceIds",
                TypeInfo(typing.List[str]),
            ),
            (
                "filters",
                "Filters",
                TypeInfo(typing.List[Filter]),
            ),
            (
                "max_results",
                "MaxResults",
                TypeInfo(int),
            ),
            (
                "next_token",
                "NextToken",
                TypeInfo(str),
            ),
        ]

    # Checks whether you have the required permissions for the action, without
    # actually making the request, and provides an error response. If you have
    # the required permissions, the error response is `DryRunOperation`.
    # Otherwise, it is `UnauthorizedOperation`.
    dry_run: bool = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The IDs of one or more services.
    service_ids: typing.List[str] = dataclasses.field(default_factory=list, )

    # One or more filters.

    #   * `service-name` \- The name of the service.

    #   * `service-id` \- The ID of the service.

    #   * `service-state` \- The state of the service (`Pending` | `Available` | `Deleting` | `Deleted` | `Failed`).
    filters: typing.List["Filter"] = dataclasses.field(default_factory=list, )

    # The maximum number of results to return for the request in a single page.
    # The remaining results of the initial request can be seen by sending another
    # request with the returned `NextToken` value. This value can be between 5
    # and 1000; if `MaxResults` is given a value larger than 1000, only 1000
    # results are returned.
    max_results: int = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The token to retrieve the next page of results.
    next_token: str = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class DescribeVpcEndpointServiceConfigurationsResult(OutputShapeBase):
    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "response_metadata",
                "ResponseMetadata",
                TypeInfo(typing.Dict[str, str]),
            ),
            (
                "service_configurations",
                "ServiceConfigurations",
                TypeInfo(typing.List[ServiceConfiguration]),
            ),
            (
                "next_token",
                "NextToken",
                TypeInfo(str),
            ),
        ]

    response_metadata: typing.Dict[str, str] = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # Information about one or more services.
    service_configurations: typing.List["ServiceConfiguration"
                                       ] = dataclasses.field(
                                           default_factory=list,
                                       )

    # The token to use to retrieve the next page of results. This value is `null`
    # when there are no more results to return.
    next_token: str = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class DescribeVpcEndpointServicePermissionsRequest(ShapeBase):
    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "service_id",
                "ServiceId",
                TypeInfo(str),
            ),
            (
                "dry_run",
                "DryRun",
                TypeInfo(bool),
            ),
            (
                "filters",
                "Filters",
                TypeInfo(typing.List[Filter]),
            ),
            (
                "max_results",
                "MaxResults",
                TypeInfo(int),
            ),
            (
                "next_token",
                "NextToken",
                TypeInfo(str),
            ),
        ]

    # The ID of the service.
    service_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # Checks whether you have the required permissions for the action, without
    # actually making the request, and provides an error response. If you have
    # the required permissions, the error response is `DryRunOperation`.
    # Otherwise, it is `UnauthorizedOperation`.
    dry_run: bool = dataclasses.field(default=ShapeBase.NOT_SET, )

    # One or more filters.

    #   * `principal` \- The ARN of the principal.

    #   * `principal-type` \- The principal type (`All` | `Service` | `OrganizationUnit` | `Account` | `User` | `Role`).
    filters: typing.List["Filter"] = dataclasses.field(default_factory=list, )

    # The maximum number of results to return for the request in a single page.
    # The remaining results of the initial request can be seen by sending another
    # request with the returned `NextToken` value. This value can be between 5
    # and 1000; if `MaxResults` is given a value larger than 1000, only 1000
    # results are returned.
    max_results: int = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The token to retrieve the next page of results.
    next_token: str = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class DescribeVpcEndpointServicePermissionsResult(OutputShapeBase):
    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "response_metadata",
                "ResponseMetadata",
                TypeInfo(typing.Dict[str, str]),
            ),
            (
                "allowed_principals",
                "AllowedPrincipals",
                TypeInfo(typing.List[AllowedPrincipal]),
            ),
            (
                "next_token",
                "NextToken",
                TypeInfo(str),
            ),
        ]

    response_metadata: typing.Dict[str, str] = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # Information about one or more allowed principals.
    allowed_principals: typing.List["AllowedPrincipal"] = dataclasses.field(
        default_factory=list,
    )

    # The token to use to retrieve the next page of results. This value is `null`
    # when there are no more results to return.
    next_token: str = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class DescribeVpcEndpointServicesRequest(ShapeBase):
    """
    Contains the parameters for DescribeVpcEndpointServices.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "dry_run",
                "DryRun",
                TypeInfo(bool),
            ),
            (
                "service_names",
                "ServiceNames",
                TypeInfo(typing.List[str]),
            ),
            (
                "filters",
                "Filters",
                TypeInfo(typing.List[Filter]),
            ),
            (
                "max_results",
                "MaxResults",
                TypeInfo(int),
            ),
            (
                "next_token",
                "NextToken",
                TypeInfo(str),
            ),
        ]

    # Checks whether you have the required permissions for the action, without
    # actually making the request, and provides an error response. If you have
    # the required permissions, the error response is `DryRunOperation`.
    # Otherwise, it is `UnauthorizedOperation`.
    dry_run: bool = dataclasses.field(default=ShapeBase.NOT_SET, )

    # One or more service names.
    service_names: typing.List[str] = dataclasses.field(default_factory=list, )

    # One or more filters.

    #   * `service-name`: The name of the service.
    filters: typing.List["Filter"] = dataclasses.field(default_factory=list, )

    # The maximum number of items to return for this request. The request returns
    # a token that you can specify in a subsequent call to get the next set of
    # results.

    # Constraint: If the value is greater than 1000, we return only 1000 items.
    max_results: int = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The token for the next set of items to return. (You received this token
    # from a prior call.)
    next_token: str = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class DescribeVpcEndpointServicesResult(OutputShapeBase):
    """
    Contains the output of DescribeVpcEndpointServices.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "response_metadata",
                "ResponseMetadata",
                TypeInfo(typing.Dict[str, str]),
            ),
            (
                "service_names",
                "ServiceNames",
                TypeInfo(typing.List[str]),
            ),
            (
                "service_details",
                "ServiceDetails",
                TypeInfo(typing.List[ServiceDetail]),
            ),
            (
                "next_token",
                "NextToken",
                TypeInfo(str),
            ),
        ]

    response_metadata: typing.Dict[str, str] = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # A list of supported services.
    service_names: typing.List[str] = dataclasses.field(default_factory=list, )

    # Information about the service.
    service_details: typing.List["ServiceDetail"] = dataclasses.field(
        default_factory=list,
    )

    # The token to use when requesting the next set of items. If there are no
    # additional items to return, the string is empty.
    next_token: str = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class DescribeVpcEndpointsRequest(ShapeBase):
    """
    Contains the parameters for DescribeVpcEndpoints.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "dry_run",
                "DryRun",
                TypeInfo(bool),
            ),
            (
                "vpc_endpoint_ids",
                "VpcEndpointIds",
                TypeInfo(typing.List[str]),
            ),
            (
                "filters",
                "Filters",
                TypeInfo(typing.List[Filter]),
            ),
            (
                "max_results",
                "MaxResults",
                TypeInfo(int),
            ),
            (
                "next_token",
                "NextToken",
                TypeInfo(str),
            ),
        ]

    # Checks whether you have the required permissions for the action, without
    # actually making the request, and provides an error response. If you have
    # the required permissions, the error response is `DryRunOperation`.
    # Otherwise, it is `UnauthorizedOperation`.
    dry_run: bool = dataclasses.field(default=ShapeBase.NOT_SET, )

    # One or more endpoint IDs.
    vpc_endpoint_ids: typing.List[str] = dataclasses.field(
        default_factory=list,
    )

    # One or more filters.

    #   * `service-name`: The name of the service.

    #   * `vpc-id`: The ID of the VPC in which the endpoint resides.

    #   * `vpc-endpoint-id`: The ID of the endpoint.

    #   * `vpc-endpoint-state`: The state of the endpoint. (`pending` | `available` | `deleting` | `deleted`)
    filters: typing.List["Filter"] = dataclasses.field(default_factory=list, )

    # The maximum number of items to return for this request. The request returns
    # a token that you can specify in a subsequent call to get the next set of
    # results.

    # Constraint: If the value is greater than 1000, we return only 1000 items.
    max_results: int = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The token for the next set of items to return. (You received this token
    # from a prior call.)
    next_token: str = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class DescribeVpcEndpointsResult(OutputShapeBase):
    """
    Contains the output of DescribeVpcEndpoints.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "response_metadata",
                "ResponseMetadata",
                TypeInfo(typing.Dict[str, str]),
            ),
            (
                "vpc_endpoints",
                "VpcEndpoints",
                TypeInfo(typing.List[VpcEndpoint]),
            ),
            (
                "next_token",
                "NextToken",
                TypeInfo(str),
            ),
        ]

    response_metadata: typing.Dict[str, str] = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # Information about the endpoints.
    vpc_endpoints: typing.List["VpcEndpoint"] = dataclasses.field(
        default_factory=list,
    )

    # The token to use when requesting the next set of items. If there are no
    # additional items to return, the string is empty.
    next_token: str = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class DescribeVpcPeeringConnectionsRequest(ShapeBase):
    """
    Contains the parameters for DescribeVpcPeeringConnections.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "filters",
                "Filters",
                TypeInfo(typing.List[Filter]),
            ),
            (
                "dry_run",
                "DryRun",
                TypeInfo(bool),
            ),
            (
                "vpc_peering_connection_ids",
                "VpcPeeringConnectionIds",
                TypeInfo(typing.List[str]),
            ),
        ]

    # One or more filters.

    #   * `accepter-vpc-info.cidr-block` \- The IPv4 CIDR block of the accepter VPC.

    #   * `accepter-vpc-info.owner-id` \- The AWS account ID of the owner of the accepter VPC.

    #   * `accepter-vpc-info.vpc-id` \- The ID of the accepter VPC.

    #   * `expiration-time` \- The expiration date and time for the VPC peering connection.

    #   * `requester-vpc-info.cidr-block` \- The IPv4 CIDR block of the requester's VPC.

    #   * `requester-vpc-info.owner-id` \- The AWS account ID of the owner of the requester VPC.

    #   * `requester-vpc-info.vpc-id` \- The ID of the requester VPC.

    #   * `status-code` \- The status of the VPC peering connection (`pending-acceptance` | `failed` | `expired` | `provisioning` | `active` | `deleting` | `deleted` | `rejected`).

    #   * `status-message` \- A message that provides more information about the status of the VPC peering connection, if applicable.

    #   * `tag`:<key> \- The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key `Owner` and the value `TeamA`, specify `tag:Owner` for the filter name and `TeamA` for the filter value.

    #   * `tag-key` \- The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.

    #   * `vpc-peering-connection-id` \- The ID of the VPC peering connection.
    filters: typing.List["Filter"] = dataclasses.field(default_factory=list, )

    # Checks whether you have the required permissions for the action, without
    # actually making the request, and provides an error response. If you have
    # the required permissions, the error response is `DryRunOperation`.
    # Otherwise, it is `UnauthorizedOperation`.
    dry_run: bool = dataclasses.field(default=ShapeBase.NOT_SET, )

    # One or more VPC peering connection IDs.

    # Default: Describes all your VPC peering connections.
    vpc_peering_connection_ids: typing.List[str] = dataclasses.field(
        default_factory=list,
    )


@dataclasses.dataclass
class DescribeVpcPeeringConnectionsResult(OutputShapeBase):
    """
    Contains the output of DescribeVpcPeeringConnections.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "response_metadata",
                "ResponseMetadata",
                TypeInfo(typing.Dict[str, str]),
            ),
            (
                "vpc_peering_connections",
                "VpcPeeringConnections",
                TypeInfo(typing.List[VpcPeeringConnection]),
            ),
        ]

    response_metadata: typing.Dict[str, str] = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # Information about the VPC peering connections.
    vpc_peering_connections: typing.List["VpcPeeringConnection"
                                        ] = dataclasses.field(
                                            default_factory=list,
                                        )


@dataclasses.dataclass
class DescribeVpcsRequest(ShapeBase):
    """
    Contains the parameters for DescribeVpcs.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "filters",
                "Filters",
                TypeInfo(typing.List[Filter]),
            ),
            (
                "vpc_ids",
                "VpcIds",
                TypeInfo(typing.List[str]),
            ),
            (
                "dry_run",
                "DryRun",
                TypeInfo(bool),
            ),
        ]

    # One or more filters.

    #   * `cidr` \- The primary IPv4 CIDR block of the VPC. The CIDR block you specify must exactly match the VPC's CIDR block for information to be returned for the VPC. Must contain the slash followed by one or two digits (for example, `/28`).

    #   * `cidr-block-association.cidr-block` \- An IPv4 CIDR block associated with the VPC.

    #   * `cidr-block-association.association-id` \- The association ID for an IPv4 CIDR block associated with the VPC.

    #   * `cidr-block-association.state` \- The state of an IPv4 CIDR block associated with the VPC.

    #   * `dhcp-options-id` \- The ID of a set of DHCP options.

    #   * `ipv6-cidr-block-association.ipv6-cidr-block` \- An IPv6 CIDR block associated with the VPC.

    #   * `ipv6-cidr-block-association.association-id` \- The association ID for an IPv6 CIDR block associated with the VPC.

    #   * `ipv6-cidr-block-association.state` \- The state of an IPv6 CIDR block associated with the VPC.

    #   * `isDefault` \- Indicates whether the VPC is the default VPC.

    #   * `state` \- The state of the VPC (`pending` | `available`).

    #   * `tag`:<key> \- The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key `Owner` and the value `TeamA`, specify `tag:Owner` for the filter name and `TeamA` for the filter value.

    #   * `tag-key` \- The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.

    #   * `vpc-id` \- The ID of the VPC.
    filters: typing.List["Filter"] = dataclasses.field(default_factory=list, )

    # One or more VPC IDs.

    # Default: Describes all your VPCs.
    vpc_ids: typing.List[str] = dataclasses.field(default_factory=list, )

    # Checks whether you have the required permissions for the action, without
    # actually making the request, and provides an error response. If you have
    # the required permissions, the error response is `DryRunOperation`.
    # Otherwise, it is `UnauthorizedOperation`.
    dry_run: bool = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class DescribeVpcsResult(OutputShapeBase):
    """
    Contains the output of DescribeVpcs.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "response_metadata",
                "ResponseMetadata",
                TypeInfo(typing.Dict[str, str]),
            ),
            (
                "vpcs",
                "Vpcs",
                TypeInfo(typing.List[Vpc]),
            ),
        ]

    response_metadata: typing.Dict[str, str] = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # Information about one or more VPCs.
    vpcs: typing.List["Vpc"] = dataclasses.field(default_factory=list, )


@dataclasses.dataclass
class DescribeVpnConnectionsRequest(ShapeBase):
    """
    Contains the parameters for DescribeVpnConnections.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "filters",
                "Filters",
                TypeInfo(typing.List[Filter]),
            ),
            (
                "vpn_connection_ids",
                "VpnConnectionIds",
                TypeInfo(typing.List[str]),
            ),
            (
                "dry_run",
                "DryRun",
                TypeInfo(bool),
            ),
        ]

    # One or more filters.

    #   * `customer-gateway-configuration` \- The configuration information for the customer gateway.

    #   * `customer-gateway-id` \- The ID of a customer gateway associated with the VPN connection.

    #   * `state` \- The state of the VPN connection (`pending` | `available` | `deleting` | `deleted`).

    #   * `option.static-routes-only` \- Indicates whether the connection has static routes only. Used for devices that do not support Border Gateway Protocol (BGP).

    #   * `route.destination-cidr-block` \- The destination CIDR block. This corresponds to the subnet used in a customer data center.

    #   * `bgp-asn` \- The BGP Autonomous System Number (ASN) associated with a BGP device.

    #   * `tag`:<key> \- The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key `Owner` and the value `TeamA`, specify `tag:Owner` for the filter name and `TeamA` for the filter value.

    #   * `tag-key` \- The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.

    #   * `type` \- The type of VPN connection. Currently the only supported type is `ipsec.1`.

    #   * `vpn-connection-id` \- The ID of the VPN connection.

    #   * `vpn-gateway-id` \- The ID of a virtual private gateway associated with the VPN connection.
    filters: typing.List["Filter"] = dataclasses.field(default_factory=list, )

    # One or more VPN connection IDs.

    # Default: Describes your VPN connections.
    vpn_connection_ids: typing.List[str] = dataclasses.field(
        default_factory=list,
    )

    # Checks whether you have the required permissions for the action, without
    # actually making the request, and provides an error response. If you have
    # the required permissions, the error response is `DryRunOperation`.
    # Otherwise, it is `UnauthorizedOperation`.
    dry_run: bool = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class DescribeVpnConnectionsResult(OutputShapeBase):
    """
    Contains the output of DescribeVpnConnections.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "response_metadata",
                "ResponseMetadata",
                TypeInfo(typing.Dict[str, str]),
            ),
            (
                "vpn_connections",
                "VpnConnections",
                TypeInfo(typing.List[VpnConnection]),
            ),
        ]

    response_metadata: typing.Dict[str, str] = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # Information about one or more VPN connections.
    vpn_connections: typing.List["VpnConnection"] = dataclasses.field(
        default_factory=list,
    )


@dataclasses.dataclass
class DescribeVpnGatewaysRequest(ShapeBase):
    """
    Contains the parameters for DescribeVpnGateways.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "filters",
                "Filters",
                TypeInfo(typing.List[Filter]),
            ),
            (
                "vpn_gateway_ids",
                "VpnGatewayIds",
                TypeInfo(typing.List[str]),
            ),
            (
                "dry_run",
                "DryRun",
                TypeInfo(bool),
            ),
        ]

    # One or more filters.

    #   * `amazon-side-asn` \- The Autonomous System Number (ASN) for the Amazon side of the gateway.

    #   * `attachment.state` \- The current state of the attachment between the gateway and the VPC (`attaching` | `attached` | `detaching` | `detached`).

    #   * `attachment.vpc-id` \- The ID of an attached VPC.

    #   * `availability-zone` \- The Availability Zone for the virtual private gateway (if applicable).

    #   * `state` \- The state of the virtual private gateway (`pending` | `available` | `deleting` | `deleted`).

    #   * `tag`:<key> \- The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key `Owner` and the value `TeamA`, specify `tag:Owner` for the filter name and `TeamA` for the filter value.

    #   * `tag-key` \- The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.

    #   * `type` \- The type of virtual private gateway. Currently the only supported type is `ipsec.1`.

    #   * `vpn-gateway-id` \- The ID of the virtual private gateway.
    filters: typing.List["Filter"] = dataclasses.field(default_factory=list, )

    # One or more virtual private gateway IDs.

    # Default: Describes all your virtual private gateways.
    vpn_gateway_ids: typing.List[str] = dataclasses.field(
        default_factory=list,
    )

    # Checks whether you have the required permissions for the action, without
    # actually making the request, and provides an error response. If you have
    # the required permissions, the error response is `DryRunOperation`.
    # Otherwise, it is `UnauthorizedOperation`.
    dry_run: bool = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class DescribeVpnGatewaysResult(OutputShapeBase):
    """
    Contains the output of DescribeVpnGateways.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "response_metadata",
                "ResponseMetadata",
                TypeInfo(typing.Dict[str, str]),
            ),
            (
                "vpn_gateways",
                "VpnGateways",
                TypeInfo(typing.List[VpnGateway]),
            ),
        ]

    response_metadata: typing.Dict[str, str] = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # Information about one or more virtual private gateways.
    vpn_gateways: typing.List["VpnGateway"] = dataclasses.field(
        default_factory=list,
    )


@dataclasses.dataclass
class DetachClassicLinkVpcRequest(ShapeBase):
    """
    Contains the parameters for DetachClassicLinkVpc.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "instance_id",
                "InstanceId",
                TypeInfo(str),
            ),
            (
                "vpc_id",
                "VpcId",
                TypeInfo(str),
            ),
            (
                "dry_run",
                "DryRun",
                TypeInfo(bool),
            ),
        ]

    # The ID of the instance to unlink from the VPC.
    instance_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The ID of the VPC to which the instance is linked.
    vpc_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # Checks whether you have the required permissions for the action, without
    # actually making the request, and provides an error response. If you have
    # the required permissions, the error response is `DryRunOperation`.
    # Otherwise, it is `UnauthorizedOperation`.
    dry_run: bool = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class DetachClassicLinkVpcResult(OutputShapeBase):
    """
    Contains the output of DetachClassicLinkVpc.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "response_metadata",
                "ResponseMetadata",
                TypeInfo(typing.Dict[str, str]),
            ),
            (
                "return_",
                "Return",
                TypeInfo(bool),
            ),
        ]

    response_metadata: typing.Dict[str, str] = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # Returns `true` if the request succeeds; otherwise, it returns an error.
    return_: bool = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class DetachInternetGatewayRequest(ShapeBase):
    """
    Contains the parameters for DetachInternetGateway.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "internet_gateway_id",
                "InternetGatewayId",
                TypeInfo(str),
            ),
            (
                "vpc_id",
                "VpcId",
                TypeInfo(str),
            ),
            (
                "dry_run",
                "DryRun",
                TypeInfo(bool),
            ),
        ]

    # The ID of the internet gateway.
    internet_gateway_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The ID of the VPC.
    vpc_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # Checks whether you have the required permissions for the action, without
    # actually making the request, and provides an error response. If you have
    # the required permissions, the error response is `DryRunOperation`.
    # Otherwise, it is `UnauthorizedOperation`.
    dry_run: bool = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class DetachNetworkInterfaceRequest(ShapeBase):
    """
    Contains the parameters for DetachNetworkInterface.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "attachment_id",
                "AttachmentId",
                TypeInfo(str),
            ),
            (
                "dry_run",
                "DryRun",
                TypeInfo(bool),
            ),
            (
                "force",
                "Force",
                TypeInfo(bool),
            ),
        ]

    # The ID of the attachment.
    attachment_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # Checks whether you have the required permissions for the action, without
    # actually making the request, and provides an error response. If you have
    # the required permissions, the error response is `DryRunOperation`.
    # Otherwise, it is `UnauthorizedOperation`.
    dry_run: bool = dataclasses.field(default=ShapeBase.NOT_SET, )

    # Specifies whether to force a detachment.
    force: bool = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class DetachVolumeRequest(ShapeBase):
    """
    Contains the parameters for DetachVolume.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "volume_id",
                "VolumeId",
                TypeInfo(str),
            ),
            (
                "device",
                "Device",
                TypeInfo(str),
            ),
            (
                "force",
                "Force",
                TypeInfo(bool),
            ),
            (
                "instance_id",
                "InstanceId",
                TypeInfo(str),
            ),
            (
                "dry_run",
                "DryRun",
                TypeInfo(bool),
            ),
        ]

    # The ID of the volume.
    volume_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The device name.
    device: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # Forces detachment if the previous detachment attempt did not occur cleanly
    # (for example, logging into an instance, unmounting the volume, and
    # detaching normally). This option can lead to data loss or a corrupted file
    # system. Use this option only as a last resort to detach a volume from a
    # failed instance. The instance won't have an opportunity to flush file
    # system caches or file system metadata. If you use this option, you must
    # perform file system check and repair procedures.
    force: bool = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The ID of the instance.
    instance_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # Checks whether you have the required permissions for the action, without
    # actually making the request, and provides an error response. If you have
    # the required permissions, the error response is `DryRunOperation`.
    # Otherwise, it is `UnauthorizedOperation`.
    dry_run: bool = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class DetachVpnGatewayRequest(ShapeBase):
    """
    Contains the parameters for DetachVpnGateway.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "vpc_id",
                "VpcId",
                TypeInfo(str),
            ),
            (
                "vpn_gateway_id",
                "VpnGatewayId",
                TypeInfo(str),
            ),
            (
                "dry_run",
                "DryRun",
                TypeInfo(bool),
            ),
        ]

    # The ID of the VPC.
    vpc_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The ID of the virtual private gateway.
    vpn_gateway_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # Checks whether you have the required permissions for the action, without
    # actually making the request, and provides an error response. If you have
    # the required permissions, the error response is `DryRunOperation`.
    # Otherwise, it is `UnauthorizedOperation`.
    dry_run: bool = dataclasses.field(default=ShapeBase.NOT_SET, )


class DeviceType(Enum):
    ebs = "ebs"
    instance_store = "instance-store"


@dataclasses.dataclass
class DhcpConfiguration(ShapeBase):
    """
    Describes a DHCP configuration option.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "key",
                "Key",
                TypeInfo(str),
            ),
            (
                "values",
                "Values",
                TypeInfo(typing.List[AttributeValue]),
            ),
        ]

    # The name of a DHCP option.
    key: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # One or more values for the DHCP option.
    values: typing.List["AttributeValue"] = dataclasses.field(
        default_factory=list,
    )


@dataclasses.dataclass
class DhcpOptions(ShapeBase):
    """
    Describes a set of DHCP options.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "dhcp_configurations",
                "DhcpConfigurations",
                TypeInfo(typing.List[DhcpConfiguration]),
            ),
            (
                "dhcp_options_id",
                "DhcpOptionsId",
                TypeInfo(str),
            ),
            (
                "tags",
                "Tags",
                TypeInfo(typing.List[Tag]),
            ),
        ]

    # One or more DHCP options in the set.
    dhcp_configurations: typing.List["DhcpConfiguration"] = dataclasses.field(
        default_factory=list,
    )

    # The ID of the set of DHCP options.
    dhcp_options_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # Any tags assigned to the DHCP options set.
    tags: typing.List["Tag"] = dataclasses.field(default_factory=list, )


@dataclasses.dataclass
class DisableVgwRoutePropagationRequest(ShapeBase):
    """
    Contains the parameters for DisableVgwRoutePropagation.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "gateway_id",
                "GatewayId",
                TypeInfo(str),
            ),
            (
                "route_table_id",
                "RouteTableId",
                TypeInfo(str),
            ),
        ]

    # The ID of the virtual private gateway.
    gateway_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The ID of the route table.
    route_table_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class DisableVpcClassicLinkDnsSupportRequest(ShapeBase):
    """
    Contains the parameters for DisableVpcClassicLinkDnsSupport.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "vpc_id",
                "VpcId",
                TypeInfo(str),
            ),
        ]

    # The ID of the VPC.
    vpc_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class DisableVpcClassicLinkDnsSupportResult(OutputShapeBase):
    """
    Contains the output of DisableVpcClassicLinkDnsSupport.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "response_metadata",
                "ResponseMetadata",
                TypeInfo(typing.Dict[str, str]),
            ),
            (
                "return_",
                "Return",
                TypeInfo(bool),
            ),
        ]

    response_metadata: typing.Dict[str, str] = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # Returns `true` if the request succeeds; otherwise, it returns an error.
    return_: bool = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class DisableVpcClassicLinkRequest(ShapeBase):
    """
    Contains the parameters for DisableVpcClassicLink.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "vpc_id",
                "VpcId",
                TypeInfo(str),
            ),
            (
                "dry_run",
                "DryRun",
                TypeInfo(bool),
            ),
        ]

    # The ID of the VPC.
    vpc_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # Checks whether you have the required permissions for the action, without
    # actually making the request, and provides an error response. If you have
    # the required permissions, the error response is `DryRunOperation`.
    # Otherwise, it is `UnauthorizedOperation`.
    dry_run: bool = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class DisableVpcClassicLinkResult(OutputShapeBase):
    """
    Contains the output of DisableVpcClassicLink.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "response_metadata",
                "ResponseMetadata",
                TypeInfo(typing.Dict[str, str]),
            ),
            (
                "return_",
                "Return",
                TypeInfo(bool),
            ),
        ]

    response_metadata: typing.Dict[str, str] = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # Returns `true` if the request succeeds; otherwise, it returns an error.
    return_: bool = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class DisassociateAddressRequest(ShapeBase):
    """
    Contains the parameters for DisassociateAddress.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "association_id",
                "AssociationId",
                TypeInfo(str),
            ),
            (
                "public_ip",
                "PublicIp",
                TypeInfo(str),
            ),
            (
                "dry_run",
                "DryRun",
                TypeInfo(bool),
            ),
        ]

    # [EC2-VPC] The association ID. Required for EC2-VPC.
    association_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # [EC2-Classic] The Elastic IP address. Required for EC2-Classic.
    public_ip: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # Checks whether you have the required permissions for the action, without
    # actually making the request, and provides an error response. If you have
    # the required permissions, the error response is `DryRunOperation`.
    # Otherwise, it is `UnauthorizedOperation`.
    dry_run: bool = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class DisassociateIamInstanceProfileRequest(ShapeBase):
    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "association_id",
                "AssociationId",
                TypeInfo(str),
            ),
        ]

    # The ID of the IAM instance profile association.
    association_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class DisassociateIamInstanceProfileResult(OutputShapeBase):
    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "response_metadata",
                "ResponseMetadata",
                TypeInfo(typing.Dict[str, str]),
            ),
            (
                "iam_instance_profile_association",
                "IamInstanceProfileAssociation",
                TypeInfo(IamInstanceProfileAssociation),
            ),
        ]

    response_metadata: typing.Dict[str, str] = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # Information about the IAM instance profile association.
    iam_instance_profile_association: "IamInstanceProfileAssociation" = dataclasses.field(
        default_factory=dict,
    )


@dataclasses.dataclass
class DisassociateRouteTableRequest(ShapeBase):
    """
    Contains the parameters for DisassociateRouteTable.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "association_id",
                "AssociationId",
                TypeInfo(str),
            ),
            (
                "dry_run",
                "DryRun",
                TypeInfo(bool),
            ),
        ]

    # The association ID representing the current association between the route
    # table and subnet.
    association_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # Checks whether you have the required permissions for the action, without
    # actually making the request, and provides an error response. If you have
    # the required permissions, the error response is `DryRunOperation`.
    # Otherwise, it is `UnauthorizedOperation`.
    dry_run: bool = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class DisassociateSubnetCidrBlockRequest(ShapeBase):
    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "association_id",
                "AssociationId",
                TypeInfo(str),
            ),
        ]

    # The association ID for the CIDR block.
    association_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class DisassociateSubnetCidrBlockResult(OutputShapeBase):
    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "response_metadata",
                "ResponseMetadata",
                TypeInfo(typing.Dict[str, str]),
            ),
            (
                "ipv6_cidr_block_association",
                "Ipv6CidrBlockAssociation",
                TypeInfo(SubnetIpv6CidrBlockAssociation),
            ),
            (
                "subnet_id",
                "SubnetId",
                TypeInfo(str),
            ),
        ]

    response_metadata: typing.Dict[str, str] = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # Information about the IPv6 CIDR block association.
    ipv6_cidr_block_association: "SubnetIpv6CidrBlockAssociation" = dataclasses.field(
        default_factory=dict,
    )

    # The ID of the subnet.
    subnet_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class DisassociateVpcCidrBlockRequest(ShapeBase):
    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "association_id",
                "AssociationId",
                TypeInfo(str),
            ),
        ]

    # The association ID for the CIDR block.
    association_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class DisassociateVpcCidrBlockResult(OutputShapeBase):
    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "response_metadata",
                "ResponseMetadata",
                TypeInfo(typing.Dict[str, str]),
            ),
            (
                "ipv6_cidr_block_association",
                "Ipv6CidrBlockAssociation",
                TypeInfo(VpcIpv6CidrBlockAssociation),
            ),
            (
                "cidr_block_association",
                "CidrBlockAssociation",
                TypeInfo(VpcCidrBlockAssociation),
            ),
            (
                "vpc_id",
                "VpcId",
                TypeInfo(str),
            ),
        ]

    response_metadata: typing.Dict[str, str] = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # Information about the IPv6 CIDR block association.
    ipv6_cidr_block_association: "VpcIpv6CidrBlockAssociation" = dataclasses.field(
        default_factory=dict,
    )

    # Information about the IPv4 CIDR block association.
    cidr_block_association: "VpcCidrBlockAssociation" = dataclasses.field(
        default_factory=dict,
    )

    # The ID of the VPC.
    vpc_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class DiskImage(ShapeBase):
    """
    Describes a disk image.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "description",
                "Description",
                TypeInfo(str),
            ),
            (
                "image",
                "Image",
                TypeInfo(DiskImageDetail),
            ),
            (
                "volume",
                "Volume",
                TypeInfo(VolumeDetail),
            ),
        ]

    # A description of the disk image.
    description: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # Information about the disk image.
    image: "DiskImageDetail" = dataclasses.field(default_factory=dict, )

    # Information about the volume.
    volume: "VolumeDetail" = dataclasses.field(default_factory=dict, )


@dataclasses.dataclass
class DiskImageDescription(ShapeBase):
    """
    Describes a disk image.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "checksum",
                "Checksum",
                TypeInfo(str),
            ),
            (
                "format",
                "Format",
                TypeInfo(DiskImageFormat),
            ),
            (
                "import_manifest_url",
                "ImportManifestUrl",
                TypeInfo(str),
            ),
            (
                "size",
                "Size",
                TypeInfo(int),
            ),
        ]

    # The checksum computed for the disk image.
    checksum: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The disk image format.
    format: "DiskImageFormat" = dataclasses.field(default=ShapeBase.NOT_SET, )

    # A presigned URL for the import manifest stored in Amazon S3. For
    # information about creating a presigned URL for an Amazon S3 object, read
    # the "Query String Request Authentication Alternative" section of the
    # [Authenticating REST
    # Requests](http://docs.aws.amazon.com/AmazonS3/latest/dev/RESTAuthentication.html)
    # topic in the _Amazon Simple Storage Service Developer Guide_.

    # For information about the import manifest referenced by this API action,
    # see [VM Import
    # Manifest](http://docs.aws.amazon.com/AWSEC2/latest/APIReference/manifest.html).
    import_manifest_url: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The size of the disk image, in GiB.
    size: int = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class DiskImageDetail(ShapeBase):
    """
    Describes a disk image.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "bytes",
                "Bytes",
                TypeInfo(int),
            ),
            (
                "format",
                "Format",
                TypeInfo(DiskImageFormat),
            ),
            (
                "import_manifest_url",
                "ImportManifestUrl",
                TypeInfo(str),
            ),
        ]

    # The size of the disk image, in GiB.
    bytes: int = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The disk image format.
    format: "DiskImageFormat" = dataclasses.field(default=ShapeBase.NOT_SET, )

    # A presigned URL for the import manifest stored in Amazon S3 and presented
    # here as an Amazon S3 presigned URL. For information about creating a
    # presigned URL for an Amazon S3 object, read the "Query String Request
    # Authentication Alternative" section of the [Authenticating REST
    # Requests](http://docs.aws.amazon.com/AmazonS3/latest/dev/RESTAuthentication.html)
    # topic in the _Amazon Simple Storage Service Developer Guide_.

    # For information about the import manifest referenced by this API action,
    # see [VM Import
    # Manifest](http://docs.aws.amazon.com/AWSEC2/latest/APIReference/manifest.html).
    import_manifest_url: str = dataclasses.field(default=ShapeBase.NOT_SET, )


class DiskImageFormat(Enum):
    VMDK = "VMDK"
    RAW = "RAW"
    VHD = "VHD"


@dataclasses.dataclass
class DiskImageVolumeDescription(ShapeBase):
    """
    Describes a disk image volume.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "id",
                "Id",
                TypeInfo(str),
            ),
            (
                "size",
                "Size",
                TypeInfo(int),
            ),
        ]

    # The volume identifier.
    id: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The size of the volume, in GiB.
    size: int = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class DnsEntry(ShapeBase):
    """
    Describes a DNS entry.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "dns_name",
                "DnsName",
                TypeInfo(str),
            ),
            (
                "hosted_zone_id",
                "HostedZoneId",
                TypeInfo(str),
            ),
        ]

    # The DNS name.
    dns_name: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The ID of the private hosted zone.
    hosted_zone_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )


class DomainType(Enum):
    vpc = "vpc"
    standard = "standard"


@dataclasses.dataclass
class EbsBlockDevice(ShapeBase):
    """
    Describes a block device for an EBS volume.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "encrypted",
                "Encrypted",
                TypeInfo(bool),
            ),
            (
                "delete_on_termination",
                "DeleteOnTermination",
                TypeInfo(bool),
            ),
            (
                "iops",
                "Iops",
                TypeInfo(int),
            ),
            (
                "kms_key_id",
                "KmsKeyId",
                TypeInfo(str),
            ),
            (
                "snapshot_id",
                "SnapshotId",
                TypeInfo(str),
            ),
            (
                "volume_size",
                "VolumeSize",
                TypeInfo(int),
            ),
            (
                "volume_type",
                "VolumeType",
                TypeInfo(VolumeType),
            ),
        ]

    # Indicates whether the EBS volume is encrypted. Encrypted volumes can only
    # be attached to instances that support Amazon EBS encryption. If you are
    # creating a volume from a snapshot, you can't specify an encryption value.
    # This is because only blank volumes can be encrypted on creation.
    encrypted: bool = dataclasses.field(default=ShapeBase.NOT_SET, )

    # Indicates whether the EBS volume is deleted on instance termination.
    delete_on_termination: bool = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The number of I/O operations per second (IOPS) that the volume supports.
    # For `io1`, this represents the number of IOPS that are provisioned for the
    # volume. For `gp2`, this represents the baseline performance of the volume
    # and the rate at which the volume accumulates I/O credits for bursting. For
    # more information about General Purpose SSD baseline performance, I/O
    # credits, and bursting, see [Amazon EBS Volume
    # Types](http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSVolumeTypes.html)
    # in the _Amazon Elastic Compute Cloud User Guide_.

    # Constraint: Range is 100-20000 IOPS for `io1` volumes and 100-10000 IOPS
    # for `gp2` volumes.

    # Condition: This parameter is required for requests to create `io1` volumes;
    # it is not used in requests to create `gp2`, `st1`, `sc1`, or `standard`
    # volumes.
    iops: int = dataclasses.field(default=ShapeBase.NOT_SET, )

    # Identifier (key ID, key alias, ID ARN, or alias ARN) for a user-managed CMK
    # under which the EBS volume is encrypted.

    # This parameter is only supported on `BlockDeviceMapping` objects called by
    # [RunInstances](http://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_RunInstances.html),
    # [RequestSpotFleet](http://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_RequestSpotFleet.html),
    # and
    # [RequestSpotInstances](http://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_RequestSpotInstances.html).
    kms_key_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The ID of the snapshot.
    snapshot_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The size of the volume, in GiB.

    # Constraints: 1-16384 for General Purpose SSD (`gp2`), 4-16384 for
    # Provisioned IOPS SSD (`io1`), 500-16384 for Throughput Optimized HDD
    # (`st1`), 500-16384 for Cold HDD (`sc1`), and 1-1024 for Magnetic
    # (`standard`) volumes. If you specify a snapshot, the volume size must be
    # equal to or larger than the snapshot size.

    # Default: If you're creating the volume from a snapshot and don't specify a
    # volume size, the default is the snapshot size.
    volume_size: int = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The volume type: `gp2`, `io1`, `st1`, `sc1`, or `standard`.

    # Default: `standard`
    volume_type: "VolumeType" = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class EbsInstanceBlockDevice(ShapeBase):
    """
    Describes a parameter used to set up an EBS volume in a block device mapping.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "attach_time",
                "AttachTime",
                TypeInfo(datetime.datetime),
            ),
            (
                "delete_on_termination",
                "DeleteOnTermination",
                TypeInfo(bool),
            ),
            (
                "status",
                "Status",
                TypeInfo(AttachmentStatus),
            ),
            (
                "volume_id",
                "VolumeId",
                TypeInfo(str),
            ),
        ]

    # The time stamp when the attachment initiated.
    attach_time: datetime.datetime = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # Indicates whether the volume is deleted on instance termination.
    delete_on_termination: bool = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The attachment state.
    status: "AttachmentStatus" = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The ID of the EBS volume.
    volume_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class EbsInstanceBlockDeviceSpecification(ShapeBase):
    """
    Describes information used to set up an EBS volume specified in a block device
    mapping.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "delete_on_termination",
                "DeleteOnTermination",
                TypeInfo(bool),
            ),
            (
                "volume_id",
                "VolumeId",
                TypeInfo(str),
            ),
        ]

    # Indicates whether the volume is deleted on instance termination.
    delete_on_termination: bool = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The ID of the EBS volume.
    volume_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class EgressOnlyInternetGateway(ShapeBase):
    """
    Describes an egress-only internet gateway.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "attachments",
                "Attachments",
                TypeInfo(typing.List[InternetGatewayAttachment]),
            ),
            (
                "egress_only_internet_gateway_id",
                "EgressOnlyInternetGatewayId",
                TypeInfo(str),
            ),
        ]

    # Information about the attachment of the egress-only internet gateway.
    attachments: typing.List["InternetGatewayAttachment"] = dataclasses.field(
        default_factory=list,
    )

    # The ID of the egress-only internet gateway.
    egress_only_internet_gateway_id: str = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )


@dataclasses.dataclass
class ElasticGpuAssociation(ShapeBase):
    """
    Describes the association between an instance and an Elastic GPU.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "elastic_gpu_id",
                "ElasticGpuId",
                TypeInfo(str),
            ),
            (
                "elastic_gpu_association_id",
                "ElasticGpuAssociationId",
                TypeInfo(str),
            ),
            (
                "elastic_gpu_association_state",
                "ElasticGpuAssociationState",
                TypeInfo(str),
            ),
            (
                "elastic_gpu_association_time",
                "ElasticGpuAssociationTime",
                TypeInfo(str),
            ),
        ]

    # The ID of the Elastic GPU.
    elastic_gpu_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The ID of the association.
    elastic_gpu_association_id: str = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # The state of the association between the instance and the Elastic GPU.
    elastic_gpu_association_state: str = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # The time the Elastic GPU was associated with the instance.
    elastic_gpu_association_time: str = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )


@dataclasses.dataclass
class ElasticGpuHealth(ShapeBase):
    """
    Describes the status of an Elastic GPU.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "status",
                "Status",
                TypeInfo(ElasticGpuStatus),
            ),
        ]

    # The health status.
    status: "ElasticGpuStatus" = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class ElasticGpuSpecification(ShapeBase):
    """
    A specification for an Elastic GPU.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "type",
                "Type",
                TypeInfo(str),
            ),
        ]

    # The type of Elastic GPU.
    type: str = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class ElasticGpuSpecificationResponse(ShapeBase):
    """
    Describes an elastic GPU.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "type",
                "Type",
                TypeInfo(str),
            ),
        ]

    # The elastic GPU type.
    type: str = dataclasses.field(default=ShapeBase.NOT_SET, )


class ElasticGpuState(Enum):
    ATTACHED = "ATTACHED"


class ElasticGpuStatus(Enum):
    OK = "OK"
    IMPAIRED = "IMPAIRED"


@dataclasses.dataclass
class ElasticGpus(ShapeBase):
    """
    Describes an Elastic GPU.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "elastic_gpu_id",
                "ElasticGpuId",
                TypeInfo(str),
            ),
            (
                "availability_zone",
                "AvailabilityZone",
                TypeInfo(str),
            ),
            (
                "elastic_gpu_type",
                "ElasticGpuType",
                TypeInfo(str),
            ),
            (
                "elastic_gpu_health",
                "ElasticGpuHealth",
                TypeInfo(ElasticGpuHealth),
            ),
            (
                "elastic_gpu_state",
                "ElasticGpuState",
                TypeInfo(ElasticGpuState),
            ),
            (
                "instance_id",
                "InstanceId",
                TypeInfo(str),
            ),
        ]

    # The ID of the Elastic GPU.
    elastic_gpu_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The Availability Zone in the which the Elastic GPU resides.
    availability_zone: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The type of Elastic GPU.
    elastic_gpu_type: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The status of the Elastic GPU.
    elastic_gpu_health: "ElasticGpuHealth" = dataclasses.field(
        default_factory=dict,
    )

    # The state of the Elastic GPU.
    elastic_gpu_state: "ElasticGpuState" = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # The ID of the instance to which the Elastic GPU is attached.
    instance_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class EnableVgwRoutePropagationRequest(ShapeBase):
    """
    Contains the parameters for EnableVgwRoutePropagation.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "gateway_id",
                "GatewayId",
                TypeInfo(str),
            ),
            (
                "route_table_id",
                "RouteTableId",
                TypeInfo(str),
            ),
        ]

    # The ID of the virtual private gateway.
    gateway_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The ID of the route table.
    route_table_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class EnableVolumeIORequest(ShapeBase):
    """
    Contains the parameters for EnableVolumeIO.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "volume_id",
                "VolumeId",
                TypeInfo(str),
            ),
            (
                "dry_run",
                "DryRun",
                TypeInfo(bool),
            ),
        ]

    # The ID of the volume.
    volume_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # Checks whether you have the required permissions for the action, without
    # actually making the request, and provides an error response. If you have
    # the required permissions, the error response is `DryRunOperation`.
    # Otherwise, it is `UnauthorizedOperation`.
    dry_run: bool = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class EnableVpcClassicLinkDnsSupportRequest(ShapeBase):
    """
    Contains the parameters for EnableVpcClassicLinkDnsSupport.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "vpc_id",
                "VpcId",
                TypeInfo(str),
            ),
        ]

    # The ID of the VPC.
    vpc_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class EnableVpcClassicLinkDnsSupportResult(OutputShapeBase):
    """
    Contains the output of EnableVpcClassicLinkDnsSupport.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "response_metadata",
                "ResponseMetadata",
                TypeInfo(typing.Dict[str, str]),
            ),
            (
                "return_",
                "Return",
                TypeInfo(bool),
            ),
        ]

    response_metadata: typing.Dict[str, str] = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # Returns `true` if the request succeeds; otherwise, it returns an error.
    return_: bool = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class EnableVpcClassicLinkRequest(ShapeBase):
    """
    Contains the parameters for EnableVpcClassicLink.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "vpc_id",
                "VpcId",
                TypeInfo(str),
            ),
            (
                "dry_run",
                "DryRun",
                TypeInfo(bool),
            ),
        ]

    # The ID of the VPC.
    vpc_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # Checks whether you have the required permissions for the action, without
    # actually making the request, and provides an error response. If you have
    # the required permissions, the error response is `DryRunOperation`.
    # Otherwise, it is `UnauthorizedOperation`.
    dry_run: bool = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class EnableVpcClassicLinkResult(OutputShapeBase):
    """
    Contains the output of EnableVpcClassicLink.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "response_metadata",
                "ResponseMetadata",
                TypeInfo(typing.Dict[str, str]),
            ),
            (
                "return_",
                "Return",
                TypeInfo(bool),
            ),
        ]

    response_metadata: typing.Dict[str, str] = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # Returns `true` if the request succeeds; otherwise, it returns an error.
    return_: bool = dataclasses.field(default=ShapeBase.NOT_SET, )


class EventCode(Enum):
    instance_reboot = "instance-reboot"
    system_reboot = "system-reboot"
    system_maintenance = "system-maintenance"
    instance_retirement = "instance-retirement"
    instance_stop = "instance-stop"


@dataclasses.dataclass
class EventInformation(ShapeBase):
    """
    Describes a Spot Fleet event.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "event_description",
                "EventDescription",
                TypeInfo(str),
            ),
            (
                "event_sub_type",
                "EventSubType",
                TypeInfo(str),
            ),
            (
                "instance_id",
                "InstanceId",
                TypeInfo(str),
            ),
        ]

    # The description of the event.
    event_description: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The event.

    # The following are the `error` events:

    #   * `iamFleetRoleInvalid` \- The Spot Fleet did not have the required permissions either to launch or terminate an instance.

    #   * `launchSpecTemporarilyBlacklisted` \- The configuration is not valid and several attempts to launch instances have failed. For more information, see the description of the event.

    #   * `spotFleetRequestConfigurationInvalid` \- The configuration is not valid. For more information, see the description of the event.

    #   * `spotInstanceCountLimitExceeded` \- You've reached the limit on the number of Spot Instances that you can launch.

    # The following are the `fleetRequestChange` events:

    #   * `active` \- The Spot Fleet has been validated and Amazon EC2 is attempting to maintain the target number of running Spot Instances.

    #   * `cancelled` \- The Spot Fleet is canceled and has no running Spot Instances. The Spot Fleet will be deleted two days after its instances were terminated.

    #   * `cancelled_running` \- The Spot Fleet is canceled and does not launch additional Spot Instances. Existing Spot Instances continue to run until they are interrupted or terminated.

    #   * `cancelled_terminating` \- The Spot Fleet is canceled and its Spot Instances are terminating.

    #   * `expired` \- The Spot Fleet request has expired. A subsequent event indicates that the instances were terminated, if the request was created with `TerminateInstancesWithExpiration` set.

    #   * `modify_in_progress` \- A request to modify the Spot Fleet request was accepted and is in progress.

    #   * `modify_successful` \- The Spot Fleet request was modified.

    #   * `price_update` \- The price for a launch configuration was adjusted because it was too high. This change is permanent.

    #   * `submitted` \- The Spot Fleet request is being evaluated and Amazon EC2 is preparing to launch the target number of Spot Instances.

    # The following are the `instanceChange` events:

    #   * `launched` \- A request was fulfilled and a new instance was launched.

    #   * `terminated` \- An instance was terminated by the user.

    # The following are the `Information` events:

    #   * `launchSpecUnusable` \- The price in a launch specification is not valid because it is below the Spot price or the Spot price is above the On-Demand price.

    #   * `fleetProgressHalted` \- The price in every launch specification is not valid. A launch specification might become valid if the Spot price changes.
    event_sub_type: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The ID of the instance. This information is available only for
    # `instanceChange` events.
    instance_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )


class EventType(Enum):
    instanceChange = "instanceChange"
    fleetRequestChange = "fleetRequestChange"
    error = "error"


class ExcessCapacityTerminationPolicy(Enum):
    noTermination = "noTermination"
    default = "default"


class ExportEnvironment(Enum):
    citrix = "citrix"
    vmware = "vmware"
    microsoft = "microsoft"


@dataclasses.dataclass
class ExportTask(ShapeBase):
    """
    Describes an instance export task.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "description",
                "Description",
                TypeInfo(str),
            ),
            (
                "export_task_id",
                "ExportTaskId",
                TypeInfo(str),
            ),
            (
                "export_to_s3_task",
                "ExportToS3Task",
                TypeInfo(ExportToS3Task),
            ),
            (
                "instance_export_details",
                "InstanceExportDetails",
                TypeInfo(InstanceExportDetails),
            ),
            (
                "state",
                "State",
                TypeInfo(ExportTaskState),
            ),
            (
                "status_message",
                "StatusMessage",
                TypeInfo(str),
            ),
        ]

    # A description of the resource being exported.
    description: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The ID of the export task.
    export_task_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # Information about the export task.
    export_to_s3_task: "ExportToS3Task" = dataclasses.field(
        default_factory=dict,
    )

    # Information about the instance to export.
    instance_export_details: "InstanceExportDetails" = dataclasses.field(
        default_factory=dict,
    )

    # The state of the export task.
    state: "ExportTaskState" = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The status message related to the export task.
    status_message: str = dataclasses.field(default=ShapeBase.NOT_SET, )


class ExportTaskState(Enum):
    active = "active"
    cancelling = "cancelling"
    cancelled = "cancelled"
    completed = "completed"


@dataclasses.dataclass
class ExportToS3Task(ShapeBase):
    """
    Describes the format and location for an instance export task.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "container_format",
                "ContainerFormat",
                TypeInfo(ContainerFormat),
            ),
            (
                "disk_image_format",
                "DiskImageFormat",
                TypeInfo(DiskImageFormat),
            ),
            (
                "s3_bucket",
                "S3Bucket",
                TypeInfo(str),
            ),
            (
                "s3_key",
                "S3Key",
                TypeInfo(str),
            ),
        ]

    # The container format used to combine disk images with metadata (such as
    # OVF). If absent, only the disk image is exported.
    container_format: "ContainerFormat" = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # The format for the exported image.
    disk_image_format: "DiskImageFormat" = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # The S3 bucket for the destination image. The destination bucket must exist
    # and grant WRITE and READ_ACP permissions to the AWS account `vm-import-
    # export@amazon.com`.
    s3_bucket: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The encryption key for your S3 bucket.
    s3_key: str = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class ExportToS3TaskSpecification(ShapeBase):
    """
    Describes an instance export task.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "container_format",
                "ContainerFormat",
                TypeInfo(ContainerFormat),
            ),
            (
                "disk_image_format",
                "DiskImageFormat",
                TypeInfo(DiskImageFormat),
            ),
            (
                "s3_bucket",
                "S3Bucket",
                TypeInfo(str),
            ),
            (
                "s3_prefix",
                "S3Prefix",
                TypeInfo(str),
            ),
        ]

    # The container format used to combine disk images with metadata (such as
    # OVF). If absent, only the disk image is exported.
    container_format: "ContainerFormat" = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # The format for the exported image.
    disk_image_format: "DiskImageFormat" = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # The S3 bucket for the destination image. The destination bucket must exist
    # and grant WRITE and READ_ACP permissions to the AWS account `vm-import-
    # export@amazon.com`.
    s3_bucket: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The image is written to a single object in the S3 bucket at the S3 key
    # s3prefix + exportTaskId + '.' + diskImageFormat.
    s3_prefix: str = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class Filter(ShapeBase):
    """
    A filter name and value pair that is used to return a more specific list of
    results from a describe operation. Filters can be used to match a set of
    resources by specific criteria, such as tags, attributes, or IDs. The filters
    supported by a describe operation are documented with the describe operation.
    For example:

      * DescribeAvailabilityZones

      * DescribeImages

      * DescribeInstances

      * DescribeKeyPairs

      * DescribeSecurityGroups

      * DescribeSnapshots

      * DescribeSubnets

      * DescribeTags

      * DescribeVolumes

      * DescribeVpcs
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "name",
                "Name",
                TypeInfo(str),
            ),
            (
                "values",
                "Values",
                TypeInfo(typing.List[str]),
            ),
        ]

    # The name of the filter. Filter names are case-sensitive.
    name: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # One or more filter values. Filter values are case-sensitive.
    values: typing.List[str] = dataclasses.field(default_factory=list, )


class FleetActivityStatus(Enum):
    error = "error"
    pending_fulfillment = "pending-fulfillment"
    pending_termination = "pending-termination"
    fulfilled = "fulfilled"


@dataclasses.dataclass
class FleetData(ShapeBase):
    """
    Describes an EC2 Fleet.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "activity_status",
                "ActivityStatus",
                TypeInfo(FleetActivityStatus),
            ),
            (
                "create_time",
                "CreateTime",
                TypeInfo(datetime.datetime),
            ),
            (
                "fleet_id",
                "FleetId",
                TypeInfo(str),
            ),
            (
                "fleet_state",
                "FleetState",
                TypeInfo(FleetStateCode),
            ),
            (
                "client_token",
                "ClientToken",
                TypeInfo(str),
            ),
            (
                "excess_capacity_termination_policy",
                "ExcessCapacityTerminationPolicy",
                TypeInfo(FleetExcessCapacityTerminationPolicy),
            ),
            (
                "fulfilled_capacity",
                "FulfilledCapacity",
                TypeInfo(float),
            ),
            (
                "fulfilled_on_demand_capacity",
                "FulfilledOnDemandCapacity",
                TypeInfo(float),
            ),
            (
                "launch_template_configs",
                "LaunchTemplateConfigs",
                TypeInfo(typing.List[FleetLaunchTemplateConfig]),
            ),
            (
                "target_capacity_specification",
                "TargetCapacitySpecification",
                TypeInfo(TargetCapacitySpecification),
            ),
            (
                "terminate_instances_with_expiration",
                "TerminateInstancesWithExpiration",
                TypeInfo(bool),
            ),
            (
                "type",
                "Type",
                TypeInfo(FleetType),
            ),
            (
                "valid_from",
                "ValidFrom",
                TypeInfo(datetime.datetime),
            ),
            (
                "valid_until",
                "ValidUntil",
                TypeInfo(datetime.datetime),
            ),
            (
                "replace_unhealthy_instances",
                "ReplaceUnhealthyInstances",
                TypeInfo(bool),
            ),
            (
                "spot_options",
                "SpotOptions",
                TypeInfo(SpotOptions),
            ),
            (
                "on_demand_options",
                "OnDemandOptions",
                TypeInfo(OnDemandOptions),
            ),
            (
                "tags",
                "Tags",
                TypeInfo(typing.List[Tag]),
            ),
        ]

    # The progress of the EC2 Fleet. If there is an error, the status is `error`.
    # After all requests are placed, the status is `pending_fulfillment`. If the
    # size of the EC2 Fleet is equal to or greater than its target capacity, the
    # status is `fulfilled`. If the size of the EC2 Fleet is decreased, the
    # status is `pending_termination` while instances are terminating.
    activity_status: "FleetActivityStatus" = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # The creation date and time of the EC2 Fleet.
    create_time: datetime.datetime = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # The ID of the EC2 Fleet.
    fleet_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The state of the EC2 Fleet.
    fleet_state: "FleetStateCode" = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # Unique, case-sensitive identifier you provide to ensure the idempotency of
    # the request. For more information, see [Ensuring
    # Idempotency](http://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html).

    # Constraints: Maximum 64 ASCII characters
    client_token: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # Indicates whether running instances should be terminated if the target
    # capacity of the EC2 Fleet is decreased below the current size of the EC2
    # Fleet.
    excess_capacity_termination_policy: "FleetExcessCapacityTerminationPolicy" = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # The number of units fulfilled by this request compared to the set target
    # capacity.
    fulfilled_capacity: float = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The number of units fulfilled by this request compared to the set target
    # On-Demand capacity.
    fulfilled_on_demand_capacity: float = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # The launch template and overrides.
    launch_template_configs: typing.List["FleetLaunchTemplateConfig"
                                        ] = dataclasses.field(
                                            default_factory=list,
                                        )

    # The number of units to request. You can choose to set the target capacity
    # in terms of instances or a performance characteristic that is important to
    # your application workload, such as vCPUs, memory, or I/O. If the request
    # type is `maintain`, you can specify a target capacity of 0 and add capacity
    # later.
    target_capacity_specification: "TargetCapacitySpecification" = dataclasses.field(
        default_factory=dict,
    )

    # Indicates whether running instances should be terminated when the EC2 Fleet
    # expires.
    terminate_instances_with_expiration: bool = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # The type of request. Indicates whether the EC2 Fleet only `requests` the
    # target capacity, or also attempts to `maintain` it. If you request a
    # certain target capacity, EC2 Fleet only places the required requests; it
    # does not attempt to replenish instances if capacity is diminished, and does
    # not submit requests in alternative capacity pools if capacity is
    # unavailable. To maintain a certain target capacity, EC2 Fleet places the
    # required requests to meet this target capacity. It also automatically
    # replenishes any interrupted Spot Instances. Default: `maintain`.
    type: "FleetType" = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The start date and time of the request, in UTC format (for example, _YYYY_
    # - _MM_ - _DD_ T _HH_ : _MM_ : _SS_ Z). The default is to start fulfilling
    # the request immediately.
    valid_from: datetime.datetime = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # The end date and time of the request, in UTC format (for example, _YYYY_ -
    # _MM_ - _DD_ T _HH_ : _MM_ : _SS_ Z). At this point, no new instance
    # requests are placed or able to fulfill the request. The default end date is
    # 7 days from the current date.
    valid_until: datetime.datetime = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # Indicates whether EC2 Fleet should replace unhealthy instances.
    replace_unhealthy_instances: bool = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # The configuration of Spot Instances in an EC2 Fleet.
    spot_options: "SpotOptions" = dataclasses.field(default_factory=dict, )

    # The allocation strategy of On-Demand Instances in an EC2 Fleet.
    on_demand_options: "OnDemandOptions" = dataclasses.field(
        default_factory=dict,
    )

    # The tags for an EC2 Fleet resource.
    tags: typing.List["Tag"] = dataclasses.field(default_factory=list, )


class FleetEventType(Enum):
    instance_change = "instance-change"
    fleet_change = "fleet-change"
    service_error = "service-error"


class FleetExcessCapacityTerminationPolicy(Enum):
    no_termination = "no-termination"
    termination = "termination"


@dataclasses.dataclass
class FleetLaunchTemplateConfig(ShapeBase):
    """
    Describes a launch template and overrides.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "launch_template_specification",
                "LaunchTemplateSpecification",
                TypeInfo(FleetLaunchTemplateSpecification),
            ),
            (
                "overrides",
                "Overrides",
                TypeInfo(typing.List[FleetLaunchTemplateOverrides]),
            ),
        ]

    # The launch template.
    launch_template_specification: "FleetLaunchTemplateSpecification" = dataclasses.field(
        default_factory=dict,
    )

    # Any parameters that you specify override the same parameters in the launch
    # template.
    overrides: typing.List["FleetLaunchTemplateOverrides"] = dataclasses.field(
        default_factory=list,
    )


@dataclasses.dataclass
class FleetLaunchTemplateConfigRequest(ShapeBase):
    """
    Describes a launch template and overrides.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "launch_template_specification",
                "LaunchTemplateSpecification",
                TypeInfo(FleetLaunchTemplateSpecificationRequest),
            ),
            (
                "overrides",
                "Overrides",
                TypeInfo(typing.List[FleetLaunchTemplateOverridesRequest]),
            ),
        ]

    # The launch template to use. You must specify either the launch template ID
    # or launch template name in the request.
    launch_template_specification: "FleetLaunchTemplateSpecificationRequest" = dataclasses.field(
        default_factory=dict,
    )

    # Any parameters that you specify override the same parameters in the launch
    # template.
    overrides: typing.List["FleetLaunchTemplateOverridesRequest"
                          ] = dataclasses.field(
                              default_factory=list,
                          )


@dataclasses.dataclass
class FleetLaunchTemplateOverrides(ShapeBase):
    """
    Describes overrides for a launch template.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "instance_type",
                "InstanceType",
                TypeInfo(InstanceType),
            ),
            (
                "max_price",
                "MaxPrice",
                TypeInfo(str),
            ),
            (
                "subnet_id",
                "SubnetId",
                TypeInfo(str),
            ),
            (
                "availability_zone",
                "AvailabilityZone",
                TypeInfo(str),
            ),
            (
                "weighted_capacity",
                "WeightedCapacity",
                TypeInfo(float),
            ),
            (
                "priority",
                "Priority",
                TypeInfo(float),
            ),
        ]

    # The instance type.
    instance_type: "InstanceType" = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # The maximum price per unit hour that you are willing to pay for a Spot
    # Instance.
    max_price: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The ID of the subnet in which to launch the instances.
    subnet_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The Availability Zone in which to launch the instances.
    availability_zone: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The number of units provided by the specified instance type.
    weighted_capacity: float = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The priority for the launch template override. If **AllocationStrategy** is
    # set to `prioritized`, EC2 Fleet uses priority to determine which launch
    # template override to use first in fulfilling On-Demand capacity. The
    # highest priority is launched first. Valid values are whole numbers starting
    # at `0`. The lower the number, the higher the priority. If no number is set,
    # the override has the lowest priority.
    priority: float = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class FleetLaunchTemplateOverridesRequest(ShapeBase):
    """
    Describes overrides for a launch template.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "instance_type",
                "InstanceType",
                TypeInfo(InstanceType),
            ),
            (
                "max_price",
                "MaxPrice",
                TypeInfo(str),
            ),
            (
                "subnet_id",
                "SubnetId",
                TypeInfo(str),
            ),
            (
                "availability_zone",
                "AvailabilityZone",
                TypeInfo(str),
            ),
            (
                "weighted_capacity",
                "WeightedCapacity",
                TypeInfo(float),
            ),
            (
                "priority",
                "Priority",
                TypeInfo(float),
            ),
        ]

    # The instance type.
    instance_type: "InstanceType" = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # The maximum price per unit hour that you are willing to pay for a Spot
    # Instance.
    max_price: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The ID of the subnet in which to launch the instances.
    subnet_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The Availability Zone in which to launch the instances.
    availability_zone: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The number of units provided by the specified instance type.
    weighted_capacity: float = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The priority for the launch template override. If **AllocationStrategy** is
    # set to `prioritized`, EC2 Fleet uses priority to determine which launch
    # template override to use first in fulfilling On-Demand capacity. The
    # highest priority is launched first. Valid values are whole numbers starting
    # at `0`. The lower the number, the higher the priority. If no number is set,
    # the launch template override has the lowest priority.
    priority: float = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class FleetLaunchTemplateSpecification(ShapeBase):
    """
    Describes a launch template.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "launch_template_id",
                "LaunchTemplateId",
                TypeInfo(str),
            ),
            (
                "launch_template_name",
                "LaunchTemplateName",
                TypeInfo(str),
            ),
            (
                "version",
                "Version",
                TypeInfo(str),
            ),
        ]

    # The ID of the launch template. You must specify either a template ID or a
    # template name.
    launch_template_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The name of the launch template. You must specify either a template name or
    # a template ID.
    launch_template_name: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The version number. By default, the default version of the launch template
    # is used.
    version: str = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class FleetLaunchTemplateSpecificationRequest(ShapeBase):
    """
    The launch template to use. You must specify either the launch template ID or
    launch template name in the request.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "launch_template_id",
                "LaunchTemplateId",
                TypeInfo(str),
            ),
            (
                "launch_template_name",
                "LaunchTemplateName",
                TypeInfo(str),
            ),
            (
                "version",
                "Version",
                TypeInfo(str),
            ),
        ]

    # The ID of the launch template.
    launch_template_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The name of the launch template.
    launch_template_name: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The version number of the launch template.
    version: str = dataclasses.field(default=ShapeBase.NOT_SET, )


class FleetOnDemandAllocationStrategy(Enum):
    lowest_price = "lowest-price"
    prioritized = "prioritized"


class FleetStateCode(Enum):
    submitted = "submitted"
    active = "active"
    deleted = "deleted"
    failed = "failed"
    deleted_running = "deleted-running"
    deleted_terminating = "deleted-terminating"
    modifying = "modifying"


class FleetType(Enum):
    request = "request"
    maintain = "maintain"


@dataclasses.dataclass
class FlowLog(ShapeBase):
    """
    Describes a flow log.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "creation_time",
                "CreationTime",
                TypeInfo(datetime.datetime),
            ),
            (
                "deliver_logs_error_message",
                "DeliverLogsErrorMessage",
                TypeInfo(str),
            ),
            (
                "deliver_logs_permission_arn",
                "DeliverLogsPermissionArn",
                TypeInfo(str),
            ),
            (
                "deliver_logs_status",
                "DeliverLogsStatus",
                TypeInfo(str),
            ),
            (
                "flow_log_id",
                "FlowLogId",
                TypeInfo(str),
            ),
            (
                "flow_log_status",
                "FlowLogStatus",
                TypeInfo(str),
            ),
            (
                "log_group_name",
                "LogGroupName",
                TypeInfo(str),
            ),
            (
                "resource_id",
                "ResourceId",
                TypeInfo(str),
            ),
            (
                "traffic_type",
                "TrafficType",
                TypeInfo(TrafficType),
            ),
            (
                "log_destination_type",
                "LogDestinationType",
                TypeInfo(LogDestinationType),
            ),
            (
                "log_destination",
                "LogDestination",
                TypeInfo(str),
            ),
        ]

    # The date and time the flow log was created.
    creation_time: datetime.datetime = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # Information about the error that occurred. `Rate limited` indicates that
    # CloudWatch Logs throttling has been applied for one or more network
    # interfaces, or that you've reached the limit on the number of log groups
    # that you can create. `Access error` indicates that the IAM role associated
    # with the flow log does not have sufficient permissions to publish to
    # CloudWatch Logs. `Unknown error` indicates an internal error.
    deliver_logs_error_message: str = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # The ARN of the IAM role that posts logs to CloudWatch Logs.
    deliver_logs_permission_arn: str = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # The status of the logs delivery (`SUCCESS` | `FAILED`).
    deliver_logs_status: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The flow log ID.
    flow_log_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The status of the flow log (`ACTIVE`).
    flow_log_status: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The name of the flow log group.
    log_group_name: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The ID of the resource on which the flow log was created.
    resource_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The type of traffic captured for the flow log.
    traffic_type: "TrafficType" = dataclasses.field(default=ShapeBase.NOT_SET, )

    # Specifies the type of destination to which the flow log data is published.
    # Flow log data can be published to CloudWatch Logs or Amazon S3.
    log_destination_type: "LogDestinationType" = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # Specifies the destination to which the flow log data is published. Flow log
    # data can be published to an CloudWatch Logs log group or an Amazon S3
    # bucket. If the flow log publishes to CloudWatch Logs, this element
    # indicates the Amazon Resource Name (ARN) of the CloudWatch Logs log group
    # to which the data is published. If the flow log publishes to Amazon S3,
    # this element indicates the ARN of the Amazon S3 bucket to which the data is
    # published.
    log_destination: str = dataclasses.field(default=ShapeBase.NOT_SET, )


class FlowLogsResourceType(Enum):
    VPC = "VPC"
    Subnet = "Subnet"
    NetworkInterface = "NetworkInterface"


@dataclasses.dataclass
class FpgaImage(ShapeBase):
    """
    Describes an Amazon FPGA image (AFI).
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "fpga_image_id",
                "FpgaImageId",
                TypeInfo(str),
            ),
            (
                "fpga_image_global_id",
                "FpgaImageGlobalId",
                TypeInfo(str),
            ),
            (
                "name",
                "Name",
                TypeInfo(str),
            ),
            (
                "description",
                "Description",
                TypeInfo(str),
            ),
            (
                "shell_version",
                "ShellVersion",
                TypeInfo(str),
            ),
            (
                "pci_id",
                "PciId",
                TypeInfo(PciId),
            ),
            (
                "state",
                "State",
                TypeInfo(FpgaImageState),
            ),
            (
                "create_time",
                "CreateTime",
                TypeInfo(datetime.datetime),
            ),
            (
                "update_time",
                "UpdateTime",
                TypeInfo(datetime.datetime),
            ),
            (
                "owner_id",
                "OwnerId",
                TypeInfo(str),
            ),
            (
                "owner_alias",
                "OwnerAlias",
                TypeInfo(str),
            ),
            (
                "product_codes",
                "ProductCodes",
                TypeInfo(typing.List[ProductCode]),
            ),
            (
                "tags",
                "Tags",
                TypeInfo(typing.List[Tag]),
            ),
            (
                "public",
                "Public",
                TypeInfo(bool),
            ),
        ]

    # The FPGA image identifier (AFI ID).
    fpga_image_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The global FPGA image identifier (AGFI ID).
    fpga_image_global_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The name of the AFI.
    name: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The description of the AFI.
    description: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The version of the AWS Shell that was used to create the bitstream.
    shell_version: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # Information about the PCI bus.
    pci_id: "PciId" = dataclasses.field(default_factory=dict, )

    # Information about the state of the AFI.
    state: "FpgaImageState" = dataclasses.field(default_factory=dict, )

    # The date and time the AFI was created.
    create_time: datetime.datetime = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # The time of the most recent update to the AFI.
    update_time: datetime.datetime = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # The AWS account ID of the AFI owner.
    owner_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The alias of the AFI owner. Possible values include `self`, `amazon`, and
    # `aws-marketplace`.
    owner_alias: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The product codes for the AFI.
    product_codes: typing.List["ProductCode"] = dataclasses.field(
        default_factory=list,
    )

    # Any tags assigned to the AFI.
    tags: typing.List["Tag"] = dataclasses.field(default_factory=list, )

    # Indicates whether the AFI is public.
    public: bool = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class FpgaImageAttribute(ShapeBase):
    """
    Describes an Amazon FPGA image (AFI) attribute.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "fpga_image_id",
                "FpgaImageId",
                TypeInfo(str),
            ),
            (
                "name",
                "Name",
                TypeInfo(str),
            ),
            (
                "description",
                "Description",
                TypeInfo(str),
            ),
            (
                "load_permissions",
                "LoadPermissions",
                TypeInfo(typing.List[LoadPermission]),
            ),
            (
                "product_codes",
                "ProductCodes",
                TypeInfo(typing.List[ProductCode]),
            ),
        ]

    # The ID of the AFI.
    fpga_image_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The name of the AFI.
    name: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The description of the AFI.
    description: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # One or more load permissions.
    load_permissions: typing.List["LoadPermission"] = dataclasses.field(
        default_factory=list,
    )

    # One or more product codes.
    product_codes: typing.List["ProductCode"] = dataclasses.field(
        default_factory=list,
    )


class FpgaImageAttributeName(Enum):
    description = "description"
    name = "name"
    loadPermission = "loadPermission"
    productCodes = "productCodes"


@dataclasses.dataclass
class FpgaImageState(ShapeBase):
    """
    Describes the state of the bitstream generation process for an Amazon FPGA image
    (AFI).
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "code",
                "Code",
                TypeInfo(FpgaImageStateCode),
            ),
            (
                "message",
                "Message",
                TypeInfo(str),
            ),
        ]

    # The state. The following are the possible values:

    #   * `pending` \- AFI bitstream generation is in progress.

    #   * `available` \- The AFI is available for use.

    #   * `failed` \- AFI bitstream generation failed.

    #   * `unavailable` \- The AFI is no longer available for use.
    code: "FpgaImageStateCode" = dataclasses.field(default=ShapeBase.NOT_SET, )

    # If the state is `failed`, this is the error message.
    message: str = dataclasses.field(default=ShapeBase.NOT_SET, )


class FpgaImageStateCode(Enum):
    pending = "pending"
    failed = "failed"
    available = "available"
    unavailable = "unavailable"


class GatewayType(Enum):
    ipsec_1 = "ipsec.1"


@dataclasses.dataclass
class GetConsoleOutputRequest(ShapeBase):
    """
    Contains the parameters for GetConsoleOutput.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "instance_id",
                "InstanceId",
                TypeInfo(str),
            ),
            (
                "dry_run",
                "DryRun",
                TypeInfo(bool),
            ),
            (
                "latest",
                "Latest",
                TypeInfo(bool),
            ),
        ]

    # The ID of the instance.
    instance_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # Checks whether you have the required permissions for the action, without
    # actually making the request, and provides an error response. If you have
    # the required permissions, the error response is `DryRunOperation`.
    # Otherwise, it is `UnauthorizedOperation`.
    dry_run: bool = dataclasses.field(default=ShapeBase.NOT_SET, )

    # When enabled, retrieves the latest console output for the instance.

    # Default: disabled (`false`)
    latest: bool = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class GetConsoleOutputResult(OutputShapeBase):
    """
    Contains the output of GetConsoleOutput.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "response_metadata",
                "ResponseMetadata",
                TypeInfo(typing.Dict[str, str]),
            ),
            (
                "instance_id",
                "InstanceId",
                TypeInfo(str),
            ),
            (
                "output",
                "Output",
                TypeInfo(str),
            ),
            (
                "timestamp",
                "Timestamp",
                TypeInfo(datetime.datetime),
            ),
        ]

    response_metadata: typing.Dict[str, str] = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # The ID of the instance.
    instance_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The console output, base64-encoded. If you are using a command line tool,
    # the tool decodes the output for you.
    output: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The time at which the output was last updated.
    timestamp: datetime.datetime = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )


@dataclasses.dataclass
class GetConsoleScreenshotRequest(ShapeBase):
    """
    Contains the parameters for the request.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "instance_id",
                "InstanceId",
                TypeInfo(str),
            ),
            (
                "dry_run",
                "DryRun",
                TypeInfo(bool),
            ),
            (
                "wake_up",
                "WakeUp",
                TypeInfo(bool),
            ),
        ]

    # The ID of the instance.
    instance_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # Checks whether you have the required permissions for the action, without
    # actually making the request, and provides an error response. If you have
    # the required permissions, the error response is `DryRunOperation`.
    # Otherwise, it is `UnauthorizedOperation`.
    dry_run: bool = dataclasses.field(default=ShapeBase.NOT_SET, )

    # When set to `true`, acts as keystroke input and wakes up an instance that's
    # in standby or "sleep" mode.
    wake_up: bool = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class GetConsoleScreenshotResult(OutputShapeBase):
    """
    Contains the output of the request.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "response_metadata",
                "ResponseMetadata",
                TypeInfo(typing.Dict[str, str]),
            ),
            (
                "image_data",
                "ImageData",
                TypeInfo(str),
            ),
            (
                "instance_id",
                "InstanceId",
                TypeInfo(str),
            ),
        ]

    response_metadata: typing.Dict[str, str] = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # The data that comprises the image.
    image_data: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The ID of the instance.
    instance_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class GetHostReservationPurchasePreviewRequest(ShapeBase):
    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "host_id_set",
                "HostIdSet",
                TypeInfo(typing.List[str]),
            ),
            (
                "offering_id",
                "OfferingId",
                TypeInfo(str),
            ),
        ]

    # The IDs of the Dedicated Hosts with which the reservation is associated.
    host_id_set: typing.List[str] = dataclasses.field(default_factory=list, )

    # The offering ID of the reservation.
    offering_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class GetHostReservationPurchasePreviewResult(OutputShapeBase):
    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "response_metadata",
                "ResponseMetadata",
                TypeInfo(typing.Dict[str, str]),
            ),
            (
                "currency_code",
                "CurrencyCode",
                TypeInfo(CurrencyCodeValues),
            ),
            (
                "purchase",
                "Purchase",
                TypeInfo(typing.List[Purchase]),
            ),
            (
                "total_hourly_price",
                "TotalHourlyPrice",
                TypeInfo(str),
            ),
            (
                "total_upfront_price",
                "TotalUpfrontPrice",
                TypeInfo(str),
            ),
        ]

    response_metadata: typing.Dict[str, str] = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # The currency in which the `totalUpfrontPrice` and `totalHourlyPrice`
    # amounts are specified. At this time, the only supported currency is `USD`.
    currency_code: "CurrencyCodeValues" = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # The purchase information of the Dedicated Host reservation and the
    # Dedicated Hosts associated with it.
    purchase: typing.List["Purchase"] = dataclasses.field(
        default_factory=list,
    )

    # The potential total hourly price of the reservation per hour.
    total_hourly_price: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The potential total upfront price. This is billed immediately.
    total_upfront_price: str = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class GetLaunchTemplateDataRequest(ShapeBase):
    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "instance_id",
                "InstanceId",
                TypeInfo(str),
            ),
            (
                "dry_run",
                "DryRun",
                TypeInfo(bool),
            ),
        ]

    # The ID of the instance.
    instance_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # Checks whether you have the required permissions for the action, without
    # actually making the request, and provides an error response. If you have
    # the required permissions, the error response is `DryRunOperation`.
    # Otherwise, it is `UnauthorizedOperation`.
    dry_run: bool = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class GetLaunchTemplateDataResult(OutputShapeBase):
    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "response_metadata",
                "ResponseMetadata",
                TypeInfo(typing.Dict[str, str]),
            ),
            (
                "launch_template_data",
                "LaunchTemplateData",
                TypeInfo(ResponseLaunchTemplateData),
            ),
        ]

    response_metadata: typing.Dict[str, str] = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # The instance data.
    launch_template_data: "ResponseLaunchTemplateData" = dataclasses.field(
        default_factory=dict,
    )


@dataclasses.dataclass
class GetPasswordDataRequest(ShapeBase):
    """
    Contains the parameters for GetPasswordData.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "instance_id",
                "InstanceId",
                TypeInfo(str),
            ),
            (
                "dry_run",
                "DryRun",
                TypeInfo(bool),
            ),
        ]

    # The ID of the Windows instance.
    instance_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # Checks whether you have the required permissions for the action, without
    # actually making the request, and provides an error response. If you have
    # the required permissions, the error response is `DryRunOperation`.
    # Otherwise, it is `UnauthorizedOperation`.
    dry_run: bool = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class GetPasswordDataResult(OutputShapeBase):
    """
    Contains the output of GetPasswordData.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "response_metadata",
                "ResponseMetadata",
                TypeInfo(typing.Dict[str, str]),
            ),
            (
                "instance_id",
                "InstanceId",
                TypeInfo(str),
            ),
            (
                "password_data",
                "PasswordData",
                TypeInfo(str),
            ),
            (
                "timestamp",
                "Timestamp",
                TypeInfo(datetime.datetime),
            ),
        ]

    response_metadata: typing.Dict[str, str] = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # The ID of the Windows instance.
    instance_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The password of the instance. Returns an empty string if the password is
    # not available.
    password_data: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The time the data was last updated.
    timestamp: datetime.datetime = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )


@dataclasses.dataclass
class GetReservedInstancesExchangeQuoteRequest(ShapeBase):
    """
    Contains the parameters for GetReservedInstanceExchangeQuote.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "reserved_instance_ids",
                "ReservedInstanceIds",
                TypeInfo(typing.List[str]),
            ),
            (
                "dry_run",
                "DryRun",
                TypeInfo(bool),
            ),
            (
                "target_configurations",
                "TargetConfigurations",
                TypeInfo(typing.List[TargetConfigurationRequest]),
            ),
        ]

    # The IDs of the Convertible Reserved Instances to exchange.
    reserved_instance_ids: typing.List[str] = dataclasses.field(
        default_factory=list,
    )

    # Checks whether you have the required permissions for the action, without
    # actually making the request, and provides an error response. If you have
    # the required permissions, the error response is `DryRunOperation`.
    # Otherwise, it is `UnauthorizedOperation`.
    dry_run: bool = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The configuration of the target Convertible Reserved Instance to exchange
    # for your current Convertible Reserved Instances.
    target_configurations: typing.List["TargetConfigurationRequest"
                                      ] = dataclasses.field(
                                          default_factory=list,
                                      )


@dataclasses.dataclass
class GetReservedInstancesExchangeQuoteResult(OutputShapeBase):
    """
    Contains the output of GetReservedInstancesExchangeQuote.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "response_metadata",
                "ResponseMetadata",
                TypeInfo(typing.Dict[str, str]),
            ),
            (
                "currency_code",
                "CurrencyCode",
                TypeInfo(str),
            ),
            (
                "is_valid_exchange",
                "IsValidExchange",
                TypeInfo(bool),
            ),
            (
                "output_reserved_instances_will_expire_at",
                "OutputReservedInstancesWillExpireAt",
                TypeInfo(datetime.datetime),
            ),
            (
                "payment_due",
                "PaymentDue",
                TypeInfo(str),
            ),
            (
                "reserved_instance_value_rollup",
                "ReservedInstanceValueRollup",
                TypeInfo(ReservationValue),
            ),
            (
                "reserved_instance_value_set",
                "ReservedInstanceValueSet",
                TypeInfo(typing.List[ReservedInstanceReservationValue]),
            ),
            (
                "target_configuration_value_rollup",
                "TargetConfigurationValueRollup",
                TypeInfo(ReservationValue),
            ),
            (
                "target_configuration_value_set",
                "TargetConfigurationValueSet",
                TypeInfo(typing.List[TargetReservationValue]),
            ),
            (
                "validation_failure_reason",
                "ValidationFailureReason",
                TypeInfo(str),
            ),
        ]

    response_metadata: typing.Dict[str, str] = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # The currency of the transaction.
    currency_code: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # If `true`, the exchange is valid. If `false`, the exchange cannot be
    # completed.
    is_valid_exchange: bool = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The new end date of the reservation term.
    output_reserved_instances_will_expire_at: datetime.datetime = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # The total true upfront charge for the exchange.
    payment_due: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The cost associated with the Reserved Instance.
    reserved_instance_value_rollup: "ReservationValue" = dataclasses.field(
        default_factory=dict,
    )

    # The configuration of your Convertible Reserved Instances.
    reserved_instance_value_set: typing.List["ReservedInstanceReservationValue"
                                            ] = dataclasses.field(
                                                default_factory=list,
                                            )

    # The cost associated with the Reserved Instance.
    target_configuration_value_rollup: "ReservationValue" = dataclasses.field(
        default_factory=dict,
    )

    # The values of the target Convertible Reserved Instances.
    target_configuration_value_set: typing.List["TargetReservationValue"
                                               ] = dataclasses.field(
                                                   default_factory=list,
                                               )

    # Describes the reason why the exchange cannot be completed.
    validation_failure_reason: str = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )


@dataclasses.dataclass
class GroupIdentifier(ShapeBase):
    """
    Describes a security group.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "group_name",
                "GroupName",
                TypeInfo(str),
            ),
            (
                "group_id",
                "GroupId",
                TypeInfo(str),
            ),
        ]

    # The name of the security group.
    group_name: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The ID of the security group.
    group_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class HistoryRecord(ShapeBase):
    """
    Describes an event in the history of the Spot Fleet request.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "event_information",
                "EventInformation",
                TypeInfo(EventInformation),
            ),
            (
                "event_type",
                "EventType",
                TypeInfo(EventType),
            ),
            (
                "timestamp",
                "Timestamp",
                TypeInfo(datetime.datetime),
            ),
        ]

    # Information about the event.
    event_information: "EventInformation" = dataclasses.field(
        default_factory=dict,
    )

    # The event type.

    #   * `error` \- An error with the Spot Fleet request.

    #   * `fleetRequestChange` \- A change in the status or configuration of the Spot Fleet request.

    #   * `instanceChange` \- An instance was launched or terminated.

    #   * `Information` \- An informational event.
    event_type: "EventType" = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The date and time of the event, in UTC format (for example, _YYYY_ - _MM_ -
    # _DD_ T _HH_ : _MM_ : _SS_ Z).
    timestamp: datetime.datetime = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )


@dataclasses.dataclass
class HistoryRecordEntry(ShapeBase):
    """
    Describes an event in the history of an EC2 Fleet.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "event_information",
                "EventInformation",
                TypeInfo(EventInformation),
            ),
            (
                "event_type",
                "EventType",
                TypeInfo(FleetEventType),
            ),
            (
                "timestamp",
                "Timestamp",
                TypeInfo(datetime.datetime),
            ),
        ]

    # Information about the event.
    event_information: "EventInformation" = dataclasses.field(
        default_factory=dict,
    )

    # The event type.
    event_type: "FleetEventType" = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # The date and time of the event, in UTC format (for example, _YYYY_ - _MM_ -
    # _DD_ T _HH_ : _MM_ : _SS_ Z).
    timestamp: datetime.datetime = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )


@dataclasses.dataclass
class Host(ShapeBase):
    """
    Describes the properties of the Dedicated Host.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "auto_placement",
                "AutoPlacement",
                TypeInfo(AutoPlacement),
            ),
            (
                "availability_zone",
                "AvailabilityZone",
                TypeInfo(str),
            ),
            (
                "available_capacity",
                "AvailableCapacity",
                TypeInfo(AvailableCapacity),
            ),
            (
                "client_token",
                "ClientToken",
                TypeInfo(str),
            ),
            (
                "host_id",
                "HostId",
                TypeInfo(str),
            ),
            (
                "host_properties",
                "HostProperties",
                TypeInfo(HostProperties),
            ),
            (
                "host_reservation_id",
                "HostReservationId",
                TypeInfo(str),
            ),
            (
                "instances",
                "Instances",
                TypeInfo(typing.List[HostInstance]),
            ),
            (
                "state",
                "State",
                TypeInfo(AllocationState),
            ),
            (
                "allocation_time",
                "AllocationTime",
                TypeInfo(datetime.datetime),
            ),
            (
                "release_time",
                "ReleaseTime",
                TypeInfo(datetime.datetime),
            ),
            (
                "tags",
                "Tags",
                TypeInfo(typing.List[Tag]),
            ),
        ]

    # Whether auto-placement is on or off.
    auto_placement: "AutoPlacement" = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # The Availability Zone of the Dedicated Host.
    availability_zone: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The number of new instances that can be launched onto the Dedicated Host.
    available_capacity: "AvailableCapacity" = dataclasses.field(
        default_factory=dict,
    )

    # Unique, case-sensitive identifier that you provide to ensure idempotency of
    # the request. For more information, see [How to Ensure
    # Idempotency](http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Run_Instance_Idempotency.html)
    # in the _Amazon Elastic Compute Cloud User Guide_.
    client_token: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The ID of the Dedicated Host.
    host_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The hardware specifications of the Dedicated Host.
    host_properties: "HostProperties" = dataclasses.field(
        default_factory=dict,
    )

    # The reservation ID of the Dedicated Host. This returns a `null` response if
    # the Dedicated Host doesn't have an associated reservation.
    host_reservation_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The IDs and instance type that are currently running on the Dedicated Host.
    instances: typing.List["HostInstance"] = dataclasses.field(
        default_factory=list,
    )

    # The Dedicated Host's state.
    state: "AllocationState" = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The time that the Dedicated Host was allocated.
    allocation_time: datetime.datetime = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # The time that the Dedicated Host was released.
    release_time: datetime.datetime = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # Any tags assigned to the Dedicated Host.
    tags: typing.List["Tag"] = dataclasses.field(default_factory=list, )


@dataclasses.dataclass
class HostInstance(ShapeBase):
    """
    Describes an instance running on a Dedicated Host.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "instance_id",
                "InstanceId",
                TypeInfo(str),
            ),
            (
                "instance_type",
                "InstanceType",
                TypeInfo(str),
            ),
        ]

    # the IDs of instances that are running on the Dedicated Host.
    instance_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The instance type size (for example, `m3.medium`) of the running instance.
    instance_type: str = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class HostOffering(ShapeBase):
    """
    Details about the Dedicated Host Reservation offering.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "currency_code",
                "CurrencyCode",
                TypeInfo(CurrencyCodeValues),
            ),
            (
                "duration",
                "Duration",
                TypeInfo(int),
            ),
            (
                "hourly_price",
                "HourlyPrice",
                TypeInfo(str),
            ),
            (
                "instance_family",
                "InstanceFamily",
                TypeInfo(str),
            ),
            (
                "offering_id",
                "OfferingId",
                TypeInfo(str),
            ),
            (
                "payment_option",
                "PaymentOption",
                TypeInfo(PaymentOption),
            ),
            (
                "upfront_price",
                "UpfrontPrice",
                TypeInfo(str),
            ),
        ]

    # The currency of the offering.
    currency_code: "CurrencyCodeValues" = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # The duration of the offering (in seconds).
    duration: int = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The hourly price of the offering.
    hourly_price: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The instance family of the offering.
    instance_family: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The ID of the offering.
    offering_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The available payment option.
    payment_option: "PaymentOption" = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # The upfront price of the offering. Does not apply to No Upfront offerings.
    upfront_price: str = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class HostProperties(ShapeBase):
    """
    Describes properties of a Dedicated Host.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "cores",
                "Cores",
                TypeInfo(int),
            ),
            (
                "instance_type",
                "InstanceType",
                TypeInfo(str),
            ),
            (
                "sockets",
                "Sockets",
                TypeInfo(int),
            ),
            (
                "total_v_cpus",
                "TotalVCpus",
                TypeInfo(int),
            ),
        ]

    # The number of cores on the Dedicated Host.
    cores: int = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The instance type size that the Dedicated Host supports (for example,
    # `m3.medium`).
    instance_type: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The number of sockets on the Dedicated Host.
    sockets: int = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The number of vCPUs on the Dedicated Host.
    total_v_cpus: int = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class HostReservation(ShapeBase):
    """
    Details about the Dedicated Host Reservation and associated Dedicated Hosts.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "count",
                "Count",
                TypeInfo(int),
            ),
            (
                "currency_code",
                "CurrencyCode",
                TypeInfo(CurrencyCodeValues),
            ),
            (
                "duration",
                "Duration",
                TypeInfo(int),
            ),
            (
                "end",
                "End",
                TypeInfo(datetime.datetime),
            ),
            (
                "host_id_set",
                "HostIdSet",
                TypeInfo(typing.List[str]),
            ),
            (
                "host_reservation_id",
                "HostReservationId",
                TypeInfo(str),
            ),
            (
                "hourly_price",
                "HourlyPrice",
                TypeInfo(str),
            ),
            (
                "instance_family",
                "InstanceFamily",
                TypeInfo(str),
            ),
            (
                "offering_id",
                "OfferingId",
                TypeInfo(str),
            ),
            (
                "payment_option",
                "PaymentOption",
                TypeInfo(PaymentOption),
            ),
            (
                "start",
                "Start",
                TypeInfo(datetime.datetime),
            ),
            (
                "state",
                "State",
                TypeInfo(ReservationState),
            ),
            (
                "upfront_price",
                "UpfrontPrice",
                TypeInfo(str),
            ),
        ]

    # The number of Dedicated Hosts the reservation is associated with.
    count: int = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The currency in which the `upfrontPrice` and `hourlyPrice` amounts are
    # specified. At this time, the only supported currency is `USD`.
    currency_code: "CurrencyCodeValues" = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # The length of the reservation's term, specified in seconds. Can be
    # `31536000 (1 year)` | `94608000 (3 years)`.
    duration: int = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The date and time that the reservation ends.
    end: datetime.datetime = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The IDs of the Dedicated Hosts associated with the reservation.
    host_id_set: typing.List[str] = dataclasses.field(default_factory=list, )

    # The ID of the reservation that specifies the associated Dedicated Hosts.
    host_reservation_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The hourly price of the reservation.
    hourly_price: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The instance family of the Dedicated Host Reservation. The instance family
    # on the Dedicated Host must be the same in order for it to benefit from the
    # reservation.
    instance_family: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The ID of the reservation. This remains the same regardless of which
    # Dedicated Hosts are associated with it.
    offering_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The payment option selected for this reservation.
    payment_option: "PaymentOption" = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # The date and time that the reservation started.
    start: datetime.datetime = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The state of the reservation.
    state: "ReservationState" = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The upfront price of the reservation.
    upfront_price: str = dataclasses.field(default=ShapeBase.NOT_SET, )


class HostTenancy(Enum):
    dedicated = "dedicated"
    host = "host"


class HypervisorType(Enum):
    ovm = "ovm"
    xen = "xen"


@dataclasses.dataclass
class IamInstanceProfile(ShapeBase):
    """
    Describes an IAM instance profile.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "arn",
                "Arn",
                TypeInfo(str),
            ),
            (
                "id",
                "Id",
                TypeInfo(str),
            ),
        ]

    # The Amazon Resource Name (ARN) of the instance profile.
    arn: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The ID of the instance profile.
    id: str = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class IamInstanceProfileAssociation(ShapeBase):
    """
    Describes an association between an IAM instance profile and an instance.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "association_id",
                "AssociationId",
                TypeInfo(str),
            ),
            (
                "instance_id",
                "InstanceId",
                TypeInfo(str),
            ),
            (
                "iam_instance_profile",
                "IamInstanceProfile",
                TypeInfo(IamInstanceProfile),
            ),
            (
                "state",
                "State",
                TypeInfo(IamInstanceProfileAssociationState),
            ),
            (
                "timestamp",
                "Timestamp",
                TypeInfo(datetime.datetime),
            ),
        ]

    # The ID of the association.
    association_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The ID of the instance.
    instance_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The IAM instance profile.
    iam_instance_profile: "IamInstanceProfile" = dataclasses.field(
        default_factory=dict,
    )

    # The state of the association.
    state: "IamInstanceProfileAssociationState" = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # The time the IAM instance profile was associated with the instance.
    timestamp: datetime.datetime = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )


class IamInstanceProfileAssociationState(Enum):
    associating = "associating"
    associated = "associated"
    disassociating = "disassociating"
    disassociated = "disassociated"


@dataclasses.dataclass
class IamInstanceProfileSpecification(ShapeBase):
    """
    Describes an IAM instance profile.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "arn",
                "Arn",
                TypeInfo(str),
            ),
            (
                "name",
                "Name",
                TypeInfo(str),
            ),
        ]

    # The Amazon Resource Name (ARN) of the instance profile.
    arn: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The name of the instance profile.
    name: str = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class IcmpTypeCode(ShapeBase):
    """
    Describes the ICMP type and code.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "code",
                "Code",
                TypeInfo(int),
            ),
            (
                "type",
                "Type",
                TypeInfo(int),
            ),
        ]

    # The ICMP code. A value of -1 means all codes for the specified ICMP type.
    code: int = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The ICMP type. A value of -1 means all types.
    type: int = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class IdFormat(ShapeBase):
    """
    Describes the ID format for a resource.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "deadline",
                "Deadline",
                TypeInfo(datetime.datetime),
            ),
            (
                "resource",
                "Resource",
                TypeInfo(str),
            ),
            (
                "use_long_ids",
                "UseLongIds",
                TypeInfo(bool),
            ),
        ]

    # The date in UTC at which you are permanently switched over to using longer
    # IDs. If a deadline is not yet available for this resource type, this field
    # is not returned.
    deadline: datetime.datetime = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The type of resource.
    resource: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # Indicates whether longer IDs (17-character IDs) are enabled for the
    # resource.
    use_long_ids: bool = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class Image(ShapeBase):
    """
    Describes an image.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "architecture",
                "Architecture",
                TypeInfo(ArchitectureValues),
            ),
            (
                "creation_date",
                "CreationDate",
                TypeInfo(str),
            ),
            (
                "image_id",
                "ImageId",
                TypeInfo(str),
            ),
            (
                "image_location",
                "ImageLocation",
                TypeInfo(str),
            ),
            (
                "image_type",
                "ImageType",
                TypeInfo(ImageTypeValues),
            ),
            (
                "public",
                "Public",
                TypeInfo(bool),
            ),
            (
                "kernel_id",
                "KernelId",
                TypeInfo(str),
            ),
            (
                "owner_id",
                "OwnerId",
                TypeInfo(str),
            ),
            (
                "platform",
                "Platform",
                TypeInfo(PlatformValues),
            ),
            (
                "product_codes",
                "ProductCodes",
                TypeInfo(typing.List[ProductCode]),
            ),
            (
                "ramdisk_id",
                "RamdiskId",
                TypeInfo(str),
            ),
            (
                "state",
                "State",
                TypeInfo(ImageState),
            ),
            (
                "block_device_mappings",
                "BlockDeviceMappings",
                TypeInfo(typing.List[BlockDeviceMapping]),
            ),
            (
                "description",
                "Description",
                TypeInfo(str),
            ),
            (
                "ena_support",
                "EnaSupport",
                TypeInfo(bool),
            ),
            (
                "hypervisor",
                "Hypervisor",
                TypeInfo(HypervisorType),
            ),
            (
                "image_owner_alias",
                "ImageOwnerAlias",
                TypeInfo(str),
            ),
            (
                "name",
                "Name",
                TypeInfo(str),
            ),
            (
                "root_device_name",
                "RootDeviceName",
                TypeInfo(str),
            ),
            (
                "root_device_type",
                "RootDeviceType",
                TypeInfo(DeviceType),
            ),
            (
                "sriov_net_support",
                "SriovNetSupport",
                TypeInfo(str),
            ),
            (
                "state_reason",
                "StateReason",
                TypeInfo(StateReason),
            ),
            (
                "tags",
                "Tags",
                TypeInfo(typing.List[Tag]),
            ),
            (
                "virtualization_type",
                "VirtualizationType",
                TypeInfo(VirtualizationType),
            ),
        ]

    # The architecture of the image.
    architecture: "ArchitectureValues" = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # The date and time the image was created.
    creation_date: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The ID of the AMI.
    image_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The location of the AMI.
    image_location: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The type of image.
    image_type: "ImageTypeValues" = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # Indicates whether the image has public launch permissions. The value is
    # `true` if this image has public launch permissions or `false` if it has
    # only implicit and explicit launch permissions.
    public: bool = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The kernel associated with the image, if any. Only applicable for machine
    # images.
    kernel_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The AWS account ID of the image owner.
    owner_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The value is `Windows` for Windows AMIs; otherwise blank.
    platform: "PlatformValues" = dataclasses.field(default=ShapeBase.NOT_SET, )

    # Any product codes associated with the AMI.
    product_codes: typing.List["ProductCode"] = dataclasses.field(
        default_factory=list,
    )

    # The RAM disk associated with the image, if any. Only applicable for machine
    # images.
    ramdisk_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The current state of the AMI. If the state is `available`, the image is
    # successfully registered and can be used to launch an instance.
    state: "ImageState" = dataclasses.field(default=ShapeBase.NOT_SET, )

    # Any block device mapping entries.
    block_device_mappings: typing.List["BlockDeviceMapping"
                                      ] = dataclasses.field(
                                          default_factory=list,
                                      )

    # The description of the AMI that was provided during image creation.
    description: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # Specifies whether enhanced networking with ENA is enabled.
    ena_support: bool = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The hypervisor type of the image.
    hypervisor: "HypervisorType" = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # The AWS account alias (for example, `amazon`, `self`) or the AWS account ID
    # of the AMI owner.
    image_owner_alias: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The name of the AMI that was provided during image creation.
    name: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The device name of the root device volume (for example, `/dev/sda1`).
    root_device_name: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The type of root device used by the AMI. The AMI can use an EBS volume or
    # an instance store volume.
    root_device_type: "DeviceType" = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # Specifies whether enhanced networking with the Intel 82599 Virtual Function
    # interface is enabled.
    sriov_net_support: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The reason for the state change.
    state_reason: "StateReason" = dataclasses.field(default_factory=dict, )

    # Any tags assigned to the image.
    tags: typing.List["Tag"] = dataclasses.field(default_factory=list, )

    # The type of virtualization of the AMI.
    virtualization_type: "VirtualizationType" = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )


@dataclasses.dataclass
class ImageAttribute(OutputShapeBase):
    """
    Describes an image attribute.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "response_metadata",
                "ResponseMetadata",
                TypeInfo(typing.Dict[str, str]),
            ),
            (
                "block_device_mappings",
                "BlockDeviceMappings",
                TypeInfo(typing.List[BlockDeviceMapping]),
            ),
            (
                "image_id",
                "ImageId",
                TypeInfo(str),
            ),
            (
                "launch_permissions",
                "LaunchPermissions",
                TypeInfo(typing.List[LaunchPermission]),
            ),
            (
                "product_codes",
                "ProductCodes",
                TypeInfo(typing.List[ProductCode]),
            ),
            (
                "description",
                "Description",
                TypeInfo(AttributeValue),
            ),
            (
                "kernel_id",
                "KernelId",
                TypeInfo(AttributeValue),
            ),
            (
                "ramdisk_id",
                "RamdiskId",
                TypeInfo(AttributeValue),
            ),
            (
                "sriov_net_support",
                "SriovNetSupport",
                TypeInfo(AttributeValue),
            ),
        ]

    response_metadata: typing.Dict[str, str] = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # One or more block device mapping entries.
    block_device_mappings: typing.List["BlockDeviceMapping"
                                      ] = dataclasses.field(
                                          default_factory=list,
                                      )

    # The ID of the AMI.
    image_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # One or more launch permissions.
    launch_permissions: typing.List["LaunchPermission"] = dataclasses.field(
        default_factory=list,
    )

    # One or more product codes.
    product_codes: typing.List["ProductCode"] = dataclasses.field(
        default_factory=list,
    )

    # A description for the AMI.
    description: "AttributeValue" = dataclasses.field(default_factory=dict, )

    # The kernel ID.
    kernel_id: "AttributeValue" = dataclasses.field(default_factory=dict, )

    # The RAM disk ID.
    ramdisk_id: "AttributeValue" = dataclasses.field(default_factory=dict, )

    # Indicates whether enhanced networking with the Intel 82599 Virtual Function
    # interface is enabled.
    sriov_net_support: "AttributeValue" = dataclasses.field(
        default_factory=dict,
    )


class ImageAttributeName(Enum):
    description = "description"
    kernel = "kernel"
    ramdisk = "ramdisk"
    launchPermission = "launchPermission"
    productCodes = "productCodes"
    blockDeviceMapping = "blockDeviceMapping"
    sriovNetSupport = "sriovNetSupport"


@dataclasses.dataclass
class ImageDiskContainer(ShapeBase):
    """
    Describes the disk container object for an import image task.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "description",
                "Description",
                TypeInfo(str),
            ),
            (
                "device_name",
                "DeviceName",
                TypeInfo(str),
            ),
            (
                "format",
                "Format",
                TypeInfo(str),
            ),
            (
                "snapshot_id",
                "SnapshotId",
                TypeInfo(str),
            ),
            (
                "url",
                "Url",
                TypeInfo(str),
            ),
            (
                "user_bucket",
                "UserBucket",
                TypeInfo(UserBucket),
            ),
        ]

    # The description of the disk image.
    description: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The block device mapping for the disk.
    device_name: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The format of the disk image being imported.

    # Valid values: `VHD` | `VMDK` | `OVA`
    format: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The ID of the EBS snapshot to be used for importing the snapshot.
    snapshot_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The URL to the Amazon S3-based disk image being imported. The URL can
    # either be a https URL (https://..) or an Amazon S3 URL (s3://..)
    url: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The S3 bucket for the disk image.
    user_bucket: "UserBucket" = dataclasses.field(default_factory=dict, )


class ImageState(Enum):
    pending = "pending"
    available = "available"
    invalid = "invalid"
    deregistered = "deregistered"
    transient = "transient"
    failed = "failed"
    error = "error"


class ImageTypeValues(Enum):
    machine = "machine"
    kernel = "kernel"
    ramdisk = "ramdisk"


@dataclasses.dataclass
class ImportImageRequest(ShapeBase):
    """
    Contains the parameters for ImportImage.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "architecture",
                "Architecture",
                TypeInfo(str),
            ),
            (
                "client_data",
                "ClientData",
                TypeInfo(ClientData),
            ),
            (
                "client_token",
                "ClientToken",
                TypeInfo(str),
            ),
            (
                "description",
                "Description",
                TypeInfo(str),
            ),
            (
                "disk_containers",
                "DiskContainers",
                TypeInfo(typing.List[ImageDiskContainer]),
            ),
            (
                "dry_run",
                "DryRun",
                TypeInfo(bool),
            ),
            (
                "hypervisor",
                "Hypervisor",
                TypeInfo(str),
            ),
            (
                "license_type",
                "LicenseType",
                TypeInfo(str),
            ),
            (
                "platform",
                "Platform",
                TypeInfo(str),
            ),
            (
                "role_name",
                "RoleName",
                TypeInfo(str),
            ),
        ]

    # The architecture of the virtual machine.

    # Valid values: `i386` | `x86_64`
    architecture: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The client-specific data.
    client_data: "ClientData" = dataclasses.field(default_factory=dict, )

    # The token to enable idempotency for VM import requests.
    client_token: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # A description string for the import image task.
    description: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # Information about the disk containers.
    disk_containers: typing.List["ImageDiskContainer"] = dataclasses.field(
        default_factory=list,
    )

    # Checks whether you have the required permissions for the action, without
    # actually making the request, and provides an error response. If you have
    # the required permissions, the error response is `DryRunOperation`.
    # Otherwise, it is `UnauthorizedOperation`.
    dry_run: bool = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The target hypervisor platform.

    # Valid values: `xen`
    hypervisor: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The license type to be used for the Amazon Machine Image (AMI) after
    # importing.

    # **Note:** You may only use BYOL if you have existing licenses with rights
    # to use these licenses in a third party cloud like AWS. For more
    # information, see [Prerequisites](http://docs.aws.amazon.com/vm-
    # import/latest/userguide/vmimport-image-import.html#prerequisites-image) in
    # the VM Import/Export User Guide.

    # Valid values: `AWS` | `BYOL`
    license_type: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The operating system of the virtual machine.

    # Valid values: `Windows` | `Linux`
    platform: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The name of the role to use when not using the default role, 'vmimport'.
    role_name: str = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class ImportImageResult(OutputShapeBase):
    """
    Contains the output for ImportImage.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "response_metadata",
                "ResponseMetadata",
                TypeInfo(typing.Dict[str, str]),
            ),
            (
                "architecture",
                "Architecture",
                TypeInfo(str),
            ),
            (
                "description",
                "Description",
                TypeInfo(str),
            ),
            (
                "hypervisor",
                "Hypervisor",
                TypeInfo(str),
            ),
            (
                "image_id",
                "ImageId",
                TypeInfo(str),
            ),
            (
                "import_task_id",
                "ImportTaskId",
                TypeInfo(str),
            ),
            (
                "license_type",
                "LicenseType",
                TypeInfo(str),
            ),
            (
                "platform",
                "Platform",
                TypeInfo(str),
            ),
            (
                "progress",
                "Progress",
                TypeInfo(str),
            ),
            (
                "snapshot_details",
                "SnapshotDetails",
                TypeInfo(typing.List[SnapshotDetail]),
            ),
            (
                "status",
                "Status",
                TypeInfo(str),
            ),
            (
                "status_message",
                "StatusMessage",
                TypeInfo(str),
            ),
        ]

    response_metadata: typing.Dict[str, str] = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # The architecture of the virtual machine.
    architecture: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # A description of the import task.
    description: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The target hypervisor of the import task.
    hypervisor: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The ID of the Amazon Machine Image (AMI) created by the import task.
    image_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The task ID of the import image task.
    import_task_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The license type of the virtual machine.
    license_type: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The operating system of the virtual machine.
    platform: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The progress of the task.
    progress: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # Information about the snapshots.
    snapshot_details: typing.List["SnapshotDetail"] = dataclasses.field(
        default_factory=list,
    )

    # A brief status of the task.
    status: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # A detailed status message of the import task.
    status_message: str = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class ImportImageTask(ShapeBase):
    """
    Describes an import image task.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "architecture",
                "Architecture",
                TypeInfo(str),
            ),
            (
                "description",
                "Description",
                TypeInfo(str),
            ),
            (
                "hypervisor",
                "Hypervisor",
                TypeInfo(str),
            ),
            (
                "image_id",
                "ImageId",
                TypeInfo(str),
            ),
            (
                "import_task_id",
                "ImportTaskId",
                TypeInfo(str),
            ),
            (
                "license_type",
                "LicenseType",
                TypeInfo(str),
            ),
            (
                "platform",
                "Platform",
                TypeInfo(str),
            ),
            (
                "progress",
                "Progress",
                TypeInfo(str),
            ),
            (
                "snapshot_details",
                "SnapshotDetails",
                TypeInfo(typing.List[SnapshotDetail]),
            ),
            (
                "status",
                "Status",
                TypeInfo(str),
            ),
            (
                "status_message",
                "StatusMessage",
                TypeInfo(str),
            ),
        ]

    # The architecture of the virtual machine.

    # Valid values: `i386` | `x86_64`
    architecture: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # A description of the import task.
    description: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The target hypervisor for the import task.

    # Valid values: `xen`
    hypervisor: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The ID of the Amazon Machine Image (AMI) of the imported virtual machine.
    image_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The ID of the import image task.
    import_task_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The license type of the virtual machine.
    license_type: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The description string for the import image task.
    platform: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The percentage of progress of the import image task.
    progress: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # Information about the snapshots.
    snapshot_details: typing.List["SnapshotDetail"] = dataclasses.field(
        default_factory=list,
    )

    # A brief status for the import image task.
    status: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # A descriptive status message for the import image task.
    status_message: str = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class ImportInstanceLaunchSpecification(ShapeBase):
    """
    Describes the launch specification for VM import.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "additional_info",
                "AdditionalInfo",
                TypeInfo(str),
            ),
            (
                "architecture",
                "Architecture",
                TypeInfo(ArchitectureValues),
            ),
            (
                "group_ids",
                "GroupIds",
                TypeInfo(typing.List[str]),
            ),
            (
                "group_names",
                "GroupNames",
                TypeInfo(typing.List[str]),
            ),
            (
                "instance_initiated_shutdown_behavior",
                "InstanceInitiatedShutdownBehavior",
                TypeInfo(ShutdownBehavior),
            ),
            (
                "instance_type",
                "InstanceType",
                TypeInfo(InstanceType),
            ),
            (
                "monitoring",
                "Monitoring",
                TypeInfo(bool),
            ),
            (
                "placement",
                "Placement",
                TypeInfo(Placement),
            ),
            (
                "private_ip_address",
                "PrivateIpAddress",
                TypeInfo(str),
            ),
            (
                "subnet_id",
                "SubnetId",
                TypeInfo(str),
            ),
            (
                "user_data",
                "UserData",
                TypeInfo(UserData),
            ),
        ]

    # Reserved.
    additional_info: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The architecture of the instance.
    architecture: "ArchitectureValues" = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # One or more security group IDs.
    group_ids: typing.List[str] = dataclasses.field(default_factory=list, )

    # One or more security group names.
    group_names: typing.List[str] = dataclasses.field(default_factory=list, )

    # Indicates whether an instance stops or terminates when you initiate
    # shutdown from the instance (using the operating system command for system
    # shutdown).
    instance_initiated_shutdown_behavior: "ShutdownBehavior" = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # The instance type. For more information about the instance types that you
    # can import, see [Instance Types](http://docs.aws.amazon.com/vm-
    # import/latest/userguide/vmie_prereqs.html#vmimport-instance-types) in the
    # VM Import/Export User Guide.
    instance_type: "InstanceType" = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # Indicates whether monitoring is enabled.
    monitoring: bool = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The placement information for the instance.
    placement: "Placement" = dataclasses.field(default_factory=dict, )

    # [EC2-VPC] An available IP address from the IP address range of the subnet.
    private_ip_address: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # [EC2-VPC] The ID of the subnet in which to launch the instance.
    subnet_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The Base64-encoded user data to make available to the instance.
    user_data: "UserData" = dataclasses.field(default_factory=dict, )


@dataclasses.dataclass
class ImportInstanceRequest(ShapeBase):
    """
    Contains the parameters for ImportInstance.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "platform",
                "Platform",
                TypeInfo(PlatformValues),
            ),
            (
                "description",
                "Description",
                TypeInfo(str),
            ),
            (
                "disk_images",
                "DiskImages",
                TypeInfo(typing.List[DiskImage]),
            ),
            (
                "dry_run",
                "DryRun",
                TypeInfo(bool),
            ),
            (
                "launch_specification",
                "LaunchSpecification",
                TypeInfo(ImportInstanceLaunchSpecification),
            ),
        ]

    # The instance operating system.
    platform: "PlatformValues" = dataclasses.field(default=ShapeBase.NOT_SET, )

    # A description for the instance being imported.
    description: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The disk image.
    disk_images: typing.List["DiskImage"] = dataclasses.field(
        default_factory=list,
    )

    # Checks whether you have the required permissions for the action, without
    # actually making the request, and provides an error response. If you have
    # the required permissions, the error response is `DryRunOperation`.
    # Otherwise, it is `UnauthorizedOperation`.
    dry_run: bool = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The launch specification.
    launch_specification: "ImportInstanceLaunchSpecification" = dataclasses.field(
        default_factory=dict,
    )


@dataclasses.dataclass
class ImportInstanceResult(OutputShapeBase):
    """
    Contains the output for ImportInstance.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "response_metadata",
                "ResponseMetadata",
                TypeInfo(typing.Dict[str, str]),
            ),
            (
                "conversion_task",
                "ConversionTask",
                TypeInfo(ConversionTask),
            ),
        ]

    response_metadata: typing.Dict[str, str] = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # Information about the conversion task.
    conversion_task: "ConversionTask" = dataclasses.field(
        default_factory=dict,
    )


@dataclasses.dataclass
class ImportInstanceTaskDetails(ShapeBase):
    """
    Describes an import instance task.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "description",
                "Description",
                TypeInfo(str),
            ),
            (
                "instance_id",
                "InstanceId",
                TypeInfo(str),
            ),
            (
                "platform",
                "Platform",
                TypeInfo(PlatformValues),
            ),
            (
                "volumes",
                "Volumes",
                TypeInfo(typing.List[ImportInstanceVolumeDetailItem]),
            ),
        ]

    # A description of the task.
    description: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The ID of the instance.
    instance_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The instance operating system.
    platform: "PlatformValues" = dataclasses.field(default=ShapeBase.NOT_SET, )

    # One or more volumes.
    volumes: typing.List["ImportInstanceVolumeDetailItem"] = dataclasses.field(
        default_factory=list,
    )


@dataclasses.dataclass
class ImportInstanceVolumeDetailItem(ShapeBase):
    """
    Describes an import volume task.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "availability_zone",
                "AvailabilityZone",
                TypeInfo(str),
            ),
            (
                "bytes_converted",
                "BytesConverted",
                TypeInfo(int),
            ),
            (
                "image",
                "Image",
                TypeInfo(DiskImageDescription),
            ),
            (
                "status",
                "Status",
                TypeInfo(str),
            ),
            (
                "volume",
                "Volume",
                TypeInfo(DiskImageVolumeDescription),
            ),
            (
                "description",
                "Description",
                TypeInfo(str),
            ),
            (
                "status_message",
                "StatusMessage",
                TypeInfo(str),
            ),
        ]

    # The Availability Zone where the resulting instance will reside.
    availability_zone: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The number of bytes converted so far.
    bytes_converted: int = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The image.
    image: "DiskImageDescription" = dataclasses.field(default_factory=dict, )

    # The status of the import of this particular disk image.
    status: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The volume.
    volume: "DiskImageVolumeDescription" = dataclasses.field(
        default_factory=dict,
    )

    # A description of the task.
    description: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The status information or errors related to the disk image.
    status_message: str = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class ImportKeyPairRequest(ShapeBase):
    """
    Contains the parameters for ImportKeyPair.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "key_name",
                "KeyName",
                TypeInfo(str),
            ),
            (
                "public_key_material",
                "PublicKeyMaterial",
                TypeInfo(typing.Any),
            ),
            (
                "dry_run",
                "DryRun",
                TypeInfo(bool),
            ),
        ]

    # A unique name for the key pair.
    key_name: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The public key. For API calls, the text must be base64-encoded. For command
    # line tools, base64 encoding is performed for you.
    public_key_material: typing.Any = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # Checks whether you have the required permissions for the action, without
    # actually making the request, and provides an error response. If you have
    # the required permissions, the error response is `DryRunOperation`.
    # Otherwise, it is `UnauthorizedOperation`.
    dry_run: bool = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class ImportKeyPairResult(OutputShapeBase):
    """
    Contains the output of ImportKeyPair.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "response_metadata",
                "ResponseMetadata",
                TypeInfo(typing.Dict[str, str]),
            ),
            (
                "key_fingerprint",
                "KeyFingerprint",
                TypeInfo(str),
            ),
            (
                "key_name",
                "KeyName",
                TypeInfo(str),
            ),
        ]

    response_metadata: typing.Dict[str, str] = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # The MD5 public key fingerprint as specified in section 4 of RFC 4716.
    key_fingerprint: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The key pair name you provided.
    key_name: str = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class ImportSnapshotRequest(ShapeBase):
    """
    Contains the parameters for ImportSnapshot.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "client_data",
                "ClientData",
                TypeInfo(ClientData),
            ),
            (
                "client_token",
                "ClientToken",
                TypeInfo(str),
            ),
            (
                "description",
                "Description",
                TypeInfo(str),
            ),
            (
                "disk_container",
                "DiskContainer",
                TypeInfo(SnapshotDiskContainer),
            ),
            (
                "dry_run",
                "DryRun",
                TypeInfo(bool),
            ),
            (
                "role_name",
                "RoleName",
                TypeInfo(str),
            ),
        ]

    # The client-specific data.
    client_data: "ClientData" = dataclasses.field(default_factory=dict, )

    # Token to enable idempotency for VM import requests.
    client_token: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The description string for the import snapshot task.
    description: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # Information about the disk container.
    disk_container: "SnapshotDiskContainer" = dataclasses.field(
        default_factory=dict,
    )

    # Checks whether you have the required permissions for the action, without
    # actually making the request, and provides an error response. If you have
    # the required permissions, the error response is `DryRunOperation`.
    # Otherwise, it is `UnauthorizedOperation`.
    dry_run: bool = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The name of the role to use when not using the default role, 'vmimport'.
    role_name: str = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class ImportSnapshotResult(OutputShapeBase):
    """
    Contains the output for ImportSnapshot.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "response_metadata",
                "ResponseMetadata",
                TypeInfo(typing.Dict[str, str]),
            ),
            (
                "description",
                "Description",
                TypeInfo(str),
            ),
            (
                "import_task_id",
                "ImportTaskId",
                TypeInfo(str),
            ),
            (
                "snapshot_task_detail",
                "SnapshotTaskDetail",
                TypeInfo(SnapshotTaskDetail),
            ),
        ]

    response_metadata: typing.Dict[str, str] = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # A description of the import snapshot task.
    description: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The ID of the import snapshot task.
    import_task_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # Information about the import snapshot task.
    snapshot_task_detail: "SnapshotTaskDetail" = dataclasses.field(
        default_factory=dict,
    )


@dataclasses.dataclass
class ImportSnapshotTask(ShapeBase):
    """
    Describes an import snapshot task.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "description",
                "Description",
                TypeInfo(str),
            ),
            (
                "import_task_id",
                "ImportTaskId",
                TypeInfo(str),
            ),
            (
                "snapshot_task_detail",
                "SnapshotTaskDetail",
                TypeInfo(SnapshotTaskDetail),
            ),
        ]

    # A description of the import snapshot task.
    description: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The ID of the import snapshot task.
    import_task_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # Describes an import snapshot task.
    snapshot_task_detail: "SnapshotTaskDetail" = dataclasses.field(
        default_factory=dict,
    )


@dataclasses.dataclass
class ImportVolumeRequest(ShapeBase):
    """
    Contains the parameters for ImportVolume.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "availability_zone",
                "AvailabilityZone",
                TypeInfo(str),
            ),
            (
                "image",
                "Image",
                TypeInfo(DiskImageDetail),
            ),
            (
                "volume",
                "Volume",
                TypeInfo(VolumeDetail),
            ),
            (
                "description",
                "Description",
                TypeInfo(str),
            ),
            (
                "dry_run",
                "DryRun",
                TypeInfo(bool),
            ),
        ]

    # The Availability Zone for the resulting EBS volume.
    availability_zone: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The disk image.
    image: "DiskImageDetail" = dataclasses.field(default_factory=dict, )

    # The volume size.
    volume: "VolumeDetail" = dataclasses.field(default_factory=dict, )

    # A description of the volume.
    description: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # Checks whether you have the required permissions for the action, without
    # actually making the request, and provides an error response. If you have
    # the required permissions, the error response is `DryRunOperation`.
    # Otherwise, it is `UnauthorizedOperation`.
    dry_run: bool = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class ImportVolumeResult(OutputShapeBase):
    """
    Contains the output for ImportVolume.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "response_metadata",
                "ResponseMetadata",
                TypeInfo(typing.Dict[str, str]),
            ),
            (
                "conversion_task",
                "ConversionTask",
                TypeInfo(ConversionTask),
            ),
        ]

    response_metadata: typing.Dict[str, str] = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # Information about the conversion task.
    conversion_task: "ConversionTask" = dataclasses.field(
        default_factory=dict,
    )


@dataclasses.dataclass
class ImportVolumeTaskDetails(ShapeBase):
    """
    Describes an import volume task.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "availability_zone",
                "AvailabilityZone",
                TypeInfo(str),
            ),
            (
                "bytes_converted",
                "BytesConverted",
                TypeInfo(int),
            ),
            (
                "description",
                "Description",
                TypeInfo(str),
            ),
            (
                "image",
                "Image",
                TypeInfo(DiskImageDescription),
            ),
            (
                "volume",
                "Volume",
                TypeInfo(DiskImageVolumeDescription),
            ),
        ]

    # The Availability Zone where the resulting volume will reside.
    availability_zone: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The number of bytes converted so far.
    bytes_converted: int = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The description you provided when starting the import volume task.
    description: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The image.
    image: "DiskImageDescription" = dataclasses.field(default_factory=dict, )

    # The volume.
    volume: "DiskImageVolumeDescription" = dataclasses.field(
        default_factory=dict,
    )


@dataclasses.dataclass
class Instance(ShapeBase):
    """
    Describes an instance.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "ami_launch_index",
                "AmiLaunchIndex",
                TypeInfo(int),
            ),
            (
                "image_id",
                "ImageId",
                TypeInfo(str),
            ),
            (
                "instance_id",
                "InstanceId",
                TypeInfo(str),
            ),
            (
                "instance_type",
                "InstanceType",
                TypeInfo(InstanceType),
            ),
            (
                "kernel_id",
                "KernelId",
                TypeInfo(str),
            ),
            (
                "key_name",
                "KeyName",
                TypeInfo(str),
            ),
            (
                "launch_time",
                "LaunchTime",
                TypeInfo(datetime.datetime),
            ),
            (
                "monitoring",
                "Monitoring",
                TypeInfo(Monitoring),
            ),
            (
                "placement",
                "Placement",
                TypeInfo(Placement),
            ),
            (
                "platform",
                "Platform",
                TypeInfo(PlatformValues),
            ),
            (
                "private_dns_name",
                "PrivateDnsName",
                TypeInfo(str),
            ),
            (
                "private_ip_address",
                "PrivateIpAddress",
                TypeInfo(str),
            ),
            (
                "product_codes",
                "ProductCodes",
                TypeInfo(typing.List[ProductCode]),
            ),
            (
                "public_dns_name",
                "PublicDnsName",
                TypeInfo(str),
            ),
            (
                "public_ip_address",
                "PublicIpAddress",
                TypeInfo(str),
            ),
            (
                "ramdisk_id",
                "RamdiskId",
                TypeInfo(str),
            ),
            (
                "state",
                "State",
                TypeInfo(InstanceState),
            ),
            (
                "state_transition_reason",
                "StateTransitionReason",
                TypeInfo(str),
            ),
            (
                "subnet_id",
                "SubnetId",
                TypeInfo(str),
            ),
            (
                "vpc_id",
                "VpcId",
                TypeInfo(str),
            ),
            (
                "architecture",
                "Architecture",
                TypeInfo(ArchitectureValues),
            ),
            (
                "block_device_mappings",
                "BlockDeviceMappings",
                TypeInfo(typing.List[InstanceBlockDeviceMapping]),
            ),
            (
                "client_token",
                "ClientToken",
                TypeInfo(str),
            ),
            (
                "ebs_optimized",
                "EbsOptimized",
                TypeInfo(bool),
            ),
            (
                "ena_support",
                "EnaSupport",
                TypeInfo(bool),
            ),
            (
                "hypervisor",
                "Hypervisor",
                TypeInfo(HypervisorType),
            ),
            (
                "iam_instance_profile",
                "IamInstanceProfile",
                TypeInfo(IamInstanceProfile),
            ),
            (
                "instance_lifecycle",
                "InstanceLifecycle",
                TypeInfo(InstanceLifecycleType),
            ),
            (
                "elastic_gpu_associations",
                "ElasticGpuAssociations",
                TypeInfo(typing.List[ElasticGpuAssociation]),
            ),
            (
                "network_interfaces",
                "NetworkInterfaces",
                TypeInfo(typing.List[InstanceNetworkInterface]),
            ),
            (
                "root_device_name",
                "RootDeviceName",
                TypeInfo(str),
            ),
            (
                "root_device_type",
                "RootDeviceType",
                TypeInfo(DeviceType),
            ),
            (
                "security_groups",
                "SecurityGroups",
                TypeInfo(typing.List[GroupIdentifier]),
            ),
            (
                "source_dest_check",
                "SourceDestCheck",
                TypeInfo(bool),
            ),
            (
                "spot_instance_request_id",
                "SpotInstanceRequestId",
                TypeInfo(str),
            ),
            (
                "sriov_net_support",
                "SriovNetSupport",
                TypeInfo(str),
            ),
            (
                "state_reason",
                "StateReason",
                TypeInfo(StateReason),
            ),
            (
                "tags",
                "Tags",
                TypeInfo(typing.List[Tag]),
            ),
            (
                "virtualization_type",
                "VirtualizationType",
                TypeInfo(VirtualizationType),
            ),
            (
                "cpu_options",
                "CpuOptions",
                TypeInfo(CpuOptions),
            ),
        ]

    # The AMI launch index, which can be used to find this instance in the launch
    # group.
    ami_launch_index: int = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The ID of the AMI used to launch the instance.
    image_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The ID of the instance.
    instance_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The instance type.
    instance_type: "InstanceType" = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # The kernel associated with this instance, if applicable.
    kernel_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The name of the key pair, if this instance was launched with an associated
    # key pair.
    key_name: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The time the instance was launched.
    launch_time: datetime.datetime = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # The monitoring for the instance.
    monitoring: "Monitoring" = dataclasses.field(default_factory=dict, )

    # The location where the instance launched, if applicable.
    placement: "Placement" = dataclasses.field(default_factory=dict, )

    # The value is `Windows` for Windows instances; otherwise blank.
    platform: "PlatformValues" = dataclasses.field(default=ShapeBase.NOT_SET, )

    # (IPv4 only) The private DNS hostname name assigned to the instance. This
    # DNS hostname can only be used inside the Amazon EC2 network. This name is
    # not available until the instance enters the `running` state.

    # [EC2-VPC] The Amazon-provided DNS server resolves Amazon-provided private
    # DNS hostnames if you've enabled DNS resolution and DNS hostnames in your
    # VPC. If you are not using the Amazon-provided DNS server in your VPC, your
    # custom domain name servers must resolve the hostname as appropriate.
    private_dns_name: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The private IPv4 address assigned to the instance.
    private_ip_address: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The product codes attached to this instance, if applicable.
    product_codes: typing.List["ProductCode"] = dataclasses.field(
        default_factory=list,
    )

    # (IPv4 only) The public DNS name assigned to the instance. This name is not
    # available until the instance enters the `running` state. For EC2-VPC, this
    # name is only available if you've enabled DNS hostnames for your VPC.
    public_dns_name: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The public IPv4 address assigned to the instance, if applicable.
    public_ip_address: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The RAM disk associated with this instance, if applicable.
    ramdisk_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The current state of the instance.
    state: "InstanceState" = dataclasses.field(default_factory=dict, )

    # The reason for the most recent state transition. This might be an empty
    # string.
    state_transition_reason: str = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # [EC2-VPC] The ID of the subnet in which the instance is running.
    subnet_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # [EC2-VPC] The ID of the VPC in which the instance is running.
    vpc_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The architecture of the image.
    architecture: "ArchitectureValues" = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # Any block device mapping entries for the instance.
    block_device_mappings: typing.List["InstanceBlockDeviceMapping"
                                      ] = dataclasses.field(
                                          default_factory=list,
                                      )

    # The idempotency token you provided when you launched the instance, if
    # applicable.
    client_token: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # Indicates whether the instance is optimized for Amazon EBS I/O. This
    # optimization provides dedicated throughput to Amazon EBS and an optimized
    # configuration stack to provide optimal I/O performance. This optimization
    # isn't available with all instance types. Additional usage charges apply
    # when using an EBS Optimized instance.
    ebs_optimized: bool = dataclasses.field(default=ShapeBase.NOT_SET, )

    # Specifies whether enhanced networking with ENA is enabled.
    ena_support: bool = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The hypervisor type of the instance.
    hypervisor: "HypervisorType" = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # The IAM instance profile associated with the instance, if applicable.
    iam_instance_profile: "IamInstanceProfile" = dataclasses.field(
        default_factory=dict,
    )

    # Indicates whether this is a Spot Instance or a Scheduled Instance.
    instance_lifecycle: "InstanceLifecycleType" = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # The Elastic GPU associated with the instance.
    elastic_gpu_associations: typing.List["ElasticGpuAssociation"
                                         ] = dataclasses.field(
                                             default_factory=list,
                                         )

    # [EC2-VPC] One or more network interfaces for the instance.
    network_interfaces: typing.List["InstanceNetworkInterface"
                                   ] = dataclasses.field(
                                       default_factory=list,
                                   )

    # The device name of the root device volume (for example, `/dev/sda1`).
    root_device_name: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The root device type used by the AMI. The AMI can use an EBS volume or an
    # instance store volume.
    root_device_type: "DeviceType" = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # One or more security groups for the instance.
    security_groups: typing.List["GroupIdentifier"] = dataclasses.field(
        default_factory=list,
    )

    # Specifies whether to enable an instance launched in a VPC to perform NAT.
    # This controls whether source/destination checking is enabled on the
    # instance. A value of `true` means that checking is enabled, and `false`
    # means that checking is disabled. The value must be `false` for the instance
    # to perform NAT. For more information, see [NAT
    # Instances](http://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/VPC_NAT_Instance.html)
    # in the _Amazon Virtual Private Cloud User Guide_.
    source_dest_check: bool = dataclasses.field(default=ShapeBase.NOT_SET, )

    # If the request is a Spot Instance request, the ID of the request.
    spot_instance_request_id: str = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # Specifies whether enhanced networking with the Intel 82599 Virtual Function
    # interface is enabled.
    sriov_net_support: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The reason for the most recent state transition.
    state_reason: "StateReason" = dataclasses.field(default_factory=dict, )

    # Any tags assigned to the instance.
    tags: typing.List["Tag"] = dataclasses.field(default_factory=list, )

    # The virtualization type of the instance.
    virtualization_type: "VirtualizationType" = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # The CPU options for the instance.
    cpu_options: "CpuOptions" = dataclasses.field(default_factory=dict, )


@dataclasses.dataclass
class InstanceAttribute(OutputShapeBase):
    """
    Describes an instance attribute.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "response_metadata",
                "ResponseMetadata",
                TypeInfo(typing.Dict[str, str]),
            ),
            (
                "groups",
                "Groups",
                TypeInfo(typing.List[GroupIdentifier]),
            ),
            (
                "block_device_mappings",
                "BlockDeviceMappings",
                TypeInfo(typing.List[InstanceBlockDeviceMapping]),
            ),
            (
                "disable_api_termination",
                "DisableApiTermination",
                TypeInfo(AttributeBooleanValue),
            ),
            (
                "ena_support",
                "EnaSupport",
                TypeInfo(AttributeBooleanValue),
            ),
            (
                "ebs_optimized",
                "EbsOptimized",
                TypeInfo(AttributeBooleanValue),
            ),
            (
                "instance_id",
                "InstanceId",
                TypeInfo(str),
            ),
            (
                "instance_initiated_shutdown_behavior",
                "InstanceInitiatedShutdownBehavior",
                TypeInfo(AttributeValue),
            ),
            (
                "instance_type",
                "InstanceType",
                TypeInfo(AttributeValue),
            ),
            (
                "kernel_id",
                "KernelId",
                TypeInfo(AttributeValue),
            ),
            (
                "product_codes",
                "ProductCodes",
                TypeInfo(typing.List[ProductCode]),
            ),
            (
                "ramdisk_id",
                "RamdiskId",
                TypeInfo(AttributeValue),
            ),
            (
                "root_device_name",
                "RootDeviceName",
                TypeInfo(AttributeValue),
            ),
            (
                "source_dest_check",
                "SourceDestCheck",
                TypeInfo(AttributeBooleanValue),
            ),
            (
                "sriov_net_support",
                "SriovNetSupport",
                TypeInfo(AttributeValue),
            ),
            (
                "user_data",
                "UserData",
                TypeInfo(AttributeValue),
            ),
        ]

    response_metadata: typing.Dict[str, str] = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # The security groups associated with the instance.
    groups: typing.List["GroupIdentifier"] = dataclasses.field(
        default_factory=list,
    )

    # The block device mapping of the instance.
    block_device_mappings: typing.List["InstanceBlockDeviceMapping"
                                      ] = dataclasses.field(
                                          default_factory=list,
                                      )

    # If the value is `true`, you can't terminate the instance through the Amazon
    # EC2 console, CLI, or API; otherwise, you can.
    disable_api_termination: "AttributeBooleanValue" = dataclasses.field(
        default_factory=dict,
    )

    # Indicates whether enhanced networking with ENA is enabled.
    ena_support: "AttributeBooleanValue" = dataclasses.field(
        default_factory=dict,
    )

    # Indicates whether the instance is optimized for Amazon EBS I/O.
    ebs_optimized: "AttributeBooleanValue" = dataclasses.field(
        default_factory=dict,
    )

    # The ID of the instance.
    instance_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # Indicates whether an instance stops or terminates when you initiate
    # shutdown from the instance (using the operating system command for system
    # shutdown).
    instance_initiated_shutdown_behavior: "AttributeValue" = dataclasses.field(
        default_factory=dict,
    )

    # The instance type.
    instance_type: "AttributeValue" = dataclasses.field(default_factory=dict, )

    # The kernel ID.
    kernel_id: "AttributeValue" = dataclasses.field(default_factory=dict, )

    # A list of product codes.
    product_codes: typing.List["ProductCode"] = dataclasses.field(
        default_factory=list,
    )

    # The RAM disk ID.
    ramdisk_id: "AttributeValue" = dataclasses.field(default_factory=dict, )

    # The device name of the root device volume (for example, `/dev/sda1`).
    root_device_name: "AttributeValue" = dataclasses.field(
        default_factory=dict,
    )

    # Indicates whether source/destination checking is enabled. A value of `true`
    # means that checking is enabled, and `false` means that checking is
    # disabled. This value must be `false` for a NAT instance to perform NAT.
    source_dest_check: "AttributeBooleanValue" = dataclasses.field(
        default_factory=dict,
    )

    # Indicates whether enhanced networking with the Intel 82599 Virtual Function
    # interface is enabled.
    sriov_net_support: "AttributeValue" = dataclasses.field(
        default_factory=dict,
    )

    # The user data.
    user_data: "AttributeValue" = dataclasses.field(default_factory=dict, )


class InstanceAttributeName(Enum):
    instanceType = "instanceType"
    kernel = "kernel"
    ramdisk = "ramdisk"
    userData = "userData"
    disableApiTermination = "disableApiTermination"
    instanceInitiatedShutdownBehavior = "instanceInitiatedShutdownBehavior"
    rootDeviceName = "rootDeviceName"
    blockDeviceMapping = "blockDeviceMapping"
    productCodes = "productCodes"
    sourceDestCheck = "sourceDestCheck"
    groupSet = "groupSet"
    ebsOptimized = "ebsOptimized"
    sriovNetSupport = "sriovNetSupport"
    enaSupport = "enaSupport"


@dataclasses.dataclass
class InstanceBlockDeviceMapping(ShapeBase):
    """
    Describes a block device mapping.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "device_name",
                "DeviceName",
                TypeInfo(str),
            ),
            (
                "ebs",
                "Ebs",
                TypeInfo(EbsInstanceBlockDevice),
            ),
        ]

    # The device name (for example, `/dev/sdh` or `xvdh`).
    device_name: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # Parameters used to automatically set up EBS volumes when the instance is
    # launched.
    ebs: "EbsInstanceBlockDevice" = dataclasses.field(default_factory=dict, )


@dataclasses.dataclass
class InstanceBlockDeviceMappingSpecification(ShapeBase):
    """
    Describes a block device mapping entry.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "device_name",
                "DeviceName",
                TypeInfo(str),
            ),
            (
                "ebs",
                "Ebs",
                TypeInfo(EbsInstanceBlockDeviceSpecification),
            ),
            (
                "no_device",
                "NoDevice",
                TypeInfo(str),
            ),
            (
                "virtual_name",
                "VirtualName",
                TypeInfo(str),
            ),
        ]

    # The device name (for example, `/dev/sdh` or `xvdh`).
    device_name: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # Parameters used to automatically set up EBS volumes when the instance is
    # launched.
    ebs: "EbsInstanceBlockDeviceSpecification" = dataclasses.field(
        default_factory=dict,
    )

    # suppress the specified device included in the block device mapping.
    no_device: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The virtual device name.
    virtual_name: str = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class InstanceCapacity(ShapeBase):
    """
    Information about the instance type that the Dedicated Host supports.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "available_capacity",
                "AvailableCapacity",
                TypeInfo(int),
            ),
            (
                "instance_type",
                "InstanceType",
                TypeInfo(str),
            ),
            (
                "total_capacity",
                "TotalCapacity",
                TypeInfo(int),
            ),
        ]

    # The number of instances that can still be launched onto the Dedicated Host.
    available_capacity: int = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The instance type size supported by the Dedicated Host.
    instance_type: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The total number of instances that can be launched onto the Dedicated Host.
    total_capacity: int = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class InstanceCount(ShapeBase):
    """
    Describes a Reserved Instance listing state.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "instance_count",
                "InstanceCount",
                TypeInfo(int),
            ),
            (
                "state",
                "State",
                TypeInfo(ListingState),
            ),
        ]

    # The number of listed Reserved Instances in the state specified by the
    # `state`.
    instance_count: int = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The states of the listed Reserved Instances.
    state: "ListingState" = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class InstanceCreditSpecification(ShapeBase):
    """
    Describes the credit option for CPU usage of a T2 instance.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "instance_id",
                "InstanceId",
                TypeInfo(str),
            ),
            (
                "cpu_credits",
                "CpuCredits",
                TypeInfo(str),
            ),
        ]

    # The ID of the instance.
    instance_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The credit option for CPU usage of the instance. Valid values are
    # `standard` and `unlimited`.
    cpu_credits: str = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class InstanceCreditSpecificationRequest(ShapeBase):
    """
    Describes the credit option for CPU usage of a T2 instance.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "instance_id",
                "InstanceId",
                TypeInfo(str),
            ),
            (
                "cpu_credits",
                "CpuCredits",
                TypeInfo(str),
            ),
        ]

    # The ID of the instance.
    instance_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The credit option for CPU usage of the instance. Valid values are
    # `standard` and `unlimited`.
    cpu_credits: str = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class InstanceExportDetails(ShapeBase):
    """
    Describes an instance to export.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "instance_id",
                "InstanceId",
                TypeInfo(str),
            ),
            (
                "target_environment",
                "TargetEnvironment",
                TypeInfo(ExportEnvironment),
            ),
        ]

    # The ID of the resource being exported.
    instance_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The target virtualization environment.
    target_environment: "ExportEnvironment" = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )


class InstanceHealthStatus(Enum):
    healthy = "healthy"
    unhealthy = "unhealthy"


class InstanceInterruptionBehavior(Enum):
    hibernate = "hibernate"
    stop = "stop"
    terminate = "terminate"


@dataclasses.dataclass
class InstanceIpv6Address(ShapeBase):
    """
    Describes an IPv6 address.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "ipv6_address",
                "Ipv6Address",
                TypeInfo(str),
            ),
        ]

    # The IPv6 address.
    ipv6_address: str = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class InstanceIpv6AddressRequest(ShapeBase):
    """
    Describes an IPv6 address.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "ipv6_address",
                "Ipv6Address",
                TypeInfo(str),
            ),
        ]

    # The IPv6 address.
    ipv6_address: str = dataclasses.field(default=ShapeBase.NOT_SET, )


class InstanceLifecycleType(Enum):
    spot = "spot"
    scheduled = "scheduled"


@dataclasses.dataclass
class InstanceMarketOptionsRequest(ShapeBase):
    """
    Describes the market (purchasing) option for the instances.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "market_type",
                "MarketType",
                TypeInfo(MarketType),
            ),
            (
                "spot_options",
                "SpotOptions",
                TypeInfo(SpotMarketOptions),
            ),
        ]

    # The market type.
    market_type: "MarketType" = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The options for Spot Instances.
    spot_options: "SpotMarketOptions" = dataclasses.field(
        default_factory=dict,
    )


@dataclasses.dataclass
class InstanceMonitoring(ShapeBase):
    """
    Describes the monitoring of an instance.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "instance_id",
                "InstanceId",
                TypeInfo(str),
            ),
            (
                "monitoring",
                "Monitoring",
                TypeInfo(Monitoring),
            ),
        ]

    # The ID of the instance.
    instance_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The monitoring for the instance.
    monitoring: "Monitoring" = dataclasses.field(default_factory=dict, )


@dataclasses.dataclass
class InstanceNetworkInterface(ShapeBase):
    """
    Describes a network interface.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "association",
                "Association",
                TypeInfo(InstanceNetworkInterfaceAssociation),
            ),
            (
                "attachment",
                "Attachment",
                TypeInfo(InstanceNetworkInterfaceAttachment),
            ),
            (
                "description",
                "Description",
                TypeInfo(str),
            ),
            (
                "groups",
                "Groups",
                TypeInfo(typing.List[GroupIdentifier]),
            ),
            (
                "ipv6_addresses",
                "Ipv6Addresses",
                TypeInfo(typing.List[InstanceIpv6Address]),
            ),
            (
                "mac_address",
                "MacAddress",
                TypeInfo(str),
            ),
            (
                "network_interface_id",
                "NetworkInterfaceId",
                TypeInfo(str),
            ),
            (
                "owner_id",
                "OwnerId",
                TypeInfo(str),
            ),
            (
                "private_dns_name",
                "PrivateDnsName",
                TypeInfo(str),
            ),
            (
                "private_ip_address",
                "PrivateIpAddress",
                TypeInfo(str),
            ),
            (
                "private_ip_addresses",
                "PrivateIpAddresses",
                TypeInfo(typing.List[InstancePrivateIpAddress]),
            ),
            (
                "source_dest_check",
                "SourceDestCheck",
                TypeInfo(bool),
            ),
            (
                "status",
                "Status",
                TypeInfo(NetworkInterfaceStatus),
            ),
            (
                "subnet_id",
                "SubnetId",
                TypeInfo(str),
            ),
            (
                "vpc_id",
                "VpcId",
                TypeInfo(str),
            ),
        ]

    # The association information for an Elastic IPv4 associated with the network
    # interface.
    association: "InstanceNetworkInterfaceAssociation" = dataclasses.field(
        default_factory=dict,
    )

    # The network interface attachment.
    attachment: "InstanceNetworkInterfaceAttachment" = dataclasses.field(
        default_factory=dict,
    )

    # The description.
    description: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # One or more security groups.
    groups: typing.List["GroupIdentifier"] = dataclasses.field(
        default_factory=list,
    )

    # One or more IPv6 addresses associated with the network interface.
    ipv6_addresses: typing.List["InstanceIpv6Address"] = dataclasses.field(
        default_factory=list,
    )

    # The MAC address.
    mac_address: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The ID of the network interface.
    network_interface_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The ID of the AWS account that created the network interface.
    owner_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The private DNS name.
    private_dns_name: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The IPv4 address of the network interface within the subnet.
    private_ip_address: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # One or more private IPv4 addresses associated with the network interface.
    private_ip_addresses: typing.List["InstancePrivateIpAddress"
                                     ] = dataclasses.field(
                                         default_factory=list,
                                     )

    # Indicates whether to validate network traffic to or from this network
    # interface.
    source_dest_check: bool = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The status of the network interface.
    status: "NetworkInterfaceStatus" = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # The ID of the subnet.
    subnet_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The ID of the VPC.
    vpc_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class InstanceNetworkInterfaceAssociation(ShapeBase):
    """
    Describes association information for an Elastic IP address (IPv4).
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "ip_owner_id",
                "IpOwnerId",
                TypeInfo(str),
            ),
            (
                "public_dns_name",
                "PublicDnsName",
                TypeInfo(str),
            ),
            (
                "public_ip",
                "PublicIp",
                TypeInfo(str),
            ),
        ]

    # The ID of the owner of the Elastic IP address.
    ip_owner_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The public DNS name.
    public_dns_name: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The public IP address or Elastic IP address bound to the network interface.
    public_ip: str = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class InstanceNetworkInterfaceAttachment(ShapeBase):
    """
    Describes a network interface attachment.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "attach_time",
                "AttachTime",
                TypeInfo(datetime.datetime),
            ),
            (
                "attachment_id",
                "AttachmentId",
                TypeInfo(str),
            ),
            (
                "delete_on_termination",
                "DeleteOnTermination",
                TypeInfo(bool),
            ),
            (
                "device_index",
                "DeviceIndex",
                TypeInfo(int),
            ),
            (
                "status",
                "Status",
                TypeInfo(AttachmentStatus),
            ),
        ]

    # The time stamp when the attachment initiated.
    attach_time: datetime.datetime = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # The ID of the network interface attachment.
    attachment_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # Indicates whether the network interface is deleted when the instance is
    # terminated.
    delete_on_termination: bool = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The index of the device on the instance for the network interface
    # attachment.
    device_index: int = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The attachment state.
    status: "AttachmentStatus" = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class InstanceNetworkInterfaceSpecification(ShapeBase):
    """
    Describes a network interface.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "associate_public_ip_address",
                "AssociatePublicIpAddress",
                TypeInfo(bool),
            ),
            (
                "delete_on_termination",
                "DeleteOnTermination",
                TypeInfo(bool),
            ),
            (
                "description",
                "Description",
                TypeInfo(str),
            ),
            (
                "device_index",
                "DeviceIndex",
                TypeInfo(int),
            ),
            (
                "groups",
                "Groups",
                TypeInfo(typing.List[str]),
            ),
            (
                "ipv6_address_count",
                "Ipv6AddressCount",
                TypeInfo(int),
            ),
            (
                "ipv6_addresses",
                "Ipv6Addresses",
                TypeInfo(typing.List[InstanceIpv6Address]),
            ),
            (
                "network_interface_id",
                "NetworkInterfaceId",
                TypeInfo(str),
            ),
            (
                "private_ip_address",
                "PrivateIpAddress",
                TypeInfo(str),
            ),
            (
                "private_ip_addresses",
                "PrivateIpAddresses",
                TypeInfo(typing.List[PrivateIpAddressSpecification]),
            ),
            (
                "secondary_private_ip_address_count",
                "SecondaryPrivateIpAddressCount",
                TypeInfo(int),
            ),
            (
                "subnet_id",
                "SubnetId",
                TypeInfo(str),
            ),
        ]

    # Indicates whether to assign a public IPv4 address to an instance you launch
    # in a VPC. The public IP address can only be assigned to a network interface
    # for eth0, and can only be assigned to a new network interface, not an
    # existing one. You cannot specify more than one network interface in the
    # request. If launching into a default subnet, the default value is `true`.
    associate_public_ip_address: bool = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # If set to `true`, the interface is deleted when the instance is terminated.
    # You can specify `true` only if creating a new network interface when
    # launching an instance.
    delete_on_termination: bool = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The description of the network interface. Applies only if creating a
    # network interface when launching an instance.
    description: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The index of the device on the instance for the network interface
    # attachment. If you are specifying a network interface in a RunInstances
    # request, you must provide the device index.
    device_index: int = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The IDs of the security groups for the network interface. Applies only if
    # creating a network interface when launching an instance.
    groups: typing.List[str] = dataclasses.field(default_factory=list, )

    # A number of IPv6 addresses to assign to the network interface. Amazon EC2
    # chooses the IPv6 addresses from the range of the subnet. You cannot specify
    # this option and the option to assign specific IPv6 addresses in the same
    # request. You can specify this option if you've specified a minimum number
    # of instances to launch.
    ipv6_address_count: int = dataclasses.field(default=ShapeBase.NOT_SET, )

    # One or more IPv6 addresses to assign to the network interface. You cannot
    # specify this option and the option to assign a number of IPv6 addresses in
    # the same request. You cannot specify this option if you've specified a
    # minimum number of instances to launch.
    ipv6_addresses: typing.List["InstanceIpv6Address"] = dataclasses.field(
        default_factory=list,
    )

    # The ID of the network interface.
    network_interface_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The private IPv4 address of the network interface. Applies only if creating
    # a network interface when launching an instance. You cannot specify this
    # option if you're launching more than one instance in a RunInstances
    # request.
    private_ip_address: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # One or more private IPv4 addresses to assign to the network interface. Only
    # one private IPv4 address can be designated as primary. You cannot specify
    # this option if you're launching more than one instance in a RunInstances
    # request.
    private_ip_addresses: typing.List["PrivateIpAddressSpecification"
                                     ] = dataclasses.field(
                                         default_factory=list,
                                     )

    # The number of secondary private IPv4 addresses. You can't specify this
    # option and specify more than one private IP address using the private IP
    # addresses option. You cannot specify this option if you're launching more
    # than one instance in a RunInstances request.
    secondary_private_ip_address_count: int = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # The ID of the subnet associated with the network string. Applies only if
    # creating a network interface when launching an instance.
    subnet_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class InstancePrivateIpAddress(ShapeBase):
    """
    Describes a private IPv4 address.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "association",
                "Association",
                TypeInfo(InstanceNetworkInterfaceAssociation),
            ),
            (
                "primary",
                "Primary",
                TypeInfo(bool),
            ),
            (
                "private_dns_name",
                "PrivateDnsName",
                TypeInfo(str),
            ),
            (
                "private_ip_address",
                "PrivateIpAddress",
                TypeInfo(str),
            ),
        ]

    # The association information for an Elastic IP address for the network
    # interface.
    association: "InstanceNetworkInterfaceAssociation" = dataclasses.field(
        default_factory=dict,
    )

    # Indicates whether this IPv4 address is the primary private IP address of
    # the network interface.
    primary: bool = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The private IPv4 DNS name.
    private_dns_name: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The private IPv4 address of the network interface.
    private_ip_address: str = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class InstanceState(ShapeBase):
    """
    Describes the current state of an instance.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "code",
                "Code",
                TypeInfo(int),
            ),
            (
                "name",
                "Name",
                TypeInfo(InstanceStateName),
            ),
        ]

    # The low byte represents the state. The high byte is used for internal
    # purposes and should be ignored.

    #   * `0` : `pending`

    #   * `16` : `running`

    #   * `32` : `shutting-down`

    #   * `48` : `terminated`

    #   * `64` : `stopping`

    #   * `80` : `stopped`
    code: int = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The current state of the instance.
    name: "InstanceStateName" = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class InstanceStateChange(ShapeBase):
    """
    Describes an instance state change.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "current_state",
                "CurrentState",
                TypeInfo(InstanceState),
            ),
            (
                "instance_id",
                "InstanceId",
                TypeInfo(str),
            ),
            (
                "previous_state",
                "PreviousState",
                TypeInfo(InstanceState),
            ),
        ]

    # The current state of the instance.
    current_state: "InstanceState" = dataclasses.field(default_factory=dict, )

    # The ID of the instance.
    instance_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The previous state of the instance.
    previous_state: "InstanceState" = dataclasses.field(default_factory=dict, )


class InstanceStateName(Enum):
    pending = "pending"
    running = "running"
    shutting_down = "shutting-down"
    terminated = "terminated"
    stopping = "stopping"
    stopped = "stopped"


@dataclasses.dataclass
class InstanceStatus(ShapeBase):
    """
    Describes the status of an instance.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "availability_zone",
                "AvailabilityZone",
                TypeInfo(str),
            ),
            (
                "events",
                "Events",
                TypeInfo(typing.List[InstanceStatusEvent]),
            ),
            (
                "instance_id",
                "InstanceId",
                TypeInfo(str),
            ),
            (
                "instance_state",
                "InstanceState",
                TypeInfo(InstanceState),
            ),
            (
                "instance_status",
                "InstanceStatus",
                TypeInfo(InstanceStatusSummary),
            ),
            (
                "system_status",
                "SystemStatus",
                TypeInfo(InstanceStatusSummary),
            ),
        ]

    # The Availability Zone of the instance.
    availability_zone: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # Any scheduled events associated with the instance.
    events: typing.List["InstanceStatusEvent"] = dataclasses.field(
        default_factory=list,
    )

    # The ID of the instance.
    instance_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The intended state of the instance. DescribeInstanceStatus requires that an
    # instance be in the `running` state.
    instance_state: "InstanceState" = dataclasses.field(default_factory=dict, )

    # Reports impaired functionality that stems from issues internal to the
    # instance, such as impaired reachability.
    instance_status: "InstanceStatusSummary" = dataclasses.field(
        default_factory=dict,
    )

    # Reports impaired functionality that stems from issues related to the
    # systems that support an instance, such as hardware failures and network
    # connectivity problems.
    system_status: "InstanceStatusSummary" = dataclasses.field(
        default_factory=dict,
    )


@dataclasses.dataclass
class InstanceStatusDetails(ShapeBase):
    """
    Describes the instance status.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "impaired_since",
                "ImpairedSince",
                TypeInfo(datetime.datetime),
            ),
            (
                "name",
                "Name",
                TypeInfo(StatusName),
            ),
            (
                "status",
                "Status",
                TypeInfo(StatusType),
            ),
        ]

    # The time when a status check failed. For an instance that was launched and
    # impaired, this is the time when the instance was launched.
    impaired_since: datetime.datetime = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # The type of instance status.
    name: "StatusName" = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The status.
    status: "StatusType" = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class InstanceStatusEvent(ShapeBase):
    """
    Describes a scheduled event for an instance.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "code",
                "Code",
                TypeInfo(EventCode),
            ),
            (
                "description",
                "Description",
                TypeInfo(str),
            ),
            (
                "not_after",
                "NotAfter",
                TypeInfo(datetime.datetime),
            ),
            (
                "not_before",
                "NotBefore",
                TypeInfo(datetime.datetime),
            ),
        ]

    # The event code.
    code: "EventCode" = dataclasses.field(default=ShapeBase.NOT_SET, )

    # A description of the event.

    # After a scheduled event is completed, it can still be described for up to a
    # week. If the event has been completed, this description starts with the
    # following text: [Completed].
    description: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The latest scheduled end time for the event.
    not_after: datetime.datetime = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # The earliest scheduled start time for the event.
    not_before: datetime.datetime = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )


@dataclasses.dataclass
class InstanceStatusSummary(ShapeBase):
    """
    Describes the status of an instance.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "details",
                "Details",
                TypeInfo(typing.List[InstanceStatusDetails]),
            ),
            (
                "status",
                "Status",
                TypeInfo(SummaryStatus),
            ),
        ]

    # The system instance health or application instance health.
    details: typing.List["InstanceStatusDetails"] = dataclasses.field(
        default_factory=list,
    )

    # The status.
    status: "SummaryStatus" = dataclasses.field(default=ShapeBase.NOT_SET, )


class InstanceType(Enum):
    t1_micro = "t1.micro"
    t2_nano = "t2.nano"
    t2_micro = "t2.micro"
    t2_small = "t2.small"
    t2_medium = "t2.medium"
    t2_large = "t2.large"
    t2_xlarge = "t2.xlarge"
    t2_2xlarge = "t2.2xlarge"
    t3_nano = "t3.nano"
    t3_micro = "t3.micro"
    t3_small = "t3.small"
    t3_medium = "t3.medium"
    t3_large = "t3.large"
    t3_xlarge = "t3.xlarge"
    t3_2xlarge = "t3.2xlarge"
    m1_small = "m1.small"
    m1_medium = "m1.medium"
    m1_large = "m1.large"
    m1_xlarge = "m1.xlarge"
    m3_medium = "m3.medium"
    m3_large = "m3.large"
    m3_xlarge = "m3.xlarge"
    m3_2xlarge = "m3.2xlarge"
    m4_large = "m4.large"
    m4_xlarge = "m4.xlarge"
    m4_2xlarge = "m4.2xlarge"
    m4_4xlarge = "m4.4xlarge"
    m4_10xlarge = "m4.10xlarge"
    m4_16xlarge = "m4.16xlarge"
    m2_xlarge = "m2.xlarge"
    m2_2xlarge = "m2.2xlarge"
    m2_4xlarge = "m2.4xlarge"
    cr1_8xlarge = "cr1.8xlarge"
    r3_large = "r3.large"
    r3_xlarge = "r3.xlarge"
    r3_2xlarge = "r3.2xlarge"
    r3_4xlarge = "r3.4xlarge"
    r3_8xlarge = "r3.8xlarge"
    r4_large = "r4.large"
    r4_xlarge = "r4.xlarge"
    r4_2xlarge = "r4.2xlarge"
    r4_4xlarge = "r4.4xlarge"
    r4_8xlarge = "r4.8xlarge"
    r4_16xlarge = "r4.16xlarge"
    r5_large = "r5.large"
    r5_xlarge = "r5.xlarge"
    r5_2xlarge = "r5.2xlarge"
    r5_4xlarge = "r5.4xlarge"
    r5_8xlarge = "r5.8xlarge"
    r5_12xlarge = "r5.12xlarge"
    r5_16xlarge = "r5.16xlarge"
    r5_24xlarge = "r5.24xlarge"
    r5_metal = "r5.metal"
    r5d_large = "r5d.large"
    r5d_xlarge = "r5d.xlarge"
    r5d_2xlarge = "r5d.2xlarge"
    r5d_4xlarge = "r5d.4xlarge"
    r5d_8xlarge = "r5d.8xlarge"
    r5d_12xlarge = "r5d.12xlarge"
    r5d_16xlarge = "r5d.16xlarge"
    r5d_24xlarge = "r5d.24xlarge"
    r5d_metal = "r5d.metal"
    x1_16xlarge = "x1.16xlarge"
    x1_32xlarge = "x1.32xlarge"
    x1e_xlarge = "x1e.xlarge"
    x1e_2xlarge = "x1e.2xlarge"
    x1e_4xlarge = "x1e.4xlarge"
    x1e_8xlarge = "x1e.8xlarge"
    x1e_16xlarge = "x1e.16xlarge"
    x1e_32xlarge = "x1e.32xlarge"
    i2_xlarge = "i2.xlarge"
    i2_2xlarge = "i2.2xlarge"
    i2_4xlarge = "i2.4xlarge"
    i2_8xlarge = "i2.8xlarge"
    i3_large = "i3.large"
    i3_xlarge = "i3.xlarge"
    i3_2xlarge = "i3.2xlarge"
    i3_4xlarge = "i3.4xlarge"
    i3_8xlarge = "i3.8xlarge"
    i3_16xlarge = "i3.16xlarge"
    i3_metal = "i3.metal"
    hi1_4xlarge = "hi1.4xlarge"
    hs1_8xlarge = "hs1.8xlarge"
    c1_medium = "c1.medium"
    c1_xlarge = "c1.xlarge"
    c3_large = "c3.large"
    c3_xlarge = "c3.xlarge"
    c3_2xlarge = "c3.2xlarge"
    c3_4xlarge = "c3.4xlarge"
    c3_8xlarge = "c3.8xlarge"
    c4_large = "c4.large"
    c4_xlarge = "c4.xlarge"
    c4_2xlarge = "c4.2xlarge"
    c4_4xlarge = "c4.4xlarge"
    c4_8xlarge = "c4.8xlarge"
    c5_large = "c5.large"
    c5_xlarge = "c5.xlarge"
    c5_2xlarge = "c5.2xlarge"
    c5_4xlarge = "c5.4xlarge"
    c5_9xlarge = "c5.9xlarge"
    c5_18xlarge = "c5.18xlarge"
    c5d_large = "c5d.large"
    c5d_xlarge = "c5d.xlarge"
    c5d_2xlarge = "c5d.2xlarge"
    c5d_4xlarge = "c5d.4xlarge"
    c5d_9xlarge = "c5d.9xlarge"
    c5d_18xlarge = "c5d.18xlarge"
    cc1_4xlarge = "cc1.4xlarge"
    cc2_8xlarge = "cc2.8xlarge"
    g2_2xlarge = "g2.2xlarge"
    g2_8xlarge = "g2.8xlarge"
    g3_4xlarge = "g3.4xlarge"
    g3_8xlarge = "g3.8xlarge"
    g3_16xlarge = "g3.16xlarge"
    cg1_4xlarge = "cg1.4xlarge"
    p2_xlarge = "p2.xlarge"
    p2_8xlarge = "p2.8xlarge"
    p2_16xlarge = "p2.16xlarge"
    p3_2xlarge = "p3.2xlarge"
    p3_8xlarge = "p3.8xlarge"
    p3_16xlarge = "p3.16xlarge"
    d2_xlarge = "d2.xlarge"
    d2_2xlarge = "d2.2xlarge"
    d2_4xlarge = "d2.4xlarge"
    d2_8xlarge = "d2.8xlarge"
    f1_2xlarge = "f1.2xlarge"
    f1_16xlarge = "f1.16xlarge"
    m5_large = "m5.large"
    m5_xlarge = "m5.xlarge"
    m5_2xlarge = "m5.2xlarge"
    m5_4xlarge = "m5.4xlarge"
    m5_12xlarge = "m5.12xlarge"
    m5_24xlarge = "m5.24xlarge"
    m5d_large = "m5d.large"
    m5d_xlarge = "m5d.xlarge"
    m5d_2xlarge = "m5d.2xlarge"
    m5d_4xlarge = "m5d.4xlarge"
    m5d_12xlarge = "m5d.12xlarge"
    m5d_24xlarge = "m5d.24xlarge"
    h1_2xlarge = "h1.2xlarge"
    h1_4xlarge = "h1.4xlarge"
    h1_8xlarge = "h1.8xlarge"
    h1_16xlarge = "h1.16xlarge"
    z1d_large = "z1d.large"
    z1d_xlarge = "z1d.xlarge"
    z1d_2xlarge = "z1d.2xlarge"
    z1d_3xlarge = "z1d.3xlarge"
    z1d_6xlarge = "z1d.6xlarge"
    z1d_12xlarge = "z1d.12xlarge"


class InterfacePermissionType(Enum):
    INSTANCE_ATTACH = "INSTANCE-ATTACH"
    EIP_ASSOCIATE = "EIP-ASSOCIATE"


@dataclasses.dataclass
class InternetGateway(ShapeBase):
    """
    Describes an internet gateway.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "attachments",
                "Attachments",
                TypeInfo(typing.List[InternetGatewayAttachment]),
            ),
            (
                "internet_gateway_id",
                "InternetGatewayId",
                TypeInfo(str),
            ),
            (
                "tags",
                "Tags",
                TypeInfo(typing.List[Tag]),
            ),
        ]

    # Any VPCs attached to the internet gateway.
    attachments: typing.List["InternetGatewayAttachment"] = dataclasses.field(
        default_factory=list,
    )

    # The ID of the internet gateway.
    internet_gateway_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # Any tags assigned to the internet gateway.
    tags: typing.List["Tag"] = dataclasses.field(default_factory=list, )


@dataclasses.dataclass
class InternetGatewayAttachment(ShapeBase):
    """
    Describes the attachment of a VPC to an internet gateway or an egress-only
    internet gateway.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "state",
                "State",
                TypeInfo(AttachmentStatus),
            ),
            (
                "vpc_id",
                "VpcId",
                TypeInfo(str),
            ),
        ]

    # The current state of the attachment. For an internet gateway, the state is
    # `available` when attached to a VPC; otherwise, this value is not returned.
    state: "AttachmentStatus" = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The ID of the VPC.
    vpc_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class IpPermission(ShapeBase):
    """
    Describes a set of permissions for a security group rule.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "from_port",
                "FromPort",
                TypeInfo(int),
            ),
            (
                "ip_protocol",
                "IpProtocol",
                TypeInfo(str),
            ),
            (
                "ip_ranges",
                "IpRanges",
                TypeInfo(typing.List[IpRange]),
            ),
            (
                "ipv6_ranges",
                "Ipv6Ranges",
                TypeInfo(typing.List[Ipv6Range]),
            ),
            (
                "prefix_list_ids",
                "PrefixListIds",
                TypeInfo(typing.List[PrefixListId]),
            ),
            (
                "to_port",
                "ToPort",
                TypeInfo(int),
            ),
            (
                "user_id_group_pairs",
                "UserIdGroupPairs",
                TypeInfo(typing.List[UserIdGroupPair]),
            ),
        ]

    # The start of port range for the TCP and UDP protocols, or an ICMP/ICMPv6
    # type number. A value of `-1` indicates all ICMP/ICMPv6 types. If you
    # specify all ICMP/ICMPv6 types, you must specify all codes.
    from_port: int = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The IP protocol name (`tcp`, `udp`, `icmp`) or number (see [Protocol
    # Numbers](http://www.iana.org/assignments/protocol-numbers/protocol-
    # numbers.xhtml)).

    # [EC2-VPC only] Use `-1` to specify all protocols. When authorizing security
    # group rules, specifying `-1` or a protocol number other than `tcp`, `udp`,
    # `icmp`, or `58` (ICMPv6) allows traffic on all ports, regardless of any
    # port range you specify. For `tcp`, `udp`, and `icmp`, you must specify a
    # port range. For `58` (ICMPv6), you can optionally specify a port range; if
    # you don't, traffic for all types and codes is allowed when authorizing
    # rules.
    ip_protocol: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # One or more IPv4 ranges.
    ip_ranges: typing.List["IpRange"] = dataclasses.field(
        default_factory=list,
    )

    # [EC2-VPC only] One or more IPv6 ranges.
    ipv6_ranges: typing.List["Ipv6Range"] = dataclasses.field(
        default_factory=list,
    )

    # (EC2-VPC only; valid for AuthorizeSecurityGroupEgress,
    # RevokeSecurityGroupEgress and DescribeSecurityGroups only) One or more
    # prefix list IDs for an AWS service. In an AuthorizeSecurityGroupEgress
    # request, this is the AWS service that you want to access through a VPC
    # endpoint from instances associated with the security group.
    prefix_list_ids: typing.List["PrefixListId"] = dataclasses.field(
        default_factory=list,
    )

    # The end of port range for the TCP and UDP protocols, or an ICMP/ICMPv6
    # code. A value of `-1` indicates all ICMP/ICMPv6 codes for the specified
    # ICMP type. If you specify all ICMP/ICMPv6 types, you must specify all
    # codes.
    to_port: int = dataclasses.field(default=ShapeBase.NOT_SET, )

    # One or more security group and AWS account ID pairs.
    user_id_group_pairs: typing.List["UserIdGroupPair"] = dataclasses.field(
        default_factory=list,
    )


@dataclasses.dataclass
class IpRange(ShapeBase):
    """
    Describes an IPv4 range.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "cidr_ip",
                "CidrIp",
                TypeInfo(str),
            ),
            (
                "description",
                "Description",
                TypeInfo(str),
            ),
        ]

    # The IPv4 CIDR range. You can either specify a CIDR range or a source
    # security group, not both. To specify a single IPv4 address, use the /32
    # prefix length.
    cidr_ip: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # A description for the security group rule that references this IPv4 address
    # range.

    # Constraints: Up to 255 characters in length. Allowed characters are a-z,
    # A-Z, 0-9, spaces, and ._-:/()#,@[]+=;{}!$*
    description: str = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class Ipv6CidrBlock(ShapeBase):
    """
    Describes an IPv6 CIDR block.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "ipv6_cidr_block",
                "Ipv6CidrBlock",
                TypeInfo(str),
            ),
        ]

    # The IPv6 CIDR block.
    ipv6_cidr_block: str = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class Ipv6Range(ShapeBase):
    """
    [EC2-VPC only] Describes an IPv6 range.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "cidr_ipv6",
                "CidrIpv6",
                TypeInfo(str),
            ),
            (
                "description",
                "Description",
                TypeInfo(str),
            ),
        ]

    # The IPv6 CIDR range. You can either specify a CIDR range or a source
    # security group, not both. To specify a single IPv6 address, use the /128
    # prefix length.
    cidr_ipv6: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # A description for the security group rule that references this IPv6 address
    # range.

    # Constraints: Up to 255 characters in length. Allowed characters are a-z,
    # A-Z, 0-9, spaces, and ._-:/()#,@[]+=;{}!$*
    description: str = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class KeyPair(OutputShapeBase):
    """
    Describes a key pair.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "response_metadata",
                "ResponseMetadata",
                TypeInfo(typing.Dict[str, str]),
            ),
            (
                "key_fingerprint",
                "KeyFingerprint",
                TypeInfo(str),
            ),
            (
                "key_material",
                "KeyMaterial",
                TypeInfo(str),
            ),
            (
                "key_name",
                "KeyName",
                TypeInfo(str),
            ),
        ]

    response_metadata: typing.Dict[str, str] = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # The SHA-1 digest of the DER encoded private key.
    key_fingerprint: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # An unencrypted PEM encoded RSA private key.
    key_material: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The name of the key pair.
    key_name: str = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class KeyPairInfo(ShapeBase):
    """
    Describes a key pair.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "key_fingerprint",
                "KeyFingerprint",
                TypeInfo(str),
            ),
            (
                "key_name",
                "KeyName",
                TypeInfo(str),
            ),
        ]

    # If you used CreateKeyPair to create the key pair, this is the SHA-1 digest
    # of the DER encoded private key. If you used ImportKeyPair to provide AWS
    # the public key, this is the MD5 public key fingerprint as specified in
    # section 4 of RFC4716.
    key_fingerprint: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The name of the key pair.
    key_name: str = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class LaunchPermission(ShapeBase):
    """
    Describes a launch permission.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "group",
                "Group",
                TypeInfo(PermissionGroup),
            ),
            (
                "user_id",
                "UserId",
                TypeInfo(str),
            ),
        ]

    # The name of the group.
    group: "PermissionGroup" = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The AWS account ID.
    user_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class LaunchPermissionModifications(ShapeBase):
    """
    Describes a launch permission modification.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "add",
                "Add",
                TypeInfo(typing.List[LaunchPermission]),
            ),
            (
                "remove",
                "Remove",
                TypeInfo(typing.List[LaunchPermission]),
            ),
        ]

    # The AWS account ID to add to the list of launch permissions for the AMI.
    add: typing.List["LaunchPermission"] = dataclasses.field(
        default_factory=list,
    )

    # The AWS account ID to remove from the list of launch permissions for the
    # AMI.
    remove: typing.List["LaunchPermission"] = dataclasses.field(
        default_factory=list,
    )


@dataclasses.dataclass
class LaunchSpecification(ShapeBase):
    """
    Describes the launch specification for an instance.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "user_data",
                "UserData",
                TypeInfo(str),
            ),
            (
                "security_groups",
                "SecurityGroups",
                TypeInfo(typing.List[GroupIdentifier]),
            ),
            (
                "addressing_type",
                "AddressingType",
                TypeInfo(str),
            ),
            (
                "block_device_mappings",
                "BlockDeviceMappings",
                TypeInfo(typing.List[BlockDeviceMapping]),
            ),
            (
                "ebs_optimized",
                "EbsOptimized",
                TypeInfo(bool),
            ),
            (
                "iam_instance_profile",
                "IamInstanceProfile",
                TypeInfo(IamInstanceProfileSpecification),
            ),
            (
                "image_id",
                "ImageId",
                TypeInfo(str),
            ),
            (
                "instance_type",
                "InstanceType",
                TypeInfo(InstanceType),
            ),
            (
                "kernel_id",
                "KernelId",
                TypeInfo(str),
            ),
            (
                "key_name",
                "KeyName",
                TypeInfo(str),
            ),
            (
                "network_interfaces",
                "NetworkInterfaces",
                TypeInfo(typing.List[InstanceNetworkInterfaceSpecification]),
            ),
            (
                "placement",
                "Placement",
                TypeInfo(SpotPlacement),
            ),
            (
                "ramdisk_id",
                "RamdiskId",
                TypeInfo(str),
            ),
            (
                "subnet_id",
                "SubnetId",
                TypeInfo(str),
            ),
            (
                "monitoring",
                "Monitoring",
                TypeInfo(RunInstancesMonitoringEnabled),
            ),
        ]

    # The Base64-encoded user data for the instance.
    user_data: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # One or more security groups. When requesting instances in a VPC, you must
    # specify the IDs of the security groups. When requesting instances in
    # EC2-Classic, you can specify the names or the IDs of the security groups.
    security_groups: typing.List["GroupIdentifier"] = dataclasses.field(
        default_factory=list,
    )

    # Deprecated.
    addressing_type: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # One or more block device mapping entries.
    block_device_mappings: typing.List["BlockDeviceMapping"
                                      ] = dataclasses.field(
                                          default_factory=list,
                                      )

    # Indicates whether the instance is optimized for EBS I/O. This optimization
    # provides dedicated throughput to Amazon EBS and an optimized configuration
    # stack to provide optimal EBS I/O performance. This optimization isn't
    # available with all instance types. Additional usage charges apply when
    # using an EBS Optimized instance.

    # Default: `false`
    ebs_optimized: bool = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The IAM instance profile.
    iam_instance_profile: "IamInstanceProfileSpecification" = dataclasses.field(
        default_factory=dict,
    )

    # The ID of the AMI.
    image_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The instance type.
    instance_type: "InstanceType" = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # The ID of the kernel.
    kernel_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The name of the key pair.
    key_name: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # One or more network interfaces. If you specify a network interface, you
    # must specify subnet IDs and security group IDs using the network interface.
    network_interfaces: typing.List["InstanceNetworkInterfaceSpecification"
                                   ] = dataclasses.field(
                                       default_factory=list,
                                   )

    # The placement information for the instance.
    placement: "SpotPlacement" = dataclasses.field(default_factory=dict, )

    # The ID of the RAM disk.
    ramdisk_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The ID of the subnet in which to launch the instance.
    subnet_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # Describes the monitoring of an instance.
    monitoring: "RunInstancesMonitoringEnabled" = dataclasses.field(
        default_factory=dict,
    )


@dataclasses.dataclass
class LaunchTemplate(ShapeBase):
    """
    Describes a launch template.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "launch_template_id",
                "LaunchTemplateId",
                TypeInfo(str),
            ),
            (
                "launch_template_name",
                "LaunchTemplateName",
                TypeInfo(str),
            ),
            (
                "create_time",
                "CreateTime",
                TypeInfo(datetime.datetime),
            ),
            (
                "created_by",
                "CreatedBy",
                TypeInfo(str),
            ),
            (
                "default_version_number",
                "DefaultVersionNumber",
                TypeInfo(int),
            ),
            (
                "latest_version_number",
                "LatestVersionNumber",
                TypeInfo(int),
            ),
            (
                "tags",
                "Tags",
                TypeInfo(typing.List[Tag]),
            ),
        ]

    # The ID of the launch template.
    launch_template_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The name of the launch template.
    launch_template_name: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The time launch template was created.
    create_time: datetime.datetime = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # The principal that created the launch template.
    created_by: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The version number of the default version of the launch template.
    default_version_number: int = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The version number of the latest version of the launch template.
    latest_version_number: int = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The tags for the launch template.
    tags: typing.List["Tag"] = dataclasses.field(default_factory=list, )


@dataclasses.dataclass
class LaunchTemplateBlockDeviceMapping(ShapeBase):
    """
    Describes a block device mapping.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "device_name",
                "DeviceName",
                TypeInfo(str),
            ),
            (
                "virtual_name",
                "VirtualName",
                TypeInfo(str),
            ),
            (
                "ebs",
                "Ebs",
                TypeInfo(LaunchTemplateEbsBlockDevice),
            ),
            (
                "no_device",
                "NoDevice",
                TypeInfo(str),
            ),
        ]

    # The device name.
    device_name: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The virtual device name (ephemeralN).
    virtual_name: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # Information about the block device for an EBS volume.
    ebs: "LaunchTemplateEbsBlockDevice" = dataclasses.field(
        default_factory=dict,
    )

    # Suppresses the specified device included in the block device mapping of the
    # AMI.
    no_device: str = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class LaunchTemplateBlockDeviceMappingRequest(ShapeBase):
    """
    Describes a block device mapping.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "device_name",
                "DeviceName",
                TypeInfo(str),
            ),
            (
                "virtual_name",
                "VirtualName",
                TypeInfo(str),
            ),
            (
                "ebs",
                "Ebs",
                TypeInfo(LaunchTemplateEbsBlockDeviceRequest),
            ),
            (
                "no_device",
                "NoDevice",
                TypeInfo(str),
            ),
        ]

    # The device name (for example, /dev/sdh or xvdh).
    device_name: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The virtual device name (ephemeralN). Instance store volumes are numbered
    # starting from 0. An instance type with 2 available instance store volumes
    # can specify mappings for ephemeral0 and ephemeral1. The number of available
    # instance store volumes depends on the instance type. After you connect to
    # the instance, you must mount the volume.
    virtual_name: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # Parameters used to automatically set up EBS volumes when the instance is
    # launched.
    ebs: "LaunchTemplateEbsBlockDeviceRequest" = dataclasses.field(
        default_factory=dict,
    )

    # Suppresses the specified device included in the block device mapping of the
    # AMI.
    no_device: str = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class LaunchTemplateConfig(ShapeBase):
    """
    Describes a launch template and overrides.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "launch_template_specification",
                "LaunchTemplateSpecification",
                TypeInfo(FleetLaunchTemplateSpecification),
            ),
            (
                "overrides",
                "Overrides",
                TypeInfo(typing.List[LaunchTemplateOverrides]),
            ),
        ]

    # The launch template.
    launch_template_specification: "FleetLaunchTemplateSpecification" = dataclasses.field(
        default_factory=dict,
    )

    # Any parameters that you specify override the same parameters in the launch
    # template.
    overrides: typing.List["LaunchTemplateOverrides"] = dataclasses.field(
        default_factory=list,
    )


@dataclasses.dataclass
class LaunchTemplateCpuOptions(ShapeBase):
    """
    The CPU options for the instance.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "core_count",
                "CoreCount",
                TypeInfo(int),
            ),
            (
                "threads_per_core",
                "ThreadsPerCore",
                TypeInfo(int),
            ),
        ]

    # The number of CPU cores for the instance.
    core_count: int = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The number of threads per CPU core.
    threads_per_core: int = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class LaunchTemplateCpuOptionsRequest(ShapeBase):
    """
    The CPU options for the instance. Both the core count and threads per core must
    be specified in the request.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "core_count",
                "CoreCount",
                TypeInfo(int),
            ),
            (
                "threads_per_core",
                "ThreadsPerCore",
                TypeInfo(int),
            ),
        ]

    # The number of CPU cores for the instance.
    core_count: int = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The number of threads per CPU core. To disable Intel Hyper-Threading
    # Technology for the instance, specify a value of 1. Otherwise, specify the
    # default value of 2.
    threads_per_core: int = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class LaunchTemplateEbsBlockDevice(ShapeBase):
    """
    Describes a block device for an EBS volume.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "encrypted",
                "Encrypted",
                TypeInfo(bool),
            ),
            (
                "delete_on_termination",
                "DeleteOnTermination",
                TypeInfo(bool),
            ),
            (
                "iops",
                "Iops",
                TypeInfo(int),
            ),
            (
                "kms_key_id",
                "KmsKeyId",
                TypeInfo(str),
            ),
            (
                "snapshot_id",
                "SnapshotId",
                TypeInfo(str),
            ),
            (
                "volume_size",
                "VolumeSize",
                TypeInfo(int),
            ),
            (
                "volume_type",
                "VolumeType",
                TypeInfo(VolumeType),
            ),
        ]

    # Indicates whether the EBS volume is encrypted.
    encrypted: bool = dataclasses.field(default=ShapeBase.NOT_SET, )

    # Indicates whether the EBS volume is deleted on instance termination.
    delete_on_termination: bool = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The number of I/O operations per second (IOPS) that the volume supports.
    iops: int = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The ARN of the AWS Key Management Service (AWS KMS) CMK used for
    # encryption.
    kms_key_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The ID of the snapshot.
    snapshot_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The size of the volume, in GiB.
    volume_size: int = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The volume type.
    volume_type: "VolumeType" = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class LaunchTemplateEbsBlockDeviceRequest(ShapeBase):
    """
    The parameters for a block device for an EBS volume.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "encrypted",
                "Encrypted",
                TypeInfo(bool),
            ),
            (
                "delete_on_termination",
                "DeleteOnTermination",
                TypeInfo(bool),
            ),
            (
                "iops",
                "Iops",
                TypeInfo(int),
            ),
            (
                "kms_key_id",
                "KmsKeyId",
                TypeInfo(str),
            ),
            (
                "snapshot_id",
                "SnapshotId",
                TypeInfo(str),
            ),
            (
                "volume_size",
                "VolumeSize",
                TypeInfo(int),
            ),
            (
                "volume_type",
                "VolumeType",
                TypeInfo(VolumeType),
            ),
        ]

    # Indicates whether the EBS volume is encrypted. Encrypted volumes can only
    # be attached to instances that support Amazon EBS encryption. If you are
    # creating a volume from a snapshot, you can't specify an encryption value.
    encrypted: bool = dataclasses.field(default=ShapeBase.NOT_SET, )

    # Indicates whether the EBS volume is deleted on instance termination.
    delete_on_termination: bool = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The number of I/O operations per second (IOPS) that the volume supports.
    # For io1, this represents the number of IOPS that are provisioned for the
    # volume. For gp2, this represents the baseline performance of the volume and
    # the rate at which the volume accumulates I/O credits for bursting. For more
    # information about General Purpose SSD baseline performance, I/O credits,
    # and bursting, see Amazon EBS Volume Types in the Amazon Elastic Compute
    # Cloud User Guide.

    # Condition: This parameter is required for requests to create io1 volumes;
    # it is not used in requests to create gp2, st1, sc1, or standard volumes.
    iops: int = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The ARN of the AWS Key Management Service (AWS KMS) CMK used for
    # encryption.
    kms_key_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The ID of the snapshot.
    snapshot_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The size of the volume, in GiB.

    # Default: If you're creating the volume from a snapshot and don't specify a
    # volume size, the default is the snapshot size.
    volume_size: int = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The volume type.
    volume_type: "VolumeType" = dataclasses.field(default=ShapeBase.NOT_SET, )


class LaunchTemplateErrorCode(Enum):
    launchTemplateIdDoesNotExist = "launchTemplateIdDoesNotExist"
    launchTemplateIdMalformed = "launchTemplateIdMalformed"
    launchTemplateNameDoesNotExist = "launchTemplateNameDoesNotExist"
    launchTemplateNameMalformed = "launchTemplateNameMalformed"
    launchTemplateVersionDoesNotExist = "launchTemplateVersionDoesNotExist"
    unexpectedError = "unexpectedError"


@dataclasses.dataclass
class LaunchTemplateIamInstanceProfileSpecification(ShapeBase):
    """
    Describes an IAM instance profile.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "arn",
                "Arn",
                TypeInfo(str),
            ),
            (
                "name",
                "Name",
                TypeInfo(str),
            ),
        ]

    # The Amazon Resource Name (ARN) of the instance profile.
    arn: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The name of the instance profile.
    name: str = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class LaunchTemplateIamInstanceProfileSpecificationRequest(ShapeBase):
    """
    An IAM instance profile.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "arn",
                "Arn",
                TypeInfo(str),
            ),
            (
                "name",
                "Name",
                TypeInfo(str),
            ),
        ]

    # The Amazon Resource Name (ARN) of the instance profile.
    arn: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The name of the instance profile.
    name: str = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class LaunchTemplateInstanceMarketOptions(ShapeBase):
    """
    The market (purchasing) option for the instances.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "market_type",
                "MarketType",
                TypeInfo(MarketType),
            ),
            (
                "spot_options",
                "SpotOptions",
                TypeInfo(LaunchTemplateSpotMarketOptions),
            ),
        ]

    # The market type.
    market_type: "MarketType" = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The options for Spot Instances.
    spot_options: "LaunchTemplateSpotMarketOptions" = dataclasses.field(
        default_factory=dict,
    )


@dataclasses.dataclass
class LaunchTemplateInstanceMarketOptionsRequest(ShapeBase):
    """
    The market (purchasing) option for the instances.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "market_type",
                "MarketType",
                TypeInfo(MarketType),
            ),
            (
                "spot_options",
                "SpotOptions",
                TypeInfo(LaunchTemplateSpotMarketOptionsRequest),
            ),
        ]

    # The market type.
    market_type: "MarketType" = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The options for Spot Instances.
    spot_options: "LaunchTemplateSpotMarketOptionsRequest" = dataclasses.field(
        default_factory=dict,
    )


@dataclasses.dataclass
class LaunchTemplateInstanceNetworkInterfaceSpecification(ShapeBase):
    """
    Describes a network interface.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "associate_public_ip_address",
                "AssociatePublicIpAddress",
                TypeInfo(bool),
            ),
            (
                "delete_on_termination",
                "DeleteOnTermination",
                TypeInfo(bool),
            ),
            (
                "description",
                "Description",
                TypeInfo(str),
            ),
            (
                "device_index",
                "DeviceIndex",
                TypeInfo(int),
            ),
            (
                "groups",
                "Groups",
                TypeInfo(typing.List[str]),
            ),
            (
                "ipv6_address_count",
                "Ipv6AddressCount",
                TypeInfo(int),
            ),
            (
                "ipv6_addresses",
                "Ipv6Addresses",
                TypeInfo(typing.List[InstanceIpv6Address]),
            ),
            (
                "network_interface_id",
                "NetworkInterfaceId",
                TypeInfo(str),
            ),
            (
                "private_ip_address",
                "PrivateIpAddress",
                TypeInfo(str),
            ),
            (
                "private_ip_addresses",
                "PrivateIpAddresses",
                TypeInfo(typing.List[PrivateIpAddressSpecification]),
            ),
            (
                "secondary_private_ip_address_count",
                "SecondaryPrivateIpAddressCount",
                TypeInfo(int),
            ),
            (
                "subnet_id",
                "SubnetId",
                TypeInfo(str),
            ),
        ]

    # Indicates whether to associate a public IPv4 address with eth0 for a new
    # network interface.
    associate_public_ip_address: bool = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # Indicates whether the network interface is deleted when the instance is
    # terminated.
    delete_on_termination: bool = dataclasses.field(default=ShapeBase.NOT_SET, )

    # A description for the network interface.
    description: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The device index for the network interface attachment.
    device_index: int = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The IDs of one or more security groups.
    groups: typing.List[str] = dataclasses.field(default_factory=list, )

    # The number of IPv6 addresses for the network interface.
    ipv6_address_count: int = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The IPv6 addresses for the network interface.
    ipv6_addresses: typing.List["InstanceIpv6Address"] = dataclasses.field(
        default_factory=list,
    )

    # The ID of the network interface.
    network_interface_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The primary private IPv4 address of the network interface.
    private_ip_address: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # One or more private IPv4 addresses.
    private_ip_addresses: typing.List["PrivateIpAddressSpecification"
                                     ] = dataclasses.field(
                                         default_factory=list,
                                     )

    # The number of secondary private IPv4 addresses for the network interface.
    secondary_private_ip_address_count: int = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # The ID of the subnet for the network interface.
    subnet_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class LaunchTemplateInstanceNetworkInterfaceSpecificationRequest(ShapeBase):
    """
    The parameters for a network interface.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "associate_public_ip_address",
                "AssociatePublicIpAddress",
                TypeInfo(bool),
            ),
            (
                "delete_on_termination",
                "DeleteOnTermination",
                TypeInfo(bool),
            ),
            (
                "description",
                "Description",
                TypeInfo(str),
            ),
            (
                "device_index",
                "DeviceIndex",
                TypeInfo(int),
            ),
            (
                "groups",
                "Groups",
                TypeInfo(typing.List[str]),
            ),
            (
                "ipv6_address_count",
                "Ipv6AddressCount",
                TypeInfo(int),
            ),
            (
                "ipv6_addresses",
                "Ipv6Addresses",
                TypeInfo(typing.List[InstanceIpv6AddressRequest]),
            ),
            (
                "network_interface_id",
                "NetworkInterfaceId",
                TypeInfo(str),
            ),
            (
                "private_ip_address",
                "PrivateIpAddress",
                TypeInfo(str),
            ),
            (
                "private_ip_addresses",
                "PrivateIpAddresses",
                TypeInfo(typing.List[PrivateIpAddressSpecification]),
            ),
            (
                "secondary_private_ip_address_count",
                "SecondaryPrivateIpAddressCount",
                TypeInfo(int),
            ),
            (
                "subnet_id",
                "SubnetId",
                TypeInfo(str),
            ),
        ]

    # Associates a public IPv4 address with eth0 for a new network interface.
    associate_public_ip_address: bool = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # Indicates whether the network interface is deleted when the instance is
    # terminated.
    delete_on_termination: bool = dataclasses.field(default=ShapeBase.NOT_SET, )

    # A description for the network interface.
    description: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The device index for the network interface attachment.
    device_index: int = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The IDs of one or more security groups.
    groups: typing.List[str] = dataclasses.field(default_factory=list, )

    # The number of IPv6 addresses to assign to a network interface. Amazon EC2
    # automatically selects the IPv6 addresses from the subnet range. You can't
    # use this option if specifying specific IPv6 addresses.
    ipv6_address_count: int = dataclasses.field(default=ShapeBase.NOT_SET, )

    # One or more specific IPv6 addresses from the IPv6 CIDR block range of your
    # subnet. You can't use this option if you're specifying a number of IPv6
    # addresses.
    ipv6_addresses: typing.List["InstanceIpv6AddressRequest"
                               ] = dataclasses.field(
                                   default_factory=list,
                               )

    # The ID of the network interface.
    network_interface_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The primary private IPv4 address of the network interface.
    private_ip_address: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # One or more private IPv4 addresses.
    private_ip_addresses: typing.List["PrivateIpAddressSpecification"
                                     ] = dataclasses.field(
                                         default_factory=list,
                                     )

    # The number of secondary private IPv4 addresses to assign to a network
    # interface.
    secondary_private_ip_address_count: int = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # The ID of the subnet for the network interface.
    subnet_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class LaunchTemplateOverrides(ShapeBase):
    """
    Describes overrides for a launch template.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "instance_type",
                "InstanceType",
                TypeInfo(InstanceType),
            ),
            (
                "spot_price",
                "SpotPrice",
                TypeInfo(str),
            ),
            (
                "subnet_id",
                "SubnetId",
                TypeInfo(str),
            ),
            (
                "availability_zone",
                "AvailabilityZone",
                TypeInfo(str),
            ),
            (
                "weighted_capacity",
                "WeightedCapacity",
                TypeInfo(float),
            ),
            (
                "priority",
                "Priority",
                TypeInfo(float),
            ),
        ]

    # The instance type.
    instance_type: "InstanceType" = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # The maximum price per unit hour that you are willing to pay for a Spot
    # Instance.
    spot_price: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The ID of the subnet in which to launch the instances.
    subnet_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The Availability Zone in which to launch the instances.
    availability_zone: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The number of units provided by the specified instance type.
    weighted_capacity: float = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The priority for the launch template override. If
    # **OnDemandAllocationStrategy** is set to `prioritized`, Spot Fleet uses
    # priority to determine which launch template override to use first in
    # fulfilling On-Demand capacity. The highest priority is launched first.
    # Valid values are whole numbers starting at `0`. The lower the number, the
    # higher the priority. If no number is set, the launch template override has
    # the lowest priority.
    priority: float = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class LaunchTemplatePlacement(ShapeBase):
    """
    Describes the placement of an instance.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "availability_zone",
                "AvailabilityZone",
                TypeInfo(str),
            ),
            (
                "affinity",
                "Affinity",
                TypeInfo(str),
            ),
            (
                "group_name",
                "GroupName",
                TypeInfo(str),
            ),
            (
                "host_id",
                "HostId",
                TypeInfo(str),
            ),
            (
                "tenancy",
                "Tenancy",
                TypeInfo(Tenancy),
            ),
            (
                "spread_domain",
                "SpreadDomain",
                TypeInfo(str),
            ),
        ]

    # The Availability Zone of the instance.
    availability_zone: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The affinity setting for the instance on the Dedicated Host.
    affinity: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The name of the placement group for the instance.
    group_name: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The ID of the Dedicated Host for the instance.
    host_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The tenancy of the instance (if the instance is running in a VPC). An
    # instance with a tenancy of `dedicated` runs on single-tenant hardware.
    tenancy: "Tenancy" = dataclasses.field(default=ShapeBase.NOT_SET, )

    # Reserved for future use.
    spread_domain: str = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class LaunchTemplatePlacementRequest(ShapeBase):
    """
    The placement for the instance.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "availability_zone",
                "AvailabilityZone",
                TypeInfo(str),
            ),
            (
                "affinity",
                "Affinity",
                TypeInfo(str),
            ),
            (
                "group_name",
                "GroupName",
                TypeInfo(str),
            ),
            (
                "host_id",
                "HostId",
                TypeInfo(str),
            ),
            (
                "tenancy",
                "Tenancy",
                TypeInfo(Tenancy),
            ),
            (
                "spread_domain",
                "SpreadDomain",
                TypeInfo(str),
            ),
        ]

    # The Availability Zone for the instance.
    availability_zone: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The affinity setting for an instance on a Dedicated Host.
    affinity: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The name of the placement group for the instance.
    group_name: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The ID of the Dedicated Host for the instance.
    host_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The tenancy of the instance (if the instance is running in a VPC). An
    # instance with a tenancy of dedicated runs on single-tenant hardware.
    tenancy: "Tenancy" = dataclasses.field(default=ShapeBase.NOT_SET, )

    # Reserved for future use.
    spread_domain: str = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class LaunchTemplateSpecification(ShapeBase):
    """
    The launch template to use. You must specify either the launch template ID or
    launch template name in the request, but not both.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "launch_template_id",
                "LaunchTemplateId",
                TypeInfo(str),
            ),
            (
                "launch_template_name",
                "LaunchTemplateName",
                TypeInfo(str),
            ),
            (
                "version",
                "Version",
                TypeInfo(str),
            ),
        ]

    # The ID of the launch template.
    launch_template_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The name of the launch template.
    launch_template_name: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The version number of the launch template.

    # Default: The default version for the launch template.
    version: str = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class LaunchTemplateSpotMarketOptions(ShapeBase):
    """
    The options for Spot Instances.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "max_price",
                "MaxPrice",
                TypeInfo(str),
            ),
            (
                "spot_instance_type",
                "SpotInstanceType",
                TypeInfo(SpotInstanceType),
            ),
            (
                "block_duration_minutes",
                "BlockDurationMinutes",
                TypeInfo(int),
            ),
            (
                "valid_until",
                "ValidUntil",
                TypeInfo(datetime.datetime),
            ),
            (
                "instance_interruption_behavior",
                "InstanceInterruptionBehavior",
                TypeInfo(InstanceInterruptionBehavior),
            ),
        ]

    # The maximum hourly price you're willing to pay for the Spot Instances.
    max_price: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The Spot Instance request type.
    spot_instance_type: "SpotInstanceType" = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # The required duration for the Spot Instances (also known as Spot blocks),
    # in minutes. This value must be a multiple of 60 (60, 120, 180, 240, 300, or
    # 360).
    block_duration_minutes: int = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The end date of the request. For a one-time request, the request remains
    # active until all instances launch, the request is canceled, or this date is
    # reached. If the request is persistent, it remains active until it is
    # canceled or this date and time is reached.
    valid_until: datetime.datetime = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # The behavior when a Spot Instance is interrupted.
    instance_interruption_behavior: "InstanceInterruptionBehavior" = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )


@dataclasses.dataclass
class LaunchTemplateSpotMarketOptionsRequest(ShapeBase):
    """
    The options for Spot Instances.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "max_price",
                "MaxPrice",
                TypeInfo(str),
            ),
            (
                "spot_instance_type",
                "SpotInstanceType",
                TypeInfo(SpotInstanceType),
            ),
            (
                "block_duration_minutes",
                "BlockDurationMinutes",
                TypeInfo(int),
            ),
            (
                "valid_until",
                "ValidUntil",
                TypeInfo(datetime.datetime),
            ),
            (
                "instance_interruption_behavior",
                "InstanceInterruptionBehavior",
                TypeInfo(InstanceInterruptionBehavior),
            ),
        ]

    # The maximum hourly price you're willing to pay for the Spot Instances.
    max_price: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The Spot Instance request type.
    spot_instance_type: "SpotInstanceType" = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # The required duration for the Spot Instances (also known as Spot blocks),
    # in minutes. This value must be a multiple of 60 (60, 120, 180, 240, 300, or
    # 360).
    block_duration_minutes: int = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The end date of the request. For a one-time request, the request remains
    # active until all instances launch, the request is canceled, or this date is
    # reached. If the request is persistent, it remains active until it is
    # canceled or this date and time is reached. The default end date is 7 days
    # from the current date.
    valid_until: datetime.datetime = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # The behavior when a Spot Instance is interrupted. The default is
    # `terminate`.
    instance_interruption_behavior: "InstanceInterruptionBehavior" = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )


@dataclasses.dataclass
class LaunchTemplateTagSpecification(ShapeBase):
    """
    The tag specification for the launch template.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "resource_type",
                "ResourceType",
                TypeInfo(ResourceType),
            ),
            (
                "tags",
                "Tags",
                TypeInfo(typing.List[Tag]),
            ),
        ]

    # The type of resource.
    resource_type: "ResourceType" = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # The tags for the resource.
    tags: typing.List["Tag"] = dataclasses.field(default_factory=list, )


@dataclasses.dataclass
class LaunchTemplateTagSpecificationRequest(ShapeBase):
    """
    The tags specification for the launch template.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "resource_type",
                "ResourceType",
                TypeInfo(ResourceType),
            ),
            (
                "tags",
                "Tags",
                TypeInfo(typing.List[Tag]),
            ),
        ]

    # The type of resource to tag. Currently, the resource types that support
    # tagging on creation are `instance` and `volume`. To tag a resource after it
    # has been created, see CreateTags.
    resource_type: "ResourceType" = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # The tags to apply to the resource.
    tags: typing.List["Tag"] = dataclasses.field(default_factory=list, )


@dataclasses.dataclass
class LaunchTemplateVersion(ShapeBase):
    """
    Describes a launch template version.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "launch_template_id",
                "LaunchTemplateId",
                TypeInfo(str),
            ),
            (
                "launch_template_name",
                "LaunchTemplateName",
                TypeInfo(str),
            ),
            (
                "version_number",
                "VersionNumber",
                TypeInfo(int),
            ),
            (
                "version_description",
                "VersionDescription",
                TypeInfo(str),
            ),
            (
                "create_time",
                "CreateTime",
                TypeInfo(datetime.datetime),
            ),
            (
                "created_by",
                "CreatedBy",
                TypeInfo(str),
            ),
            (
                "default_version",
                "DefaultVersion",
                TypeInfo(bool),
            ),
            (
                "launch_template_data",
                "LaunchTemplateData",
                TypeInfo(ResponseLaunchTemplateData),
            ),
        ]

    # The ID of the launch template.
    launch_template_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The name of the launch template.
    launch_template_name: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The version number.
    version_number: int = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The description for the version.
    version_description: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The time the version was created.
    create_time: datetime.datetime = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # The principal that created the version.
    created_by: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # Indicates whether the version is the default version.
    default_version: bool = dataclasses.field(default=ShapeBase.NOT_SET, )

    # Information about the launch template.
    launch_template_data: "ResponseLaunchTemplateData" = dataclasses.field(
        default_factory=dict,
    )


@dataclasses.dataclass
class LaunchTemplatesMonitoring(ShapeBase):
    """
    Describes the monitoring for the instance.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "enabled",
                "Enabled",
                TypeInfo(bool),
            ),
        ]

    # Indicates whether detailed monitoring is enabled. Otherwise, basic
    # monitoring is enabled.
    enabled: bool = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class LaunchTemplatesMonitoringRequest(ShapeBase):
    """
    Describes the monitoring for the instance.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "enabled",
                "Enabled",
                TypeInfo(bool),
            ),
        ]

    # Specify `true` to enable detailed monitoring. Otherwise, basic monitoring
    # is enabled.
    enabled: bool = dataclasses.field(default=ShapeBase.NOT_SET, )


class ListingState(Enum):
    available = "available"
    sold = "sold"
    cancelled = "cancelled"
    pending = "pending"


class ListingStatus(Enum):
    active = "active"
    pending = "pending"
    cancelled = "cancelled"
    closed = "closed"


@dataclasses.dataclass
class LoadBalancersConfig(ShapeBase):
    """
    Describes the Classic Load Balancers and target groups to attach to a Spot Fleet
    request.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "classic_load_balancers_config",
                "ClassicLoadBalancersConfig",
                TypeInfo(ClassicLoadBalancersConfig),
            ),
            (
                "target_groups_config",
                "TargetGroupsConfig",
                TypeInfo(TargetGroupsConfig),
            ),
        ]

    # The Classic Load Balancers.
    classic_load_balancers_config: "ClassicLoadBalancersConfig" = dataclasses.field(
        default_factory=dict,
    )

    # The target groups.
    target_groups_config: "TargetGroupsConfig" = dataclasses.field(
        default_factory=dict,
    )


@dataclasses.dataclass
class LoadPermission(ShapeBase):
    """
    Describes a load permission.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "user_id",
                "UserId",
                TypeInfo(str),
            ),
            (
                "group",
                "Group",
                TypeInfo(PermissionGroup),
            ),
        ]

    # The AWS account ID.
    user_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The name of the group.
    group: "PermissionGroup" = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class LoadPermissionModifications(ShapeBase):
    """
    Describes modifications to the load permissions of an Amazon FPGA image (AFI).
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "add",
                "Add",
                TypeInfo(typing.List[LoadPermissionRequest]),
            ),
            (
                "remove",
                "Remove",
                TypeInfo(typing.List[LoadPermissionRequest]),
            ),
        ]

    # The load permissions to add.
    add: typing.List["LoadPermissionRequest"] = dataclasses.field(
        default_factory=list,
    )

    # The load permissions to remove.
    remove: typing.List["LoadPermissionRequest"] = dataclasses.field(
        default_factory=list,
    )


@dataclasses.dataclass
class LoadPermissionRequest(ShapeBase):
    """
    Describes a load permission.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "group",
                "Group",
                TypeInfo(PermissionGroup),
            ),
            (
                "user_id",
                "UserId",
                TypeInfo(str),
            ),
        ]

    # The name of the group.
    group: "PermissionGroup" = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The AWS account ID.
    user_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )


class LogDestinationType(Enum):
    cloud_watch_logs = "cloud-watch-logs"
    s3 = "s3"


class MarketType(Enum):
    spot = "spot"


@dataclasses.dataclass
class ModifyFleetRequest(ShapeBase):
    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "fleet_id",
                "FleetId",
                TypeInfo(str),
            ),
            (
                "target_capacity_specification",
                "TargetCapacitySpecification",
                TypeInfo(TargetCapacitySpecificationRequest),
            ),
            (
                "dry_run",
                "DryRun",
                TypeInfo(bool),
            ),
            (
                "excess_capacity_termination_policy",
                "ExcessCapacityTerminationPolicy",
                TypeInfo(FleetExcessCapacityTerminationPolicy),
            ),
        ]

    # The ID of the EC2 Fleet.
    fleet_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The size of the EC2 Fleet.
    target_capacity_specification: "TargetCapacitySpecificationRequest" = dataclasses.field(
        default_factory=dict,
    )

    # Checks whether you have the required permissions for the action, without
    # actually making the request, and provides an error response. If you have
    # the required permissions, the error response is `DryRunOperation`.
    # Otherwise, it is `UnauthorizedOperation`.
    dry_run: bool = dataclasses.field(default=ShapeBase.NOT_SET, )

    # Indicates whether running instances should be terminated if the total
    # target capacity of the EC2 Fleet is decreased below the current size of the
    # EC2 Fleet.
    excess_capacity_termination_policy: "FleetExcessCapacityTerminationPolicy" = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )


@dataclasses.dataclass
class ModifyFleetResult(OutputShapeBase):
    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "response_metadata",
                "ResponseMetadata",
                TypeInfo(typing.Dict[str, str]),
            ),
            (
                "return_",
                "Return",
                TypeInfo(bool),
            ),
        ]

    response_metadata: typing.Dict[str, str] = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # Is `true` if the request succeeds, and an error otherwise.
    return_: bool = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class ModifyFpgaImageAttributeRequest(ShapeBase):
    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "fpga_image_id",
                "FpgaImageId",
                TypeInfo(str),
            ),
            (
                "dry_run",
                "DryRun",
                TypeInfo(bool),
            ),
            (
                "attribute",
                "Attribute",
                TypeInfo(FpgaImageAttributeName),
            ),
            (
                "operation_type",
                "OperationType",
                TypeInfo(OperationType),
            ),
            (
                "user_ids",
                "UserIds",
                TypeInfo(typing.List[str]),
            ),
            (
                "user_groups",
                "UserGroups",
                TypeInfo(typing.List[str]),
            ),
            (
                "product_codes",
                "ProductCodes",
                TypeInfo(typing.List[str]),
            ),
            (
                "load_permission",
                "LoadPermission",
                TypeInfo(LoadPermissionModifications),
            ),
            (
                "description",
                "Description",
                TypeInfo(str),
            ),
            (
                "name",
                "Name",
                TypeInfo(str),
            ),
        ]

    # The ID of the AFI.
    fpga_image_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # Checks whether you have the required permissions for the action, without
    # actually making the request, and provides an error response. If you have
    # the required permissions, the error response is `DryRunOperation`.
    # Otherwise, it is `UnauthorizedOperation`.
    dry_run: bool = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The name of the attribute.
    attribute: "FpgaImageAttributeName" = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # The operation type.
    operation_type: "OperationType" = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # One or more AWS account IDs. This parameter is valid only when modifying
    # the `loadPermission` attribute.
    user_ids: typing.List[str] = dataclasses.field(default_factory=list, )

    # One or more user groups. This parameter is valid only when modifying the
    # `loadPermission` attribute.
    user_groups: typing.List[str] = dataclasses.field(default_factory=list, )

    # One or more product codes. After you add a product code to an AFI, it can't
    # be removed. This parameter is valid only when modifying the `productCodes`
    # attribute.
    product_codes: typing.List[str] = dataclasses.field(default_factory=list, )

    # The load permission for the AFI.
    load_permission: "LoadPermissionModifications" = dataclasses.field(
        default_factory=dict,
    )

    # A description for the AFI.
    description: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # A name for the AFI.
    name: str = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class ModifyFpgaImageAttributeResult(OutputShapeBase):
    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "response_metadata",
                "ResponseMetadata",
                TypeInfo(typing.Dict[str, str]),
            ),
            (
                "fpga_image_attribute",
                "FpgaImageAttribute",
                TypeInfo(FpgaImageAttribute),
            ),
        ]

    response_metadata: typing.Dict[str, str] = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # Information about the attribute.
    fpga_image_attribute: "FpgaImageAttribute" = dataclasses.field(
        default_factory=dict,
    )


@dataclasses.dataclass
class ModifyHostsRequest(ShapeBase):
    """
    Contains the parameters for ModifyHosts.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "auto_placement",
                "AutoPlacement",
                TypeInfo(AutoPlacement),
            ),
            (
                "host_ids",
                "HostIds",
                TypeInfo(typing.List[str]),
            ),
        ]

    # Specify whether to enable or disable auto-placement.
    auto_placement: "AutoPlacement" = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # The IDs of the Dedicated Hosts to modify.
    host_ids: typing.List[str] = dataclasses.field(default_factory=list, )


@dataclasses.dataclass
class ModifyHostsResult(OutputShapeBase):
    """
    Contains the output of ModifyHosts.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "response_metadata",
                "ResponseMetadata",
                TypeInfo(typing.Dict[str, str]),
            ),
            (
                "successful",
                "Successful",
                TypeInfo(typing.List[str]),
            ),
            (
                "unsuccessful",
                "Unsuccessful",
                TypeInfo(typing.List[UnsuccessfulItem]),
            ),
        ]

    response_metadata: typing.Dict[str, str] = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # The IDs of the Dedicated Hosts that were successfully modified.
    successful: typing.List[str] = dataclasses.field(default_factory=list, )

    # The IDs of the Dedicated Hosts that could not be modified. Check whether
    # the setting you requested can be used.
    unsuccessful: typing.List["UnsuccessfulItem"] = dataclasses.field(
        default_factory=list,
    )


@dataclasses.dataclass
class ModifyIdFormatRequest(ShapeBase):
    """
    Contains the parameters of ModifyIdFormat.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "resource",
                "Resource",
                TypeInfo(str),
            ),
            (
                "use_long_ids",
                "UseLongIds",
                TypeInfo(bool),
            ),
        ]

    # The type of resource: `bundle` | `conversion-task` | `customer-gateway` |
    # `dhcp-options` | `elastic-ip-allocation` | `elastic-ip-association` |
    # `export-task` | `flow-log` | `image` | `import-task` | `internet-gateway` |
    # `network-acl` | `network-acl-association` | `network-interface` | `network-
    # interface-attachment` | `prefix-list` | `route-table` | `route-table-
    # association` | `security-group` | `subnet` | `subnet-cidr-block-
    # association` | `vpc` | `vpc-cidr-block-association` | `vpc-endpoint` |
    # `vpc-peering-connection` | `vpn-connection` | `vpn-gateway`.

    # Alternatively, use the `all-current` option to include all resource types
    # that are currently within their opt-in period for longer IDs.
    resource: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # Indicate whether the resource should use longer IDs (17-character IDs).
    use_long_ids: bool = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class ModifyIdentityIdFormatRequest(ShapeBase):
    """
    Contains the parameters of ModifyIdentityIdFormat.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "principal_arn",
                "PrincipalArn",
                TypeInfo(str),
            ),
            (
                "resource",
                "Resource",
                TypeInfo(str),
            ),
            (
                "use_long_ids",
                "UseLongIds",
                TypeInfo(bool),
            ),
        ]

    # The ARN of the principal, which can be an IAM user, IAM role, or the root
    # user. Specify `all` to modify the ID format for all IAM users, IAM roles,
    # and the root user of the account.
    principal_arn: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The type of resource: `bundle` | `conversion-task` | `customer-gateway` |
    # `dhcp-options` | `elastic-ip-allocation` | `elastic-ip-association` |
    # `export-task` | `flow-log` | `image` | `import-task` | `internet-gateway` |
    # `network-acl` | `network-acl-association` | `network-interface` | `network-
    # interface-attachment` | `prefix-list` | `route-table` | `route-table-
    # association` | `security-group` | `subnet` | `subnet-cidr-block-
    # association` | `vpc` | `vpc-cidr-block-association` | `vpc-endpoint` |
    # `vpc-peering-connection` | `vpn-connection` | `vpn-gateway`.

    # Alternatively, use the `all-current` option to include all resource types
    # that are currently within their opt-in period for longer IDs.
    resource: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # Indicates whether the resource should use longer IDs (17-character IDs)
    use_long_ids: bool = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class ModifyImageAttributeRequest(ShapeBase):
    """
    Contains the parameters for ModifyImageAttribute.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "image_id",
                "ImageId",
                TypeInfo(str),
            ),
            (
                "attribute",
                "Attribute",
                TypeInfo(str),
            ),
            (
                "description",
                "Description",
                TypeInfo(AttributeValue),
            ),
            (
                "launch_permission",
                "LaunchPermission",
                TypeInfo(LaunchPermissionModifications),
            ),
            (
                "operation_type",
                "OperationType",
                TypeInfo(OperationType),
            ),
            (
                "product_codes",
                "ProductCodes",
                TypeInfo(typing.List[str]),
            ),
            (
                "user_groups",
                "UserGroups",
                TypeInfo(typing.List[str]),
            ),
            (
                "user_ids",
                "UserIds",
                TypeInfo(typing.List[str]),
            ),
            (
                "value",
                "Value",
                TypeInfo(str),
            ),
            (
                "dry_run",
                "DryRun",
                TypeInfo(bool),
            ),
        ]

    # The ID of the AMI.
    image_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The name of the attribute to modify. The valid values are `description`,
    # `launchPermission`, and `productCodes`.
    attribute: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # A new description for the AMI.
    description: "AttributeValue" = dataclasses.field(default_factory=dict, )

    # A new launch permission for the AMI.
    launch_permission: "LaunchPermissionModifications" = dataclasses.field(
        default_factory=dict,
    )

    # The operation type. This parameter can be used only when the `Attribute`
    # parameter is `launchPermission`.
    operation_type: "OperationType" = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # One or more DevPay product codes. After you add a product code to an AMI,
    # it can't be removed.
    product_codes: typing.List[str] = dataclasses.field(default_factory=list, )

    # One or more user groups. This parameter can be used only when the
    # `Attribute` parameter is `launchPermission`.
    user_groups: typing.List[str] = dataclasses.field(default_factory=list, )

    # One or more AWS account IDs. This parameter can be used only when the
    # `Attribute` parameter is `launchPermission`.
    user_ids: typing.List[str] = dataclasses.field(default_factory=list, )

    # The value of the attribute being modified. This parameter can be used only
    # when the `Attribute` parameter is `description` or `productCodes`.
    value: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # Checks whether you have the required permissions for the action, without
    # actually making the request, and provides an error response. If you have
    # the required permissions, the error response is `DryRunOperation`.
    # Otherwise, it is `UnauthorizedOperation`.
    dry_run: bool = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class ModifyInstanceAttributeRequest(ShapeBase):
    """
    Contains the parameters for ModifyInstanceAttribute.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "instance_id",
                "InstanceId",
                TypeInfo(str),
            ),
            (
                "source_dest_check",
                "SourceDestCheck",
                TypeInfo(AttributeBooleanValue),
            ),
            (
                "attribute",
                "Attribute",
                TypeInfo(InstanceAttributeName),
            ),
            (
                "block_device_mappings",
                "BlockDeviceMappings",
                TypeInfo(typing.List[InstanceBlockDeviceMappingSpecification]),
            ),
            (
                "disable_api_termination",
                "DisableApiTermination",
                TypeInfo(AttributeBooleanValue),
            ),
            (
                "dry_run",
                "DryRun",
                TypeInfo(bool),
            ),
            (
                "ebs_optimized",
                "EbsOptimized",
                TypeInfo(AttributeBooleanValue),
            ),
            (
                "ena_support",
                "EnaSupport",
                TypeInfo(AttributeBooleanValue),
            ),
            (
                "groups",
                "Groups",
                TypeInfo(typing.List[str]),
            ),
            (
                "instance_initiated_shutdown_behavior",
                "InstanceInitiatedShutdownBehavior",
                TypeInfo(AttributeValue),
            ),
            (
                "instance_type",
                "InstanceType",
                TypeInfo(AttributeValue),
            ),
            (
                "kernel",
                "Kernel",
                TypeInfo(AttributeValue),
            ),
            (
                "ramdisk",
                "Ramdisk",
                TypeInfo(AttributeValue),
            ),
            (
                "sriov_net_support",
                "SriovNetSupport",
                TypeInfo(AttributeValue),
            ),
            (
                "user_data",
                "UserData",
                TypeInfo(BlobAttributeValue),
            ),
            (
                "value",
                "Value",
                TypeInfo(str),
            ),
        ]

    # The ID of the instance.
    instance_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # Specifies whether source/destination checking is enabled. A value of `true`
    # means that checking is enabled, and `false` means that checking is
    # disabled. This value must be `false` for a NAT instance to perform NAT.
    source_dest_check: "AttributeBooleanValue" = dataclasses.field(
        default_factory=dict,
    )

    # The name of the attribute.
    attribute: "InstanceAttributeName" = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # Modifies the `DeleteOnTermination` attribute for volumes that are currently
    # attached. The volume must be owned by the caller. If no value is specified
    # for `DeleteOnTermination`, the default is `true` and the volume is deleted
    # when the instance is terminated.

    # To add instance store volumes to an Amazon EBS-backed instance, you must
    # add them when you launch the instance. For more information, see [Updating
    # the Block Device Mapping when Launching an
    # Instance](http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/block-device-
    # mapping-concepts.html#Using_OverridingAMIBDM) in the _Amazon Elastic
    # Compute Cloud User Guide_.
    block_device_mappings: typing.List["InstanceBlockDeviceMappingSpecification"
                                      ] = dataclasses.field(
                                          default_factory=list,
                                      )

    # If the value is `true`, you can't terminate the instance using the Amazon
    # EC2 console, CLI, or API; otherwise, you can. You cannot use this parameter
    # for Spot Instances.
    disable_api_termination: "AttributeBooleanValue" = dataclasses.field(
        default_factory=dict,
    )

    # Checks whether you have the required permissions for the action, without
    # actually making the request, and provides an error response. If you have
    # the required permissions, the error response is `DryRunOperation`.
    # Otherwise, it is `UnauthorizedOperation`.
    dry_run: bool = dataclasses.field(default=ShapeBase.NOT_SET, )

    # Specifies whether the instance is optimized for Amazon EBS I/O. This
    # optimization provides dedicated throughput to Amazon EBS and an optimized
    # configuration stack to provide optimal EBS I/O performance. This
    # optimization isn't available with all instance types. Additional usage
    # charges apply when using an EBS Optimized instance.
    ebs_optimized: "AttributeBooleanValue" = dataclasses.field(
        default_factory=dict,
    )

    # Set to `true` to enable enhanced networking with ENA for the instance.

    # This option is supported only for HVM instances. Specifying this option
    # with a PV instance can make it unreachable.
    ena_support: "AttributeBooleanValue" = dataclasses.field(
        default_factory=dict,
    )

    # [EC2-VPC] Changes the security groups of the instance. You must specify at
    # least one security group, even if it's just the default security group for
    # the VPC. You must specify the security group ID, not the security group
    # name.
    groups: typing.List[str] = dataclasses.field(default_factory=list, )

    # Specifies whether an instance stops or terminates when you initiate
    # shutdown from the instance (using the operating system command for system
    # shutdown).
    instance_initiated_shutdown_behavior: "AttributeValue" = dataclasses.field(
        default_factory=dict,
    )

    # Changes the instance type to the specified value. For more information, see
    # [Instance
    # Types](http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-
    # types.html). If the instance type is not valid, the error returned is
    # `InvalidInstanceAttributeValue`.
    instance_type: "AttributeValue" = dataclasses.field(default_factory=dict, )

    # Changes the instance's kernel to the specified value. We recommend that you
    # use PV-GRUB instead of kernels and RAM disks. For more information, see
    # [PV-
    # GRUB](http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/UserProvidedKernels.html).
    kernel: "AttributeValue" = dataclasses.field(default_factory=dict, )

    # Changes the instance's RAM disk to the specified value. We recommend that
    # you use PV-GRUB instead of kernels and RAM disks. For more information, see
    # [PV-
    # GRUB](http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/UserProvidedKernels.html).
    ramdisk: "AttributeValue" = dataclasses.field(default_factory=dict, )

    # Set to `simple` to enable enhanced networking with the Intel 82599 Virtual
    # Function interface for the instance.

    # There is no way to disable enhanced networking with the Intel 82599 Virtual
    # Function interface at this time.

    # This option is supported only for HVM instances. Specifying this option
    # with a PV instance can make it unreachable.
    sriov_net_support: "AttributeValue" = dataclasses.field(
        default_factory=dict,
    )

    # Changes the instance's user data to the specified value. If you are using
    # an AWS SDK or command line tool, base64-encoding is performed for you, and
    # you can load the text from a file. Otherwise, you must provide
    # base64-encoded text.
    user_data: "BlobAttributeValue" = dataclasses.field(default_factory=dict, )

    # A new value for the attribute. Use only with the `kernel`, `ramdisk`,
    # `userData`, `disableApiTermination`, or `instanceInitiatedShutdownBehavior`
    # attribute.
    value: str = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class ModifyInstanceCreditSpecificationRequest(ShapeBase):
    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "instance_credit_specifications",
                "InstanceCreditSpecifications",
                TypeInfo(typing.List[InstanceCreditSpecificationRequest]),
            ),
            (
                "dry_run",
                "DryRun",
                TypeInfo(bool),
            ),
            (
                "client_token",
                "ClientToken",
                TypeInfo(str),
            ),
        ]

    # Information about the credit option for CPU usage.
    instance_credit_specifications: typing.List[
        "InstanceCreditSpecificationRequest"
    ] = dataclasses.field(
        default_factory=list,
    )

    # Checks whether you have the required permissions for the action, without
    # actually making the request, and provides an error response. If you have
    # the required permissions, the error response is `DryRunOperation`.
    # Otherwise, it is `UnauthorizedOperation`.
    dry_run: bool = dataclasses.field(default=ShapeBase.NOT_SET, )

    # A unique, case-sensitive token that you provide to ensure idempotency of
    # your modification request. For more information, see [Ensuring
    # Idempotency](http://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html).
    client_token: str = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class ModifyInstanceCreditSpecificationResult(OutputShapeBase):
    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "response_metadata",
                "ResponseMetadata",
                TypeInfo(typing.Dict[str, str]),
            ),
            (
                "successful_instance_credit_specifications",
                "SuccessfulInstanceCreditSpecifications",
                TypeInfo(
                    typing.List[SuccessfulInstanceCreditSpecificationItem]
                ),
            ),
            (
                "unsuccessful_instance_credit_specifications",
                "UnsuccessfulInstanceCreditSpecifications",
                TypeInfo(
                    typing.List[UnsuccessfulInstanceCreditSpecificationItem]
                ),
            ),
        ]

    response_metadata: typing.Dict[str, str] = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # Information about the instances whose credit option for CPU usage was
    # successfully modified.
    successful_instance_credit_specifications: typing.List[
        "SuccessfulInstanceCreditSpecificationItem"
    ] = dataclasses.field(
        default_factory=list,
    )

    # Information about the instances whose credit option for CPU usage was not
    # modified.
    unsuccessful_instance_credit_specifications: typing.List[
        "UnsuccessfulInstanceCreditSpecificationItem"
    ] = dataclasses.field(
        default_factory=list,
    )


@dataclasses.dataclass
class ModifyInstancePlacementRequest(ShapeBase):
    """
    Contains the parameters for ModifyInstancePlacement.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "instance_id",
                "InstanceId",
                TypeInfo(str),
            ),
            (
                "affinity",
                "Affinity",
                TypeInfo(Affinity),
            ),
            (
                "group_name",
                "GroupName",
                TypeInfo(str),
            ),
            (
                "host_id",
                "HostId",
                TypeInfo(str),
            ),
            (
                "tenancy",
                "Tenancy",
                TypeInfo(HostTenancy),
            ),
        ]

    # The ID of the instance that you are modifying.
    instance_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The affinity setting for the instance.
    affinity: "Affinity" = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The name of the placement group in which to place the instance. For spread
    # placement groups, the instance must have a tenancy of `default`. For
    # cluster placement groups, the instance must have a tenancy of `default` or
    # `dedicated`.

    # To remove an instance from a placement group, specify an empty string ("").
    group_name: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The ID of the Dedicated Host with which to associate the instance.
    host_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The tenancy for the instance.
    tenancy: "HostTenancy" = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class ModifyInstancePlacementResult(OutputShapeBase):
    """
    Contains the output of ModifyInstancePlacement.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "response_metadata",
                "ResponseMetadata",
                TypeInfo(typing.Dict[str, str]),
            ),
            (
                "return_",
                "Return",
                TypeInfo(bool),
            ),
        ]

    response_metadata: typing.Dict[str, str] = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # Is `true` if the request succeeds, and an error otherwise.
    return_: bool = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class ModifyLaunchTemplateRequest(ShapeBase):
    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "dry_run",
                "DryRun",
                TypeInfo(bool),
            ),
            (
                "client_token",
                "ClientToken",
                TypeInfo(str),
            ),
            (
                "launch_template_id",
                "LaunchTemplateId",
                TypeInfo(str),
            ),
            (
                "launch_template_name",
                "LaunchTemplateName",
                TypeInfo(str),
            ),
            (
                "default_version",
                "DefaultVersion",
                TypeInfo(str),
            ),
        ]

    # Checks whether you have the required permissions for the action, without
    # actually making the request, and provides an error response. If you have
    # the required permissions, the error response is `DryRunOperation`.
    # Otherwise, it is `UnauthorizedOperation`.
    dry_run: bool = dataclasses.field(default=ShapeBase.NOT_SET, )

    # Unique, case-sensitive identifier you provide to ensure the idempotency of
    # the request. For more information, see [Ensuring
    # Idempotency](http://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html).
    client_token: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The ID of the launch template. You must specify either the launch template
    # ID or launch template name in the request.
    launch_template_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The name of the launch template. You must specify either the launch
    # template ID or launch template name in the request.
    launch_template_name: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The version number of the launch template to set as the default version.
    default_version: str = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class ModifyLaunchTemplateResult(OutputShapeBase):
    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "response_metadata",
                "ResponseMetadata",
                TypeInfo(typing.Dict[str, str]),
            ),
            (
                "launch_template",
                "LaunchTemplate",
                TypeInfo(LaunchTemplate),
            ),
        ]

    response_metadata: typing.Dict[str, str] = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # Information about the launch template.
    launch_template: "LaunchTemplate" = dataclasses.field(
        default_factory=dict,
    )


@dataclasses.dataclass
class ModifyNetworkInterfaceAttributeRequest(ShapeBase):
    """
    Contains the parameters for ModifyNetworkInterfaceAttribute.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "network_interface_id",
                "NetworkInterfaceId",
                TypeInfo(str),
            ),
            (
                "attachment",
                "Attachment",
                TypeInfo(NetworkInterfaceAttachmentChanges),
            ),
            (
                "description",
                "Description",
                TypeInfo(AttributeValue),
            ),
            (
                "dry_run",
                "DryRun",
                TypeInfo(bool),
            ),
            (
                "groups",
                "Groups",
                TypeInfo(typing.List[str]),
            ),
            (
                "source_dest_check",
                "SourceDestCheck",
                TypeInfo(AttributeBooleanValue),
            ),
        ]

    # The ID of the network interface.
    network_interface_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # Information about the interface attachment. If modifying the 'delete on
    # termination' attribute, you must specify the ID of the interface
    # attachment.
    attachment: "NetworkInterfaceAttachmentChanges" = dataclasses.field(
        default_factory=dict,
    )

    # A description for the network interface.
    description: "AttributeValue" = dataclasses.field(default_factory=dict, )

    # Checks whether you have the required permissions for the action, without
    # actually making the request, and provides an error response. If you have
    # the required permissions, the error response is `DryRunOperation`.
    # Otherwise, it is `UnauthorizedOperation`.
    dry_run: bool = dataclasses.field(default=ShapeBase.NOT_SET, )

    # Changes the security groups for the network interface. The new set of
    # groups you specify replaces the current set. You must specify at least one
    # group, even if it's just the default security group in the VPC. You must
    # specify the ID of the security group, not the name.
    groups: typing.List[str] = dataclasses.field(default_factory=list, )

    # Indicates whether source/destination checking is enabled. A value of `true`
    # means checking is enabled, and `false` means checking is disabled. This
    # value must be `false` for a NAT instance to perform NAT. For more
    # information, see [NAT
    # Instances](http://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/VPC_NAT_Instance.html)
    # in the _Amazon Virtual Private Cloud User Guide_.
    source_dest_check: "AttributeBooleanValue" = dataclasses.field(
        default_factory=dict,
    )


@dataclasses.dataclass
class ModifyReservedInstancesRequest(ShapeBase):
    """
    Contains the parameters for ModifyReservedInstances.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "reserved_instances_ids",
                "ReservedInstancesIds",
                TypeInfo(typing.List[str]),
            ),
            (
                "target_configurations",
                "TargetConfigurations",
                TypeInfo(typing.List[ReservedInstancesConfiguration]),
            ),
            (
                "client_token",
                "ClientToken",
                TypeInfo(str),
            ),
        ]

    # The IDs of the Reserved Instances to modify.
    reserved_instances_ids: typing.List[str] = dataclasses.field(
        default_factory=list,
    )

    # The configuration settings for the Reserved Instances to modify.
    target_configurations: typing.List["ReservedInstancesConfiguration"
                                      ] = dataclasses.field(
                                          default_factory=list,
                                      )

    # A unique, case-sensitive token you provide to ensure idempotency of your
    # modification request. For more information, see [Ensuring
    # Idempotency](http://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html).
    client_token: str = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class ModifyReservedInstancesResult(OutputShapeBase):
    """
    Contains the output of ModifyReservedInstances.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "response_metadata",
                "ResponseMetadata",
                TypeInfo(typing.Dict[str, str]),
            ),
            (
                "reserved_instances_modification_id",
                "ReservedInstancesModificationId",
                TypeInfo(str),
            ),
        ]

    response_metadata: typing.Dict[str, str] = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # The ID for the modification.
    reserved_instances_modification_id: str = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )


@dataclasses.dataclass
class ModifySnapshotAttributeRequest(ShapeBase):
    """
    Contains the parameters for ModifySnapshotAttribute.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "snapshot_id",
                "SnapshotId",
                TypeInfo(str),
            ),
            (
                "attribute",
                "Attribute",
                TypeInfo(SnapshotAttributeName),
            ),
            (
                "create_volume_permission",
                "CreateVolumePermission",
                TypeInfo(CreateVolumePermissionModifications),
            ),
            (
                "group_names",
                "GroupNames",
                TypeInfo(typing.List[str]),
            ),
            (
                "operation_type",
                "OperationType",
                TypeInfo(OperationType),
            ),
            (
                "user_ids",
                "UserIds",
                TypeInfo(typing.List[str]),
            ),
            (
                "dry_run",
                "DryRun",
                TypeInfo(bool),
            ),
        ]

    # The ID of the snapshot.
    snapshot_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The snapshot attribute to modify. Only volume creation permissions can be
    # modified.
    attribute: "SnapshotAttributeName" = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # A JSON representation of the snapshot attribute modification.
    create_volume_permission: "CreateVolumePermissionModifications" = dataclasses.field(
        default_factory=dict,
    )

    # The group to modify for the snapshot.
    group_names: typing.List[str] = dataclasses.field(default_factory=list, )

    # The type of operation to perform to the attribute.
    operation_type: "OperationType" = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # The account ID to modify for the snapshot.
    user_ids: typing.List[str] = dataclasses.field(default_factory=list, )

    # Checks whether you have the required permissions for the action, without
    # actually making the request, and provides an error response. If you have
    # the required permissions, the error response is `DryRunOperation`.
    # Otherwise, it is `UnauthorizedOperation`.
    dry_run: bool = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class ModifySpotFleetRequestRequest(ShapeBase):
    """
    Contains the parameters for ModifySpotFleetRequest.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "spot_fleet_request_id",
                "SpotFleetRequestId",
                TypeInfo(str),
            ),
            (
                "excess_capacity_termination_policy",
                "ExcessCapacityTerminationPolicy",
                TypeInfo(ExcessCapacityTerminationPolicy),
            ),
            (
                "target_capacity",
                "TargetCapacity",
                TypeInfo(int),
            ),
        ]

    # The ID of the Spot Fleet request.
    spot_fleet_request_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # Indicates whether running Spot Instances should be terminated if the target
    # capacity of the Spot Fleet request is decreased below the current size of
    # the Spot Fleet.
    excess_capacity_termination_policy: "ExcessCapacityTerminationPolicy" = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # The size of the fleet.
    target_capacity: int = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class ModifySpotFleetRequestResponse(OutputShapeBase):
    """
    Contains the output of ModifySpotFleetRequest.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "response_metadata",
                "ResponseMetadata",
                TypeInfo(typing.Dict[str, str]),
            ),
            (
                "return_",
                "Return",
                TypeInfo(bool),
            ),
        ]

    response_metadata: typing.Dict[str, str] = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # Is `true` if the request succeeds, and an error otherwise.
    return_: bool = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class ModifySubnetAttributeRequest(ShapeBase):
    """
    Contains the parameters for ModifySubnetAttribute.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "subnet_id",
                "SubnetId",
                TypeInfo(str),
            ),
            (
                "assign_ipv6_address_on_creation",
                "AssignIpv6AddressOnCreation",
                TypeInfo(AttributeBooleanValue),
            ),
            (
                "map_public_ip_on_launch",
                "MapPublicIpOnLaunch",
                TypeInfo(AttributeBooleanValue),
            ),
        ]

    # The ID of the subnet.
    subnet_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # Specify `true` to indicate that network interfaces created in the specified
    # subnet should be assigned an IPv6 address. This includes a network
    # interface that's created when launching an instance into the subnet (the
    # instance therefore receives an IPv6 address).

    # If you enable the IPv6 addressing feature for your subnet, your network
    # interface or instance only receives an IPv6 address if it's created using
    # version `2016-11-15` or later of the Amazon EC2 API.
    assign_ipv6_address_on_creation: "AttributeBooleanValue" = dataclasses.field(
        default_factory=dict,
    )

    # Specify `true` to indicate that network interfaces created in the specified
    # subnet should be assigned a public IPv4 address. This includes a network
    # interface that's created when launching an instance into the subnet (the
    # instance therefore receives a public IPv4 address).
    map_public_ip_on_launch: "AttributeBooleanValue" = dataclasses.field(
        default_factory=dict,
    )


@dataclasses.dataclass
class ModifyVolumeAttributeRequest(ShapeBase):
    """
    Contains the parameters for ModifyVolumeAttribute.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "volume_id",
                "VolumeId",
                TypeInfo(str),
            ),
            (
                "auto_enable_io",
                "AutoEnableIO",
                TypeInfo(AttributeBooleanValue),
            ),
            (
                "dry_run",
                "DryRun",
                TypeInfo(bool),
            ),
        ]

    # The ID of the volume.
    volume_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # Indicates whether the volume should be auto-enabled for I/O operations.
    auto_enable_io: "AttributeBooleanValue" = dataclasses.field(
        default_factory=dict,
    )

    # Checks whether you have the required permissions for the action, without
    # actually making the request, and provides an error response. If you have
    # the required permissions, the error response is `DryRunOperation`.
    # Otherwise, it is `UnauthorizedOperation`.
    dry_run: bool = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class ModifyVolumeRequest(ShapeBase):
    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "volume_id",
                "VolumeId",
                TypeInfo(str),
            ),
            (
                "dry_run",
                "DryRun",
                TypeInfo(bool),
            ),
            (
                "size",
                "Size",
                TypeInfo(int),
            ),
            (
                "volume_type",
                "VolumeType",
                TypeInfo(VolumeType),
            ),
            (
                "iops",
                "Iops",
                TypeInfo(int),
            ),
        ]

    # The ID of the volume.
    volume_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # Checks whether you have the required permissions for the action, without
    # actually making the request, and provides an error response. If you have
    # the required permissions, the error response is `DryRunOperation`.
    # Otherwise, it is `UnauthorizedOperation`.
    dry_run: bool = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The target size of the volume, in GiB. The target volume size must be
    # greater than or equal to than the existing size of the volume. For
    # information about available EBS volume sizes, see [Amazon EBS Volume
    # Types](http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSVolumeTypes.html).

    # Default: If no size is specified, the existing size is retained.
    size: int = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The target EBS volume type of the volume.

    # Default: If no type is specified, the existing type is retained.
    volume_type: "VolumeType" = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The target IOPS rate of the volume.

    # This is only valid for Provisioned IOPS SSD (`io1`) volumes. For more
    # information, see [Provisioned IOPS SSD (io1)
    # Volumes](http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSVolumeTypes.html#EBSVolumeTypes_piops).

    # Default: If no IOPS value is specified, the existing value is retained.
    iops: int = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class ModifyVolumeResult(OutputShapeBase):
    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "response_metadata",
                "ResponseMetadata",
                TypeInfo(typing.Dict[str, str]),
            ),
            (
                "volume_modification",
                "VolumeModification",
                TypeInfo(VolumeModification),
            ),
        ]

    response_metadata: typing.Dict[str, str] = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # Information about the volume modification.
    volume_modification: "VolumeModification" = dataclasses.field(
        default_factory=dict,
    )


@dataclasses.dataclass
class ModifyVpcAttributeRequest(ShapeBase):
    """
    Contains the parameters for ModifyVpcAttribute.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "vpc_id",
                "VpcId",
                TypeInfo(str),
            ),
            (
                "enable_dns_hostnames",
                "EnableDnsHostnames",
                TypeInfo(AttributeBooleanValue),
            ),
            (
                "enable_dns_support",
                "EnableDnsSupport",
                TypeInfo(AttributeBooleanValue),
            ),
        ]

    # The ID of the VPC.
    vpc_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # Indicates whether the instances launched in the VPC get DNS hostnames. If
    # enabled, instances in the VPC get DNS hostnames; otherwise, they do not.

    # You cannot modify the DNS resolution and DNS hostnames attributes in the
    # same request. Use separate requests for each attribute. You can only enable
    # DNS hostnames if you've enabled DNS support.
    enable_dns_hostnames: "AttributeBooleanValue" = dataclasses.field(
        default_factory=dict,
    )

    # Indicates whether the DNS resolution is supported for the VPC. If enabled,
    # queries to the Amazon provided DNS server at the 169.254.169.253 IP
    # address, or the reserved IP address at the base of the VPC network range
    # "plus two" succeed. If disabled, the Amazon provided DNS service in the VPC
    # that resolves public DNS hostnames to IP addresses is not enabled.

    # You cannot modify the DNS resolution and DNS hostnames attributes in the
    # same request. Use separate requests for each attribute.
    enable_dns_support: "AttributeBooleanValue" = dataclasses.field(
        default_factory=dict,
    )


@dataclasses.dataclass
class ModifyVpcEndpointConnectionNotificationRequest(ShapeBase):
    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "connection_notification_id",
                "ConnectionNotificationId",
                TypeInfo(str),
            ),
            (
                "dry_run",
                "DryRun",
                TypeInfo(bool),
            ),
            (
                "connection_notification_arn",
                "ConnectionNotificationArn",
                TypeInfo(str),
            ),
            (
                "connection_events",
                "ConnectionEvents",
                TypeInfo(typing.List[str]),
            ),
        ]

    # The ID of the notification.
    connection_notification_id: str = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # Checks whether you have the required permissions for the action, without
    # actually making the request, and provides an error response. If you have
    # the required permissions, the error response is `DryRunOperation`.
    # Otherwise, it is `UnauthorizedOperation`.
    dry_run: bool = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The ARN for the SNS topic for the notification.
    connection_notification_arn: str = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # One or more events for the endpoint. Valid values are `Accept`, `Connect`,
    # `Delete`, and `Reject`.
    connection_events: typing.List[str] = dataclasses.field(
        default_factory=list,
    )


@dataclasses.dataclass
class ModifyVpcEndpointConnectionNotificationResult(OutputShapeBase):
    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "response_metadata",
                "ResponseMetadata",
                TypeInfo(typing.Dict[str, str]),
            ),
            (
                "return_value",
                "ReturnValue",
                TypeInfo(bool),
            ),
        ]

    response_metadata: typing.Dict[str, str] = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # Returns `true` if the request succeeds; otherwise, it returns an error.
    return_value: bool = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class ModifyVpcEndpointRequest(ShapeBase):
    """
    Contains the parameters for ModifyVpcEndpoint.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "vpc_endpoint_id",
                "VpcEndpointId",
                TypeInfo(str),
            ),
            (
                "dry_run",
                "DryRun",
                TypeInfo(bool),
            ),
            (
                "reset_policy",
                "ResetPolicy",
                TypeInfo(bool),
            ),
            (
                "policy_document",
                "PolicyDocument",
                TypeInfo(str),
            ),
            (
                "add_route_table_ids",
                "AddRouteTableIds",
                TypeInfo(typing.List[str]),
            ),
            (
                "remove_route_table_ids",
                "RemoveRouteTableIds",
                TypeInfo(typing.List[str]),
            ),
            (
                "add_subnet_ids",
                "AddSubnetIds",
                TypeInfo(typing.List[str]),
            ),
            (
                "remove_subnet_ids",
                "RemoveSubnetIds",
                TypeInfo(typing.List[str]),
            ),
            (
                "add_security_group_ids",
                "AddSecurityGroupIds",
                TypeInfo(typing.List[str]),
            ),
            (
                "remove_security_group_ids",
                "RemoveSecurityGroupIds",
                TypeInfo(typing.List[str]),
            ),
            (
                "private_dns_enabled",
                "PrivateDnsEnabled",
                TypeInfo(bool),
            ),
        ]

    # The ID of the endpoint.
    vpc_endpoint_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # Checks whether you have the required permissions for the action, without
    # actually making the request, and provides an error response. If you have
    # the required permissions, the error response is `DryRunOperation`.
    # Otherwise, it is `UnauthorizedOperation`.
    dry_run: bool = dataclasses.field(default=ShapeBase.NOT_SET, )

    # (Gateway endpoint) Specify `true` to reset the policy document to the
    # default policy. The default policy allows full access to the service.
    reset_policy: bool = dataclasses.field(default=ShapeBase.NOT_SET, )

    # (Gateway endpoint) A policy document to attach to the endpoint. The policy
    # must be in valid JSON format.
    policy_document: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # (Gateway endpoint) One or more route tables IDs to associate with the
    # endpoint.
    add_route_table_ids: typing.List[str] = dataclasses.field(
        default_factory=list,
    )

    # (Gateway endpoint) One or more route table IDs to disassociate from the
    # endpoint.
    remove_route_table_ids: typing.List[str] = dataclasses.field(
        default_factory=list,
    )

    # (Interface endpoint) One or more subnet IDs in which to serve the endpoint.
    add_subnet_ids: typing.List[str] = dataclasses.field(default_factory=list, )

    # (Interface endpoint) One or more subnets IDs in which to remove the
    # endpoint.
    remove_subnet_ids: typing.List[str] = dataclasses.field(
        default_factory=list,
    )

    # (Interface endpoint) One or more security group IDs to associate with the
    # network interface.
    add_security_group_ids: typing.List[str] = dataclasses.field(
        default_factory=list,
    )

    # (Interface endpoint) One or more security group IDs to disassociate from
    # the network interface.
    remove_security_group_ids: typing.List[str] = dataclasses.field(
        default_factory=list,
    )

    # (Interface endpoint) Indicate whether a private hosted zone is associated
    # with the VPC.
    private_dns_enabled: bool = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class ModifyVpcEndpointResult(OutputShapeBase):
    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "response_metadata",
                "ResponseMetadata",
                TypeInfo(typing.Dict[str, str]),
            ),
            (
                "return_",
                "Return",
                TypeInfo(bool),
            ),
        ]

    response_metadata: typing.Dict[str, str] = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # Returns `true` if the request succeeds; otherwise, it returns an error.
    return_: bool = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class ModifyVpcEndpointServiceConfigurationRequest(ShapeBase):
    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "service_id",
                "ServiceId",
                TypeInfo(str),
            ),
            (
                "dry_run",
                "DryRun",
                TypeInfo(bool),
            ),
            (
                "acceptance_required",
                "AcceptanceRequired",
                TypeInfo(bool),
            ),
            (
                "add_network_load_balancer_arns",
                "AddNetworkLoadBalancerArns",
                TypeInfo(typing.List[str]),
            ),
            (
                "remove_network_load_balancer_arns",
                "RemoveNetworkLoadBalancerArns",
                TypeInfo(typing.List[str]),
            ),
        ]

    # The ID of the service.
    service_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # Checks whether you have the required permissions for the action, without
    # actually making the request, and provides an error response. If you have
    # the required permissions, the error response is `DryRunOperation`.
    # Otherwise, it is `UnauthorizedOperation`.
    dry_run: bool = dataclasses.field(default=ShapeBase.NOT_SET, )

    # Indicate whether requests to create an endpoint to your service must be
    # accepted.
    acceptance_required: bool = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The Amazon Resource Names (ARNs) of Network Load Balancers to add to your
    # service configuration.
    add_network_load_balancer_arns: typing.List[str] = dataclasses.field(
        default_factory=list,
    )

    # The Amazon Resource Names (ARNs) of Network Load Balancers to remove from
    # your service configuration.
    remove_network_load_balancer_arns: typing.List[str] = dataclasses.field(
        default_factory=list,
    )


@dataclasses.dataclass
class ModifyVpcEndpointServiceConfigurationResult(OutputShapeBase):
    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "response_metadata",
                "ResponseMetadata",
                TypeInfo(typing.Dict[str, str]),
            ),
            (
                "return_",
                "Return",
                TypeInfo(bool),
            ),
        ]

    response_metadata: typing.Dict[str, str] = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # Returns `true` if the request succeeds; otherwise, it returns an error.
    return_: bool = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class ModifyVpcEndpointServicePermissionsRequest(ShapeBase):
    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "service_id",
                "ServiceId",
                TypeInfo(str),
            ),
            (
                "dry_run",
                "DryRun",
                TypeInfo(bool),
            ),
            (
                "add_allowed_principals",
                "AddAllowedPrincipals",
                TypeInfo(typing.List[str]),
            ),
            (
                "remove_allowed_principals",
                "RemoveAllowedPrincipals",
                TypeInfo(typing.List[str]),
            ),
        ]

    # The ID of the service.
    service_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # Checks whether you have the required permissions for the action, without
    # actually making the request, and provides an error response. If you have
    # the required permissions, the error response is `DryRunOperation`.
    # Otherwise, it is `UnauthorizedOperation`.
    dry_run: bool = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The Amazon Resource Names (ARN) of one or more principals. Permissions are
    # granted to the principals in this list. To grant permissions to all
    # principals, specify an asterisk (*).
    add_allowed_principals: typing.List[str] = dataclasses.field(
        default_factory=list,
    )

    # The Amazon Resource Names (ARN) of one or more principals. Permissions are
    # revoked for principals in this list.
    remove_allowed_principals: typing.List[str] = dataclasses.field(
        default_factory=list,
    )


@dataclasses.dataclass
class ModifyVpcEndpointServicePermissionsResult(OutputShapeBase):
    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "response_metadata",
                "ResponseMetadata",
                TypeInfo(typing.Dict[str, str]),
            ),
            (
                "return_value",
                "ReturnValue",
                TypeInfo(bool),
            ),
        ]

    response_metadata: typing.Dict[str, str] = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # Returns `true` if the request succeeds; otherwise, it returns an error.
    return_value: bool = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class ModifyVpcPeeringConnectionOptionsRequest(ShapeBase):
    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "vpc_peering_connection_id",
                "VpcPeeringConnectionId",
                TypeInfo(str),
            ),
            (
                "accepter_peering_connection_options",
                "AccepterPeeringConnectionOptions",
                TypeInfo(PeeringConnectionOptionsRequest),
            ),
            (
                "dry_run",
                "DryRun",
                TypeInfo(bool),
            ),
            (
                "requester_peering_connection_options",
                "RequesterPeeringConnectionOptions",
                TypeInfo(PeeringConnectionOptionsRequest),
            ),
        ]

    # The ID of the VPC peering connection.
    vpc_peering_connection_id: str = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # The VPC peering connection options for the accepter VPC.
    accepter_peering_connection_options: "PeeringConnectionOptionsRequest" = dataclasses.field(
        default_factory=dict,
    )

    # Checks whether you have the required permissions for the operation, without
    # actually making the request, and provides an error response. If you have
    # the required permissions, the error response is `DryRunOperation`.
    # Otherwise, it is `UnauthorizedOperation`.
    dry_run: bool = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The VPC peering connection options for the requester VPC.
    requester_peering_connection_options: "PeeringConnectionOptionsRequest" = dataclasses.field(
        default_factory=dict,
    )


@dataclasses.dataclass
class ModifyVpcPeeringConnectionOptionsResult(OutputShapeBase):
    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "response_metadata",
                "ResponseMetadata",
                TypeInfo(typing.Dict[str, str]),
            ),
            (
                "accepter_peering_connection_options",
                "AccepterPeeringConnectionOptions",
                TypeInfo(PeeringConnectionOptions),
            ),
            (
                "requester_peering_connection_options",
                "RequesterPeeringConnectionOptions",
                TypeInfo(PeeringConnectionOptions),
            ),
        ]

    response_metadata: typing.Dict[str, str] = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # Information about the VPC peering connection options for the accepter VPC.
    accepter_peering_connection_options: "PeeringConnectionOptions" = dataclasses.field(
        default_factory=dict,
    )

    # Information about the VPC peering connection options for the requester VPC.
    requester_peering_connection_options: "PeeringConnectionOptions" = dataclasses.field(
        default_factory=dict,
    )


@dataclasses.dataclass
class ModifyVpcTenancyRequest(ShapeBase):
    """
    Contains the parameters for ModifyVpcTenancy.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "vpc_id",
                "VpcId",
                TypeInfo(str),
            ),
            (
                "instance_tenancy",
                "InstanceTenancy",
                TypeInfo(VpcTenancy),
            ),
            (
                "dry_run",
                "DryRun",
                TypeInfo(bool),
            ),
        ]

    # The ID of the VPC.
    vpc_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The instance tenancy attribute for the VPC.
    instance_tenancy: "VpcTenancy" = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # Checks whether you have the required permissions for the operation, without
    # actually making the request, and provides an error response. If you have
    # the required permissions, the error response is `DryRunOperation`.
    # Otherwise, it is `UnauthorizedOperation`.
    dry_run: bool = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class ModifyVpcTenancyResult(OutputShapeBase):
    """
    Contains the output of ModifyVpcTenancy.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "response_metadata",
                "ResponseMetadata",
                TypeInfo(typing.Dict[str, str]),
            ),
            (
                "return_value",
                "ReturnValue",
                TypeInfo(bool),
            ),
        ]

    response_metadata: typing.Dict[str, str] = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # Returns `true` if the request succeeds; otherwise, returns an error.
    return_value: bool = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class MonitorInstancesRequest(ShapeBase):
    """
    Contains the parameters for MonitorInstances.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "instance_ids",
                "InstanceIds",
                TypeInfo(typing.List[str]),
            ),
            (
                "dry_run",
                "DryRun",
                TypeInfo(bool),
            ),
        ]

    # One or more instance IDs.
    instance_ids: typing.List[str] = dataclasses.field(default_factory=list, )

    # Checks whether you have the required permissions for the action, without
    # actually making the request, and provides an error response. If you have
    # the required permissions, the error response is `DryRunOperation`.
    # Otherwise, it is `UnauthorizedOperation`.
    dry_run: bool = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class MonitorInstancesResult(OutputShapeBase):
    """
    Contains the output of MonitorInstances.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "response_metadata",
                "ResponseMetadata",
                TypeInfo(typing.Dict[str, str]),
            ),
            (
                "instance_monitorings",
                "InstanceMonitorings",
                TypeInfo(typing.List[InstanceMonitoring]),
            ),
        ]

    response_metadata: typing.Dict[str, str] = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # The monitoring information.
    instance_monitorings: typing.List["InstanceMonitoring"] = dataclasses.field(
        default_factory=list,
    )


@dataclasses.dataclass
class Monitoring(ShapeBase):
    """
    Describes the monitoring of an instance.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "state",
                "State",
                TypeInfo(MonitoringState),
            ),
        ]

    # Indicates whether detailed monitoring is enabled. Otherwise, basic
    # monitoring is enabled.
    state: "MonitoringState" = dataclasses.field(default=ShapeBase.NOT_SET, )


class MonitoringState(Enum):
    disabled = "disabled"
    disabling = "disabling"
    enabled = "enabled"
    pending = "pending"


@dataclasses.dataclass
class MoveAddressToVpcRequest(ShapeBase):
    """
    Contains the parameters for MoveAddressToVpc.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "public_ip",
                "PublicIp",
                TypeInfo(str),
            ),
            (
                "dry_run",
                "DryRun",
                TypeInfo(bool),
            ),
        ]

    # The Elastic IP address.
    public_ip: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # Checks whether you have the required permissions for the action, without
    # actually making the request, and provides an error response. If you have
    # the required permissions, the error response is `DryRunOperation`.
    # Otherwise, it is `UnauthorizedOperation`.
    dry_run: bool = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class MoveAddressToVpcResult(OutputShapeBase):
    """
    Contains the output of MoveAddressToVpc.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "response_metadata",
                "ResponseMetadata",
                TypeInfo(typing.Dict[str, str]),
            ),
            (
                "allocation_id",
                "AllocationId",
                TypeInfo(str),
            ),
            (
                "status",
                "Status",
                TypeInfo(Status),
            ),
        ]

    response_metadata: typing.Dict[str, str] = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # The allocation ID for the Elastic IP address.
    allocation_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The status of the move of the IP address.
    status: "Status" = dataclasses.field(default=ShapeBase.NOT_SET, )


class MoveStatus(Enum):
    movingToVpc = "movingToVpc"
    restoringToClassic = "restoringToClassic"


@dataclasses.dataclass
class MovingAddressStatus(ShapeBase):
    """
    Describes the status of a moving Elastic IP address.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "move_status",
                "MoveStatus",
                TypeInfo(MoveStatus),
            ),
            (
                "public_ip",
                "PublicIp",
                TypeInfo(str),
            ),
        ]

    # The status of the Elastic IP address that's being moved to the EC2-VPC
    # platform, or restored to the EC2-Classic platform.
    move_status: "MoveStatus" = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The Elastic IP address.
    public_ip: str = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class NatGateway(ShapeBase):
    """
    Describes a NAT gateway.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "create_time",
                "CreateTime",
                TypeInfo(datetime.datetime),
            ),
            (
                "delete_time",
                "DeleteTime",
                TypeInfo(datetime.datetime),
            ),
            (
                "failure_code",
                "FailureCode",
                TypeInfo(str),
            ),
            (
                "failure_message",
                "FailureMessage",
                TypeInfo(str),
            ),
            (
                "nat_gateway_addresses",
                "NatGatewayAddresses",
                TypeInfo(typing.List[NatGatewayAddress]),
            ),
            (
                "nat_gateway_id",
                "NatGatewayId",
                TypeInfo(str),
            ),
            (
                "provisioned_bandwidth",
                "ProvisionedBandwidth",
                TypeInfo(ProvisionedBandwidth),
            ),
            (
                "state",
                "State",
                TypeInfo(NatGatewayState),
            ),
            (
                "subnet_id",
                "SubnetId",
                TypeInfo(str),
            ),
            (
                "vpc_id",
                "VpcId",
                TypeInfo(str),
            ),
            (
                "tags",
                "Tags",
                TypeInfo(typing.List[Tag]),
            ),
        ]

    # The date and time the NAT gateway was created.
    create_time: datetime.datetime = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # The date and time the NAT gateway was deleted, if applicable.
    delete_time: datetime.datetime = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # If the NAT gateway could not be created, specifies the error code for the
    # failure. (`InsufficientFreeAddressesInSubnet` | `Gateway.NotAttached` |
    # `InvalidAllocationID.NotFound` | `Resource.AlreadyAssociated` |
    # `InternalError` | `InvalidSubnetID.NotFound`)
    failure_code: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # If the NAT gateway could not be created, specifies the error message for
    # the failure, that corresponds to the error code.

    #   * For InsufficientFreeAddressesInSubnet: "Subnet has insufficient free addresses to create this NAT gateway"

    #   * For Gateway.NotAttached: "Network vpc-xxxxxxxx has no Internet gateway attached"

    #   * For InvalidAllocationID.NotFound: "Elastic IP address eipalloc-xxxxxxxx could not be associated with this NAT gateway"

    #   * For Resource.AlreadyAssociated: "Elastic IP address eipalloc-xxxxxxxx is already associated"

    #   * For InternalError: "Network interface eni-xxxxxxxx, created and used internally by this NAT gateway is in an invalid state. Please try again."

    #   * For InvalidSubnetID.NotFound: "The specified subnet subnet-xxxxxxxx does not exist or could not be found."
    failure_message: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # Information about the IP addresses and network interface associated with
    # the NAT gateway.
    nat_gateway_addresses: typing.List["NatGatewayAddress"] = dataclasses.field(
        default_factory=list,
    )

    # The ID of the NAT gateway.
    nat_gateway_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # Reserved. If you need to sustain traffic greater than the [documented
    # limits](http://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/vpc-nat-
    # gateway.html), contact us through the [Support
    # Center](https://console.aws.amazon.com/support/home?).
    provisioned_bandwidth: "ProvisionedBandwidth" = dataclasses.field(
        default_factory=dict,
    )

    # The state of the NAT gateway.

    #   * `pending`: The NAT gateway is being created and is not ready to process traffic.

    #   * `failed`: The NAT gateway could not be created. Check the `failureCode` and `failureMessage` fields for the reason.

    #   * `available`: The NAT gateway is able to process traffic. This status remains until you delete the NAT gateway, and does not indicate the health of the NAT gateway.

    #   * `deleting`: The NAT gateway is in the process of being terminated and may still be processing traffic.

    #   * `deleted`: The NAT gateway has been terminated and is no longer processing traffic.
    state: "NatGatewayState" = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The ID of the subnet in which the NAT gateway is located.
    subnet_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The ID of the VPC in which the NAT gateway is located.
    vpc_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The tags for the NAT gateway.
    tags: typing.List["Tag"] = dataclasses.field(default_factory=list, )


@dataclasses.dataclass
class NatGatewayAddress(ShapeBase):
    """
    Describes the IP addresses and network interface associated with a NAT gateway.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "allocation_id",
                "AllocationId",
                TypeInfo(str),
            ),
            (
                "network_interface_id",
                "NetworkInterfaceId",
                TypeInfo(str),
            ),
            (
                "private_ip",
                "PrivateIp",
                TypeInfo(str),
            ),
            (
                "public_ip",
                "PublicIp",
                TypeInfo(str),
            ),
        ]

    # The allocation ID of the Elastic IP address that's associated with the NAT
    # gateway.
    allocation_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The ID of the network interface associated with the NAT gateway.
    network_interface_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The private IP address associated with the Elastic IP address.
    private_ip: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The Elastic IP address associated with the NAT gateway.
    public_ip: str = dataclasses.field(default=ShapeBase.NOT_SET, )


class NatGatewayState(Enum):
    pending = "pending"
    failed = "failed"
    available = "available"
    deleting = "deleting"
    deleted = "deleted"


@dataclasses.dataclass
class NetworkAcl(ShapeBase):
    """
    Describes a network ACL.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "associations",
                "Associations",
                TypeInfo(typing.List[NetworkAclAssociation]),
            ),
            (
                "entries",
                "Entries",
                TypeInfo(typing.List[NetworkAclEntry]),
            ),
            (
                "is_default",
                "IsDefault",
                TypeInfo(bool),
            ),
            (
                "network_acl_id",
                "NetworkAclId",
                TypeInfo(str),
            ),
            (
                "tags",
                "Tags",
                TypeInfo(typing.List[Tag]),
            ),
            (
                "vpc_id",
                "VpcId",
                TypeInfo(str),
            ),
        ]

    # Any associations between the network ACL and one or more subnets
    associations: typing.List["NetworkAclAssociation"] = dataclasses.field(
        default_factory=list,
    )

    # One or more entries (rules) in the network ACL.
    entries: typing.List["NetworkAclEntry"] = dataclasses.field(
        default_factory=list,
    )

    # Indicates whether this is the default network ACL for the VPC.
    is_default: bool = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The ID of the network ACL.
    network_acl_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # Any tags assigned to the network ACL.
    tags: typing.List["Tag"] = dataclasses.field(default_factory=list, )

    # The ID of the VPC for the network ACL.
    vpc_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class NetworkAclAssociation(ShapeBase):
    """
    Describes an association between a network ACL and a subnet.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "network_acl_association_id",
                "NetworkAclAssociationId",
                TypeInfo(str),
            ),
            (
                "network_acl_id",
                "NetworkAclId",
                TypeInfo(str),
            ),
            (
                "subnet_id",
                "SubnetId",
                TypeInfo(str),
            ),
        ]

    # The ID of the association between a network ACL and a subnet.
    network_acl_association_id: str = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # The ID of the network ACL.
    network_acl_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The ID of the subnet.
    subnet_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class NetworkAclEntry(ShapeBase):
    """
    Describes an entry in a network ACL.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "cidr_block",
                "CidrBlock",
                TypeInfo(str),
            ),
            (
                "egress",
                "Egress",
                TypeInfo(bool),
            ),
            (
                "icmp_type_code",
                "IcmpTypeCode",
                TypeInfo(IcmpTypeCode),
            ),
            (
                "ipv6_cidr_block",
                "Ipv6CidrBlock",
                TypeInfo(str),
            ),
            (
                "port_range",
                "PortRange",
                TypeInfo(PortRange),
            ),
            (
                "protocol",
                "Protocol",
                TypeInfo(str),
            ),
            (
                "rule_action",
                "RuleAction",
                TypeInfo(RuleAction),
            ),
            (
                "rule_number",
                "RuleNumber",
                TypeInfo(int),
            ),
        ]

    # The IPv4 network range to allow or deny, in CIDR notation.
    cidr_block: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # Indicates whether the rule is an egress rule (applied to traffic leaving
    # the subnet).
    egress: bool = dataclasses.field(default=ShapeBase.NOT_SET, )

    # ICMP protocol: The ICMP type and code.
    icmp_type_code: "IcmpTypeCode" = dataclasses.field(default_factory=dict, )

    # The IPv6 network range to allow or deny, in CIDR notation.
    ipv6_cidr_block: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # TCP or UDP protocols: The range of ports the rule applies to.
    port_range: "PortRange" = dataclasses.field(default_factory=dict, )

    # The protocol. A value of `-1` means all protocols.
    protocol: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # Indicates whether to allow or deny the traffic that matches the rule.
    rule_action: "RuleAction" = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The rule number for the entry. ACL entries are processed in ascending order
    # by rule number.
    rule_number: int = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class NetworkInterface(ShapeBase):
    """
    Describes a network interface.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "association",
                "Association",
                TypeInfo(NetworkInterfaceAssociation),
            ),
            (
                "attachment",
                "Attachment",
                TypeInfo(NetworkInterfaceAttachment),
            ),
            (
                "availability_zone",
                "AvailabilityZone",
                TypeInfo(str),
            ),
            (
                "description",
                "Description",
                TypeInfo(str),
            ),
            (
                "groups",
                "Groups",
                TypeInfo(typing.List[GroupIdentifier]),
            ),
            (
                "interface_type",
                "InterfaceType",
                TypeInfo(NetworkInterfaceType),
            ),
            (
                "ipv6_addresses",
                "Ipv6Addresses",
                TypeInfo(typing.List[NetworkInterfaceIpv6Address]),
            ),
            (
                "mac_address",
                "MacAddress",
                TypeInfo(str),
            ),
            (
                "network_interface_id",
                "NetworkInterfaceId",
                TypeInfo(str),
            ),
            (
                "owner_id",
                "OwnerId",
                TypeInfo(str),
            ),
            (
                "private_dns_name",
                "PrivateDnsName",
                TypeInfo(str),
            ),
            (
                "private_ip_address",
                "PrivateIpAddress",
                TypeInfo(str),
            ),
            (
                "private_ip_addresses",
                "PrivateIpAddresses",
                TypeInfo(typing.List[NetworkInterfacePrivateIpAddress]),
            ),
            (
                "requester_id",
                "RequesterId",
                TypeInfo(str),
            ),
            (
                "requester_managed",
                "RequesterManaged",
                TypeInfo(bool),
            ),
            (
                "source_dest_check",
                "SourceDestCheck",
                TypeInfo(bool),
            ),
            (
                "status",
                "Status",
                TypeInfo(NetworkInterfaceStatus),
            ),
            (
                "subnet_id",
                "SubnetId",
                TypeInfo(str),
            ),
            (
                "tag_set",
                "TagSet",
                TypeInfo(typing.List[Tag]),
            ),
            (
                "vpc_id",
                "VpcId",
                TypeInfo(str),
            ),
        ]

    # The association information for an Elastic IP address (IPv4) associated
    # with the network interface.
    association: "NetworkInterfaceAssociation" = dataclasses.field(
        default_factory=dict,
    )

    # The network interface attachment.
    attachment: "NetworkInterfaceAttachment" = dataclasses.field(
        default_factory=dict,
    )

    # The Availability Zone.
    availability_zone: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # A description.
    description: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # Any security groups for the network interface.
    groups: typing.List["GroupIdentifier"] = dataclasses.field(
        default_factory=list,
    )

    # The type of interface.
    interface_type: "NetworkInterfaceType" = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # The IPv6 addresses associated with the network interface.
    ipv6_addresses: typing.List["NetworkInterfaceIpv6Address"
                               ] = dataclasses.field(
                                   default_factory=list,
                               )

    # The MAC address.
    mac_address: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The ID of the network interface.
    network_interface_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The AWS account ID of the owner of the network interface.
    owner_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The private DNS name.
    private_dns_name: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The IPv4 address of the network interface within the subnet.
    private_ip_address: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The private IPv4 addresses associated with the network interface.
    private_ip_addresses: typing.List["NetworkInterfacePrivateIpAddress"
                                     ] = dataclasses.field(
                                         default_factory=list,
                                     )

    # The ID of the entity that launched the instance on your behalf (for
    # example, AWS Management Console or Auto Scaling).
    requester_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # Indicates whether the network interface is being managed by AWS.
    requester_managed: bool = dataclasses.field(default=ShapeBase.NOT_SET, )

    # Indicates whether traffic to or from the instance is validated.
    source_dest_check: bool = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The status of the network interface.
    status: "NetworkInterfaceStatus" = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # The ID of the subnet.
    subnet_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # Any tags assigned to the network interface.
    tag_set: typing.List["Tag"] = dataclasses.field(default_factory=list, )

    # The ID of the VPC.
    vpc_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class NetworkInterfaceAssociation(ShapeBase):
    """
    Describes association information for an Elastic IP address (IPv4 only).
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "allocation_id",
                "AllocationId",
                TypeInfo(str),
            ),
            (
                "association_id",
                "AssociationId",
                TypeInfo(str),
            ),
            (
                "ip_owner_id",
                "IpOwnerId",
                TypeInfo(str),
            ),
            (
                "public_dns_name",
                "PublicDnsName",
                TypeInfo(str),
            ),
            (
                "public_ip",
                "PublicIp",
                TypeInfo(str),
            ),
        ]

    # The allocation ID.
    allocation_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The association ID.
    association_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The ID of the Elastic IP address owner.
    ip_owner_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The public DNS name.
    public_dns_name: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The address of the Elastic IP address bound to the network interface.
    public_ip: str = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class NetworkInterfaceAttachment(ShapeBase):
    """
    Describes a network interface attachment.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "attach_time",
                "AttachTime",
                TypeInfo(datetime.datetime),
            ),
            (
                "attachment_id",
                "AttachmentId",
                TypeInfo(str),
            ),
            (
                "delete_on_termination",
                "DeleteOnTermination",
                TypeInfo(bool),
            ),
            (
                "device_index",
                "DeviceIndex",
                TypeInfo(int),
            ),
            (
                "instance_id",
                "InstanceId",
                TypeInfo(str),
            ),
            (
                "instance_owner_id",
                "InstanceOwnerId",
                TypeInfo(str),
            ),
            (
                "status",
                "Status",
                TypeInfo(AttachmentStatus),
            ),
        ]

    # The timestamp indicating when the attachment initiated.
    attach_time: datetime.datetime = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # The ID of the network interface attachment.
    attachment_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # Indicates whether the network interface is deleted when the instance is
    # terminated.
    delete_on_termination: bool = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The device index of the network interface attachment on the instance.
    device_index: int = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The ID of the instance.
    instance_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The AWS account ID of the owner of the instance.
    instance_owner_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The attachment state.
    status: "AttachmentStatus" = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class NetworkInterfaceAttachmentChanges(ShapeBase):
    """
    Describes an attachment change.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "attachment_id",
                "AttachmentId",
                TypeInfo(str),
            ),
            (
                "delete_on_termination",
                "DeleteOnTermination",
                TypeInfo(bool),
            ),
        ]

    # The ID of the network interface attachment.
    attachment_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # Indicates whether the network interface is deleted when the instance is
    # terminated.
    delete_on_termination: bool = dataclasses.field(default=ShapeBase.NOT_SET, )


class NetworkInterfaceAttribute(Enum):
    description = "description"
    groupSet = "groupSet"
    sourceDestCheck = "sourceDestCheck"
    attachment = "attachment"


@dataclasses.dataclass
class NetworkInterfaceIpv6Address(ShapeBase):
    """
    Describes an IPv6 address associated with a network interface.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "ipv6_address",
                "Ipv6Address",
                TypeInfo(str),
            ),
        ]

    # The IPv6 address.
    ipv6_address: str = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class NetworkInterfacePermission(ShapeBase):
    """
    Describes a permission for a network interface.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "network_interface_permission_id",
                "NetworkInterfacePermissionId",
                TypeInfo(str),
            ),
            (
                "network_interface_id",
                "NetworkInterfaceId",
                TypeInfo(str),
            ),
            (
                "aws_account_id",
                "AwsAccountId",
                TypeInfo(str),
            ),
            (
                "aws_service",
                "AwsService",
                TypeInfo(str),
            ),
            (
                "permission",
                "Permission",
                TypeInfo(InterfacePermissionType),
            ),
            (
                "permission_state",
                "PermissionState",
                TypeInfo(NetworkInterfacePermissionState),
            ),
        ]

    # The ID of the network interface permission.
    network_interface_permission_id: str = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # The ID of the network interface.
    network_interface_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The AWS account ID.
    aws_account_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The AWS service.
    aws_service: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The type of permission.
    permission: "InterfacePermissionType" = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # Information about the state of the permission.
    permission_state: "NetworkInterfacePermissionState" = dataclasses.field(
        default_factory=dict,
    )


@dataclasses.dataclass
class NetworkInterfacePermissionState(ShapeBase):
    """
    Describes the state of a network interface permission.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "state",
                "State",
                TypeInfo(NetworkInterfacePermissionStateCode),
            ),
            (
                "status_message",
                "StatusMessage",
                TypeInfo(str),
            ),
        ]

    # The state of the permission.
    state: "NetworkInterfacePermissionStateCode" = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # A status message, if applicable.
    status_message: str = dataclasses.field(default=ShapeBase.NOT_SET, )


class NetworkInterfacePermissionStateCode(Enum):
    pending = "pending"
    granted = "granted"
    revoking = "revoking"
    revoked = "revoked"


@dataclasses.dataclass
class NetworkInterfacePrivateIpAddress(ShapeBase):
    """
    Describes the private IPv4 address of a network interface.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "association",
                "Association",
                TypeInfo(NetworkInterfaceAssociation),
            ),
            (
                "primary",
                "Primary",
                TypeInfo(bool),
            ),
            (
                "private_dns_name",
                "PrivateDnsName",
                TypeInfo(str),
            ),
            (
                "private_ip_address",
                "PrivateIpAddress",
                TypeInfo(str),
            ),
        ]

    # The association information for an Elastic IP address (IPv4) associated
    # with the network interface.
    association: "NetworkInterfaceAssociation" = dataclasses.field(
        default_factory=dict,
    )

    # Indicates whether this IPv4 address is the primary private IPv4 address of
    # the network interface.
    primary: bool = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The private DNS name.
    private_dns_name: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The private IPv4 address.
    private_ip_address: str = dataclasses.field(default=ShapeBase.NOT_SET, )


class NetworkInterfaceStatus(Enum):
    available = "available"
    associated = "associated"
    attaching = "attaching"
    in_use = "in-use"
    detaching = "detaching"


class NetworkInterfaceType(Enum):
    interface = "interface"
    natGateway = "natGateway"


@dataclasses.dataclass
class NewDhcpConfiguration(ShapeBase):
    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "key",
                "Key",
                TypeInfo(str),
            ),
            (
                "values",
                "Values",
                TypeInfo(typing.List[str]),
            ),
        ]

    key: str = dataclasses.field(default=ShapeBase.NOT_SET, )
    values: typing.List[str] = dataclasses.field(default_factory=list, )


class OfferingClassType(Enum):
    standard = "standard"
    convertible = "convertible"


class OfferingTypeValues(Enum):
    Heavy_Utilization = "Heavy Utilization"
    Medium_Utilization = "Medium Utilization"
    Light_Utilization = "Light Utilization"
    No_Upfront = "No Upfront"
    Partial_Upfront = "Partial Upfront"
    All_Upfront = "All Upfront"


class OnDemandAllocationStrategy(Enum):
    lowestPrice = "lowestPrice"
    prioritized = "prioritized"


@dataclasses.dataclass
class OnDemandOptions(ShapeBase):
    """
    The allocation strategy of On-Demand Instances in an EC2 Fleet.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "allocation_strategy",
                "AllocationStrategy",
                TypeInfo(FleetOnDemandAllocationStrategy),
            ),
        ]

    # The order of the launch template overrides to use in fulfilling On-Demand
    # capacity. If you specify `lowest-price`, EC2 Fleet uses price to determine
    # the order, launching the lowest price first. If you specify `prioritized`,
    # EC2 Fleet uses the priority that you assigned to each launch template
    # override, launching the highest priority first. If you do not specify a
    # value, EC2 Fleet defaults to `lowest-price`.
    allocation_strategy: "FleetOnDemandAllocationStrategy" = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )


@dataclasses.dataclass
class OnDemandOptionsRequest(ShapeBase):
    """
    The allocation strategy of On-Demand Instances in an EC2 Fleet.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "allocation_strategy",
                "AllocationStrategy",
                TypeInfo(FleetOnDemandAllocationStrategy),
            ),
        ]

    # The order of the launch template overrides to use in fulfilling On-Demand
    # capacity. If you specify `lowest-price`, EC2 Fleet uses price to determine
    # the order, launching the lowest price first. If you specify `prioritized`,
    # EC2 Fleet uses the priority that you assigned to each launch template
    # override, launching the highest priority first. If you do not specify a
    # value, EC2 Fleet defaults to `lowest-price`.
    allocation_strategy: "FleetOnDemandAllocationStrategy" = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )


class OperationType(Enum):
    add = "add"
    remove = "remove"


class PaymentOption(Enum):
    AllUpfront = "AllUpfront"
    PartialUpfront = "PartialUpfront"
    NoUpfront = "NoUpfront"


@dataclasses.dataclass
class PciId(ShapeBase):
    """
    Describes the data that identifies an Amazon FPGA image (AFI) on the PCI bus.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "device_id",
                "DeviceId",
                TypeInfo(str),
            ),
            (
                "vendor_id",
                "VendorId",
                TypeInfo(str),
            ),
            (
                "subsystem_id",
                "SubsystemId",
                TypeInfo(str),
            ),
            (
                "subsystem_vendor_id",
                "SubsystemVendorId",
                TypeInfo(str),
            ),
        ]

    # The ID of the device.
    device_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The ID of the vendor.
    vendor_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The ID of the subsystem.
    subsystem_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The ID of the vendor for the subsystem.
    subsystem_vendor_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class PeeringConnectionOptions(ShapeBase):
    """
    Describes the VPC peering connection options.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "allow_dns_resolution_from_remote_vpc",
                "AllowDnsResolutionFromRemoteVpc",
                TypeInfo(bool),
            ),
            (
                "allow_egress_from_local_classic_link_to_remote_vpc",
                "AllowEgressFromLocalClassicLinkToRemoteVpc",
                TypeInfo(bool),
            ),
            (
                "allow_egress_from_local_vpc_to_remote_classic_link",
                "AllowEgressFromLocalVpcToRemoteClassicLink",
                TypeInfo(bool),
            ),
        ]

    # If true, the public DNS hostnames of instances in the specified VPC resolve
    # to private IP addresses when queried from instances in the peer VPC.
    allow_dns_resolution_from_remote_vpc: bool = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # If true, enables outbound communication from an EC2-Classic instance that's
    # linked to a local VPC via ClassicLink to instances in a peer VPC.
    allow_egress_from_local_classic_link_to_remote_vpc: bool = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # If true, enables outbound communication from instances in a local VPC to an
    # EC2-Classic instance that's linked to a peer VPC via ClassicLink.
    allow_egress_from_local_vpc_to_remote_classic_link: bool = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )


@dataclasses.dataclass
class PeeringConnectionOptionsRequest(ShapeBase):
    """
    The VPC peering connection options.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "allow_dns_resolution_from_remote_vpc",
                "AllowDnsResolutionFromRemoteVpc",
                TypeInfo(bool),
            ),
            (
                "allow_egress_from_local_classic_link_to_remote_vpc",
                "AllowEgressFromLocalClassicLinkToRemoteVpc",
                TypeInfo(bool),
            ),
            (
                "allow_egress_from_local_vpc_to_remote_classic_link",
                "AllowEgressFromLocalVpcToRemoteClassicLink",
                TypeInfo(bool),
            ),
        ]

    # If true, enables a local VPC to resolve public DNS hostnames to private IP
    # addresses when queried from instances in the peer VPC.
    allow_dns_resolution_from_remote_vpc: bool = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # If true, enables outbound communication from an EC2-Classic instance that's
    # linked to a local VPC via ClassicLink to instances in a peer VPC.
    allow_egress_from_local_classic_link_to_remote_vpc: bool = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # If true, enables outbound communication from instances in a local VPC to an
    # EC2-Classic instance that's linked to a peer VPC via ClassicLink.
    allow_egress_from_local_vpc_to_remote_classic_link: bool = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )


class PermissionGroup(Enum):
    all = "all"


@dataclasses.dataclass
class Placement(ShapeBase):
    """
    Describes the placement of an instance.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "availability_zone",
                "AvailabilityZone",
                TypeInfo(str),
            ),
            (
                "affinity",
                "Affinity",
                TypeInfo(str),
            ),
            (
                "group_name",
                "GroupName",
                TypeInfo(str),
            ),
            (
                "host_id",
                "HostId",
                TypeInfo(str),
            ),
            (
                "tenancy",
                "Tenancy",
                TypeInfo(Tenancy),
            ),
            (
                "spread_domain",
                "SpreadDomain",
                TypeInfo(str),
            ),
        ]

    # The Availability Zone of the instance.
    availability_zone: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The affinity setting for the instance on the Dedicated Host. This parameter
    # is not supported for the ImportInstance command.
    affinity: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The name of the placement group the instance is in.
    group_name: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The ID of the Dedicated Host on which the instance resides. This parameter
    # is not supported for the ImportInstance command.
    host_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The tenancy of the instance (if the instance is running in a VPC). An
    # instance with a tenancy of `dedicated` runs on single-tenant hardware. The
    # `host` tenancy is not supported for the ImportInstance command.
    tenancy: "Tenancy" = dataclasses.field(default=ShapeBase.NOT_SET, )

    # Reserved for future use.
    spread_domain: str = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class PlacementGroup(ShapeBase):
    """
    Describes a placement group.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "group_name",
                "GroupName",
                TypeInfo(str),
            ),
            (
                "state",
                "State",
                TypeInfo(PlacementGroupState),
            ),
            (
                "strategy",
                "Strategy",
                TypeInfo(PlacementStrategy),
            ),
        ]

    # The name of the placement group.
    group_name: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The state of the placement group.
    state: "PlacementGroupState" = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # The placement strategy.
    strategy: "PlacementStrategy" = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )


class PlacementGroupState(Enum):
    pending = "pending"
    available = "available"
    deleting = "deleting"
    deleted = "deleted"


class PlacementStrategy(Enum):
    cluster = "cluster"
    spread = "spread"


class PlatformValues(Enum):
    Windows = "Windows"


@dataclasses.dataclass
class PortRange(ShapeBase):
    """
    Describes a range of ports.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "from_",
                "From",
                TypeInfo(int),
            ),
            (
                "to",
                "To",
                TypeInfo(int),
            ),
        ]

    # The first port in the range.
    from_: int = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The last port in the range.
    to: int = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class PrefixList(ShapeBase):
    """
    Describes prefixes for AWS services.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "cidrs",
                "Cidrs",
                TypeInfo(typing.List[str]),
            ),
            (
                "prefix_list_id",
                "PrefixListId",
                TypeInfo(str),
            ),
            (
                "prefix_list_name",
                "PrefixListName",
                TypeInfo(str),
            ),
        ]

    # The IP address range of the AWS service.
    cidrs: typing.List[str] = dataclasses.field(default_factory=list, )

    # The ID of the prefix.
    prefix_list_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The name of the prefix.
    prefix_list_name: str = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class PrefixListId(ShapeBase):
    """
    [EC2-VPC only] The ID of the prefix.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "description",
                "Description",
                TypeInfo(str),
            ),
            (
                "prefix_list_id",
                "PrefixListId",
                TypeInfo(str),
            ),
        ]

    # A description for the security group rule that references this prefix list
    # ID.

    # Constraints: Up to 255 characters in length. Allowed characters are a-z,
    # A-Z, 0-9, spaces, and ._-:/()#,@[]+=;{}!$*
    description: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The ID of the prefix.
    prefix_list_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class PriceSchedule(ShapeBase):
    """
    Describes the price for a Reserved Instance.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "active",
                "Active",
                TypeInfo(bool),
            ),
            (
                "currency_code",
                "CurrencyCode",
                TypeInfo(CurrencyCodeValues),
            ),
            (
                "price",
                "Price",
                TypeInfo(float),
            ),
            (
                "term",
                "Term",
                TypeInfo(int),
            ),
        ]

    # The current price schedule, as determined by the term remaining for the
    # Reserved Instance in the listing.

    # A specific price schedule is always in effect, but only one price schedule
    # can be active at any time. Take, for example, a Reserved Instance listing
    # that has five months remaining in its term. When you specify price
    # schedules for five months and two months, this means that schedule 1,
    # covering the first three months of the remaining term, will be active
    # during months 5, 4, and 3. Then schedule 2, covering the last two months of
    # the term, will be active for months 2 and 1.
    active: bool = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The currency for transacting the Reserved Instance resale. At this time,
    # the only supported currency is `USD`.
    currency_code: "CurrencyCodeValues" = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # The fixed price for the term.
    price: float = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The number of months remaining in the reservation. For example, 2 is the
    # second to the last month before the capacity reservation expires.
    term: int = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class PriceScheduleSpecification(ShapeBase):
    """
    Describes the price for a Reserved Instance.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "currency_code",
                "CurrencyCode",
                TypeInfo(CurrencyCodeValues),
            ),
            (
                "price",
                "Price",
                TypeInfo(float),
            ),
            (
                "term",
                "Term",
                TypeInfo(int),
            ),
        ]

    # The currency for transacting the Reserved Instance resale. At this time,
    # the only supported currency is `USD`.
    currency_code: "CurrencyCodeValues" = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # The fixed price for the term.
    price: float = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The number of months remaining in the reservation. For example, 2 is the
    # second to the last month before the capacity reservation expires.
    term: int = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class PricingDetail(ShapeBase):
    """
    Describes a Reserved Instance offering.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "count",
                "Count",
                TypeInfo(int),
            ),
            (
                "price",
                "Price",
                TypeInfo(float),
            ),
        ]

    # The number of reservations available for the price.
    count: int = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The price per instance.
    price: float = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class PrincipalIdFormat(ShapeBase):
    """
    PrincipalIdFormat description
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "arn",
                "Arn",
                TypeInfo(str),
            ),
            (
                "statuses",
                "Statuses",
                TypeInfo(typing.List[IdFormat]),
            ),
        ]

    # PrincipalIdFormatARN description
    arn: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # PrincipalIdFormatStatuses description
    statuses: typing.List["IdFormat"] = dataclasses.field(
        default_factory=list,
    )


class PrincipalType(Enum):
    All = "All"
    Service = "Service"
    OrganizationUnit = "OrganizationUnit"
    Account = "Account"
    User = "User"
    Role = "Role"


@dataclasses.dataclass
class PrivateIpAddressSpecification(ShapeBase):
    """
    Describes a secondary private IPv4 address for a network interface.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "primary",
                "Primary",
                TypeInfo(bool),
            ),
            (
                "private_ip_address",
                "PrivateIpAddress",
                TypeInfo(str),
            ),
        ]

    # Indicates whether the private IPv4 address is the primary private IPv4
    # address. Only one IPv4 address can be designated as primary.
    primary: bool = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The private IPv4 addresses.
    private_ip_address: str = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class ProductCode(ShapeBase):
    """
    Describes a product code.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "product_code_id",
                "ProductCodeId",
                TypeInfo(str),
            ),
            (
                "product_code_type",
                "ProductCodeType",
                TypeInfo(ProductCodeValues),
            ),
        ]

    # The product code.
    product_code_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The type of product code.
    product_code_type: "ProductCodeValues" = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )


class ProductCodeValues(Enum):
    devpay = "devpay"
    marketplace = "marketplace"


@dataclasses.dataclass
class PropagatingVgw(ShapeBase):
    """
    Describes a virtual private gateway propagating route.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "gateway_id",
                "GatewayId",
                TypeInfo(str),
            ),
        ]

    # The ID of the virtual private gateway.
    gateway_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class ProvisionedBandwidth(ShapeBase):
    """
    Reserved. If you need to sustain traffic greater than the [documented
    limits](http://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/vpc-nat-
    gateway.html), contact us through the [Support
    Center](https://console.aws.amazon.com/support/home?).
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "provision_time",
                "ProvisionTime",
                TypeInfo(datetime.datetime),
            ),
            (
                "provisioned",
                "Provisioned",
                TypeInfo(str),
            ),
            (
                "request_time",
                "RequestTime",
                TypeInfo(datetime.datetime),
            ),
            (
                "requested",
                "Requested",
                TypeInfo(str),
            ),
            (
                "status",
                "Status",
                TypeInfo(str),
            ),
        ]

    # Reserved. If you need to sustain traffic greater than the [documented
    # limits](http://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/vpc-nat-
    # gateway.html), contact us through the [Support
    # Center](https://console.aws.amazon.com/support/home?).
    provision_time: datetime.datetime = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # Reserved. If you need to sustain traffic greater than the [documented
    # limits](http://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/vpc-nat-
    # gateway.html), contact us through the [Support
    # Center](https://console.aws.amazon.com/support/home?).
    provisioned: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # Reserved. If you need to sustain traffic greater than the [documented
    # limits](http://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/vpc-nat-
    # gateway.html), contact us through the [Support
    # Center](https://console.aws.amazon.com/support/home?).
    request_time: datetime.datetime = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # Reserved. If you need to sustain traffic greater than the [documented
    # limits](http://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/vpc-nat-
    # gateway.html), contact us through the [Support
    # Center](https://console.aws.amazon.com/support/home?).
    requested: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # Reserved. If you need to sustain traffic greater than the [documented
    # limits](http://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/vpc-nat-
    # gateway.html), contact us through the [Support
    # Center](https://console.aws.amazon.com/support/home?).
    status: str = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class Purchase(ShapeBase):
    """
    Describes the result of the purchase.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "currency_code",
                "CurrencyCode",
                TypeInfo(CurrencyCodeValues),
            ),
            (
                "duration",
                "Duration",
                TypeInfo(int),
            ),
            (
                "host_id_set",
                "HostIdSet",
                TypeInfo(typing.List[str]),
            ),
            (
                "host_reservation_id",
                "HostReservationId",
                TypeInfo(str),
            ),
            (
                "hourly_price",
                "HourlyPrice",
                TypeInfo(str),
            ),
            (
                "instance_family",
                "InstanceFamily",
                TypeInfo(str),
            ),
            (
                "payment_option",
                "PaymentOption",
                TypeInfo(PaymentOption),
            ),
            (
                "upfront_price",
                "UpfrontPrice",
                TypeInfo(str),
            ),
        ]

    # The currency in which the `UpfrontPrice` and `HourlyPrice` amounts are
    # specified. At this time, the only supported currency is `USD`.
    currency_code: "CurrencyCodeValues" = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # The duration of the reservation's term in seconds.
    duration: int = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The IDs of the Dedicated Hosts associated with the reservation.
    host_id_set: typing.List[str] = dataclasses.field(default_factory=list, )

    # The ID of the reservation.
    host_reservation_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The hourly price of the reservation per hour.
    hourly_price: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The instance family on the Dedicated Host that the reservation can be
    # associated with.
    instance_family: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The payment option for the reservation.
    payment_option: "PaymentOption" = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # The upfront price of the reservation.
    upfront_price: str = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class PurchaseHostReservationRequest(ShapeBase):
    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "host_id_set",
                "HostIdSet",
                TypeInfo(typing.List[str]),
            ),
            (
                "offering_id",
                "OfferingId",
                TypeInfo(str),
            ),
            (
                "client_token",
                "ClientToken",
                TypeInfo(str),
            ),
            (
                "currency_code",
                "CurrencyCode",
                TypeInfo(CurrencyCodeValues),
            ),
            (
                "limit_price",
                "LimitPrice",
                TypeInfo(str),
            ),
        ]

    # The IDs of the Dedicated Hosts with which the reservation will be
    # associated.
    host_id_set: typing.List[str] = dataclasses.field(default_factory=list, )

    # The ID of the offering.
    offering_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # Unique, case-sensitive identifier you provide to ensure idempotency of the
    # request. For more information, see [How to Ensure
    # Idempotency](http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Run_Instance_Idempotency.html)
    # in the _Amazon Elastic Compute Cloud User Guide_.
    client_token: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The currency in which the `totalUpfrontPrice`, `LimitPrice`, and
    # `totalHourlyPrice` amounts are specified. At this time, the only supported
    # currency is `USD`.
    currency_code: "CurrencyCodeValues" = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # The specified limit is checked against the total upfront cost of the
    # reservation (calculated as the offering's upfront cost multiplied by the
    # host count). If the total upfront cost is greater than the specified price
    # limit, the request fails. This is used to ensure that the purchase does not
    # exceed the expected upfront cost of the purchase. At this time, the only
    # supported currency is `USD`. For example, to indicate a limit price of USD
    # 100, specify 100.00.
    limit_price: str = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class PurchaseHostReservationResult(OutputShapeBase):
    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "response_metadata",
                "ResponseMetadata",
                TypeInfo(typing.Dict[str, str]),
            ),
            (
                "client_token",
                "ClientToken",
                TypeInfo(str),
            ),
            (
                "currency_code",
                "CurrencyCode",
                TypeInfo(CurrencyCodeValues),
            ),
            (
                "purchase",
                "Purchase",
                TypeInfo(typing.List[Purchase]),
            ),
            (
                "total_hourly_price",
                "TotalHourlyPrice",
                TypeInfo(str),
            ),
            (
                "total_upfront_price",
                "TotalUpfrontPrice",
                TypeInfo(str),
            ),
        ]

    response_metadata: typing.Dict[str, str] = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # Unique, case-sensitive identifier you provide to ensure idempotency of the
    # request. For more information, see [How to Ensure
    # Idempotency](http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Run_Instance_Idempotency.html)
    # in the _Amazon Elastic Compute Cloud User Guide_.
    client_token: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The currency in which the `totalUpfrontPrice` and `totalHourlyPrice`
    # amounts are specified. At this time, the only supported currency is `USD`.
    currency_code: "CurrencyCodeValues" = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # Describes the details of the purchase.
    purchase: typing.List["Purchase"] = dataclasses.field(
        default_factory=list,
    )

    # The total hourly price of the reservation calculated per hour.
    total_hourly_price: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The total amount charged to your account when you purchase the reservation.
    total_upfront_price: str = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class PurchaseRequest(ShapeBase):
    """
    Describes a request to purchase Scheduled Instances.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "instance_count",
                "InstanceCount",
                TypeInfo(int),
            ),
            (
                "purchase_token",
                "PurchaseToken",
                TypeInfo(str),
            ),
        ]

    # The number of instances.
    instance_count: int = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The purchase token.
    purchase_token: str = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class PurchaseReservedInstancesOfferingRequest(ShapeBase):
    """
    Contains the parameters for PurchaseReservedInstancesOffering.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "instance_count",
                "InstanceCount",
                TypeInfo(int),
            ),
            (
                "reserved_instances_offering_id",
                "ReservedInstancesOfferingId",
                TypeInfo(str),
            ),
            (
                "dry_run",
                "DryRun",
                TypeInfo(bool),
            ),
            (
                "limit_price",
                "LimitPrice",
                TypeInfo(ReservedInstanceLimitPrice),
            ),
        ]

    # The number of Reserved Instances to purchase.
    instance_count: int = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The ID of the Reserved Instance offering to purchase.
    reserved_instances_offering_id: str = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # Checks whether you have the required permissions for the action, without
    # actually making the request, and provides an error response. If you have
    # the required permissions, the error response is `DryRunOperation`.
    # Otherwise, it is `UnauthorizedOperation`.
    dry_run: bool = dataclasses.field(default=ShapeBase.NOT_SET, )

    # Specified for Reserved Instance Marketplace offerings to limit the total
    # order and ensure that the Reserved Instances are not purchased at
    # unexpected prices.
    limit_price: "ReservedInstanceLimitPrice" = dataclasses.field(
        default_factory=dict,
    )


@dataclasses.dataclass
class PurchaseReservedInstancesOfferingResult(OutputShapeBase):
    """
    Contains the output of PurchaseReservedInstancesOffering.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "response_metadata",
                "ResponseMetadata",
                TypeInfo(typing.Dict[str, str]),
            ),
            (
                "reserved_instances_id",
                "ReservedInstancesId",
                TypeInfo(str),
            ),
        ]

    response_metadata: typing.Dict[str, str] = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # The IDs of the purchased Reserved Instances.
    reserved_instances_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class PurchaseScheduledInstancesRequest(ShapeBase):
    """
    Contains the parameters for PurchaseScheduledInstances.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "purchase_requests",
                "PurchaseRequests",
                TypeInfo(typing.List[PurchaseRequest]),
            ),
            (
                "client_token",
                "ClientToken",
                TypeInfo(str),
            ),
            (
                "dry_run",
                "DryRun",
                TypeInfo(bool),
            ),
        ]

    # One or more purchase requests.
    purchase_requests: typing.List["PurchaseRequest"] = dataclasses.field(
        default_factory=list,
    )

    # Unique, case-sensitive identifier that ensures the idempotency of the
    # request. For more information, see [Ensuring
    # Idempotency](http://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html).
    client_token: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # Checks whether you have the required permissions for the action, without
    # actually making the request, and provides an error response. If you have
    # the required permissions, the error response is `DryRunOperation`.
    # Otherwise, it is `UnauthorizedOperation`.
    dry_run: bool = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class PurchaseScheduledInstancesResult(OutputShapeBase):
    """
    Contains the output of PurchaseScheduledInstances.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "response_metadata",
                "ResponseMetadata",
                TypeInfo(typing.Dict[str, str]),
            ),
            (
                "scheduled_instance_set",
                "ScheduledInstanceSet",
                TypeInfo(typing.List[ScheduledInstance]),
            ),
        ]

    response_metadata: typing.Dict[str, str] = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # Information about the Scheduled Instances.
    scheduled_instance_set: typing.List["ScheduledInstance"
                                       ] = dataclasses.field(
                                           default_factory=list,
                                       )


class RIProductDescription(Enum):
    Linux_UNIX = "Linux/UNIX"
    Linux_UNIX__Amazon_VPC_ = "Linux/UNIX (Amazon VPC)"
    Windows = "Windows"
    Windows__Amazon_VPC_ = "Windows (Amazon VPC)"


@dataclasses.dataclass
class RebootInstancesRequest(ShapeBase):
    """
    Contains the parameters for RebootInstances.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "instance_ids",
                "InstanceIds",
                TypeInfo(typing.List[str]),
            ),
            (
                "dry_run",
                "DryRun",
                TypeInfo(bool),
            ),
        ]

    # One or more instance IDs.
    instance_ids: typing.List[str] = dataclasses.field(default_factory=list, )

    # Checks whether you have the required permissions for the action, without
    # actually making the request, and provides an error response. If you have
    # the required permissions, the error response is `DryRunOperation`.
    # Otherwise, it is `UnauthorizedOperation`.
    dry_run: bool = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class RecurringCharge(ShapeBase):
    """
    Describes a recurring charge.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "amount",
                "Amount",
                TypeInfo(float),
            ),
            (
                "frequency",
                "Frequency",
                TypeInfo(RecurringChargeFrequency),
            ),
        ]

    # The amount of the recurring charge.
    amount: float = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The frequency of the recurring charge.
    frequency: "RecurringChargeFrequency" = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )


class RecurringChargeFrequency(Enum):
    Hourly = "Hourly"


@dataclasses.dataclass
class Region(ShapeBase):
    """
    Describes a region.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "endpoint",
                "Endpoint",
                TypeInfo(str),
            ),
            (
                "region_name",
                "RegionName",
                TypeInfo(str),
            ),
        ]

    # The region service endpoint.
    endpoint: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The name of the region.
    region_name: str = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class RegisterImageRequest(ShapeBase):
    """
    Contains the parameters for RegisterImage.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "name",
                "Name",
                TypeInfo(str),
            ),
            (
                "image_location",
                "ImageLocation",
                TypeInfo(str),
            ),
            (
                "architecture",
                "Architecture",
                TypeInfo(ArchitectureValues),
            ),
            (
                "block_device_mappings",
                "BlockDeviceMappings",
                TypeInfo(typing.List[BlockDeviceMapping]),
            ),
            (
                "description",
                "Description",
                TypeInfo(str),
            ),
            (
                "dry_run",
                "DryRun",
                TypeInfo(bool),
            ),
            (
                "ena_support",
                "EnaSupport",
                TypeInfo(bool),
            ),
            (
                "kernel_id",
                "KernelId",
                TypeInfo(str),
            ),
            (
                "billing_products",
                "BillingProducts",
                TypeInfo(typing.List[str]),
            ),
            (
                "ramdisk_id",
                "RamdiskId",
                TypeInfo(str),
            ),
            (
                "root_device_name",
                "RootDeviceName",
                TypeInfo(str),
            ),
            (
                "sriov_net_support",
                "SriovNetSupport",
                TypeInfo(str),
            ),
            (
                "virtualization_type",
                "VirtualizationType",
                TypeInfo(str),
            ),
        ]

    # A name for your AMI.

    # Constraints: 3-128 alphanumeric characters, parentheses (()), square
    # brackets ([]), spaces ( ), periods (.), slashes (/), dashes (-), single
    # quotes ('), at-signs (@), or underscores(_)
    name: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The full path to your AMI manifest in Amazon S3 storage.
    image_location: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The architecture of the AMI.

    # Default: For Amazon EBS-backed AMIs, `i386`. For instance store-backed
    # AMIs, the architecture specified in the manifest file.
    architecture: "ArchitectureValues" = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # One or more block device mapping entries.
    block_device_mappings: typing.List["BlockDeviceMapping"
                                      ] = dataclasses.field(
                                          default_factory=list,
                                      )

    # A description for your AMI.
    description: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # Checks whether you have the required permissions for the action, without
    # actually making the request, and provides an error response. If you have
    # the required permissions, the error response is `DryRunOperation`.
    # Otherwise, it is `UnauthorizedOperation`.
    dry_run: bool = dataclasses.field(default=ShapeBase.NOT_SET, )

    # Set to `true` to enable enhanced networking with ENA for the AMI and any
    # instances that you launch from the AMI.

    # This option is supported only for HVM AMIs. Specifying this option with a
    # PV AMI can make instances launched from the AMI unreachable.
    ena_support: bool = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The ID of the kernel.
    kernel_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The billing product codes. Your account must be authorized to specify
    # billing product codes. Otherwise, you can use the AWS Marketplace to bill
    # for the use of an AMI.
    billing_products: typing.List[str] = dataclasses.field(
        default_factory=list,
    )

    # The ID of the RAM disk.
    ramdisk_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The device name of the root device volume (for example, `/dev/sda1`).
    root_device_name: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # Set to `simple` to enable enhanced networking with the Intel 82599 Virtual
    # Function interface for the AMI and any instances that you launch from the
    # AMI.

    # There is no way to disable `sriovNetSupport` at this time.

    # This option is supported only for HVM AMIs. Specifying this option with a
    # PV AMI can make instances launched from the AMI unreachable.
    sriov_net_support: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The type of virtualization (`hvm` | `paravirtual`).

    # Default: `paravirtual`
    virtualization_type: str = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class RegisterImageResult(OutputShapeBase):
    """
    Contains the output of RegisterImage.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "response_metadata",
                "ResponseMetadata",
                TypeInfo(typing.Dict[str, str]),
            ),
            (
                "image_id",
                "ImageId",
                TypeInfo(str),
            ),
        ]

    response_metadata: typing.Dict[str, str] = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # The ID of the newly registered AMI.
    image_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class RejectVpcEndpointConnectionsRequest(ShapeBase):
    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "service_id",
                "ServiceId",
                TypeInfo(str),
            ),
            (
                "vpc_endpoint_ids",
                "VpcEndpointIds",
                TypeInfo(typing.List[str]),
            ),
            (
                "dry_run",
                "DryRun",
                TypeInfo(bool),
            ),
        ]

    # The ID of the service.
    service_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The IDs of one or more VPC endpoints.
    vpc_endpoint_ids: typing.List[str] = dataclasses.field(
        default_factory=list,
    )

    # Checks whether you have the required permissions for the action, without
    # actually making the request, and provides an error response. If you have
    # the required permissions, the error response is `DryRunOperation`.
    # Otherwise, it is `UnauthorizedOperation`.
    dry_run: bool = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class RejectVpcEndpointConnectionsResult(OutputShapeBase):
    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "response_metadata",
                "ResponseMetadata",
                TypeInfo(typing.Dict[str, str]),
            ),
            (
                "unsuccessful",
                "Unsuccessful",
                TypeInfo(typing.List[UnsuccessfulItem]),
            ),
        ]

    response_metadata: typing.Dict[str, str] = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # Information about the endpoints that were not rejected, if applicable.
    unsuccessful: typing.List["UnsuccessfulItem"] = dataclasses.field(
        default_factory=list,
    )


@dataclasses.dataclass
class RejectVpcPeeringConnectionRequest(ShapeBase):
    """
    Contains the parameters for RejectVpcPeeringConnection.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "vpc_peering_connection_id",
                "VpcPeeringConnectionId",
                TypeInfo(str),
            ),
            (
                "dry_run",
                "DryRun",
                TypeInfo(bool),
            ),
        ]

    # The ID of the VPC peering connection.
    vpc_peering_connection_id: str = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # Checks whether you have the required permissions for the action, without
    # actually making the request, and provides an error response. If you have
    # the required permissions, the error response is `DryRunOperation`.
    # Otherwise, it is `UnauthorizedOperation`.
    dry_run: bool = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class RejectVpcPeeringConnectionResult(OutputShapeBase):
    """
    Contains the output of RejectVpcPeeringConnection.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "response_metadata",
                "ResponseMetadata",
                TypeInfo(typing.Dict[str, str]),
            ),
            (
                "return_",
                "Return",
                TypeInfo(bool),
            ),
        ]

    response_metadata: typing.Dict[str, str] = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # Returns `true` if the request succeeds; otherwise, it returns an error.
    return_: bool = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class ReleaseAddressRequest(ShapeBase):
    """
    Contains the parameters for ReleaseAddress.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "allocation_id",
                "AllocationId",
                TypeInfo(str),
            ),
            (
                "public_ip",
                "PublicIp",
                TypeInfo(str),
            ),
            (
                "dry_run",
                "DryRun",
                TypeInfo(bool),
            ),
        ]

    # [EC2-VPC] The allocation ID. Required for EC2-VPC.
    allocation_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # [EC2-Classic] The Elastic IP address. Required for EC2-Classic.
    public_ip: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # Checks whether you have the required permissions for the action, without
    # actually making the request, and provides an error response. If you have
    # the required permissions, the error response is `DryRunOperation`.
    # Otherwise, it is `UnauthorizedOperation`.
    dry_run: bool = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class ReleaseHostsRequest(ShapeBase):
    """
    Contains the parameters for ReleaseHosts.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "host_ids",
                "HostIds",
                TypeInfo(typing.List[str]),
            ),
        ]

    # The IDs of the Dedicated Hosts to release.
    host_ids: typing.List[str] = dataclasses.field(default_factory=list, )


@dataclasses.dataclass
class ReleaseHostsResult(OutputShapeBase):
    """
    Contains the output of ReleaseHosts.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "response_metadata",
                "ResponseMetadata",
                TypeInfo(typing.Dict[str, str]),
            ),
            (
                "successful",
                "Successful",
                TypeInfo(typing.List[str]),
            ),
            (
                "unsuccessful",
                "Unsuccessful",
                TypeInfo(typing.List[UnsuccessfulItem]),
            ),
        ]

    response_metadata: typing.Dict[str, str] = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # The IDs of the Dedicated Hosts that were successfully released.
    successful: typing.List[str] = dataclasses.field(default_factory=list, )

    # The IDs of the Dedicated Hosts that could not be released, including an
    # error message.
    unsuccessful: typing.List["UnsuccessfulItem"] = dataclasses.field(
        default_factory=list,
    )


@dataclasses.dataclass
class ReplaceIamInstanceProfileAssociationRequest(ShapeBase):
    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "iam_instance_profile",
                "IamInstanceProfile",
                TypeInfo(IamInstanceProfileSpecification),
            ),
            (
                "association_id",
                "AssociationId",
                TypeInfo(str),
            ),
        ]

    # The IAM instance profile.
    iam_instance_profile: "IamInstanceProfileSpecification" = dataclasses.field(
        default_factory=dict,
    )

    # The ID of the existing IAM instance profile association.
    association_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class ReplaceIamInstanceProfileAssociationResult(OutputShapeBase):
    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "response_metadata",
                "ResponseMetadata",
                TypeInfo(typing.Dict[str, str]),
            ),
            (
                "iam_instance_profile_association",
                "IamInstanceProfileAssociation",
                TypeInfo(IamInstanceProfileAssociation),
            ),
        ]

    response_metadata: typing.Dict[str, str] = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # Information about the IAM instance profile association.
    iam_instance_profile_association: "IamInstanceProfileAssociation" = dataclasses.field(
        default_factory=dict,
    )


@dataclasses.dataclass
class ReplaceNetworkAclAssociationRequest(ShapeBase):
    """
    Contains the parameters for ReplaceNetworkAclAssociation.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "association_id",
                "AssociationId",
                TypeInfo(str),
            ),
            (
                "network_acl_id",
                "NetworkAclId",
                TypeInfo(str),
            ),
            (
                "dry_run",
                "DryRun",
                TypeInfo(bool),
            ),
        ]

    # The ID of the current association between the original network ACL and the
    # subnet.
    association_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The ID of the new network ACL to associate with the subnet.
    network_acl_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # Checks whether you have the required permissions for the action, without
    # actually making the request, and provides an error response. If you have
    # the required permissions, the error response is `DryRunOperation`.
    # Otherwise, it is `UnauthorizedOperation`.
    dry_run: bool = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class ReplaceNetworkAclAssociationResult(OutputShapeBase):
    """
    Contains the output of ReplaceNetworkAclAssociation.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "response_metadata",
                "ResponseMetadata",
                TypeInfo(typing.Dict[str, str]),
            ),
            (
                "new_association_id",
                "NewAssociationId",
                TypeInfo(str),
            ),
        ]

    response_metadata: typing.Dict[str, str] = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # The ID of the new association.
    new_association_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class ReplaceNetworkAclEntryRequest(ShapeBase):
    """
    Contains the parameters for ReplaceNetworkAclEntry.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "egress",
                "Egress",
                TypeInfo(bool),
            ),
            (
                "network_acl_id",
                "NetworkAclId",
                TypeInfo(str),
            ),
            (
                "protocol",
                "Protocol",
                TypeInfo(str),
            ),
            (
                "rule_action",
                "RuleAction",
                TypeInfo(RuleAction),
            ),
            (
                "rule_number",
                "RuleNumber",
                TypeInfo(int),
            ),
            (
                "cidr_block",
                "CidrBlock",
                TypeInfo(str),
            ),
            (
                "dry_run",
                "DryRun",
                TypeInfo(bool),
            ),
            (
                "icmp_type_code",
                "IcmpTypeCode",
                TypeInfo(IcmpTypeCode),
            ),
            (
                "ipv6_cidr_block",
                "Ipv6CidrBlock",
                TypeInfo(str),
            ),
            (
                "port_range",
                "PortRange",
                TypeInfo(PortRange),
            ),
        ]

    # Indicates whether to replace the egress rule.

    # Default: If no value is specified, we replace the ingress rule.
    egress: bool = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The ID of the ACL.
    network_acl_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The IP protocol. You can specify `all` or `-1` to mean all protocols. If
    # you specify `all`, `-1`, or a protocol number other than `tcp`, `udp`, or
    # `icmp`, traffic on all ports is allowed, regardless of any ports or ICMP
    # types or codes you that specify. If you specify protocol `58` (ICMPv6) and
    # specify an IPv4 CIDR block, traffic for all ICMP types and codes allowed,
    # regardless of any that you specify. If you specify protocol `58` (ICMPv6)
    # and specify an IPv6 CIDR block, you must specify an ICMP type and code.
    protocol: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # Indicates whether to allow or deny the traffic that matches the rule.
    rule_action: "RuleAction" = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The rule number of the entry to replace.
    rule_number: int = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The IPv4 network range to allow or deny, in CIDR notation (for example
    # `172.16.0.0/24`).
    cidr_block: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # Checks whether you have the required permissions for the action, without
    # actually making the request, and provides an error response. If you have
    # the required permissions, the error response is `DryRunOperation`.
    # Otherwise, it is `UnauthorizedOperation`.
    dry_run: bool = dataclasses.field(default=ShapeBase.NOT_SET, )

    # ICMP protocol: The ICMP or ICMPv6 type and code. Required if specifying the
    # ICMP (1) protocol, or protocol 58 (ICMPv6) with an IPv6 CIDR block.
    icmp_type_code: "IcmpTypeCode" = dataclasses.field(default_factory=dict, )

    # The IPv6 network range to allow or deny, in CIDR notation (for example
    # `2001:bd8:1234:1a00::/64`).
    ipv6_cidr_block: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # TCP or UDP protocols: The range of ports the rule applies to. Required if
    # specifying TCP (6) or UDP (17) for the protocol.
    port_range: "PortRange" = dataclasses.field(default_factory=dict, )


@dataclasses.dataclass
class ReplaceRouteRequest(ShapeBase):
    """
    Contains the parameters for ReplaceRoute.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "route_table_id",
                "RouteTableId",
                TypeInfo(str),
            ),
            (
                "destination_cidr_block",
                "DestinationCidrBlock",
                TypeInfo(str),
            ),
            (
                "destination_ipv6_cidr_block",
                "DestinationIpv6CidrBlock",
                TypeInfo(str),
            ),
            (
                "dry_run",
                "DryRun",
                TypeInfo(bool),
            ),
            (
                "egress_only_internet_gateway_id",
                "EgressOnlyInternetGatewayId",
                TypeInfo(str),
            ),
            (
                "gateway_id",
                "GatewayId",
                TypeInfo(str),
            ),
            (
                "instance_id",
                "InstanceId",
                TypeInfo(str),
            ),
            (
                "nat_gateway_id",
                "NatGatewayId",
                TypeInfo(str),
            ),
            (
                "network_interface_id",
                "NetworkInterfaceId",
                TypeInfo(str),
            ),
            (
                "vpc_peering_connection_id",
                "VpcPeeringConnectionId",
                TypeInfo(str),
            ),
        ]

    # The ID of the route table.
    route_table_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The IPv4 CIDR address block used for the destination match. The value that
    # you provide must match the CIDR of an existing route in the table.
    destination_cidr_block: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The IPv6 CIDR address block used for the destination match. The value that
    # you provide must match the CIDR of an existing route in the table.
    destination_ipv6_cidr_block: str = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # Checks whether you have the required permissions for the action, without
    # actually making the request, and provides an error response. If you have
    # the required permissions, the error response is `DryRunOperation`.
    # Otherwise, it is `UnauthorizedOperation`.
    dry_run: bool = dataclasses.field(default=ShapeBase.NOT_SET, )

    # [IPv6 traffic only] The ID of an egress-only internet gateway.
    egress_only_internet_gateway_id: str = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # The ID of an internet gateway or virtual private gateway.
    gateway_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The ID of a NAT instance in your VPC.
    instance_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # [IPv4 traffic only] The ID of a NAT gateway.
    nat_gateway_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The ID of a network interface.
    network_interface_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The ID of a VPC peering connection.
    vpc_peering_connection_id: str = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )


@dataclasses.dataclass
class ReplaceRouteTableAssociationRequest(ShapeBase):
    """
    Contains the parameters for ReplaceRouteTableAssociation.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "association_id",
                "AssociationId",
                TypeInfo(str),
            ),
            (
                "route_table_id",
                "RouteTableId",
                TypeInfo(str),
            ),
            (
                "dry_run",
                "DryRun",
                TypeInfo(bool),
            ),
        ]

    # The association ID.
    association_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The ID of the new route table to associate with the subnet.
    route_table_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # Checks whether you have the required permissions for the action, without
    # actually making the request, and provides an error response. If you have
    # the required permissions, the error response is `DryRunOperation`.
    # Otherwise, it is `UnauthorizedOperation`.
    dry_run: bool = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class ReplaceRouteTableAssociationResult(OutputShapeBase):
    """
    Contains the output of ReplaceRouteTableAssociation.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "response_metadata",
                "ResponseMetadata",
                TypeInfo(typing.Dict[str, str]),
            ),
            (
                "new_association_id",
                "NewAssociationId",
                TypeInfo(str),
            ),
        ]

    response_metadata: typing.Dict[str, str] = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # The ID of the new association.
    new_association_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )


class ReportInstanceReasonCodes(Enum):
    instance_stuck_in_state = "instance-stuck-in-state"
    unresponsive = "unresponsive"
    not_accepting_credentials = "not-accepting-credentials"
    password_not_available = "password-not-available"
    performance_network = "performance-network"
    performance_instance_store = "performance-instance-store"
    performance_ebs_volume = "performance-ebs-volume"
    performance_other = "performance-other"
    other = "other"


@dataclasses.dataclass
class ReportInstanceStatusRequest(ShapeBase):
    """
    Contains the parameters for ReportInstanceStatus.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "instances",
                "Instances",
                TypeInfo(typing.List[str]),
            ),
            (
                "reason_codes",
                "ReasonCodes",
                TypeInfo(typing.List[ReportInstanceReasonCodes]),
            ),
            (
                "status",
                "Status",
                TypeInfo(ReportStatusType),
            ),
            (
                "description",
                "Description",
                TypeInfo(str),
            ),
            (
                "dry_run",
                "DryRun",
                TypeInfo(bool),
            ),
            (
                "end_time",
                "EndTime",
                TypeInfo(datetime.datetime),
            ),
            (
                "start_time",
                "StartTime",
                TypeInfo(datetime.datetime),
            ),
        ]

    # One or more instances.
    instances: typing.List[str] = dataclasses.field(default_factory=list, )

    # One or more reason codes that describe the health state of your instance.

    #   * `instance-stuck-in-state`: My instance is stuck in a state.

    #   * `unresponsive`: My instance is unresponsive.

    #   * `not-accepting-credentials`: My instance is not accepting my credentials.

    #   * `password-not-available`: A password is not available for my instance.

    #   * `performance-network`: My instance is experiencing performance problems that I believe are network related.

    #   * `performance-instance-store`: My instance is experiencing performance problems that I believe are related to the instance stores.

    #   * `performance-ebs-volume`: My instance is experiencing performance problems that I believe are related to an EBS volume.

    #   * `performance-other`: My instance is experiencing performance problems.

    #   * `other`: [explain using the description parameter]
    reason_codes: typing.List["ReportInstanceReasonCodes"] = dataclasses.field(
        default_factory=list,
    )

    # The status of all instances listed.
    status: "ReportStatusType" = dataclasses.field(default=ShapeBase.NOT_SET, )

    # Descriptive text about the health state of your instance.
    description: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # Checks whether you have the required permissions for the action, without
    # actually making the request, and provides an error response. If you have
    # the required permissions, the error response is `DryRunOperation`.
    # Otherwise, it is `UnauthorizedOperation`.
    dry_run: bool = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The time at which the reported instance health state ended.
    end_time: datetime.datetime = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The time at which the reported instance health state began.
    start_time: datetime.datetime = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )


class ReportStatusType(Enum):
    ok = "ok"
    impaired = "impaired"


@dataclasses.dataclass
class RequestLaunchTemplateData(ShapeBase):
    """
    The information to include in the launch template.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "kernel_id",
                "KernelId",
                TypeInfo(str),
            ),
            (
                "ebs_optimized",
                "EbsOptimized",
                TypeInfo(bool),
            ),
            (
                "iam_instance_profile",
                "IamInstanceProfile",
                TypeInfo(LaunchTemplateIamInstanceProfileSpecificationRequest),
            ),
            (
                "block_device_mappings",
                "BlockDeviceMappings",
                TypeInfo(typing.List[LaunchTemplateBlockDeviceMappingRequest]),
            ),
            (
                "network_interfaces",
                "NetworkInterfaces",
                TypeInfo(
                    typing.List[
                        LaunchTemplateInstanceNetworkInterfaceSpecificationRequest
                    ]
                ),
            ),
            (
                "image_id",
                "ImageId",
                TypeInfo(str),
            ),
            (
                "instance_type",
                "InstanceType",
                TypeInfo(InstanceType),
            ),
            (
                "key_name",
                "KeyName",
                TypeInfo(str),
            ),
            (
                "monitoring",
                "Monitoring",
                TypeInfo(LaunchTemplatesMonitoringRequest),
            ),
            (
                "placement",
                "Placement",
                TypeInfo(LaunchTemplatePlacementRequest),
            ),
            (
                "ram_disk_id",
                "RamDiskId",
                TypeInfo(str),
            ),
            (
                "disable_api_termination",
                "DisableApiTermination",
                TypeInfo(bool),
            ),
            (
                "instance_initiated_shutdown_behavior",
                "InstanceInitiatedShutdownBehavior",
                TypeInfo(ShutdownBehavior),
            ),
            (
                "user_data",
                "UserData",
                TypeInfo(str),
            ),
            (
                "tag_specifications",
                "TagSpecifications",
                TypeInfo(typing.List[LaunchTemplateTagSpecificationRequest]),
            ),
            (
                "elastic_gpu_specifications",
                "ElasticGpuSpecifications",
                TypeInfo(typing.List[ElasticGpuSpecification]),
            ),
            (
                "security_group_ids",
                "SecurityGroupIds",
                TypeInfo(typing.List[str]),
            ),
            (
                "security_groups",
                "SecurityGroups",
                TypeInfo(typing.List[str]),
            ),
            (
                "instance_market_options",
                "InstanceMarketOptions",
                TypeInfo(LaunchTemplateInstanceMarketOptionsRequest),
            ),
            (
                "credit_specification",
                "CreditSpecification",
                TypeInfo(CreditSpecificationRequest),
            ),
            (
                "cpu_options",
                "CpuOptions",
                TypeInfo(LaunchTemplateCpuOptionsRequest),
            ),
        ]

    # The ID of the kernel.

    # We recommend that you use PV-GRUB instead of kernels and RAM disks. For
    # more information, see [User Provided
    # Kernels](http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/UserProvidedkernels.html)
    # in the _Amazon Elastic Compute Cloud User Guide_.
    kernel_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # Indicates whether the instance is optimized for Amazon EBS I/O. This
    # optimization provides dedicated throughput to Amazon EBS and an optimized
    # configuration stack to provide optimal Amazon EBS I/O performance. This
    # optimization isn't available with all instance types. Additional usage
    # charges apply when using an EBS-optimized instance.
    ebs_optimized: bool = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The IAM instance profile.
    iam_instance_profile: "LaunchTemplateIamInstanceProfileSpecificationRequest" = dataclasses.field(
        default_factory=dict,
    )

    # The block device mapping.

    # Supplying both a snapshot ID and an encryption value as arguments for
    # block-device mapping results in an error. This is because only blank
    # volumes can be encrypted on start, and these are not created from a
    # snapshot. If a snapshot is the basis for the volume, it contains data by
    # definition and its encryption status cannot be changed using this action.
    block_device_mappings: typing.List["LaunchTemplateBlockDeviceMappingRequest"
                                      ] = dataclasses.field(
                                          default_factory=list,
                                      )

    # One or more network interfaces.
    network_interfaces: typing.List[
        "LaunchTemplateInstanceNetworkInterfaceSpecificationRequest"
    ] = dataclasses.field(
        default_factory=list,
    )

    # The ID of the AMI, which you can get by using DescribeImages.
    image_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The instance type. For more information, see [Instance
    # Types](http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-
    # types.html) in the _Amazon Elastic Compute Cloud User Guide_.
    instance_type: "InstanceType" = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # The name of the key pair. You can create a key pair using CreateKeyPair or
    # ImportKeyPair.

    # If you do not specify a key pair, you can't connect to the instance unless
    # you choose an AMI that is configured to allow users another way to log in.
    key_name: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The monitoring for the instance.
    monitoring: "LaunchTemplatesMonitoringRequest" = dataclasses.field(
        default_factory=dict,
    )

    # The placement for the instance.
    placement: "LaunchTemplatePlacementRequest" = dataclasses.field(
        default_factory=dict,
    )

    # The ID of the RAM disk.

    # We recommend that you use PV-GRUB instead of kernels and RAM disks. For
    # more information, see [User Provided
    # Kernels](http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/UserProvidedkernels.html)
    # in the _Amazon Elastic Compute Cloud User Guide_.
    ram_disk_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # If set to `true`, you can't terminate the instance using the Amazon EC2
    # console, CLI, or API. To change this attribute to `false` after launch, use
    # ModifyInstanceAttribute.
    disable_api_termination: bool = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # Indicates whether an instance stops or terminates when you initiate
    # shutdown from the instance (using the operating system command for system
    # shutdown).

    # Default: `stop`
    instance_initiated_shutdown_behavior: "ShutdownBehavior" = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # The Base64-encoded user data to make available to the instance. For more
    # information, see [Running Commands on Your Linux Instance at
    # Launch](http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/user-data.html)
    # (Linux) and [Adding User
    # Data](http://docs.aws.amazon.com/AWSEC2/latest/WindowsGuide/ec2-instance-
    # metadata.html#instancedata-add-user-data) (Windows).
    user_data: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The tags to apply to the resources during launch. You can only tag
    # instances and volumes on launch. The specified tags are applied to all
    # instances or volumes that are created during launch. To tag a resource
    # after it has been created, see CreateTags.
    tag_specifications: typing.List["LaunchTemplateTagSpecificationRequest"
                                   ] = dataclasses.field(
                                       default_factory=list,
                                   )

    # An elastic GPU to associate with the instance.
    elastic_gpu_specifications: typing.List["ElasticGpuSpecification"
                                           ] = dataclasses.field(
                                               default_factory=list,
                                           )

    # One or more security group IDs. You can create a security group using
    # CreateSecurityGroup. You cannot specify both a security group ID and
    # security name in the same request.
    security_group_ids: typing.List[str] = dataclasses.field(
        default_factory=list,
    )

    # [EC2-Classic, default VPC] One or more security group names. For a
    # nondefault VPC, you must use security group IDs instead. You cannot specify
    # both a security group ID and security name in the same request.
    security_groups: typing.List[str] = dataclasses.field(
        default_factory=list,
    )

    # The market (purchasing) option for the instances.
    instance_market_options: "LaunchTemplateInstanceMarketOptionsRequest" = dataclasses.field(
        default_factory=dict,
    )

    # The credit option for CPU usage of the instance. Valid for T2 instances
    # only.
    credit_specification: "CreditSpecificationRequest" = dataclasses.field(
        default_factory=dict,
    )

    # The CPU options for the instance. For more information, see [Optimizing CPU
    # Options](http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-
    # optimize-cpu.html) in the _Amazon Elastic Compute Cloud User Guide_.
    cpu_options: "LaunchTemplateCpuOptionsRequest" = dataclasses.field(
        default_factory=dict,
    )


@dataclasses.dataclass
class RequestSpotFleetRequest(ShapeBase):
    """
    Contains the parameters for RequestSpotFleet.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "spot_fleet_request_config",
                "SpotFleetRequestConfig",
                TypeInfo(SpotFleetRequestConfigData),
            ),
            (
                "dry_run",
                "DryRun",
                TypeInfo(bool),
            ),
        ]

    # The configuration for the Spot Fleet request.
    spot_fleet_request_config: "SpotFleetRequestConfigData" = dataclasses.field(
        default_factory=dict,
    )

    # Checks whether you have the required permissions for the action, without
    # actually making the request, and provides an error response. If you have
    # the required permissions, the error response is `DryRunOperation`.
    # Otherwise, it is `UnauthorizedOperation`.
    dry_run: bool = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class RequestSpotFleetResponse(OutputShapeBase):
    """
    Contains the output of RequestSpotFleet.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "response_metadata",
                "ResponseMetadata",
                TypeInfo(typing.Dict[str, str]),
            ),
            (
                "spot_fleet_request_id",
                "SpotFleetRequestId",
                TypeInfo(str),
            ),
        ]

    response_metadata: typing.Dict[str, str] = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # The ID of the Spot Fleet request.
    spot_fleet_request_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class RequestSpotInstancesRequest(ShapeBase):
    """
    Contains the parameters for RequestSpotInstances.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "availability_zone_group",
                "AvailabilityZoneGroup",
                TypeInfo(str),
            ),
            (
                "block_duration_minutes",
                "BlockDurationMinutes",
                TypeInfo(int),
            ),
            (
                "client_token",
                "ClientToken",
                TypeInfo(str),
            ),
            (
                "dry_run",
                "DryRun",
                TypeInfo(bool),
            ),
            (
                "instance_count",
                "InstanceCount",
                TypeInfo(int),
            ),
            (
                "launch_group",
                "LaunchGroup",
                TypeInfo(str),
            ),
            (
                "launch_specification",
                "LaunchSpecification",
                TypeInfo(RequestSpotLaunchSpecification),
            ),
            (
                "spot_price",
                "SpotPrice",
                TypeInfo(str),
            ),
            (
                "type",
                "Type",
                TypeInfo(SpotInstanceType),
            ),
            (
                "valid_from",
                "ValidFrom",
                TypeInfo(datetime.datetime),
            ),
            (
                "valid_until",
                "ValidUntil",
                TypeInfo(datetime.datetime),
            ),
            (
                "instance_interruption_behavior",
                "InstanceInterruptionBehavior",
                TypeInfo(InstanceInterruptionBehavior),
            ),
        ]

    # The user-specified name for a logical grouping of requests.

    # When you specify an Availability Zone group in a Spot Instance request, all
    # Spot Instances in the request are launched in the same Availability Zone.
    # Instance proximity is maintained with this parameter, but the choice of
    # Availability Zone is not. The group applies only to requests for Spot
    # Instances of the same instance type. Any additional Spot Instance requests
    # that are specified with the same Availability Zone group name are launched
    # in that same Availability Zone, as long as at least one instance from the
    # group is still active.

    # If there is no active instance running in the Availability Zone group that
    # you specify for a new Spot Instance request (all instances are terminated,
    # the request is expired, or the maximum price you specified falls below
    # current Spot price), then Amazon EC2 launches the instance in any
    # Availability Zone where the constraint can be met. Consequently, the
    # subsequent set of Spot Instances could be placed in a different zone from
    # the original request, even if you specified the same Availability Zone
    # group.

    # Default: Instances are launched in any available Availability Zone.
    availability_zone_group: str = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # The required duration for the Spot Instances (also known as Spot blocks),
    # in minutes. This value must be a multiple of 60 (60, 120, 180, 240, 300, or
    # 360).

    # The duration period starts as soon as your Spot Instance receives its
    # instance ID. At the end of the duration period, Amazon EC2 marks the Spot
    # Instance for termination and provides a Spot Instance termination notice,
    # which gives the instance a two-minute warning before it terminates.

    # You can't specify an Availability Zone group or a launch group if you
    # specify a duration.
    block_duration_minutes: int = dataclasses.field(default=ShapeBase.NOT_SET, )

    # Unique, case-sensitive identifier that you provide to ensure the
    # idempotency of the request. For more information, see [How to Ensure
    # Idempotency](http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Run_Instance_Idempotency.html)
    # in the _Amazon EC2 User Guide for Linux Instances_.
    client_token: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # Checks whether you have the required permissions for the action, without
    # actually making the request, and provides an error response. If you have
    # the required permissions, the error response is `DryRunOperation`.
    # Otherwise, it is `UnauthorizedOperation`.
    dry_run: bool = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The maximum number of Spot Instances to launch.

    # Default: 1
    instance_count: int = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The instance launch group. Launch groups are Spot Instances that launch
    # together and terminate together.

    # Default: Instances are launched and terminated individually
    launch_group: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The launch specification.
    launch_specification: "RequestSpotLaunchSpecification" = dataclasses.field(
        default_factory=dict,
    )

    # The maximum price per hour that you are willing to pay for a Spot Instance.
    # The default is the On-Demand price.
    spot_price: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The Spot Instance request type.

    # Default: `one-time`
    type: "SpotInstanceType" = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The start date of the request. If this is a one-time request, the request
    # becomes active at this date and time and remains active until all instances
    # launch, the request expires, or the request is canceled. If the request is
    # persistent, the request becomes active at this date and time and remains
    # active until it expires or is canceled.
    valid_from: datetime.datetime = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # The end date of the request. If this is a one-time request, the request
    # remains active until all instances launch, the request is canceled, or this
    # date is reached. If the request is persistent, it remains active until it
    # is canceled or this date is reached. The default end date is 7 days from
    # the current date.
    valid_until: datetime.datetime = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # The behavior when a Spot Instance is interrupted. The default is
    # `terminate`.
    instance_interruption_behavior: "InstanceInterruptionBehavior" = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )


@dataclasses.dataclass
class RequestSpotInstancesResult(OutputShapeBase):
    """
    Contains the output of RequestSpotInstances.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "response_metadata",
                "ResponseMetadata",
                TypeInfo(typing.Dict[str, str]),
            ),
            (
                "spot_instance_requests",
                "SpotInstanceRequests",
                TypeInfo(typing.List[SpotInstanceRequest]),
            ),
        ]

    response_metadata: typing.Dict[str, str] = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # One or more Spot Instance requests.
    spot_instance_requests: typing.List["SpotInstanceRequest"
                                       ] = dataclasses.field(
                                           default_factory=list,
                                       )


@dataclasses.dataclass
class RequestSpotLaunchSpecification(ShapeBase):
    """
    Describes the launch specification for an instance.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "security_group_ids",
                "SecurityGroupIds",
                TypeInfo(typing.List[str]),
            ),
            (
                "security_groups",
                "SecurityGroups",
                TypeInfo(typing.List[str]),
            ),
            (
                "addressing_type",
                "AddressingType",
                TypeInfo(str),
            ),
            (
                "block_device_mappings",
                "BlockDeviceMappings",
                TypeInfo(typing.List[BlockDeviceMapping]),
            ),
            (
                "ebs_optimized",
                "EbsOptimized",
                TypeInfo(bool),
            ),
            (
                "iam_instance_profile",
                "IamInstanceProfile",
                TypeInfo(IamInstanceProfileSpecification),
            ),
            (
                "image_id",
                "ImageId",
                TypeInfo(str),
            ),
            (
                "instance_type",
                "InstanceType",
                TypeInfo(InstanceType),
            ),
            (
                "kernel_id",
                "KernelId",
                TypeInfo(str),
            ),
            (
                "key_name",
                "KeyName",
                TypeInfo(str),
            ),
            (
                "monitoring",
                "Monitoring",
                TypeInfo(RunInstancesMonitoringEnabled),
            ),
            (
                "network_interfaces",
                "NetworkInterfaces",
                TypeInfo(typing.List[InstanceNetworkInterfaceSpecification]),
            ),
            (
                "placement",
                "Placement",
                TypeInfo(SpotPlacement),
            ),
            (
                "ramdisk_id",
                "RamdiskId",
                TypeInfo(str),
            ),
            (
                "subnet_id",
                "SubnetId",
                TypeInfo(str),
            ),
            (
                "user_data",
                "UserData",
                TypeInfo(str),
            ),
        ]

    # One or more security group IDs.
    security_group_ids: typing.List[str] = dataclasses.field(
        default_factory=list,
    )

    # One or more security groups. When requesting instances in a VPC, you must
    # specify the IDs of the security groups. When requesting instances in
    # EC2-Classic, you can specify the names or the IDs of the security groups.
    security_groups: typing.List[str] = dataclasses.field(
        default_factory=list,
    )

    # Deprecated.
    addressing_type: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # One or more block device mapping entries. You can't specify both a snapshot
    # ID and an encryption value. This is because only blank volumes can be
    # encrypted on creation. If a snapshot is the basis for a volume, it is not
    # blank and its encryption status is used for the volume encryption status.
    block_device_mappings: typing.List["BlockDeviceMapping"
                                      ] = dataclasses.field(
                                          default_factory=list,
                                      )

    # Indicates whether the instance is optimized for EBS I/O. This optimization
    # provides dedicated throughput to Amazon EBS and an optimized configuration
    # stack to provide optimal EBS I/O performance. This optimization isn't
    # available with all instance types. Additional usage charges apply when
    # using an EBS Optimized instance.

    # Default: `false`
    ebs_optimized: bool = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The IAM instance profile.
    iam_instance_profile: "IamInstanceProfileSpecification" = dataclasses.field(
        default_factory=dict,
    )

    # The ID of the AMI.
    image_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The instance type.
    instance_type: "InstanceType" = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # The ID of the kernel.
    kernel_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The name of the key pair.
    key_name: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # Indicates whether basic or detailed monitoring is enabled for the instance.

    # Default: Disabled
    monitoring: "RunInstancesMonitoringEnabled" = dataclasses.field(
        default_factory=dict,
    )

    # One or more network interfaces. If you specify a network interface, you
    # must specify subnet IDs and security group IDs using the network interface.
    network_interfaces: typing.List["InstanceNetworkInterfaceSpecification"
                                   ] = dataclasses.field(
                                       default_factory=list,
                                   )

    # The placement information for the instance.
    placement: "SpotPlacement" = dataclasses.field(default_factory=dict, )

    # The ID of the RAM disk.
    ramdisk_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The ID of the subnet in which to launch the instance.
    subnet_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The Base64-encoded user data for the instance.
    user_data: str = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class Reservation(OutputShapeBase):
    """
    Describes a reservation.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "response_metadata",
                "ResponseMetadata",
                TypeInfo(typing.Dict[str, str]),
            ),
            (
                "groups",
                "Groups",
                TypeInfo(typing.List[GroupIdentifier]),
            ),
            (
                "instances",
                "Instances",
                TypeInfo(typing.List[Instance]),
            ),
            (
                "owner_id",
                "OwnerId",
                TypeInfo(str),
            ),
            (
                "requester_id",
                "RequesterId",
                TypeInfo(str),
            ),
            (
                "reservation_id",
                "ReservationId",
                TypeInfo(str),
            ),
        ]

    response_metadata: typing.Dict[str, str] = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # [EC2-Classic only] One or more security groups.
    groups: typing.List["GroupIdentifier"] = dataclasses.field(
        default_factory=list,
    )

    # One or more instances.
    instances: typing.List["Instance"] = dataclasses.field(
        default_factory=list,
    )

    # The ID of the AWS account that owns the reservation.
    owner_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The ID of the requester that launched the instances on your behalf (for
    # example, AWS Management Console or Auto Scaling).
    requester_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The ID of the reservation.
    reservation_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )


class ReservationState(Enum):
    payment_pending = "payment-pending"
    payment_failed = "payment-failed"
    active = "active"
    retired = "retired"


@dataclasses.dataclass
class ReservationValue(ShapeBase):
    """
    The cost associated with the Reserved Instance.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "hourly_price",
                "HourlyPrice",
                TypeInfo(str),
            ),
            (
                "remaining_total_value",
                "RemainingTotalValue",
                TypeInfo(str),
            ),
            (
                "remaining_upfront_value",
                "RemainingUpfrontValue",
                TypeInfo(str),
            ),
        ]

    # The hourly rate of the reservation.
    hourly_price: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The balance of the total value (the sum of remainingUpfrontValue +
    # hourlyPrice * number of hours remaining).
    remaining_total_value: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The remaining upfront cost of the reservation.
    remaining_upfront_value: str = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )


@dataclasses.dataclass
class ReservedInstanceLimitPrice(ShapeBase):
    """
    Describes the limit price of a Reserved Instance offering.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "amount",
                "Amount",
                TypeInfo(float),
            ),
            (
                "currency_code",
                "CurrencyCode",
                TypeInfo(CurrencyCodeValues),
            ),
        ]

    # Used for Reserved Instance Marketplace offerings. Specifies the limit price
    # on the total order (instanceCount * price).
    amount: float = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The currency in which the `limitPrice` amount is specified. At this time,
    # the only supported currency is `USD`.
    currency_code: "CurrencyCodeValues" = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )


@dataclasses.dataclass
class ReservedInstanceReservationValue(ShapeBase):
    """
    The total value of the Convertible Reserved Instance.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "reservation_value",
                "ReservationValue",
                TypeInfo(ReservationValue),
            ),
            (
                "reserved_instance_id",
                "ReservedInstanceId",
                TypeInfo(str),
            ),
        ]

    # The total value of the Convertible Reserved Instance that you are
    # exchanging.
    reservation_value: "ReservationValue" = dataclasses.field(
        default_factory=dict,
    )

    # The ID of the Convertible Reserved Instance that you are exchanging.
    reserved_instance_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )


class ReservedInstanceState(Enum):
    payment_pending = "payment-pending"
    active = "active"
    payment_failed = "payment-failed"
    retired = "retired"


@dataclasses.dataclass
class ReservedInstances(ShapeBase):
    """
    Describes a Reserved Instance.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "availability_zone",
                "AvailabilityZone",
                TypeInfo(str),
            ),
            (
                "duration",
                "Duration",
                TypeInfo(int),
            ),
            (
                "end",
                "End",
                TypeInfo(datetime.datetime),
            ),
            (
                "fixed_price",
                "FixedPrice",
                TypeInfo(float),
            ),
            (
                "instance_count",
                "InstanceCount",
                TypeInfo(int),
            ),
            (
                "instance_type",
                "InstanceType",
                TypeInfo(InstanceType),
            ),
            (
                "product_description",
                "ProductDescription",
                TypeInfo(RIProductDescription),
            ),
            (
                "reserved_instances_id",
                "ReservedInstancesId",
                TypeInfo(str),
            ),
            (
                "start",
                "Start",
                TypeInfo(datetime.datetime),
            ),
            (
                "state",
                "State",
                TypeInfo(ReservedInstanceState),
            ),
            (
                "usage_price",
                "UsagePrice",
                TypeInfo(float),
            ),
            (
                "currency_code",
                "CurrencyCode",
                TypeInfo(CurrencyCodeValues),
            ),
            (
                "instance_tenancy",
                "InstanceTenancy",
                TypeInfo(Tenancy),
            ),
            (
                "offering_class",
                "OfferingClass",
                TypeInfo(OfferingClassType),
            ),
            (
                "offering_type",
                "OfferingType",
                TypeInfo(OfferingTypeValues),
            ),
            (
                "recurring_charges",
                "RecurringCharges",
                TypeInfo(typing.List[RecurringCharge]),
            ),
            (
                "scope",
                "Scope",
                TypeInfo(scope),
            ),
            (
                "tags",
                "Tags",
                TypeInfo(typing.List[Tag]),
            ),
        ]

    # The Availability Zone in which the Reserved Instance can be used.
    availability_zone: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The duration of the Reserved Instance, in seconds.
    duration: int = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The time when the Reserved Instance expires.
    end: datetime.datetime = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The purchase price of the Reserved Instance.
    fixed_price: float = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The number of reservations purchased.
    instance_count: int = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The instance type on which the Reserved Instance can be used.
    instance_type: "InstanceType" = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # The Reserved Instance product platform description.
    product_description: "RIProductDescription" = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # The ID of the Reserved Instance.
    reserved_instances_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The date and time the Reserved Instance started.
    start: datetime.datetime = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The state of the Reserved Instance purchase.
    state: "ReservedInstanceState" = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # The usage price of the Reserved Instance, per hour.
    usage_price: float = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The currency of the Reserved Instance. It's specified using ISO 4217
    # standard currency codes. At this time, the only supported currency is
    # `USD`.
    currency_code: "CurrencyCodeValues" = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # The tenancy of the instance.
    instance_tenancy: "Tenancy" = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The offering class of the Reserved Instance.
    offering_class: "OfferingClassType" = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # The Reserved Instance offering type.
    offering_type: "OfferingTypeValues" = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # The recurring charge tag assigned to the resource.
    recurring_charges: typing.List["RecurringCharge"] = dataclasses.field(
        default_factory=list,
    )

    # The scope of the Reserved Instance.
    scope: "scope" = dataclasses.field(default=ShapeBase.NOT_SET, )

    # Any tags assigned to the resource.
    tags: typing.List["Tag"] = dataclasses.field(default_factory=list, )


@dataclasses.dataclass
class ReservedInstancesConfiguration(ShapeBase):
    """
    Describes the configuration settings for the modified Reserved Instances.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "availability_zone",
                "AvailabilityZone",
                TypeInfo(str),
            ),
            (
                "instance_count",
                "InstanceCount",
                TypeInfo(int),
            ),
            (
                "instance_type",
                "InstanceType",
                TypeInfo(InstanceType),
            ),
            (
                "platform",
                "Platform",
                TypeInfo(str),
            ),
            (
                "scope",
                "Scope",
                TypeInfo(scope),
            ),
        ]

    # The Availability Zone for the modified Reserved Instances.
    availability_zone: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The number of modified Reserved Instances.
    instance_count: int = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The instance type for the modified Reserved Instances.
    instance_type: "InstanceType" = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # The network platform of the modified Reserved Instances, which is either
    # EC2-Classic or EC2-VPC.
    platform: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # Whether the Reserved Instance is applied to instances in a region or
    # instances in a specific Availability Zone.
    scope: "scope" = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class ReservedInstancesId(ShapeBase):
    """
    Describes the ID of a Reserved Instance.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "reserved_instances_id",
                "ReservedInstancesId",
                TypeInfo(str),
            ),
        ]

    # The ID of the Reserved Instance.
    reserved_instances_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class ReservedInstancesListing(ShapeBase):
    """
    Describes a Reserved Instance listing.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "client_token",
                "ClientToken",
                TypeInfo(str),
            ),
            (
                "create_date",
                "CreateDate",
                TypeInfo(datetime.datetime),
            ),
            (
                "instance_counts",
                "InstanceCounts",
                TypeInfo(typing.List[InstanceCount]),
            ),
            (
                "price_schedules",
                "PriceSchedules",
                TypeInfo(typing.List[PriceSchedule]),
            ),
            (
                "reserved_instances_id",
                "ReservedInstancesId",
                TypeInfo(str),
            ),
            (
                "reserved_instances_listing_id",
                "ReservedInstancesListingId",
                TypeInfo(str),
            ),
            (
                "status",
                "Status",
                TypeInfo(ListingStatus),
            ),
            (
                "status_message",
                "StatusMessage",
                TypeInfo(str),
            ),
            (
                "tags",
                "Tags",
                TypeInfo(typing.List[Tag]),
            ),
            (
                "update_date",
                "UpdateDate",
                TypeInfo(datetime.datetime),
            ),
        ]

    # A unique, case-sensitive key supplied by the client to ensure that the
    # request is idempotent. For more information, see [Ensuring
    # Idempotency](http://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html).
    client_token: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The time the listing was created.
    create_date: datetime.datetime = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # The number of instances in this state.
    instance_counts: typing.List["InstanceCount"] = dataclasses.field(
        default_factory=list,
    )

    # The price of the Reserved Instance listing.
    price_schedules: typing.List["PriceSchedule"] = dataclasses.field(
        default_factory=list,
    )

    # The ID of the Reserved Instance.
    reserved_instances_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The ID of the Reserved Instance listing.
    reserved_instances_listing_id: str = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # The status of the Reserved Instance listing.
    status: "ListingStatus" = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The reason for the current status of the Reserved Instance listing. The
    # response can be blank.
    status_message: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # Any tags assigned to the resource.
    tags: typing.List["Tag"] = dataclasses.field(default_factory=list, )

    # The last modified timestamp of the listing.
    update_date: datetime.datetime = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )


@dataclasses.dataclass
class ReservedInstancesModification(ShapeBase):
    """
    Describes a Reserved Instance modification.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "client_token",
                "ClientToken",
                TypeInfo(str),
            ),
            (
                "create_date",
                "CreateDate",
                TypeInfo(datetime.datetime),
            ),
            (
                "effective_date",
                "EffectiveDate",
                TypeInfo(datetime.datetime),
            ),
            (
                "modification_results",
                "ModificationResults",
                TypeInfo(typing.List[ReservedInstancesModificationResult]),
            ),
            (
                "reserved_instances_ids",
                "ReservedInstancesIds",
                TypeInfo(typing.List[ReservedInstancesId]),
            ),
            (
                "reserved_instances_modification_id",
                "ReservedInstancesModificationId",
                TypeInfo(str),
            ),
            (
                "status",
                "Status",
                TypeInfo(str),
            ),
            (
                "status_message",
                "StatusMessage",
                TypeInfo(str),
            ),
            (
                "update_date",
                "UpdateDate",
                TypeInfo(datetime.datetime),
            ),
        ]

    # A unique, case-sensitive key supplied by the client to ensure that the
    # request is idempotent. For more information, see [Ensuring
    # Idempotency](http://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html).
    client_token: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The time when the modification request was created.
    create_date: datetime.datetime = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # The time for the modification to become effective.
    effective_date: datetime.datetime = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # Contains target configurations along with their corresponding new Reserved
    # Instance IDs.
    modification_results: typing.List["ReservedInstancesModificationResult"
                                     ] = dataclasses.field(
                                         default_factory=list,
                                     )

    # The IDs of one or more Reserved Instances.
    reserved_instances_ids: typing.List["ReservedInstancesId"
                                       ] = dataclasses.field(
                                           default_factory=list,
                                       )

    # A unique ID for the Reserved Instance modification.
    reserved_instances_modification_id: str = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # The status of the Reserved Instances modification request.
    status: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The reason for the status.
    status_message: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The time when the modification request was last updated.
    update_date: datetime.datetime = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )


@dataclasses.dataclass
class ReservedInstancesModificationResult(ShapeBase):
    """
    Describes the modification request/s.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "reserved_instances_id",
                "ReservedInstancesId",
                TypeInfo(str),
            ),
            (
                "target_configuration",
                "TargetConfiguration",
                TypeInfo(ReservedInstancesConfiguration),
            ),
        ]

    # The ID for the Reserved Instances that were created as part of the
    # modification request. This field is only available when the modification is
    # fulfilled.
    reserved_instances_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The target Reserved Instances configurations supplied as part of the
    # modification request.
    target_configuration: "ReservedInstancesConfiguration" = dataclasses.field(
        default_factory=dict,
    )


@dataclasses.dataclass
class ReservedInstancesOffering(ShapeBase):
    """
    Describes a Reserved Instance offering.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "availability_zone",
                "AvailabilityZone",
                TypeInfo(str),
            ),
            (
                "duration",
                "Duration",
                TypeInfo(int),
            ),
            (
                "fixed_price",
                "FixedPrice",
                TypeInfo(float),
            ),
            (
                "instance_type",
                "InstanceType",
                TypeInfo(InstanceType),
            ),
            (
                "product_description",
                "ProductDescription",
                TypeInfo(RIProductDescription),
            ),
            (
                "reserved_instances_offering_id",
                "ReservedInstancesOfferingId",
                TypeInfo(str),
            ),
            (
                "usage_price",
                "UsagePrice",
                TypeInfo(float),
            ),
            (
                "currency_code",
                "CurrencyCode",
                TypeInfo(CurrencyCodeValues),
            ),
            (
                "instance_tenancy",
                "InstanceTenancy",
                TypeInfo(Tenancy),
            ),
            (
                "marketplace",
                "Marketplace",
                TypeInfo(bool),
            ),
            (
                "offering_class",
                "OfferingClass",
                TypeInfo(OfferingClassType),
            ),
            (
                "offering_type",
                "OfferingType",
                TypeInfo(OfferingTypeValues),
            ),
            (
                "pricing_details",
                "PricingDetails",
                TypeInfo(typing.List[PricingDetail]),
            ),
            (
                "recurring_charges",
                "RecurringCharges",
                TypeInfo(typing.List[RecurringCharge]),
            ),
            (
                "scope",
                "Scope",
                TypeInfo(scope),
            ),
        ]

    # The Availability Zone in which the Reserved Instance can be used.
    availability_zone: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The duration of the Reserved Instance, in seconds.
    duration: int = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The purchase price of the Reserved Instance.
    fixed_price: float = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The instance type on which the Reserved Instance can be used.
    instance_type: "InstanceType" = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # The Reserved Instance product platform description.
    product_description: "RIProductDescription" = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # The ID of the Reserved Instance offering. This is the offering ID used in
    # GetReservedInstancesExchangeQuote to confirm that an exchange can be made.
    reserved_instances_offering_id: str = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # The usage price of the Reserved Instance, per hour.
    usage_price: float = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The currency of the Reserved Instance offering you are purchasing. It's
    # specified using ISO 4217 standard currency codes. At this time, the only
    # supported currency is `USD`.
    currency_code: "CurrencyCodeValues" = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # The tenancy of the instance.
    instance_tenancy: "Tenancy" = dataclasses.field(default=ShapeBase.NOT_SET, )

    # Indicates whether the offering is available through the Reserved Instance
    # Marketplace (resale) or AWS. If it's a Reserved Instance Marketplace
    # offering, this is `true`.
    marketplace: bool = dataclasses.field(default=ShapeBase.NOT_SET, )

    # If `convertible` it can be exchanged for Reserved Instances of the same or
    # higher monetary value, with different configurations. If `standard`, it is
    # not possible to perform an exchange.
    offering_class: "OfferingClassType" = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # The Reserved Instance offering type.
    offering_type: "OfferingTypeValues" = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # The pricing details of the Reserved Instance offering.
    pricing_details: typing.List["PricingDetail"] = dataclasses.field(
        default_factory=list,
    )

    # The recurring charge tag assigned to the resource.
    recurring_charges: typing.List["RecurringCharge"] = dataclasses.field(
        default_factory=list,
    )

    # Whether the Reserved Instance is applied to instances in a region or an
    # Availability Zone.
    scope: "scope" = dataclasses.field(default=ShapeBase.NOT_SET, )


class ResetFpgaImageAttributeName(Enum):
    loadPermission = "loadPermission"


@dataclasses.dataclass
class ResetFpgaImageAttributeRequest(ShapeBase):
    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "fpga_image_id",
                "FpgaImageId",
                TypeInfo(str),
            ),
            (
                "dry_run",
                "DryRun",
                TypeInfo(bool),
            ),
            (
                "attribute",
                "Attribute",
                TypeInfo(ResetFpgaImageAttributeName),
            ),
        ]

    # The ID of the AFI.
    fpga_image_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # Checks whether you have the required permissions for the action, without
    # actually making the request, and provides an error response. If you have
    # the required permissions, the error response is `DryRunOperation`.
    # Otherwise, it is `UnauthorizedOperation`.
    dry_run: bool = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The attribute.
    attribute: "ResetFpgaImageAttributeName" = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )


@dataclasses.dataclass
class ResetFpgaImageAttributeResult(OutputShapeBase):
    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "response_metadata",
                "ResponseMetadata",
                TypeInfo(typing.Dict[str, str]),
            ),
            (
                "return_",
                "Return",
                TypeInfo(bool),
            ),
        ]

    response_metadata: typing.Dict[str, str] = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # Is `true` if the request succeeds, and an error otherwise.
    return_: bool = dataclasses.field(default=ShapeBase.NOT_SET, )


class ResetImageAttributeName(Enum):
    launchPermission = "launchPermission"


@dataclasses.dataclass
class ResetImageAttributeRequest(ShapeBase):
    """
    Contains the parameters for ResetImageAttribute.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "attribute",
                "Attribute",
                TypeInfo(ResetImageAttributeName),
            ),
            (
                "image_id",
                "ImageId",
                TypeInfo(str),
            ),
            (
                "dry_run",
                "DryRun",
                TypeInfo(bool),
            ),
        ]

    # The attribute to reset (currently you can only reset the launch permission
    # attribute).
    attribute: "ResetImageAttributeName" = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # The ID of the AMI.
    image_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # Checks whether you have the required permissions for the action, without
    # actually making the request, and provides an error response. If you have
    # the required permissions, the error response is `DryRunOperation`.
    # Otherwise, it is `UnauthorizedOperation`.
    dry_run: bool = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class ResetInstanceAttributeRequest(ShapeBase):
    """
    Contains the parameters for ResetInstanceAttribute.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "attribute",
                "Attribute",
                TypeInfo(InstanceAttributeName),
            ),
            (
                "instance_id",
                "InstanceId",
                TypeInfo(str),
            ),
            (
                "dry_run",
                "DryRun",
                TypeInfo(bool),
            ),
        ]

    # The attribute to reset.

    # You can only reset the following attributes: `kernel` | `ramdisk` |
    # `sourceDestCheck`. To change an instance attribute, use
    # ModifyInstanceAttribute.
    attribute: "InstanceAttributeName" = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # The ID of the instance.
    instance_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # Checks whether you have the required permissions for the action, without
    # actually making the request, and provides an error response. If you have
    # the required permissions, the error response is `DryRunOperation`.
    # Otherwise, it is `UnauthorizedOperation`.
    dry_run: bool = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class ResetNetworkInterfaceAttributeRequest(ShapeBase):
    """
    Contains the parameters for ResetNetworkInterfaceAttribute.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "network_interface_id",
                "NetworkInterfaceId",
                TypeInfo(str),
            ),
            (
                "dry_run",
                "DryRun",
                TypeInfo(bool),
            ),
            (
                "source_dest_check",
                "SourceDestCheck",
                TypeInfo(str),
            ),
        ]

    # The ID of the network interface.
    network_interface_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # Checks whether you have the required permissions for the action, without
    # actually making the request, and provides an error response. If you have
    # the required permissions, the error response is `DryRunOperation`.
    # Otherwise, it is `UnauthorizedOperation`.
    dry_run: bool = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The source/destination checking attribute. Resets the value to `true`.
    source_dest_check: str = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class ResetSnapshotAttributeRequest(ShapeBase):
    """
    Contains the parameters for ResetSnapshotAttribute.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "attribute",
                "Attribute",
                TypeInfo(SnapshotAttributeName),
            ),
            (
                "snapshot_id",
                "SnapshotId",
                TypeInfo(str),
            ),
            (
                "dry_run",
                "DryRun",
                TypeInfo(bool),
            ),
        ]

    # The attribute to reset. Currently, only the attribute for permission to
    # create volumes can be reset.
    attribute: "SnapshotAttributeName" = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # The ID of the snapshot.
    snapshot_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # Checks whether you have the required permissions for the action, without
    # actually making the request, and provides an error response. If you have
    # the required permissions, the error response is `DryRunOperation`.
    # Otherwise, it is `UnauthorizedOperation`.
    dry_run: bool = dataclasses.field(default=ShapeBase.NOT_SET, )


class ResourceType(Enum):
    customer_gateway = "customer-gateway"
    dhcp_options = "dhcp-options"
    image = "image"
    instance = "instance"
    internet_gateway = "internet-gateway"
    network_acl = "network-acl"
    network_interface = "network-interface"
    reserved_instances = "reserved-instances"
    route_table = "route-table"
    snapshot = "snapshot"
    spot_instances_request = "spot-instances-request"
    subnet = "subnet"
    security_group = "security-group"
    volume = "volume"
    vpc = "vpc"
    vpn_connection = "vpn-connection"
    vpn_gateway = "vpn-gateway"


@dataclasses.dataclass
class ResponseError(ShapeBase):
    """
    Describes the error that's returned when you cannot delete a launch template
    version.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "code",
                "Code",
                TypeInfo(LaunchTemplateErrorCode),
            ),
            (
                "message",
                "Message",
                TypeInfo(str),
            ),
        ]

    # The error code.
    code: "LaunchTemplateErrorCode" = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # The error message, if applicable.
    message: str = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class ResponseLaunchTemplateData(ShapeBase):
    """
    The information for a launch template.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "kernel_id",
                "KernelId",
                TypeInfo(str),
            ),
            (
                "ebs_optimized",
                "EbsOptimized",
                TypeInfo(bool),
            ),
            (
                "iam_instance_profile",
                "IamInstanceProfile",
                TypeInfo(LaunchTemplateIamInstanceProfileSpecification),
            ),
            (
                "block_device_mappings",
                "BlockDeviceMappings",
                TypeInfo(typing.List[LaunchTemplateBlockDeviceMapping]),
            ),
            (
                "network_interfaces",
                "NetworkInterfaces",
                TypeInfo(
                    typing.
                    List[LaunchTemplateInstanceNetworkInterfaceSpecification]
                ),
            ),
            (
                "image_id",
                "ImageId",
                TypeInfo(str),
            ),
            (
                "instance_type",
                "InstanceType",
                TypeInfo(InstanceType),
            ),
            (
                "key_name",
                "KeyName",
                TypeInfo(str),
            ),
            (
                "monitoring",
                "Monitoring",
                TypeInfo(LaunchTemplatesMonitoring),
            ),
            (
                "placement",
                "Placement",
                TypeInfo(LaunchTemplatePlacement),
            ),
            (
                "ram_disk_id",
                "RamDiskId",
                TypeInfo(str),
            ),
            (
                "disable_api_termination",
                "DisableApiTermination",
                TypeInfo(bool),
            ),
            (
                "instance_initiated_shutdown_behavior",
                "InstanceInitiatedShutdownBehavior",
                TypeInfo(ShutdownBehavior),
            ),
            (
                "user_data",
                "UserData",
                TypeInfo(str),
            ),
            (
                "tag_specifications",
                "TagSpecifications",
                TypeInfo(typing.List[LaunchTemplateTagSpecification]),
            ),
            (
                "elastic_gpu_specifications",
                "ElasticGpuSpecifications",
                TypeInfo(typing.List[ElasticGpuSpecificationResponse]),
            ),
            (
                "security_group_ids",
                "SecurityGroupIds",
                TypeInfo(typing.List[str]),
            ),
            (
                "security_groups",
                "SecurityGroups",
                TypeInfo(typing.List[str]),
            ),
            (
                "instance_market_options",
                "InstanceMarketOptions",
                TypeInfo(LaunchTemplateInstanceMarketOptions),
            ),
            (
                "credit_specification",
                "CreditSpecification",
                TypeInfo(CreditSpecification),
            ),
            (
                "cpu_options",
                "CpuOptions",
                TypeInfo(LaunchTemplateCpuOptions),
            ),
        ]

    # The ID of the kernel, if applicable.
    kernel_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # Indicates whether the instance is optimized for Amazon EBS I/O.
    ebs_optimized: bool = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The IAM instance profile.
    iam_instance_profile: "LaunchTemplateIamInstanceProfileSpecification" = dataclasses.field(
        default_factory=dict,
    )

    # The block device mappings.
    block_device_mappings: typing.List["LaunchTemplateBlockDeviceMapping"
                                      ] = dataclasses.field(
                                          default_factory=list,
                                      )

    # The network interfaces.
    network_interfaces: typing.List[
        "LaunchTemplateInstanceNetworkInterfaceSpecification"
    ] = dataclasses.field(
        default_factory=list,
    )

    # The ID of the AMI that was used to launch the instance.
    image_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The instance type.
    instance_type: "InstanceType" = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # The name of the key pair.
    key_name: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The monitoring for the instance.
    monitoring: "LaunchTemplatesMonitoring" = dataclasses.field(
        default_factory=dict,
    )

    # The placement of the instance.
    placement: "LaunchTemplatePlacement" = dataclasses.field(
        default_factory=dict,
    )

    # The ID of the RAM disk, if applicable.
    ram_disk_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # If set to `true`, indicates that the instance cannot be terminated using
    # the Amazon EC2 console, command line tool, or API.
    disable_api_termination: bool = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # Indicates whether an instance stops or terminates when you initiate
    # shutdown from the instance (using the operating system command for system
    # shutdown).
    instance_initiated_shutdown_behavior: "ShutdownBehavior" = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # The user data for the instance.
    user_data: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The tags.
    tag_specifications: typing.List["LaunchTemplateTagSpecification"
                                   ] = dataclasses.field(
                                       default_factory=list,
                                   )

    # The elastic GPU specification.
    elastic_gpu_specifications: typing.List["ElasticGpuSpecificationResponse"
                                           ] = dataclasses.field(
                                               default_factory=list,
                                           )

    # The security group IDs.
    security_group_ids: typing.List[str] = dataclasses.field(
        default_factory=list,
    )

    # The security group names.
    security_groups: typing.List[str] = dataclasses.field(
        default_factory=list,
    )

    # The market (purchasing) option for the instances.
    instance_market_options: "LaunchTemplateInstanceMarketOptions" = dataclasses.field(
        default_factory=dict,
    )

    # The credit option for CPU usage of the instance.
    credit_specification: "CreditSpecification" = dataclasses.field(
        default_factory=dict,
    )

    # The CPU options for the instance. For more information, see [Optimizing CPU
    # Options](http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-
    # optimize-cpu.html) in the _Amazon Elastic Compute Cloud User Guide_.
    cpu_options: "LaunchTemplateCpuOptions" = dataclasses.field(
        default_factory=dict,
    )


@dataclasses.dataclass
class RestoreAddressToClassicRequest(ShapeBase):
    """
    Contains the parameters for RestoreAddressToClassic.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "public_ip",
                "PublicIp",
                TypeInfo(str),
            ),
            (
                "dry_run",
                "DryRun",
                TypeInfo(bool),
            ),
        ]

    # The Elastic IP address.
    public_ip: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # Checks whether you have the required permissions for the action, without
    # actually making the request, and provides an error response. If you have
    # the required permissions, the error response is `DryRunOperation`.
    # Otherwise, it is `UnauthorizedOperation`.
    dry_run: bool = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class RestoreAddressToClassicResult(OutputShapeBase):
    """
    Contains the output of RestoreAddressToClassic.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "response_metadata",
                "ResponseMetadata",
                TypeInfo(typing.Dict[str, str]),
            ),
            (
                "public_ip",
                "PublicIp",
                TypeInfo(str),
            ),
            (
                "status",
                "Status",
                TypeInfo(Status),
            ),
        ]

    response_metadata: typing.Dict[str, str] = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # The Elastic IP address.
    public_ip: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The move status for the IP address.
    status: "Status" = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class RevokeSecurityGroupEgressRequest(ShapeBase):
    """
    Contains the parameters for RevokeSecurityGroupEgress.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "group_id",
                "GroupId",
                TypeInfo(str),
            ),
            (
                "dry_run",
                "DryRun",
                TypeInfo(bool),
            ),
            (
                "ip_permissions",
                "IpPermissions",
                TypeInfo(typing.List[IpPermission]),
            ),
            (
                "cidr_ip",
                "CidrIp",
                TypeInfo(str),
            ),
            (
                "from_port",
                "FromPort",
                TypeInfo(int),
            ),
            (
                "ip_protocol",
                "IpProtocol",
                TypeInfo(str),
            ),
            (
                "to_port",
                "ToPort",
                TypeInfo(int),
            ),
            (
                "source_security_group_name",
                "SourceSecurityGroupName",
                TypeInfo(str),
            ),
            (
                "source_security_group_owner_id",
                "SourceSecurityGroupOwnerId",
                TypeInfo(str),
            ),
        ]

    # The ID of the security group.
    group_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # Checks whether you have the required permissions for the action, without
    # actually making the request, and provides an error response. If you have
    # the required permissions, the error response is `DryRunOperation`.
    # Otherwise, it is `UnauthorizedOperation`.
    dry_run: bool = dataclasses.field(default=ShapeBase.NOT_SET, )

    # One or more sets of IP permissions. You can't specify a destination
    # security group and a CIDR IP address range in the same set of permissions.
    ip_permissions: typing.List["IpPermission"] = dataclasses.field(
        default_factory=list,
    )

    # Not supported. Use a set of IP permissions to specify the CIDR.
    cidr_ip: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # Not supported. Use a set of IP permissions to specify the port.
    from_port: int = dataclasses.field(default=ShapeBase.NOT_SET, )

    # Not supported. Use a set of IP permissions to specify the protocol name or
    # number.
    ip_protocol: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # Not supported. Use a set of IP permissions to specify the port.
    to_port: int = dataclasses.field(default=ShapeBase.NOT_SET, )

    # Not supported. Use a set of IP permissions to specify a destination
    # security group.
    source_security_group_name: str = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # Not supported. Use a set of IP permissions to specify a destination
    # security group.
    source_security_group_owner_id: str = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )


@dataclasses.dataclass
class RevokeSecurityGroupIngressRequest(ShapeBase):
    """
    Contains the parameters for RevokeSecurityGroupIngress.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "cidr_ip",
                "CidrIp",
                TypeInfo(str),
            ),
            (
                "from_port",
                "FromPort",
                TypeInfo(int),
            ),
            (
                "group_id",
                "GroupId",
                TypeInfo(str),
            ),
            (
                "group_name",
                "GroupName",
                TypeInfo(str),
            ),
            (
                "ip_permissions",
                "IpPermissions",
                TypeInfo(typing.List[IpPermission]),
            ),
            (
                "ip_protocol",
                "IpProtocol",
                TypeInfo(str),
            ),
            (
                "source_security_group_name",
                "SourceSecurityGroupName",
                TypeInfo(str),
            ),
            (
                "source_security_group_owner_id",
                "SourceSecurityGroupOwnerId",
                TypeInfo(str),
            ),
            (
                "to_port",
                "ToPort",
                TypeInfo(int),
            ),
            (
                "dry_run",
                "DryRun",
                TypeInfo(bool),
            ),
        ]

    # The CIDR IP address range. You can't specify this parameter when specifying
    # a source security group.
    cidr_ip: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The start of port range for the TCP and UDP protocols, or an ICMP type
    # number. For the ICMP type number, use `-1` to specify all ICMP types.
    from_port: int = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The ID of the security group. You must specify either the security group ID
    # or the security group name in the request. For security groups in a
    # nondefault VPC, you must specify the security group ID.
    group_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # [EC2-Classic, default VPC] The name of the security group. You must specify
    # either the security group ID or the security group name in the request.
    group_name: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # One or more sets of IP permissions. You can't specify a source security
    # group and a CIDR IP address range in the same set of permissions.
    ip_permissions: typing.List["IpPermission"] = dataclasses.field(
        default_factory=list,
    )

    # The IP protocol name (`tcp`, `udp`, `icmp`) or number (see [Protocol
    # Numbers](http://www.iana.org/assignments/protocol-numbers/protocol-
    # numbers.xhtml)). Use `-1` to specify all.
    ip_protocol: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # [EC2-Classic, default VPC] The name of the source security group. You can't
    # specify this parameter in combination with the following parameters: the
    # CIDR IP address range, the start of the port range, the IP protocol, and
    # the end of the port range. For EC2-VPC, the source security group must be
    # in the same VPC. To revoke a specific rule for an IP protocol and port
    # range, use a set of IP permissions instead.
    source_security_group_name: str = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # [EC2-Classic] The AWS account ID of the source security group, if the
    # source security group is in a different account. You can't specify this
    # parameter in combination with the following parameters: the CIDR IP address
    # range, the IP protocol, the start of the port range, and the end of the
    # port range. To revoke a specific rule for an IP protocol and port range,
    # use a set of IP permissions instead.
    source_security_group_owner_id: str = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # The end of port range for the TCP and UDP protocols, or an ICMP code
    # number. For the ICMP code number, use `-1` to specify all ICMP codes for
    # the ICMP type.
    to_port: int = dataclasses.field(default=ShapeBase.NOT_SET, )

    # Checks whether you have the required permissions for the action, without
    # actually making the request, and provides an error response. If you have
    # the required permissions, the error response is `DryRunOperation`.
    # Otherwise, it is `UnauthorizedOperation`.
    dry_run: bool = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class Route(ShapeBase):
    """
    Describes a route in a route table.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "destination_cidr_block",
                "DestinationCidrBlock",
                TypeInfo(str),
            ),
            (
                "destination_ipv6_cidr_block",
                "DestinationIpv6CidrBlock",
                TypeInfo(str),
            ),
            (
                "destination_prefix_list_id",
                "DestinationPrefixListId",
                TypeInfo(str),
            ),
            (
                "egress_only_internet_gateway_id",
                "EgressOnlyInternetGatewayId",
                TypeInfo(str),
            ),
            (
                "gateway_id",
                "GatewayId",
                TypeInfo(str),
            ),
            (
                "instance_id",
                "InstanceId",
                TypeInfo(str),
            ),
            (
                "instance_owner_id",
                "InstanceOwnerId",
                TypeInfo(str),
            ),
            (
                "nat_gateway_id",
                "NatGatewayId",
                TypeInfo(str),
            ),
            (
                "network_interface_id",
                "NetworkInterfaceId",
                TypeInfo(str),
            ),
            (
                "origin",
                "Origin",
                TypeInfo(RouteOrigin),
            ),
            (
                "state",
                "State",
                TypeInfo(RouteState),
            ),
            (
                "vpc_peering_connection_id",
                "VpcPeeringConnectionId",
                TypeInfo(str),
            ),
        ]

    # The IPv4 CIDR block used for the destination match.
    destination_cidr_block: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The IPv6 CIDR block used for the destination match.
    destination_ipv6_cidr_block: str = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # The prefix of the AWS service.
    destination_prefix_list_id: str = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # The ID of the egress-only internet gateway.
    egress_only_internet_gateway_id: str = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # The ID of a gateway attached to your VPC.
    gateway_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The ID of a NAT instance in your VPC.
    instance_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The AWS account ID of the owner of the instance.
    instance_owner_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The ID of a NAT gateway.
    nat_gateway_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The ID of the network interface.
    network_interface_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # Describes how the route was created.

    #   * `CreateRouteTable` \- The route was automatically created when the route table was created.

    #   * `CreateRoute` \- The route was manually added to the route table.

    #   * `EnableVgwRoutePropagation` \- The route was propagated by route propagation.
    origin: "RouteOrigin" = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The state of the route. The `blackhole` state indicates that the route's
    # target isn't available (for example, the specified gateway isn't attached
    # to the VPC, or the specified NAT instance has been terminated).
    state: "RouteState" = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The ID of the VPC peering connection.
    vpc_peering_connection_id: str = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )


class RouteOrigin(Enum):
    CreateRouteTable = "CreateRouteTable"
    CreateRoute = "CreateRoute"
    EnableVgwRoutePropagation = "EnableVgwRoutePropagation"


class RouteState(Enum):
    active = "active"
    blackhole = "blackhole"


@dataclasses.dataclass
class RouteTable(ShapeBase):
    """
    Describes a route table.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "associations",
                "Associations",
                TypeInfo(typing.List[RouteTableAssociation]),
            ),
            (
                "propagating_vgws",
                "PropagatingVgws",
                TypeInfo(typing.List[PropagatingVgw]),
            ),
            (
                "route_table_id",
                "RouteTableId",
                TypeInfo(str),
            ),
            (
                "routes",
                "Routes",
                TypeInfo(typing.List[Route]),
            ),
            (
                "tags",
                "Tags",
                TypeInfo(typing.List[Tag]),
            ),
            (
                "vpc_id",
                "VpcId",
                TypeInfo(str),
            ),
        ]

    # The associations between the route table and one or more subnets.
    associations: typing.List["RouteTableAssociation"] = dataclasses.field(
        default_factory=list,
    )

    # Any virtual private gateway (VGW) propagating routes.
    propagating_vgws: typing.List["PropagatingVgw"] = dataclasses.field(
        default_factory=list,
    )

    # The ID of the route table.
    route_table_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The routes in the route table.
    routes: typing.List["Route"] = dataclasses.field(default_factory=list, )

    # Any tags assigned to the route table.
    tags: typing.List["Tag"] = dataclasses.field(default_factory=list, )

    # The ID of the VPC.
    vpc_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class RouteTableAssociation(ShapeBase):
    """
    Describes an association between a route table and a subnet.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "main",
                "Main",
                TypeInfo(bool),
            ),
            (
                "route_table_association_id",
                "RouteTableAssociationId",
                TypeInfo(str),
            ),
            (
                "route_table_id",
                "RouteTableId",
                TypeInfo(str),
            ),
            (
                "subnet_id",
                "SubnetId",
                TypeInfo(str),
            ),
        ]

    # Indicates whether this is the main route table.
    main: bool = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The ID of the association between a route table and a subnet.
    route_table_association_id: str = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # The ID of the route table.
    route_table_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The ID of the subnet. A subnet ID is not returned for an implicit
    # association.
    subnet_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )


class RuleAction(Enum):
    allow = "allow"
    deny = "deny"


@dataclasses.dataclass
class RunInstancesMonitoringEnabled(ShapeBase):
    """
    Describes the monitoring of an instance.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "enabled",
                "Enabled",
                TypeInfo(bool),
            ),
        ]

    # Indicates whether detailed monitoring is enabled. Otherwise, basic
    # monitoring is enabled.
    enabled: bool = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class RunInstancesRequest(ShapeBase):
    """
    Contains the parameters for RunInstances.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "max_count",
                "MaxCount",
                TypeInfo(int),
            ),
            (
                "min_count",
                "MinCount",
                TypeInfo(int),
            ),
            (
                "block_device_mappings",
                "BlockDeviceMappings",
                TypeInfo(typing.List[BlockDeviceMapping]),
            ),
            (
                "image_id",
                "ImageId",
                TypeInfo(str),
            ),
            (
                "instance_type",
                "InstanceType",
                TypeInfo(InstanceType),
            ),
            (
                "ipv6_address_count",
                "Ipv6AddressCount",
                TypeInfo(int),
            ),
            (
                "ipv6_addresses",
                "Ipv6Addresses",
                TypeInfo(typing.List[InstanceIpv6Address]),
            ),
            (
                "kernel_id",
                "KernelId",
                TypeInfo(str),
            ),
            (
                "key_name",
                "KeyName",
                TypeInfo(str),
            ),
            (
                "monitoring",
                "Monitoring",
                TypeInfo(RunInstancesMonitoringEnabled),
            ),
            (
                "placement",
                "Placement",
                TypeInfo(Placement),
            ),
            (
                "ramdisk_id",
                "RamdiskId",
                TypeInfo(str),
            ),
            (
                "security_group_ids",
                "SecurityGroupIds",
                TypeInfo(typing.List[str]),
            ),
            (
                "security_groups",
                "SecurityGroups",
                TypeInfo(typing.List[str]),
            ),
            (
                "subnet_id",
                "SubnetId",
                TypeInfo(str),
            ),
            (
                "user_data",
                "UserData",
                TypeInfo(str),
            ),
            (
                "additional_info",
                "AdditionalInfo",
                TypeInfo(str),
            ),
            (
                "client_token",
                "ClientToken",
                TypeInfo(str),
            ),
            (
                "disable_api_termination",
                "DisableApiTermination",
                TypeInfo(bool),
            ),
            (
                "dry_run",
                "DryRun",
                TypeInfo(bool),
            ),
            (
                "ebs_optimized",
                "EbsOptimized",
                TypeInfo(bool),
            ),
            (
                "iam_instance_profile",
                "IamInstanceProfile",
                TypeInfo(IamInstanceProfileSpecification),
            ),
            (
                "instance_initiated_shutdown_behavior",
                "InstanceInitiatedShutdownBehavior",
                TypeInfo(ShutdownBehavior),
            ),
            (
                "network_interfaces",
                "NetworkInterfaces",
                TypeInfo(typing.List[InstanceNetworkInterfaceSpecification]),
            ),
            (
                "private_ip_address",
                "PrivateIpAddress",
                TypeInfo(str),
            ),
            (
                "elastic_gpu_specification",
                "ElasticGpuSpecification",
                TypeInfo(typing.List[ElasticGpuSpecification]),
            ),
            (
                "tag_specifications",
                "TagSpecifications",
                TypeInfo(typing.List[TagSpecification]),
            ),
            (
                "launch_template",
                "LaunchTemplate",
                TypeInfo(LaunchTemplateSpecification),
            ),
            (
                "instance_market_options",
                "InstanceMarketOptions",
                TypeInfo(InstanceMarketOptionsRequest),
            ),
            (
                "credit_specification",
                "CreditSpecification",
                TypeInfo(CreditSpecificationRequest),
            ),
            (
                "cpu_options",
                "CpuOptions",
                TypeInfo(CpuOptionsRequest),
            ),
        ]

    # The maximum number of instances to launch. If you specify more instances
    # than Amazon EC2 can launch in the target Availability Zone, Amazon EC2
    # launches the largest possible number of instances above `MinCount`.

    # Constraints: Between 1 and the maximum number you're allowed for the
    # specified instance type. For more information about the default limits, and
    # how to request an increase, see [How many instances can I run in Amazon
    # EC2](http://aws.amazon.com/ec2/faqs/#How_many_instances_can_I_run_in_Amazon_EC2)
    # in the Amazon EC2 FAQ.
    max_count: int = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The minimum number of instances to launch. If you specify a minimum that is
    # more instances than Amazon EC2 can launch in the target Availability Zone,
    # Amazon EC2 launches no instances.

    # Constraints: Between 1 and the maximum number you're allowed for the
    # specified instance type. For more information about the default limits, and
    # how to request an increase, see [How many instances can I run in Amazon
    # EC2](http://aws.amazon.com/ec2/faqs/#How_many_instances_can_I_run_in_Amazon_EC2)
    # in the Amazon EC2 General FAQ.
    min_count: int = dataclasses.field(default=ShapeBase.NOT_SET, )

    # One or more block device mapping entries. You can't specify both a snapshot
    # ID and an encryption value. This is because only blank volumes can be
    # encrypted on creation. If a snapshot is the basis for a volume, it is not
    # blank and its encryption status is used for the volume encryption status.
    block_device_mappings: typing.List["BlockDeviceMapping"
                                      ] = dataclasses.field(
                                          default_factory=list,
                                      )

    # The ID of the AMI, which you can get by calling DescribeImages. An AMI is
    # required to launch an instance and must be specified here or in a launch
    # template.
    image_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The instance type. For more information, see [Instance
    # Types](http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-
    # types.html) in the _Amazon Elastic Compute Cloud User Guide_.

    # Default: `m1.small`
    instance_type: "InstanceType" = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # [EC2-VPC] A number of IPv6 addresses to associate with the primary network
    # interface. Amazon EC2 chooses the IPv6 addresses from the range of your
    # subnet. You cannot specify this option and the option to assign specific
    # IPv6 addresses in the same request. You can specify this option if you've
    # specified a minimum number of instances to launch.
    ipv6_address_count: int = dataclasses.field(default=ShapeBase.NOT_SET, )

    # [EC2-VPC] Specify one or more IPv6 addresses from the range of the subnet
    # to associate with the primary network interface. You cannot specify this
    # option and the option to assign a number of IPv6 addresses in the same
    # request. You cannot specify this option if you've specified a minimum
    # number of instances to launch.
    ipv6_addresses: typing.List["InstanceIpv6Address"] = dataclasses.field(
        default_factory=list,
    )

    # The ID of the kernel.

    # We recommend that you use PV-GRUB instead of kernels and RAM disks. For
    # more information, see [ PV-
    # GRUB](http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/UserProvidedkernels.html)
    # in the _Amazon Elastic Compute Cloud User Guide_.
    kernel_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The name of the key pair. You can create a key pair using CreateKeyPair or
    # ImportKeyPair.

    # If you do not specify a key pair, you can't connect to the instance unless
    # you choose an AMI that is configured to allow users another way to log in.
    key_name: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The monitoring for the instance.
    monitoring: "RunInstancesMonitoringEnabled" = dataclasses.field(
        default_factory=dict,
    )

    # The placement for the instance.
    placement: "Placement" = dataclasses.field(default_factory=dict, )

    # The ID of the RAM disk.

    # We recommend that you use PV-GRUB instead of kernels and RAM disks. For
    # more information, see [ PV-
    # GRUB](http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/UserProvidedkernels.html)
    # in the _Amazon Elastic Compute Cloud User Guide_.
    ramdisk_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # One or more security group IDs. You can create a security group using
    # CreateSecurityGroup.

    # Default: Amazon EC2 uses the default security group.
    security_group_ids: typing.List[str] = dataclasses.field(
        default_factory=list,
    )

    # [EC2-Classic, default VPC] One or more security group names. For a
    # nondefault VPC, you must use security group IDs instead.

    # Default: Amazon EC2 uses the default security group.
    security_groups: typing.List[str] = dataclasses.field(
        default_factory=list,
    )

    # [EC2-VPC] The ID of the subnet to launch the instance into.
    subnet_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The user data to make available to the instance. For more information, see
    # [Running Commands on Your Linux Instance at
    # Launch](http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/user-data.html)
    # (Linux) and [Adding User
    # Data](http://docs.aws.amazon.com/AWSEC2/latest/WindowsGuide/ec2-instance-
    # metadata.html#instancedata-add-user-data) (Windows). If you are using a
    # command line tool, base64-encoding is performed for you, and you can load
    # the text from a file. Otherwise, you must provide base64-encoded text.
    user_data: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # Reserved.
    additional_info: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # Unique, case-sensitive identifier you provide to ensure the idempotency of
    # the request. For more information, see [Ensuring
    # Idempotency](http://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html).

    # Constraints: Maximum 64 ASCII characters
    client_token: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # If you set this parameter to `true`, you can't terminate the instance using
    # the Amazon EC2 console, CLI, or API; otherwise, you can. To change this
    # attribute to `false` after launch, use ModifyInstanceAttribute.
    # Alternatively, if you set `InstanceInitiatedShutdownBehavior` to
    # `terminate`, you can terminate the instance by running the shutdown command
    # from the instance.

    # Default: `false`
    disable_api_termination: bool = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # Checks whether you have the required permissions for the action, without
    # actually making the request, and provides an error response. If you have
    # the required permissions, the error response is `DryRunOperation`.
    # Otherwise, it is `UnauthorizedOperation`.
    dry_run: bool = dataclasses.field(default=ShapeBase.NOT_SET, )

    # Indicates whether the instance is optimized for Amazon EBS I/O. This
    # optimization provides dedicated throughput to Amazon EBS and an optimized
    # configuration stack to provide optimal Amazon EBS I/O performance. This
    # optimization isn't available with all instance types. Additional usage
    # charges apply when using an EBS-optimized instance.

    # Default: `false`
    ebs_optimized: bool = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The IAM instance profile.
    iam_instance_profile: "IamInstanceProfileSpecification" = dataclasses.field(
        default_factory=dict,
    )

    # Indicates whether an instance stops or terminates when you initiate
    # shutdown from the instance (using the operating system command for system
    # shutdown).

    # Default: `stop`
    instance_initiated_shutdown_behavior: "ShutdownBehavior" = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # One or more network interfaces.
    network_interfaces: typing.List["InstanceNetworkInterfaceSpecification"
                                   ] = dataclasses.field(
                                       default_factory=list,
                                   )

    # [EC2-VPC] The primary IPv4 address. You must specify a value from the IPv4
    # address range of the subnet.

    # Only one private IP address can be designated as primary. You can't specify
    # this option if you've specified the option to designate a private IP
    # address as the primary IP address in a network interface specification. You
    # cannot specify this option if you're launching more than one instance in
    # the request.
    private_ip_address: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # An elastic GPU to associate with the instance.
    elastic_gpu_specification: typing.List["ElasticGpuSpecification"
                                          ] = dataclasses.field(
                                              default_factory=list,
                                          )

    # The tags to apply to the resources during launch. You can only tag
    # instances and volumes on launch. The specified tags are applied to all
    # instances or volumes that are created during launch. To tag a resource
    # after it has been created, see CreateTags.
    tag_specifications: typing.List["TagSpecification"] = dataclasses.field(
        default_factory=list,
    )

    # The launch template to use to launch the instances. Any parameters that you
    # specify in RunInstances override the same parameters in the launch
    # template. You can specify either the name or ID of a launch template, but
    # not both.
    launch_template: "LaunchTemplateSpecification" = dataclasses.field(
        default_factory=dict,
    )

    # The market (purchasing) option for the instances.

    # For RunInstances, persistent Spot Instance requests are only supported when
    # **InstanceInterruptionBehavior** is set to either `hibernate` or `stop`.
    instance_market_options: "InstanceMarketOptionsRequest" = dataclasses.field(
        default_factory=dict,
    )

    # The credit option for CPU usage of the instance. Valid values are
    # `standard` and `unlimited`. To change this attribute after launch, use
    # ModifyInstanceCreditSpecification. For more information, see [T2
    # Instances](http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/t2-instances.html)
    # in the _Amazon Elastic Compute Cloud User Guide_.

    # Default: `standard`
    credit_specification: "CreditSpecificationRequest" = dataclasses.field(
        default_factory=dict,
    )

    # The CPU options for the instance. For more information, see [Optimizing CPU
    # Options](http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-
    # optimize-cpu.html) in the _Amazon Elastic Compute Cloud User Guide_.
    cpu_options: "CpuOptionsRequest" = dataclasses.field(default_factory=dict, )


@dataclasses.dataclass
class RunScheduledInstancesRequest(ShapeBase):
    """
    Contains the parameters for RunScheduledInstances.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "launch_specification",
                "LaunchSpecification",
                TypeInfo(ScheduledInstancesLaunchSpecification),
            ),
            (
                "scheduled_instance_id",
                "ScheduledInstanceId",
                TypeInfo(str),
            ),
            (
                "client_token",
                "ClientToken",
                TypeInfo(str),
            ),
            (
                "dry_run",
                "DryRun",
                TypeInfo(bool),
            ),
            (
                "instance_count",
                "InstanceCount",
                TypeInfo(int),
            ),
        ]

    # The launch specification. You must match the instance type, Availability
    # Zone, network, and platform of the schedule that you purchased.
    launch_specification: "ScheduledInstancesLaunchSpecification" = dataclasses.field(
        default_factory=dict,
    )

    # The Scheduled Instance ID.
    scheduled_instance_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # Unique, case-sensitive identifier that ensures the idempotency of the
    # request. For more information, see [Ensuring
    # Idempotency](http://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html).
    client_token: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # Checks whether you have the required permissions for the action, without
    # actually making the request, and provides an error response. If you have
    # the required permissions, the error response is `DryRunOperation`.
    # Otherwise, it is `UnauthorizedOperation`.
    dry_run: bool = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The number of instances.

    # Default: 1
    instance_count: int = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class RunScheduledInstancesResult(OutputShapeBase):
    """
    Contains the output of RunScheduledInstances.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "response_metadata",
                "ResponseMetadata",
                TypeInfo(typing.Dict[str, str]),
            ),
            (
                "instance_id_set",
                "InstanceIdSet",
                TypeInfo(typing.List[str]),
            ),
        ]

    response_metadata: typing.Dict[str, str] = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # The IDs of the newly launched instances.
    instance_id_set: typing.List[str] = dataclasses.field(
        default_factory=list,
    )


@dataclasses.dataclass
class S3Storage(ShapeBase):
    """
    Describes the storage parameters for S3 and S3 buckets for an instance store-
    backed AMI.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "aws_access_key_id",
                "AWSAccessKeyId",
                TypeInfo(str),
            ),
            (
                "bucket",
                "Bucket",
                TypeInfo(str),
            ),
            (
                "prefix",
                "Prefix",
                TypeInfo(str),
            ),
            (
                "upload_policy",
                "UploadPolicy",
                TypeInfo(typing.Any),
            ),
            (
                "upload_policy_signature",
                "UploadPolicySignature",
                TypeInfo(str),
            ),
        ]

    # The access key ID of the owner of the bucket. Before you specify a value
    # for your access key ID, review and follow the guidance in [Best Practices
    # for Managing AWS Access
    # Keys](http://docs.aws.amazon.com/general/latest/gr/aws-access-keys-best-
    # practices.html).
    aws_access_key_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The bucket in which to store the AMI. You can specify a bucket that you
    # already own or a new bucket that Amazon EC2 creates on your behalf. If you
    # specify a bucket that belongs to someone else, Amazon EC2 returns an error.
    bucket: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The beginning of the file name of the AMI.
    prefix: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # An Amazon S3 upload policy that gives Amazon EC2 permission to upload items
    # into Amazon S3 on your behalf.
    upload_policy: typing.Any = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The signature of the JSON document.
    upload_policy_signature: str = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )


@dataclasses.dataclass
class ScheduledInstance(ShapeBase):
    """
    Describes a Scheduled Instance.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "availability_zone",
                "AvailabilityZone",
                TypeInfo(str),
            ),
            (
                "create_date",
                "CreateDate",
                TypeInfo(datetime.datetime),
            ),
            (
                "hourly_price",
                "HourlyPrice",
                TypeInfo(str),
            ),
            (
                "instance_count",
                "InstanceCount",
                TypeInfo(int),
            ),
            (
                "instance_type",
                "InstanceType",
                TypeInfo(str),
            ),
            (
                "network_platform",
                "NetworkPlatform",
                TypeInfo(str),
            ),
            (
                "next_slot_start_time",
                "NextSlotStartTime",
                TypeInfo(datetime.datetime),
            ),
            (
                "platform",
                "Platform",
                TypeInfo(str),
            ),
            (
                "previous_slot_end_time",
                "PreviousSlotEndTime",
                TypeInfo(datetime.datetime),
            ),
            (
                "recurrence",
                "Recurrence",
                TypeInfo(ScheduledInstanceRecurrence),
            ),
            (
                "scheduled_instance_id",
                "ScheduledInstanceId",
                TypeInfo(str),
            ),
            (
                "slot_duration_in_hours",
                "SlotDurationInHours",
                TypeInfo(int),
            ),
            (
                "term_end_date",
                "TermEndDate",
                TypeInfo(datetime.datetime),
            ),
            (
                "term_start_date",
                "TermStartDate",
                TypeInfo(datetime.datetime),
            ),
            (
                "total_scheduled_instance_hours",
                "TotalScheduledInstanceHours",
                TypeInfo(int),
            ),
        ]

    # The Availability Zone.
    availability_zone: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The date when the Scheduled Instance was purchased.
    create_date: datetime.datetime = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # The hourly price for a single instance.
    hourly_price: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The number of instances.
    instance_count: int = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The instance type.
    instance_type: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The network platform (`EC2-Classic` or `EC2-VPC`).
    network_platform: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The time for the next schedule to start.
    next_slot_start_time: datetime.datetime = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # The platform (`Linux/UNIX` or `Windows`).
    platform: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The time that the previous schedule ended or will end.
    previous_slot_end_time: datetime.datetime = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # The schedule recurrence.
    recurrence: "ScheduledInstanceRecurrence" = dataclasses.field(
        default_factory=dict,
    )

    # The Scheduled Instance ID.
    scheduled_instance_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The number of hours in the schedule.
    slot_duration_in_hours: int = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The end date for the Scheduled Instance.
    term_end_date: datetime.datetime = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # The start date for the Scheduled Instance.
    term_start_date: datetime.datetime = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # The total number of hours for a single instance for the entire term.
    total_scheduled_instance_hours: int = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )


@dataclasses.dataclass
class ScheduledInstanceAvailability(ShapeBase):
    """
    Describes a schedule that is available for your Scheduled Instances.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "availability_zone",
                "AvailabilityZone",
                TypeInfo(str),
            ),
            (
                "available_instance_count",
                "AvailableInstanceCount",
                TypeInfo(int),
            ),
            (
                "first_slot_start_time",
                "FirstSlotStartTime",
                TypeInfo(datetime.datetime),
            ),
            (
                "hourly_price",
                "HourlyPrice",
                TypeInfo(str),
            ),
            (
                "instance_type",
                "InstanceType",
                TypeInfo(str),
            ),
            (
                "max_term_duration_in_days",
                "MaxTermDurationInDays",
                TypeInfo(int),
            ),
            (
                "min_term_duration_in_days",
                "MinTermDurationInDays",
                TypeInfo(int),
            ),
            (
                "network_platform",
                "NetworkPlatform",
                TypeInfo(str),
            ),
            (
                "platform",
                "Platform",
                TypeInfo(str),
            ),
            (
                "purchase_token",
                "PurchaseToken",
                TypeInfo(str),
            ),
            (
                "recurrence",
                "Recurrence",
                TypeInfo(ScheduledInstanceRecurrence),
            ),
            (
                "slot_duration_in_hours",
                "SlotDurationInHours",
                TypeInfo(int),
            ),
            (
                "total_scheduled_instance_hours",
                "TotalScheduledInstanceHours",
                TypeInfo(int),
            ),
        ]

    # The Availability Zone.
    availability_zone: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The number of available instances.
    available_instance_count: int = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # The time period for the first schedule to start.
    first_slot_start_time: datetime.datetime = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # The hourly price for a single instance.
    hourly_price: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The instance type. You can specify one of the C3, C4, M4, or R3 instance
    # types.
    instance_type: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The maximum term. The only possible value is 365 days.
    max_term_duration_in_days: int = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # The minimum term. The only possible value is 365 days.
    min_term_duration_in_days: int = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # The network platform (`EC2-Classic` or `EC2-VPC`).
    network_platform: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The platform (`Linux/UNIX` or `Windows`).
    platform: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The purchase token. This token expires in two hours.
    purchase_token: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The schedule recurrence.
    recurrence: "ScheduledInstanceRecurrence" = dataclasses.field(
        default_factory=dict,
    )

    # The number of hours in the schedule.
    slot_duration_in_hours: int = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The total number of hours for a single instance for the entire term.
    total_scheduled_instance_hours: int = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )


@dataclasses.dataclass
class ScheduledInstanceRecurrence(ShapeBase):
    """
    Describes the recurring schedule for a Scheduled Instance.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "frequency",
                "Frequency",
                TypeInfo(str),
            ),
            (
                "interval",
                "Interval",
                TypeInfo(int),
            ),
            (
                "occurrence_day_set",
                "OccurrenceDaySet",
                TypeInfo(typing.List[int]),
            ),
            (
                "occurrence_relative_to_end",
                "OccurrenceRelativeToEnd",
                TypeInfo(bool),
            ),
            (
                "occurrence_unit",
                "OccurrenceUnit",
                TypeInfo(str),
            ),
        ]

    # The frequency (`Daily`, `Weekly`, or `Monthly`).
    frequency: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The interval quantity. The interval unit depends on the value of
    # `frequency`. For example, every 2 weeks or every 2 months.
    interval: int = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The days. For a monthly schedule, this is one or more days of the month
    # (1-31). For a weekly schedule, this is one or more days of the week (1-7,
    # where 1 is Sunday).
    occurrence_day_set: typing.List[int] = dataclasses.field(
        default_factory=list,
    )

    # Indicates whether the occurrence is relative to the end of the specified
    # week or month.
    occurrence_relative_to_end: bool = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # The unit for `occurrenceDaySet` (`DayOfWeek` or `DayOfMonth`).
    occurrence_unit: str = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class ScheduledInstanceRecurrenceRequest(ShapeBase):
    """
    Describes the recurring schedule for a Scheduled Instance.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "frequency",
                "Frequency",
                TypeInfo(str),
            ),
            (
                "interval",
                "Interval",
                TypeInfo(int),
            ),
            (
                "occurrence_days",
                "OccurrenceDays",
                TypeInfo(typing.List[int]),
            ),
            (
                "occurrence_relative_to_end",
                "OccurrenceRelativeToEnd",
                TypeInfo(bool),
            ),
            (
                "occurrence_unit",
                "OccurrenceUnit",
                TypeInfo(str),
            ),
        ]

    # The frequency (`Daily`, `Weekly`, or `Monthly`).
    frequency: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The interval quantity. The interval unit depends on the value of
    # `Frequency`. For example, every 2 weeks or every 2 months.
    interval: int = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The days. For a monthly schedule, this is one or more days of the month
    # (1-31). For a weekly schedule, this is one or more days of the week (1-7,
    # where 1 is Sunday). You can't specify this value with a daily schedule. If
    # the occurrence is relative to the end of the month, you can specify only a
    # single day.
    occurrence_days: typing.List[int] = dataclasses.field(
        default_factory=list,
    )

    # Indicates whether the occurrence is relative to the end of the specified
    # week or month. You can't specify this value with a daily schedule.
    occurrence_relative_to_end: bool = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # The unit for `OccurrenceDays` (`DayOfWeek` or `DayOfMonth`). This value is
    # required for a monthly schedule. You can't specify `DayOfWeek` with a
    # weekly schedule. You can't specify this value with a daily schedule.
    occurrence_unit: str = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class ScheduledInstancesBlockDeviceMapping(ShapeBase):
    """
    Describes a block device mapping for a Scheduled Instance.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "device_name",
                "DeviceName",
                TypeInfo(str),
            ),
            (
                "ebs",
                "Ebs",
                TypeInfo(ScheduledInstancesEbs),
            ),
            (
                "no_device",
                "NoDevice",
                TypeInfo(str),
            ),
            (
                "virtual_name",
                "VirtualName",
                TypeInfo(str),
            ),
        ]

    # The device name (for example, `/dev/sdh` or `xvdh`).
    device_name: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # Parameters used to set up EBS volumes automatically when the instance is
    # launched.
    ebs: "ScheduledInstancesEbs" = dataclasses.field(default_factory=dict, )

    # Suppresses the specified device included in the block device mapping of the
    # AMI.
    no_device: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The virtual device name (`ephemeral`N). Instance store volumes are numbered
    # starting from 0. An instance type with two available instance store volumes
    # can specify mappings for `ephemeral0` and `ephemeral1`. The number of
    # available instance store volumes depends on the instance type. After you
    # connect to the instance, you must mount the volume.

    # Constraints: For M3 instances, you must specify instance store volumes in
    # the block device mapping for the instance. When you launch an M3 instance,
    # we ignore any instance store volumes specified in the block device mapping
    # for the AMI.
    virtual_name: str = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class ScheduledInstancesEbs(ShapeBase):
    """
    Describes an EBS volume for a Scheduled Instance.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "delete_on_termination",
                "DeleteOnTermination",
                TypeInfo(bool),
            ),
            (
                "encrypted",
                "Encrypted",
                TypeInfo(bool),
            ),
            (
                "iops",
                "Iops",
                TypeInfo(int),
            ),
            (
                "snapshot_id",
                "SnapshotId",
                TypeInfo(str),
            ),
            (
                "volume_size",
                "VolumeSize",
                TypeInfo(int),
            ),
            (
                "volume_type",
                "VolumeType",
                TypeInfo(str),
            ),
        ]

    # Indicates whether the volume is deleted on instance termination.
    delete_on_termination: bool = dataclasses.field(default=ShapeBase.NOT_SET, )

    # Indicates whether the volume is encrypted. You can attached encrypted
    # volumes only to instances that support them.
    encrypted: bool = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The number of I/O operations per second (IOPS) that the volume supports.
    # For io1 volumes, this represents the number of IOPS that are provisioned
    # for the volume. For `gp2` volumes, this represents the baseline performance
    # of the volume and the rate at which the volume accumulates I/O credits for
    # bursting. For more information about `gp2` baseline performance, I/O
    # credits, and bursting, see [Amazon EBS Volume
    # Types](http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSVolumeTypes.html)
    # in the _Amazon Elastic Compute Cloud User Guide_.

    # Constraint: Range is 100-20000 IOPS for `io1` volumes and 100-10000 IOPS
    # for `gp2` volumes.

    # Condition: This parameter is required for requests to create `io1`volumes;
    # it is not used in requests to create `gp2`, `st1`, `sc1`, or `standard`
    # volumes.
    iops: int = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The ID of the snapshot.
    snapshot_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The size of the volume, in GiB.

    # Default: If you're creating the volume from a snapshot and don't specify a
    # volume size, the default is the snapshot size.
    volume_size: int = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The volume type. `gp2` for General Purpose SSD, `io1` for Provisioned IOPS
    # SSD, Throughput Optimized HDD for `st1`, Cold HDD for `sc1`, or `standard`
    # for Magnetic.

    # Default: `standard`
    volume_type: str = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class ScheduledInstancesIamInstanceProfile(ShapeBase):
    """
    Describes an IAM instance profile for a Scheduled Instance.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "arn",
                "Arn",
                TypeInfo(str),
            ),
            (
                "name",
                "Name",
                TypeInfo(str),
            ),
        ]

    # The Amazon Resource Name (ARN).
    arn: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The name.
    name: str = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class ScheduledInstancesIpv6Address(ShapeBase):
    """
    Describes an IPv6 address.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "ipv6_address",
                "Ipv6Address",
                TypeInfo(str),
            ),
        ]

    # The IPv6 address.
    ipv6_address: str = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class ScheduledInstancesLaunchSpecification(ShapeBase):
    """
    Describes the launch specification for a Scheduled Instance.

    If you are launching the Scheduled Instance in EC2-VPC, you must specify the ID
    of the subnet. You can specify the subnet using either `SubnetId` or
    `NetworkInterface`.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "image_id",
                "ImageId",
                TypeInfo(str),
            ),
            (
                "block_device_mappings",
                "BlockDeviceMappings",
                TypeInfo(typing.List[ScheduledInstancesBlockDeviceMapping]),
            ),
            (
                "ebs_optimized",
                "EbsOptimized",
                TypeInfo(bool),
            ),
            (
                "iam_instance_profile",
                "IamInstanceProfile",
                TypeInfo(ScheduledInstancesIamInstanceProfile),
            ),
            (
                "instance_type",
                "InstanceType",
                TypeInfo(str),
            ),
            (
                "kernel_id",
                "KernelId",
                TypeInfo(str),
            ),
            (
                "key_name",
                "KeyName",
                TypeInfo(str),
            ),
            (
                "monitoring",
                "Monitoring",
                TypeInfo(ScheduledInstancesMonitoring),
            ),
            (
                "network_interfaces",
                "NetworkInterfaces",
                TypeInfo(typing.List[ScheduledInstancesNetworkInterface]),
            ),
            (
                "placement",
                "Placement",
                TypeInfo(ScheduledInstancesPlacement),
            ),
            (
                "ramdisk_id",
                "RamdiskId",
                TypeInfo(str),
            ),
            (
                "security_group_ids",
                "SecurityGroupIds",
                TypeInfo(typing.List[str]),
            ),
            (
                "subnet_id",
                "SubnetId",
                TypeInfo(str),
            ),
            (
                "user_data",
                "UserData",
                TypeInfo(str),
            ),
        ]

    # The ID of the Amazon Machine Image (AMI).
    image_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # One or more block device mapping entries.
    block_device_mappings: typing.List["ScheduledInstancesBlockDeviceMapping"
                                      ] = dataclasses.field(
                                          default_factory=list,
                                      )

    # Indicates whether the instances are optimized for EBS I/O. This
    # optimization provides dedicated throughput to Amazon EBS and an optimized
    # configuration stack to provide optimal EBS I/O performance. This
    # optimization isn't available with all instance types. Additional usage
    # charges apply when using an EBS-optimized instance.

    # Default: `false`
    ebs_optimized: bool = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The IAM instance profile.
    iam_instance_profile: "ScheduledInstancesIamInstanceProfile" = dataclasses.field(
        default_factory=dict,
    )

    # The instance type.
    instance_type: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The ID of the kernel.
    kernel_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The name of the key pair.
    key_name: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # Enable or disable monitoring for the instances.
    monitoring: "ScheduledInstancesMonitoring" = dataclasses.field(
        default_factory=dict,
    )

    # One or more network interfaces.
    network_interfaces: typing.List["ScheduledInstancesNetworkInterface"
                                   ] = dataclasses.field(
                                       default_factory=list,
                                   )

    # The placement information.
    placement: "ScheduledInstancesPlacement" = dataclasses.field(
        default_factory=dict,
    )

    # The ID of the RAM disk.
    ramdisk_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The IDs of one or more security groups.
    security_group_ids: typing.List[str] = dataclasses.field(
        default_factory=list,
    )

    # The ID of the subnet in which to launch the instances.
    subnet_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The base64-encoded MIME user data.
    user_data: str = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class ScheduledInstancesMonitoring(ShapeBase):
    """
    Describes whether monitoring is enabled for a Scheduled Instance.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "enabled",
                "Enabled",
                TypeInfo(bool),
            ),
        ]

    # Indicates whether monitoring is enabled.
    enabled: bool = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class ScheduledInstancesNetworkInterface(ShapeBase):
    """
    Describes a network interface for a Scheduled Instance.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "associate_public_ip_address",
                "AssociatePublicIpAddress",
                TypeInfo(bool),
            ),
            (
                "delete_on_termination",
                "DeleteOnTermination",
                TypeInfo(bool),
            ),
            (
                "description",
                "Description",
                TypeInfo(str),
            ),
            (
                "device_index",
                "DeviceIndex",
                TypeInfo(int),
            ),
            (
                "groups",
                "Groups",
                TypeInfo(typing.List[str]),
            ),
            (
                "ipv6_address_count",
                "Ipv6AddressCount",
                TypeInfo(int),
            ),
            (
                "ipv6_addresses",
                "Ipv6Addresses",
                TypeInfo(typing.List[ScheduledInstancesIpv6Address]),
            ),
            (
                "network_interface_id",
                "NetworkInterfaceId",
                TypeInfo(str),
            ),
            (
                "private_ip_address",
                "PrivateIpAddress",
                TypeInfo(str),
            ),
            (
                "private_ip_address_configs",
                "PrivateIpAddressConfigs",
                TypeInfo(typing.List[ScheduledInstancesPrivateIpAddressConfig]),
            ),
            (
                "secondary_private_ip_address_count",
                "SecondaryPrivateIpAddressCount",
                TypeInfo(int),
            ),
            (
                "subnet_id",
                "SubnetId",
                TypeInfo(str),
            ),
        ]

    # Indicates whether to assign a public IPv4 address to instances launched in
    # a VPC. The public IPv4 address can only be assigned to a network interface
    # for eth0, and can only be assigned to a new network interface, not an
    # existing one. You cannot specify more than one network interface in the
    # request. If launching into a default subnet, the default value is `true`.
    associate_public_ip_address: bool = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # Indicates whether to delete the interface when the instance is terminated.
    delete_on_termination: bool = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The description.
    description: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The index of the device for the network interface attachment.
    device_index: int = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The IDs of one or more security groups.
    groups: typing.List[str] = dataclasses.field(default_factory=list, )

    # The number of IPv6 addresses to assign to the network interface. The IPv6
    # addresses are automatically selected from the subnet range.
    ipv6_address_count: int = dataclasses.field(default=ShapeBase.NOT_SET, )

    # One or more specific IPv6 addresses from the subnet range.
    ipv6_addresses: typing.List["ScheduledInstancesIpv6Address"
                               ] = dataclasses.field(
                                   default_factory=list,
                               )

    # The ID of the network interface.
    network_interface_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The IPv4 address of the network interface within the subnet.
    private_ip_address: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The private IPv4 addresses.
    private_ip_address_configs: typing.List[
        "ScheduledInstancesPrivateIpAddressConfig"
    ] = dataclasses.field(
        default_factory=list,
    )

    # The number of secondary private IPv4 addresses.
    secondary_private_ip_address_count: int = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # The ID of the subnet.
    subnet_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class ScheduledInstancesPlacement(ShapeBase):
    """
    Describes the placement for a Scheduled Instance.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "availability_zone",
                "AvailabilityZone",
                TypeInfo(str),
            ),
            (
                "group_name",
                "GroupName",
                TypeInfo(str),
            ),
        ]

    # The Availability Zone.
    availability_zone: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The name of the placement group.
    group_name: str = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class ScheduledInstancesPrivateIpAddressConfig(ShapeBase):
    """
    Describes a private IPv4 address for a Scheduled Instance.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "primary",
                "Primary",
                TypeInfo(bool),
            ),
            (
                "private_ip_address",
                "PrivateIpAddress",
                TypeInfo(str),
            ),
        ]

    # Indicates whether this is a primary IPv4 address. Otherwise, this is a
    # secondary IPv4 address.
    primary: bool = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The IPv4 address.
    private_ip_address: str = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class SecurityGroup(ShapeBase):
    """
    Describes a security group
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "description",
                "Description",
                TypeInfo(str),
            ),
            (
                "group_name",
                "GroupName",
                TypeInfo(str),
            ),
            (
                "ip_permissions",
                "IpPermissions",
                TypeInfo(typing.List[IpPermission]),
            ),
            (
                "owner_id",
                "OwnerId",
                TypeInfo(str),
            ),
            (
                "group_id",
                "GroupId",
                TypeInfo(str),
            ),
            (
                "ip_permissions_egress",
                "IpPermissionsEgress",
                TypeInfo(typing.List[IpPermission]),
            ),
            (
                "tags",
                "Tags",
                TypeInfo(typing.List[Tag]),
            ),
            (
                "vpc_id",
                "VpcId",
                TypeInfo(str),
            ),
        ]

    # A description of the security group.
    description: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The name of the security group.
    group_name: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # One or more inbound rules associated with the security group.
    ip_permissions: typing.List["IpPermission"] = dataclasses.field(
        default_factory=list,
    )

    # The AWS account ID of the owner of the security group.
    owner_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The ID of the security group.
    group_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # [EC2-VPC] One or more outbound rules associated with the security group.
    ip_permissions_egress: typing.List["IpPermission"] = dataclasses.field(
        default_factory=list,
    )

    # Any tags assigned to the security group.
    tags: typing.List["Tag"] = dataclasses.field(default_factory=list, )

    # [EC2-VPC] The ID of the VPC for the security group.
    vpc_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class SecurityGroupIdentifier(ShapeBase):
    """
    Describes a security group.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "group_id",
                "GroupId",
                TypeInfo(str),
            ),
            (
                "group_name",
                "GroupName",
                TypeInfo(str),
            ),
        ]

    # The ID of the security group.
    group_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The name of the security group.
    group_name: str = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class SecurityGroupReference(ShapeBase):
    """
    Describes a VPC with a security group that references your security group.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "group_id",
                "GroupId",
                TypeInfo(str),
            ),
            (
                "referencing_vpc_id",
                "ReferencingVpcId",
                TypeInfo(str),
            ),
            (
                "vpc_peering_connection_id",
                "VpcPeeringConnectionId",
                TypeInfo(str),
            ),
        ]

    # The ID of your security group.
    group_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The ID of the VPC with the referencing security group.
    referencing_vpc_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The ID of the VPC peering connection.
    vpc_peering_connection_id: str = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )


@dataclasses.dataclass
class ServiceConfiguration(ShapeBase):
    """
    Describes a service configuration for a VPC endpoint service.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "service_type",
                "ServiceType",
                TypeInfo(typing.List[ServiceTypeDetail]),
            ),
            (
                "service_id",
                "ServiceId",
                TypeInfo(str),
            ),
            (
                "service_name",
                "ServiceName",
                TypeInfo(str),
            ),
            (
                "service_state",
                "ServiceState",
                TypeInfo(ServiceState),
            ),
            (
                "availability_zones",
                "AvailabilityZones",
                TypeInfo(typing.List[str]),
            ),
            (
                "acceptance_required",
                "AcceptanceRequired",
                TypeInfo(bool),
            ),
            (
                "network_load_balancer_arns",
                "NetworkLoadBalancerArns",
                TypeInfo(typing.List[str]),
            ),
            (
                "base_endpoint_dns_names",
                "BaseEndpointDnsNames",
                TypeInfo(typing.List[str]),
            ),
            (
                "private_dns_name",
                "PrivateDnsName",
                TypeInfo(str),
            ),
        ]

    # The type of service.
    service_type: typing.List["ServiceTypeDetail"] = dataclasses.field(
        default_factory=list,
    )

    # The ID of the service.
    service_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The name of the service.
    service_name: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The service state.
    service_state: "ServiceState" = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # In the Availability Zones in which the service is available.
    availability_zones: typing.List[str] = dataclasses.field(
        default_factory=list,
    )

    # Indicates whether requests from other AWS accounts to create an endpoint to
    # the service must first be accepted.
    acceptance_required: bool = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The Amazon Resource Names (ARNs) of the Network Load Balancers for the
    # service.
    network_load_balancer_arns: typing.List[str] = dataclasses.field(
        default_factory=list,
    )

    # The DNS names for the service.
    base_endpoint_dns_names: typing.List[str] = dataclasses.field(
        default_factory=list,
    )

    # The private DNS name for the service.
    private_dns_name: str = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class ServiceDetail(ShapeBase):
    """
    Describes a VPC endpoint service.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "service_name",
                "ServiceName",
                TypeInfo(str),
            ),
            (
                "service_type",
                "ServiceType",
                TypeInfo(typing.List[ServiceTypeDetail]),
            ),
            (
                "availability_zones",
                "AvailabilityZones",
                TypeInfo(typing.List[str]),
            ),
            (
                "owner",
                "Owner",
                TypeInfo(str),
            ),
            (
                "base_endpoint_dns_names",
                "BaseEndpointDnsNames",
                TypeInfo(typing.List[str]),
            ),
            (
                "private_dns_name",
                "PrivateDnsName",
                TypeInfo(str),
            ),
            (
                "vpc_endpoint_policy_supported",
                "VpcEndpointPolicySupported",
                TypeInfo(bool),
            ),
            (
                "acceptance_required",
                "AcceptanceRequired",
                TypeInfo(bool),
            ),
        ]

    # The Amazon Resource Name (ARN) of the service.
    service_name: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The type of service.
    service_type: typing.List["ServiceTypeDetail"] = dataclasses.field(
        default_factory=list,
    )

    # The Availability Zones in which the service is available.
    availability_zones: typing.List[str] = dataclasses.field(
        default_factory=list,
    )

    # The AWS account ID of the service owner.
    owner: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The DNS names for the service.
    base_endpoint_dns_names: typing.List[str] = dataclasses.field(
        default_factory=list,
    )

    # The private DNS name for the service.
    private_dns_name: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # Indicates whether the service supports endpoint policies.
    vpc_endpoint_policy_supported: bool = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # Indicates whether VPC endpoint connection requests to the service must be
    # accepted by the service owner.
    acceptance_required: bool = dataclasses.field(default=ShapeBase.NOT_SET, )


class ServiceState(Enum):
    Pending = "Pending"
    Available = "Available"
    Deleting = "Deleting"
    Deleted = "Deleted"
    Failed = "Failed"


class ServiceType(Enum):
    Interface = "Interface"
    Gateway = "Gateway"


@dataclasses.dataclass
class ServiceTypeDetail(ShapeBase):
    """
    Describes the type of service for a VPC endpoint.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "service_type",
                "ServiceType",
                TypeInfo(ServiceType),
            ),
        ]

    # The type of service.
    service_type: "ServiceType" = dataclasses.field(default=ShapeBase.NOT_SET, )


class ShutdownBehavior(Enum):
    stop = "stop"
    terminate = "terminate"


@dataclasses.dataclass
class SlotDateTimeRangeRequest(ShapeBase):
    """
    Describes the time period for a Scheduled Instance to start its first schedule.
    The time period must span less than one day.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "earliest_time",
                "EarliestTime",
                TypeInfo(datetime.datetime),
            ),
            (
                "latest_time",
                "LatestTime",
                TypeInfo(datetime.datetime),
            ),
        ]

    # The earliest date and time, in UTC, for the Scheduled Instance to start.
    earliest_time: datetime.datetime = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # The latest date and time, in UTC, for the Scheduled Instance to start. This
    # value must be later than or equal to the earliest date and at most three
    # months in the future.
    latest_time: datetime.datetime = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )


@dataclasses.dataclass
class SlotStartTimeRangeRequest(ShapeBase):
    """
    Describes the time period for a Scheduled Instance to start its first schedule.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "earliest_time",
                "EarliestTime",
                TypeInfo(datetime.datetime),
            ),
            (
                "latest_time",
                "LatestTime",
                TypeInfo(datetime.datetime),
            ),
        ]

    # The earliest date and time, in UTC, for the Scheduled Instance to start.
    earliest_time: datetime.datetime = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # The latest date and time, in UTC, for the Scheduled Instance to start.
    latest_time: datetime.datetime = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )


@dataclasses.dataclass
class Snapshot(OutputShapeBase):
    """
    Describes a snapshot.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "response_metadata",
                "ResponseMetadata",
                TypeInfo(typing.Dict[str, str]),
            ),
            (
                "data_encryption_key_id",
                "DataEncryptionKeyId",
                TypeInfo(str),
            ),
            (
                "description",
                "Description",
                TypeInfo(str),
            ),
            (
                "encrypted",
                "Encrypted",
                TypeInfo(bool),
            ),
            (
                "kms_key_id",
                "KmsKeyId",
                TypeInfo(str),
            ),
            (
                "owner_id",
                "OwnerId",
                TypeInfo(str),
            ),
            (
                "progress",
                "Progress",
                TypeInfo(str),
            ),
            (
                "snapshot_id",
                "SnapshotId",
                TypeInfo(str),
            ),
            (
                "start_time",
                "StartTime",
                TypeInfo(datetime.datetime),
            ),
            (
                "state",
                "State",
                TypeInfo(SnapshotState),
            ),
            (
                "state_message",
                "StateMessage",
                TypeInfo(str),
            ),
            (
                "volume_id",
                "VolumeId",
                TypeInfo(str),
            ),
            (
                "volume_size",
                "VolumeSize",
                TypeInfo(int),
            ),
            (
                "owner_alias",
                "OwnerAlias",
                TypeInfo(str),
            ),
            (
                "tags",
                "Tags",
                TypeInfo(typing.List[Tag]),
            ),
        ]

    response_metadata: typing.Dict[str, str] = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # The data encryption key identifier for the snapshot. This value is a unique
    # identifier that corresponds to the data encryption key that was used to
    # encrypt the original volume or snapshot copy. Because data encryption keys
    # are inherited by volumes created from snapshots, and vice versa, if
    # snapshots share the same data encryption key identifier, then they belong
    # to the same volume/snapshot lineage. This parameter is only returned by the
    # DescribeSnapshots API operation.
    data_encryption_key_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The description for the snapshot.
    description: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # Indicates whether the snapshot is encrypted.
    encrypted: bool = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The full ARN of the AWS Key Management Service (AWS KMS) customer master
    # key (CMK) that was used to protect the volume encryption key for the parent
    # volume.
    kms_key_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The AWS account ID of the EBS snapshot owner.
    owner_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The progress of the snapshot, as a percentage.
    progress: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The ID of the snapshot. Each snapshot receives a unique identifier when it
    # is created.
    snapshot_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The time stamp when the snapshot was initiated.
    start_time: datetime.datetime = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # The snapshot state.
    state: "SnapshotState" = dataclasses.field(default=ShapeBase.NOT_SET, )

    # Encrypted Amazon EBS snapshots are copied asynchronously. If a snapshot
    # copy operation fails (for example, if the proper AWS Key Management Service
    # (AWS KMS) permissions are not obtained) this field displays error state
    # details to help you diagnose why the error occurred. This parameter is only
    # returned by the DescribeSnapshots API operation.
    state_message: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The ID of the volume that was used to create the snapshot. Snapshots
    # created by the CopySnapshot action have an arbitrary volume ID that should
    # not be used for any purpose.
    volume_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The size of the volume, in GiB.
    volume_size: int = dataclasses.field(default=ShapeBase.NOT_SET, )

    # Value from an Amazon-maintained list (`amazon` | `aws-marketplace` |
    # `microsoft`) of snapshot owners. Not to be confused with the user-
    # configured AWS account alias, which is set from the IAM console.
    owner_alias: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # Any tags assigned to the snapshot.
    tags: typing.List["Tag"] = dataclasses.field(default_factory=list, )


class SnapshotAttributeName(Enum):
    productCodes = "productCodes"
    createVolumePermission = "createVolumePermission"


@dataclasses.dataclass
class SnapshotDetail(ShapeBase):
    """
    Describes the snapshot created from the imported disk.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "description",
                "Description",
                TypeInfo(str),
            ),
            (
                "device_name",
                "DeviceName",
                TypeInfo(str),
            ),
            (
                "disk_image_size",
                "DiskImageSize",
                TypeInfo(float),
            ),
            (
                "format",
                "Format",
                TypeInfo(str),
            ),
            (
                "progress",
                "Progress",
                TypeInfo(str),
            ),
            (
                "snapshot_id",
                "SnapshotId",
                TypeInfo(str),
            ),
            (
                "status",
                "Status",
                TypeInfo(str),
            ),
            (
                "status_message",
                "StatusMessage",
                TypeInfo(str),
            ),
            (
                "url",
                "Url",
                TypeInfo(str),
            ),
            (
                "user_bucket",
                "UserBucket",
                TypeInfo(UserBucketDetails),
            ),
        ]

    # A description for the snapshot.
    description: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The block device mapping for the snapshot.
    device_name: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The size of the disk in the snapshot, in GiB.
    disk_image_size: float = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The format of the disk image from which the snapshot is created.
    format: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The percentage of progress for the task.
    progress: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The snapshot ID of the disk being imported.
    snapshot_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # A brief status of the snapshot creation.
    status: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # A detailed status message for the snapshot creation.
    status_message: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The URL used to access the disk image.
    url: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The S3 bucket for the disk image.
    user_bucket: "UserBucketDetails" = dataclasses.field(default_factory=dict, )


@dataclasses.dataclass
class SnapshotDiskContainer(ShapeBase):
    """
    The disk container object for the import snapshot request.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "description",
                "Description",
                TypeInfo(str),
            ),
            (
                "format",
                "Format",
                TypeInfo(str),
            ),
            (
                "url",
                "Url",
                TypeInfo(str),
            ),
            (
                "user_bucket",
                "UserBucket",
                TypeInfo(UserBucket),
            ),
        ]

    # The description of the disk image being imported.
    description: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The format of the disk image being imported.

    # Valid values: `VHD` | `VMDK` | `OVA`
    format: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The URL to the Amazon S3-based disk image being imported. It can either be
    # a https URL (https://..) or an Amazon S3 URL (s3://..).
    url: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The S3 bucket for the disk image.
    user_bucket: "UserBucket" = dataclasses.field(default_factory=dict, )


class SnapshotState(Enum):
    pending = "pending"
    completed = "completed"
    error = "error"


@dataclasses.dataclass
class SnapshotTaskDetail(ShapeBase):
    """
    Details about the import snapshot task.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "description",
                "Description",
                TypeInfo(str),
            ),
            (
                "disk_image_size",
                "DiskImageSize",
                TypeInfo(float),
            ),
            (
                "format",
                "Format",
                TypeInfo(str),
            ),
            (
                "progress",
                "Progress",
                TypeInfo(str),
            ),
            (
                "snapshot_id",
                "SnapshotId",
                TypeInfo(str),
            ),
            (
                "status",
                "Status",
                TypeInfo(str),
            ),
            (
                "status_message",
                "StatusMessage",
                TypeInfo(str),
            ),
            (
                "url",
                "Url",
                TypeInfo(str),
            ),
            (
                "user_bucket",
                "UserBucket",
                TypeInfo(UserBucketDetails),
            ),
        ]

    # The description of the snapshot.
    description: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The size of the disk in the snapshot, in GiB.
    disk_image_size: float = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The format of the disk image from which the snapshot is created.
    format: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The percentage of completion for the import snapshot task.
    progress: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The snapshot ID of the disk being imported.
    snapshot_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # A brief status for the import snapshot task.
    status: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # A detailed status message for the import snapshot task.
    status_message: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The URL of the disk image from which the snapshot is created.
    url: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The S3 bucket for the disk image.
    user_bucket: "UserBucketDetails" = dataclasses.field(default_factory=dict, )


class SpotAllocationStrategy(Enum):
    lowest_price = "lowest-price"
    diversified = "diversified"


@dataclasses.dataclass
class SpotDatafeedSubscription(ShapeBase):
    """
    Describes the data feed for a Spot Instance.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "bucket",
                "Bucket",
                TypeInfo(str),
            ),
            (
                "fault",
                "Fault",
                TypeInfo(SpotInstanceStateFault),
            ),
            (
                "owner_id",
                "OwnerId",
                TypeInfo(str),
            ),
            (
                "prefix",
                "Prefix",
                TypeInfo(str),
            ),
            (
                "state",
                "State",
                TypeInfo(DatafeedSubscriptionState),
            ),
        ]

    # The Amazon S3 bucket where the Spot Instance data feed is located.
    bucket: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The fault codes for the Spot Instance request, if any.
    fault: "SpotInstanceStateFault" = dataclasses.field(default_factory=dict, )

    # The AWS account ID of the account.
    owner_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The prefix that is prepended to data feed files.
    prefix: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The state of the Spot Instance data feed subscription.
    state: "DatafeedSubscriptionState" = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )


@dataclasses.dataclass
class SpotFleetLaunchSpecification(ShapeBase):
    """
    Describes the launch specification for one or more Spot Instances.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "security_groups",
                "SecurityGroups",
                TypeInfo(typing.List[GroupIdentifier]),
            ),
            (
                "addressing_type",
                "AddressingType",
                TypeInfo(str),
            ),
            (
                "block_device_mappings",
                "BlockDeviceMappings",
                TypeInfo(typing.List[BlockDeviceMapping]),
            ),
            (
                "ebs_optimized",
                "EbsOptimized",
                TypeInfo(bool),
            ),
            (
                "iam_instance_profile",
                "IamInstanceProfile",
                TypeInfo(IamInstanceProfileSpecification),
            ),
            (
                "image_id",
                "ImageId",
                TypeInfo(str),
            ),
            (
                "instance_type",
                "InstanceType",
                TypeInfo(InstanceType),
            ),
            (
                "kernel_id",
                "KernelId",
                TypeInfo(str),
            ),
            (
                "key_name",
                "KeyName",
                TypeInfo(str),
            ),
            (
                "monitoring",
                "Monitoring",
                TypeInfo(SpotFleetMonitoring),
            ),
            (
                "network_interfaces",
                "NetworkInterfaces",
                TypeInfo(typing.List[InstanceNetworkInterfaceSpecification]),
            ),
            (
                "placement",
                "Placement",
                TypeInfo(SpotPlacement),
            ),
            (
                "ramdisk_id",
                "RamdiskId",
                TypeInfo(str),
            ),
            (
                "spot_price",
                "SpotPrice",
                TypeInfo(str),
            ),
            (
                "subnet_id",
                "SubnetId",
                TypeInfo(str),
            ),
            (
                "user_data",
                "UserData",
                TypeInfo(str),
            ),
            (
                "weighted_capacity",
                "WeightedCapacity",
                TypeInfo(float),
            ),
            (
                "tag_specifications",
                "TagSpecifications",
                TypeInfo(typing.List[SpotFleetTagSpecification]),
            ),
        ]

    # One or more security groups. When requesting instances in a VPC, you must
    # specify the IDs of the security groups. When requesting instances in
    # EC2-Classic, you can specify the names or the IDs of the security groups.
    security_groups: typing.List["GroupIdentifier"] = dataclasses.field(
        default_factory=list,
    )

    # Deprecated.
    addressing_type: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # One or more block device mapping entries. You can't specify both a snapshot
    # ID and an encryption value. This is because only blank volumes can be
    # encrypted on creation. If a snapshot is the basis for a volume, it is not
    # blank and its encryption status is used for the volume encryption status.
    block_device_mappings: typing.List["BlockDeviceMapping"
                                      ] = dataclasses.field(
                                          default_factory=list,
                                      )

    # Indicates whether the instances are optimized for EBS I/O. This
    # optimization provides dedicated throughput to Amazon EBS and an optimized
    # configuration stack to provide optimal EBS I/O performance. This
    # optimization isn't available with all instance types. Additional usage
    # charges apply when using an EBS Optimized instance.

    # Default: `false`
    ebs_optimized: bool = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The IAM instance profile.
    iam_instance_profile: "IamInstanceProfileSpecification" = dataclasses.field(
        default_factory=dict,
    )

    # The ID of the AMI.
    image_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The instance type.
    instance_type: "InstanceType" = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # The ID of the kernel.
    kernel_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The name of the key pair.
    key_name: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # Enable or disable monitoring for the instances.
    monitoring: "SpotFleetMonitoring" = dataclasses.field(
        default_factory=dict,
    )

    # One or more network interfaces. If you specify a network interface, you
    # must specify subnet IDs and security group IDs using the network interface.
    network_interfaces: typing.List["InstanceNetworkInterfaceSpecification"
                                   ] = dataclasses.field(
                                       default_factory=list,
                                   )

    # The placement information.
    placement: "SpotPlacement" = dataclasses.field(default_factory=dict, )

    # The ID of the RAM disk.
    ramdisk_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The maximum price per unit hour that you are willing to pay for a Spot
    # Instance. If this value is not specified, the default is the Spot price
    # specified for the fleet. To determine the Spot price per unit hour, divide
    # the Spot price by the value of `WeightedCapacity`.
    spot_price: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The ID of the subnet in which to launch the instances. To specify multiple
    # subnets, separate them using commas; for example, "subnet-a61dafcf,
    # subnet-65ea5f08".
    subnet_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The Base64-encoded user data to make available to the instances.
    user_data: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The number of units provided by the specified instance type. These are the
    # same units that you chose to set the target capacity in terms (instances or
    # a performance characteristic such as vCPUs, memory, or I/O).

    # If the target capacity divided by this value is not a whole number, we
    # round the number of instances to the next whole number. If this value is
    # not specified, the default is 1.
    weighted_capacity: float = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The tags to apply during creation.
    tag_specifications: typing.List["SpotFleetTagSpecification"
                                   ] = dataclasses.field(
                                       default_factory=list,
                                   )


@dataclasses.dataclass
class SpotFleetMonitoring(ShapeBase):
    """
    Describes whether monitoring is enabled.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "enabled",
                "Enabled",
                TypeInfo(bool),
            ),
        ]

    # Enables monitoring for the instance.

    # Default: `false`
    enabled: bool = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class SpotFleetRequestConfig(ShapeBase):
    """
    Describes a Spot Fleet request.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "create_time",
                "CreateTime",
                TypeInfo(datetime.datetime),
            ),
            (
                "spot_fleet_request_config",
                "SpotFleetRequestConfig",
                TypeInfo(SpotFleetRequestConfigData),
            ),
            (
                "spot_fleet_request_id",
                "SpotFleetRequestId",
                TypeInfo(str),
            ),
            (
                "spot_fleet_request_state",
                "SpotFleetRequestState",
                TypeInfo(BatchState),
            ),
            (
                "activity_status",
                "ActivityStatus",
                TypeInfo(ActivityStatus),
            ),
        ]

    # The creation date and time of the request.
    create_time: datetime.datetime = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # The configuration of the Spot Fleet request.
    spot_fleet_request_config: "SpotFleetRequestConfigData" = dataclasses.field(
        default_factory=dict,
    )

    # The ID of the Spot Fleet request.
    spot_fleet_request_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The state of the Spot Fleet request.
    spot_fleet_request_state: "BatchState" = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # The progress of the Spot Fleet request. If there is an error, the status is
    # `error`. After all requests are placed, the status is
    # `pending_fulfillment`. If the size of the fleet is equal to or greater than
    # its target capacity, the status is `fulfilled`. If the size of the fleet is
    # decreased, the status is `pending_termination` while Spot Instances are
    # terminating.
    activity_status: "ActivityStatus" = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )


@dataclasses.dataclass
class SpotFleetRequestConfigData(ShapeBase):
    """
    Describes the configuration of a Spot Fleet request.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "iam_fleet_role",
                "IamFleetRole",
                TypeInfo(str),
            ),
            (
                "target_capacity",
                "TargetCapacity",
                TypeInfo(int),
            ),
            (
                "allocation_strategy",
                "AllocationStrategy",
                TypeInfo(AllocationStrategy),
            ),
            (
                "on_demand_allocation_strategy",
                "OnDemandAllocationStrategy",
                TypeInfo(OnDemandAllocationStrategy),
            ),
            (
                "client_token",
                "ClientToken",
                TypeInfo(str),
            ),
            (
                "excess_capacity_termination_policy",
                "ExcessCapacityTerminationPolicy",
                TypeInfo(ExcessCapacityTerminationPolicy),
            ),
            (
                "fulfilled_capacity",
                "FulfilledCapacity",
                TypeInfo(float),
            ),
            (
                "on_demand_fulfilled_capacity",
                "OnDemandFulfilledCapacity",
                TypeInfo(float),
            ),
            (
                "launch_specifications",
                "LaunchSpecifications",
                TypeInfo(typing.List[SpotFleetLaunchSpecification]),
            ),
            (
                "launch_template_configs",
                "LaunchTemplateConfigs",
                TypeInfo(typing.List[LaunchTemplateConfig]),
            ),
            (
                "spot_price",
                "SpotPrice",
                TypeInfo(str),
            ),
            (
                "on_demand_target_capacity",
                "OnDemandTargetCapacity",
                TypeInfo(int),
            ),
            (
                "terminate_instances_with_expiration",
                "TerminateInstancesWithExpiration",
                TypeInfo(bool),
            ),
            (
                "type",
                "Type",
                TypeInfo(FleetType),
            ),
            (
                "valid_from",
                "ValidFrom",
                TypeInfo(datetime.datetime),
            ),
            (
                "valid_until",
                "ValidUntil",
                TypeInfo(datetime.datetime),
            ),
            (
                "replace_unhealthy_instances",
                "ReplaceUnhealthyInstances",
                TypeInfo(bool),
            ),
            (
                "instance_interruption_behavior",
                "InstanceInterruptionBehavior",
                TypeInfo(InstanceInterruptionBehavior),
            ),
            (
                "load_balancers_config",
                "LoadBalancersConfig",
                TypeInfo(LoadBalancersConfig),
            ),
            (
                "instance_pools_to_use_count",
                "InstancePoolsToUseCount",
                TypeInfo(int),
            ),
        ]

    # Grants the Spot Fleet permission to terminate Spot Instances on your behalf
    # when you cancel its Spot Fleet request using CancelSpotFleetRequests or
    # when the Spot Fleet request expires, if you set
    # `terminateInstancesWithExpiration`.
    iam_fleet_role: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The number of units to request. You can choose to set the target capacity
    # in terms of instances or a performance characteristic that is important to
    # your application workload, such as vCPUs, memory, or I/O. If the request
    # type is `maintain`, you can specify a target capacity of 0 and add capacity
    # later.
    target_capacity: int = dataclasses.field(default=ShapeBase.NOT_SET, )

    # Indicates how to allocate the target capacity across the Spot pools
    # specified by the Spot Fleet request. The default is `lowestPrice`.
    allocation_strategy: "AllocationStrategy" = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # The order of the launch template overrides to use in fulfilling On-Demand
    # capacity. If you specify `lowestPrice`, Spot Fleet uses price to determine
    # the order, launching the lowest price first. If you specify `prioritized`,
    # Spot Fleet uses the priority that you assign to each Spot Fleet launch
    # template override, launching the highest priority first. If you do not
    # specify a value, Spot Fleet defaults to `lowestPrice`.
    on_demand_allocation_strategy: "OnDemandAllocationStrategy" = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # A unique, case-sensitive identifier that you provide to ensure the
    # idempotency of your listings. This helps to avoid duplicate listings. For
    # more information, see [Ensuring
    # Idempotency](http://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html).
    client_token: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # Indicates whether running Spot Instances should be terminated if the target
    # capacity of the Spot Fleet request is decreased below the current size of
    # the Spot Fleet.
    excess_capacity_termination_policy: "ExcessCapacityTerminationPolicy" = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # The number of units fulfilled by this request compared to the set target
    # capacity.
    fulfilled_capacity: float = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The number of On-Demand units fulfilled by this request compared to the set
    # target On-Demand capacity.
    on_demand_fulfilled_capacity: float = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # The launch specifications for the Spot Fleet request.
    launch_specifications: typing.List["SpotFleetLaunchSpecification"
                                      ] = dataclasses.field(
                                          default_factory=list,
                                      )

    # The launch template and overrides.
    launch_template_configs: typing.List["LaunchTemplateConfig"
                                        ] = dataclasses.field(
                                            default_factory=list,
                                        )

    # The maximum price per unit hour that you are willing to pay for a Spot
    # Instance. The default is the On-Demand price.
    spot_price: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The number of On-Demand units to request. You can choose to set the target
    # capacity in terms of instances or a performance characteristic that is
    # important to your application workload, such as vCPUs, memory, or I/O. If
    # the request type is `maintain`, you can specify a target capacity of 0 and
    # add capacity later.
    on_demand_target_capacity: int = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # Indicates whether running Spot Instances should be terminated when the Spot
    # Fleet request expires.
    terminate_instances_with_expiration: bool = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # The type of request. Indicates whether the Spot Fleet only requests the
    # target capacity or also attempts to maintain it. When this value is
    # `request`, the Spot Fleet only places the required requests. It does not
    # attempt to replenish Spot Instances if capacity is diminished, nor does it
    # submit requests in alternative Spot pools if capacity is not available. To
    # maintain a certain target capacity, the Spot Fleet places the required
    # requests to meet capacity and automatically replenishes any interrupted
    # instances. Default: `maintain`.
    type: "FleetType" = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The start date and time of the request, in UTC format (for example, _YYYY_
    # - _MM_ - _DD_ T _HH_ : _MM_ : _SS_ Z). The default is to start fulfilling
    # the request immediately.
    valid_from: datetime.datetime = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # The end date and time of the request, in UTC format (for example, _YYYY_ -
    # _MM_ - _DD_ T _HH_ : _MM_ : _SS_ Z). At this point, no new Spot Instance
    # requests are placed or able to fulfill the request. The default end date is
    # 7 days from the current date.
    valid_until: datetime.datetime = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # Indicates whether Spot Fleet should replace unhealthy instances.
    replace_unhealthy_instances: bool = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # The behavior when a Spot Instance is interrupted. The default is
    # `terminate`.
    instance_interruption_behavior: "InstanceInterruptionBehavior" = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # One or more Classic Load Balancers and target groups to attach to the Spot
    # Fleet request. Spot Fleet registers the running Spot Instances with the
    # specified Classic Load Balancers and target groups.

    # With Network Load Balancers, Spot Fleet cannot register instances that have
    # the following instance types: C1, CC1, CC2, CG1, CG2, CR1, CS1, G1, G2,
    # HI1, HS1, M1, M2, M3, and T1.
    load_balancers_config: "LoadBalancersConfig" = dataclasses.field(
        default_factory=dict,
    )

    # The number of Spot pools across which to allocate your target Spot
    # capacity. Valid only when Spot **AllocationStrategy** is set to `lowest-
    # price`. Spot Fleet selects the cheapest Spot pools and evenly allocates
    # your target Spot capacity across the number of Spot pools that you specify.
    instance_pools_to_use_count: int = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )


@dataclasses.dataclass
class SpotFleetTagSpecification(ShapeBase):
    """
    The tags for a Spot Fleet resource.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "resource_type",
                "ResourceType",
                TypeInfo(ResourceType),
            ),
            (
                "tags",
                "Tags",
                TypeInfo(typing.List[Tag]),
            ),
        ]

    # The type of resource. Currently, the only resource type that is supported
    # is `instance`.
    resource_type: "ResourceType" = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # The tags.
    tags: typing.List["Tag"] = dataclasses.field(default_factory=list, )


class SpotInstanceInterruptionBehavior(Enum):
    hibernate = "hibernate"
    stop = "stop"
    terminate = "terminate"


@dataclasses.dataclass
class SpotInstanceRequest(ShapeBase):
    """
    Describes a Spot Instance request.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "actual_block_hourly_price",
                "ActualBlockHourlyPrice",
                TypeInfo(str),
            ),
            (
                "availability_zone_group",
                "AvailabilityZoneGroup",
                TypeInfo(str),
            ),
            (
                "block_duration_minutes",
                "BlockDurationMinutes",
                TypeInfo(int),
            ),
            (
                "create_time",
                "CreateTime",
                TypeInfo(datetime.datetime),
            ),
            (
                "fault",
                "Fault",
                TypeInfo(SpotInstanceStateFault),
            ),
            (
                "instance_id",
                "InstanceId",
                TypeInfo(str),
            ),
            (
                "launch_group",
                "LaunchGroup",
                TypeInfo(str),
            ),
            (
                "launch_specification",
                "LaunchSpecification",
                TypeInfo(LaunchSpecification),
            ),
            (
                "launched_availability_zone",
                "LaunchedAvailabilityZone",
                TypeInfo(str),
            ),
            (
                "product_description",
                "ProductDescription",
                TypeInfo(RIProductDescription),
            ),
            (
                "spot_instance_request_id",
                "SpotInstanceRequestId",
                TypeInfo(str),
            ),
            (
                "spot_price",
                "SpotPrice",
                TypeInfo(str),
            ),
            (
                "state",
                "State",
                TypeInfo(SpotInstanceState),
            ),
            (
                "status",
                "Status",
                TypeInfo(SpotInstanceStatus),
            ),
            (
                "tags",
                "Tags",
                TypeInfo(typing.List[Tag]),
            ),
            (
                "type",
                "Type",
                TypeInfo(SpotInstanceType),
            ),
            (
                "valid_from",
                "ValidFrom",
                TypeInfo(datetime.datetime),
            ),
            (
                "valid_until",
                "ValidUntil",
                TypeInfo(datetime.datetime),
            ),
            (
                "instance_interruption_behavior",
                "InstanceInterruptionBehavior",
                TypeInfo(InstanceInterruptionBehavior),
            ),
        ]

    # If you specified a duration and your Spot Instance request was fulfilled,
    # this is the fixed hourly price in effect for the Spot Instance while it
    # runs.
    actual_block_hourly_price: str = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # The Availability Zone group. If you specify the same Availability Zone
    # group for all Spot Instance requests, all Spot Instances are launched in
    # the same Availability Zone.
    availability_zone_group: str = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # The duration for the Spot Instance, in minutes.
    block_duration_minutes: int = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The date and time when the Spot Instance request was created, in UTC format
    # (for example, _YYYY_ - _MM_ - _DD_ T _HH_ : _MM_ : _SS_ Z).
    create_time: datetime.datetime = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # The fault codes for the Spot Instance request, if any.
    fault: "SpotInstanceStateFault" = dataclasses.field(default_factory=dict, )

    # The instance ID, if an instance has been launched to fulfill the Spot
    # Instance request.
    instance_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The instance launch group. Launch groups are Spot Instances that launch
    # together and terminate together.
    launch_group: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # Additional information for launching instances.
    launch_specification: "LaunchSpecification" = dataclasses.field(
        default_factory=dict,
    )

    # The Availability Zone in which the request is launched.
    launched_availability_zone: str = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # The product description associated with the Spot Instance.
    product_description: "RIProductDescription" = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # The ID of the Spot Instance request.
    spot_instance_request_id: str = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # The maximum price per hour that you are willing to pay for a Spot Instance.
    spot_price: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The state of the Spot Instance request. Spot status information helps track
    # your Spot Instance requests. For more information, see [Spot
    # Status](http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/spot-bid-
    # status.html) in the _Amazon EC2 User Guide for Linux Instances_.
    state: "SpotInstanceState" = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The status code and status message describing the Spot Instance request.
    status: "SpotInstanceStatus" = dataclasses.field(default_factory=dict, )

    # Any tags assigned to the resource.
    tags: typing.List["Tag"] = dataclasses.field(default_factory=list, )

    # The Spot Instance request type.
    type: "SpotInstanceType" = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The start date of the request, in UTC format (for example, _YYYY_ - _MM_ -
    # _DD_ T _HH_ : _MM_ : _SS_ Z). The request becomes active at this date and
    # time.
    valid_from: datetime.datetime = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # The end date of the request, in UTC format (for example, _YYYY_ - _MM_ -
    # _DD_ T _HH_ : _MM_ : _SS_ Z). If this is a one-time request, it remains
    # active until all instances launch, the request is canceled, or this date is
    # reached. If the request is persistent, it remains active until it is
    # canceled or this date is reached. The default end date is 7 days from the
    # current date.
    valid_until: datetime.datetime = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # The behavior when a Spot Instance is interrupted.
    instance_interruption_behavior: "InstanceInterruptionBehavior" = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )


class SpotInstanceState(Enum):
    open = "open"
    active = "active"
    closed = "closed"
    cancelled = "cancelled"
    failed = "failed"


@dataclasses.dataclass
class SpotInstanceStateFault(ShapeBase):
    """
    Describes a Spot Instance state change.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "code",
                "Code",
                TypeInfo(str),
            ),
            (
                "message",
                "Message",
                TypeInfo(str),
            ),
        ]

    # The reason code for the Spot Instance state change.
    code: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The message for the Spot Instance state change.
    message: str = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class SpotInstanceStatus(ShapeBase):
    """
    Describes the status of a Spot Instance request.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "code",
                "Code",
                TypeInfo(str),
            ),
            (
                "message",
                "Message",
                TypeInfo(str),
            ),
            (
                "update_time",
                "UpdateTime",
                TypeInfo(datetime.datetime),
            ),
        ]

    # The status code. For a list of status codes, see [Spot Status
    # Codes](http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/spot-bid-
    # status.html#spot-instance-bid-status-understand) in the _Amazon EC2 User
    # Guide for Linux Instances_.
    code: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The description for the status code.
    message: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The date and time of the most recent status update, in UTC format (for
    # example, _YYYY_ - _MM_ - _DD_ T _HH_ : _MM_ : _SS_ Z).
    update_time: datetime.datetime = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )


class SpotInstanceType(Enum):
    one_time = "one-time"
    persistent = "persistent"


@dataclasses.dataclass
class SpotMarketOptions(ShapeBase):
    """
    The options for Spot Instances.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "max_price",
                "MaxPrice",
                TypeInfo(str),
            ),
            (
                "spot_instance_type",
                "SpotInstanceType",
                TypeInfo(SpotInstanceType),
            ),
            (
                "block_duration_minutes",
                "BlockDurationMinutes",
                TypeInfo(int),
            ),
            (
                "valid_until",
                "ValidUntil",
                TypeInfo(datetime.datetime),
            ),
            (
                "instance_interruption_behavior",
                "InstanceInterruptionBehavior",
                TypeInfo(InstanceInterruptionBehavior),
            ),
        ]

    # The maximum hourly price you're willing to pay for the Spot Instances. The
    # default is the On-Demand price.
    max_price: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The Spot Instance request type. For RunInstances, persistent Spot Instance
    # requests are only supported when **InstanceInterruptionBehavior** is set to
    # either `hibernate` or `stop`.
    spot_instance_type: "SpotInstanceType" = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # The required duration for the Spot Instances (also known as Spot blocks),
    # in minutes. This value must be a multiple of 60 (60, 120, 180, 240, 300, or
    # 360).
    block_duration_minutes: int = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The end date of the request. For a one-time request, the request remains
    # active until all instances launch, the request is canceled, or this date is
    # reached. If the request is persistent, it remains active until it is
    # canceled or this date and time is reached. The default end date is 7 days
    # from the current date.
    valid_until: datetime.datetime = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # The behavior when a Spot Instance is interrupted. The default is
    # `terminate`.
    instance_interruption_behavior: "InstanceInterruptionBehavior" = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )


@dataclasses.dataclass
class SpotOptions(ShapeBase):
    """
    Describes the configuration of Spot Instances in an EC2 Fleet.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "allocation_strategy",
                "AllocationStrategy",
                TypeInfo(SpotAllocationStrategy),
            ),
            (
                "instance_interruption_behavior",
                "InstanceInterruptionBehavior",
                TypeInfo(SpotInstanceInterruptionBehavior),
            ),
            (
                "instance_pools_to_use_count",
                "InstancePoolsToUseCount",
                TypeInfo(int),
            ),
        ]

    # Indicates how to allocate the target capacity across the Spot pools
    # specified by the Spot Fleet request. The default is `lowest-price`.
    allocation_strategy: "SpotAllocationStrategy" = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # The behavior when a Spot Instance is interrupted. The default is
    # `terminate`.
    instance_interruption_behavior: "SpotInstanceInterruptionBehavior" = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # The number of Spot pools across which to allocate your target Spot
    # capacity. Valid only when **AllocationStrategy** is set to `lowestPrice`.
    # EC2 Fleet selects the cheapest Spot pools and evenly allocates your target
    # Spot capacity across the number of Spot pools that you specify.
    instance_pools_to_use_count: int = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )


@dataclasses.dataclass
class SpotOptionsRequest(ShapeBase):
    """
    Describes the configuration of Spot Instances in an EC2 Fleet request.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "allocation_strategy",
                "AllocationStrategy",
                TypeInfo(SpotAllocationStrategy),
            ),
            (
                "instance_interruption_behavior",
                "InstanceInterruptionBehavior",
                TypeInfo(SpotInstanceInterruptionBehavior),
            ),
            (
                "instance_pools_to_use_count",
                "InstancePoolsToUseCount",
                TypeInfo(int),
            ),
        ]

    # Indicates how to allocate the target capacity across the Spot pools
    # specified by the Spot Fleet request. The default is `lowestPrice`.
    allocation_strategy: "SpotAllocationStrategy" = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # The behavior when a Spot Instance is interrupted. The default is
    # `terminate`.
    instance_interruption_behavior: "SpotInstanceInterruptionBehavior" = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # The number of Spot pools across which to allocate your target Spot
    # capacity. Valid only when Spot **AllocationStrategy** is set to `lowest-
    # price`. EC2 Fleet selects the cheapest Spot pools and evenly allocates your
    # target Spot capacity across the number of Spot pools that you specify.
    instance_pools_to_use_count: int = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )


@dataclasses.dataclass
class SpotPlacement(ShapeBase):
    """
    Describes Spot Instance placement.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "availability_zone",
                "AvailabilityZone",
                TypeInfo(str),
            ),
            (
                "group_name",
                "GroupName",
                TypeInfo(str),
            ),
            (
                "tenancy",
                "Tenancy",
                TypeInfo(Tenancy),
            ),
        ]

    # The Availability Zone.

    # [Spot Fleet only] To specify multiple Availability Zones, separate them
    # using commas; for example, "us-west-2a, us-west-2b".
    availability_zone: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The name of the placement group.
    group_name: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The tenancy of the instance (if the instance is running in a VPC). An
    # instance with a tenancy of `dedicated` runs on single-tenant hardware. The
    # `host` tenancy is not supported for Spot Instances.
    tenancy: "Tenancy" = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class SpotPrice(ShapeBase):
    """
    Describes the maximum price per hour that you are willing to pay for a Spot
    Instance.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "availability_zone",
                "AvailabilityZone",
                TypeInfo(str),
            ),
            (
                "instance_type",
                "InstanceType",
                TypeInfo(InstanceType),
            ),
            (
                "product_description",
                "ProductDescription",
                TypeInfo(RIProductDescription),
            ),
            (
                "spot_price",
                "SpotPrice",
                TypeInfo(str),
            ),
            (
                "timestamp",
                "Timestamp",
                TypeInfo(datetime.datetime),
            ),
        ]

    # The Availability Zone.
    availability_zone: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The instance type.
    instance_type: "InstanceType" = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # A general description of the AMI.
    product_description: "RIProductDescription" = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # The maximum price per hour that you are willing to pay for a Spot Instance.
    spot_price: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The date and time the request was created, in UTC format (for example,
    # _YYYY_ - _MM_ - _DD_ T _HH_ : _MM_ : _SS_ Z).
    timestamp: datetime.datetime = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )


@dataclasses.dataclass
class StaleIpPermission(ShapeBase):
    """
    Describes a stale rule in a security group.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "from_port",
                "FromPort",
                TypeInfo(int),
            ),
            (
                "ip_protocol",
                "IpProtocol",
                TypeInfo(str),
            ),
            (
                "ip_ranges",
                "IpRanges",
                TypeInfo(typing.List[str]),
            ),
            (
                "prefix_list_ids",
                "PrefixListIds",
                TypeInfo(typing.List[str]),
            ),
            (
                "to_port",
                "ToPort",
                TypeInfo(int),
            ),
            (
                "user_id_group_pairs",
                "UserIdGroupPairs",
                TypeInfo(typing.List[UserIdGroupPair]),
            ),
        ]

    # The start of the port range for the TCP and UDP protocols, or an ICMP type
    # number. A value of `-1` indicates all ICMP types.
    from_port: int = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The IP protocol name (for `tcp`, `udp`, and `icmp`) or number (see
    # [Protocol Numbers)](http://www.iana.org/assignments/protocol-
    # numbers/protocol-numbers.xhtml).
    ip_protocol: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # One or more IP ranges. Not applicable for stale security group rules.
    ip_ranges: typing.List[str] = dataclasses.field(default_factory=list, )

    # One or more prefix list IDs for an AWS service. Not applicable for stale
    # security group rules.
    prefix_list_ids: typing.List[str] = dataclasses.field(
        default_factory=list,
    )

    # The end of the port range for the TCP and UDP protocols, or an ICMP type
    # number. A value of `-1` indicates all ICMP types.
    to_port: int = dataclasses.field(default=ShapeBase.NOT_SET, )

    # One or more security group pairs. Returns the ID of the referenced security
    # group and VPC, and the ID and status of the VPC peering connection.
    user_id_group_pairs: typing.List["UserIdGroupPair"] = dataclasses.field(
        default_factory=list,
    )


@dataclasses.dataclass
class StaleSecurityGroup(ShapeBase):
    """
    Describes a stale security group (a security group that contains stale rules).
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "group_id",
                "GroupId",
                TypeInfo(str),
            ),
            (
                "description",
                "Description",
                TypeInfo(str),
            ),
            (
                "group_name",
                "GroupName",
                TypeInfo(str),
            ),
            (
                "stale_ip_permissions",
                "StaleIpPermissions",
                TypeInfo(typing.List[StaleIpPermission]),
            ),
            (
                "stale_ip_permissions_egress",
                "StaleIpPermissionsEgress",
                TypeInfo(typing.List[StaleIpPermission]),
            ),
            (
                "vpc_id",
                "VpcId",
                TypeInfo(str),
            ),
        ]

    # The ID of the security group.
    group_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The description of the security group.
    description: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The name of the security group.
    group_name: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # Information about the stale inbound rules in the security group.
    stale_ip_permissions: typing.List["StaleIpPermission"] = dataclasses.field(
        default_factory=list,
    )

    # Information about the stale outbound rules in the security group.
    stale_ip_permissions_egress: typing.List["StaleIpPermission"
                                            ] = dataclasses.field(
                                                default_factory=list,
                                            )

    # The ID of the VPC for the security group.
    vpc_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class StartInstancesRequest(ShapeBase):
    """
    Contains the parameters for StartInstances.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "instance_ids",
                "InstanceIds",
                TypeInfo(typing.List[str]),
            ),
            (
                "additional_info",
                "AdditionalInfo",
                TypeInfo(str),
            ),
            (
                "dry_run",
                "DryRun",
                TypeInfo(bool),
            ),
        ]

    # One or more instance IDs.
    instance_ids: typing.List[str] = dataclasses.field(default_factory=list, )

    # Reserved.
    additional_info: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # Checks whether you have the required permissions for the action, without
    # actually making the request, and provides an error response. If you have
    # the required permissions, the error response is `DryRunOperation`.
    # Otherwise, it is `UnauthorizedOperation`.
    dry_run: bool = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class StartInstancesResult(OutputShapeBase):
    """
    Contains the output of StartInstances.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "response_metadata",
                "ResponseMetadata",
                TypeInfo(typing.Dict[str, str]),
            ),
            (
                "starting_instances",
                "StartingInstances",
                TypeInfo(typing.List[InstanceStateChange]),
            ),
        ]

    response_metadata: typing.Dict[str, str] = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # Information about one or more started instances.
    starting_instances: typing.List["InstanceStateChange"] = dataclasses.field(
        default_factory=list,
    )


class State(Enum):
    PendingAcceptance = "PendingAcceptance"
    Pending = "Pending"
    Available = "Available"
    Deleting = "Deleting"
    Deleted = "Deleted"
    Rejected = "Rejected"
    Failed = "Failed"
    Expired = "Expired"


@dataclasses.dataclass
class StateReason(ShapeBase):
    """
    Describes a state change.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "code",
                "Code",
                TypeInfo(str),
            ),
            (
                "message",
                "Message",
                TypeInfo(str),
            ),
        ]

    # The reason code for the state change.
    code: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The message for the state change.

    #   * `Server.InsufficientInstanceCapacity`: There was insufficient capacity available to satisfy the launch request.

    #   * `Server.InternalError`: An internal error caused the instance to terminate during launch.

    #   * `Server.ScheduledStop`: The instance was stopped due to a scheduled retirement.

    #   * `Server.SpotInstanceShutdown`: The instance was stopped because the number of Spot requests with a maximum price equal to or higher than the Spot price exceeded available capacity or because of an increase in the Spot price.

    #   * `Server.SpotInstanceTermination`: The instance was terminated because the number of Spot requests with a maximum price equal to or higher than the Spot price exceeded available capacity or because of an increase in the Spot price.

    #   * `Client.InstanceInitiatedShutdown`: The instance was shut down using the `shutdown -h` command from the instance.

    #   * `Client.InstanceTerminated`: The instance was terminated or rebooted during AMI creation.

    #   * `Client.InternalError`: A client error caused the instance to terminate during launch.

    #   * `Client.InvalidSnapshot.NotFound`: The specified snapshot was not found.

    #   * `Client.UserInitiatedShutdown`: The instance was shut down using the Amazon EC2 API.

    #   * `Client.VolumeLimitExceeded`: The limit on the number of EBS volumes or total storage was exceeded. Decrease usage or request an increase in your account limits.
    message: str = dataclasses.field(default=ShapeBase.NOT_SET, )


class Status(Enum):
    MoveInProgress = "MoveInProgress"
    InVpc = "InVpc"
    InClassic = "InClassic"


class StatusName(Enum):
    reachability = "reachability"


class StatusType(Enum):
    passed = "passed"
    failed = "failed"
    insufficient_data = "insufficient-data"
    initializing = "initializing"


@dataclasses.dataclass
class StopInstancesRequest(ShapeBase):
    """
    Contains the parameters for StopInstances.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "instance_ids",
                "InstanceIds",
                TypeInfo(typing.List[str]),
            ),
            (
                "dry_run",
                "DryRun",
                TypeInfo(bool),
            ),
            (
                "force",
                "Force",
                TypeInfo(bool),
            ),
        ]

    # One or more instance IDs.
    instance_ids: typing.List[str] = dataclasses.field(default_factory=list, )

    # Checks whether you have the required permissions for the action, without
    # actually making the request, and provides an error response. If you have
    # the required permissions, the error response is `DryRunOperation`.
    # Otherwise, it is `UnauthorizedOperation`.
    dry_run: bool = dataclasses.field(default=ShapeBase.NOT_SET, )

    # Forces the instances to stop. The instances do not have an opportunity to
    # flush file system caches or file system metadata. If you use this option,
    # you must perform file system check and repair procedures. This option is
    # not recommended for Windows instances.

    # Default: `false`
    force: bool = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class StopInstancesResult(OutputShapeBase):
    """
    Contains the output of StopInstances.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "response_metadata",
                "ResponseMetadata",
                TypeInfo(typing.Dict[str, str]),
            ),
            (
                "stopping_instances",
                "StoppingInstances",
                TypeInfo(typing.List[InstanceStateChange]),
            ),
        ]

    response_metadata: typing.Dict[str, str] = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # Information about one or more stopped instances.
    stopping_instances: typing.List["InstanceStateChange"] = dataclasses.field(
        default_factory=list,
    )


@dataclasses.dataclass
class Storage(ShapeBase):
    """
    Describes the storage location for an instance store-backed AMI.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "s3",
                "S3",
                TypeInfo(S3Storage),
            ),
        ]

    # An Amazon S3 storage location.
    s3: "S3Storage" = dataclasses.field(default_factory=dict, )


@dataclasses.dataclass
class StorageLocation(ShapeBase):
    """
    Describes a storage location in Amazon S3.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "bucket",
                "Bucket",
                TypeInfo(str),
            ),
            (
                "key",
                "Key",
                TypeInfo(str),
            ),
        ]

    # The name of the S3 bucket.
    bucket: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The key.
    key: str = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class Subnet(ShapeBase):
    """
    Describes a subnet.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "availability_zone",
                "AvailabilityZone",
                TypeInfo(str),
            ),
            (
                "available_ip_address_count",
                "AvailableIpAddressCount",
                TypeInfo(int),
            ),
            (
                "cidr_block",
                "CidrBlock",
                TypeInfo(str),
            ),
            (
                "default_for_az",
                "DefaultForAz",
                TypeInfo(bool),
            ),
            (
                "map_public_ip_on_launch",
                "MapPublicIpOnLaunch",
                TypeInfo(bool),
            ),
            (
                "state",
                "State",
                TypeInfo(SubnetState),
            ),
            (
                "subnet_id",
                "SubnetId",
                TypeInfo(str),
            ),
            (
                "vpc_id",
                "VpcId",
                TypeInfo(str),
            ),
            (
                "assign_ipv6_address_on_creation",
                "AssignIpv6AddressOnCreation",
                TypeInfo(bool),
            ),
            (
                "ipv6_cidr_block_association_set",
                "Ipv6CidrBlockAssociationSet",
                TypeInfo(typing.List[SubnetIpv6CidrBlockAssociation]),
            ),
            (
                "tags",
                "Tags",
                TypeInfo(typing.List[Tag]),
            ),
        ]

    # The Availability Zone of the subnet.
    availability_zone: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The number of unused private IPv4 addresses in the subnet. The IPv4
    # addresses for any stopped instances are considered unavailable.
    available_ip_address_count: int = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # The IPv4 CIDR block assigned to the subnet.
    cidr_block: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # Indicates whether this is the default subnet for the Availability Zone.
    default_for_az: bool = dataclasses.field(default=ShapeBase.NOT_SET, )

    # Indicates whether instances launched in this subnet receive a public IPv4
    # address.
    map_public_ip_on_launch: bool = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # The current state of the subnet.
    state: "SubnetState" = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The ID of the subnet.
    subnet_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The ID of the VPC the subnet is in.
    vpc_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # Indicates whether a network interface created in this subnet (including a
    # network interface created by RunInstances) receives an IPv6 address.
    assign_ipv6_address_on_creation: bool = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # Information about the IPv6 CIDR blocks associated with the subnet.
    ipv6_cidr_block_association_set: typing.List[
        "SubnetIpv6CidrBlockAssociation"
    ] = dataclasses.field(
        default_factory=list,
    )

    # Any tags assigned to the subnet.
    tags: typing.List["Tag"] = dataclasses.field(default_factory=list, )


@dataclasses.dataclass
class SubnetCidrBlockState(ShapeBase):
    """
    Describes the state of a CIDR block.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "state",
                "State",
                TypeInfo(SubnetCidrBlockStateCode),
            ),
            (
                "status_message",
                "StatusMessage",
                TypeInfo(str),
            ),
        ]

    # The state of a CIDR block.
    state: "SubnetCidrBlockStateCode" = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # A message about the status of the CIDR block, if applicable.
    status_message: str = dataclasses.field(default=ShapeBase.NOT_SET, )


class SubnetCidrBlockStateCode(Enum):
    associating = "associating"
    associated = "associated"
    disassociating = "disassociating"
    disassociated = "disassociated"
    failing = "failing"
    failed = "failed"


@dataclasses.dataclass
class SubnetIpv6CidrBlockAssociation(ShapeBase):
    """
    Describes an IPv6 CIDR block associated with a subnet.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "association_id",
                "AssociationId",
                TypeInfo(str),
            ),
            (
                "ipv6_cidr_block",
                "Ipv6CidrBlock",
                TypeInfo(str),
            ),
            (
                "ipv6_cidr_block_state",
                "Ipv6CidrBlockState",
                TypeInfo(SubnetCidrBlockState),
            ),
        ]

    # The association ID for the CIDR block.
    association_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The IPv6 CIDR block.
    ipv6_cidr_block: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # Information about the state of the CIDR block.
    ipv6_cidr_block_state: "SubnetCidrBlockState" = dataclasses.field(
        default_factory=dict,
    )


class SubnetState(Enum):
    pending = "pending"
    available = "available"


@dataclasses.dataclass
class SuccessfulInstanceCreditSpecificationItem(ShapeBase):
    """
    Describes the T2 instance whose credit option for CPU usage was successfully
    modified.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "instance_id",
                "InstanceId",
                TypeInfo(str),
            ),
        ]

    # The ID of the instance.
    instance_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )


class SummaryStatus(Enum):
    ok = "ok"
    impaired = "impaired"
    insufficient_data = "insufficient-data"
    not_applicable = "not-applicable"
    initializing = "initializing"


@dataclasses.dataclass
class Tag(ShapeBase):
    """
    Describes a tag.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "key",
                "Key",
                TypeInfo(str),
            ),
            (
                "value",
                "Value",
                TypeInfo(str),
            ),
        ]

    # The key of the tag.

    # Constraints: Tag keys are case-sensitive and accept a maximum of 127
    # Unicode characters. May not begin with `aws:`
    key: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The value of the tag.

    # Constraints: Tag values are case-sensitive and accept a maximum of 255
    # Unicode characters.
    value: str = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class TagDescription(ShapeBase):
    """
    Describes a tag.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "key",
                "Key",
                TypeInfo(str),
            ),
            (
                "resource_id",
                "ResourceId",
                TypeInfo(str),
            ),
            (
                "resource_type",
                "ResourceType",
                TypeInfo(ResourceType),
            ),
            (
                "value",
                "Value",
                TypeInfo(str),
            ),
        ]

    # The tag key.
    key: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The ID of the resource. For example, `ami-1a2b3c4d`.
    resource_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The resource type.
    resource_type: "ResourceType" = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # The tag value.
    value: str = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class TagSpecification(ShapeBase):
    """
    The tags to apply to a resource when the resource is being created.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "resource_type",
                "ResourceType",
                TypeInfo(ResourceType),
            ),
            (
                "tags",
                "Tags",
                TypeInfo(typing.List[Tag]),
            ),
        ]

    # The type of resource to tag. Currently, the resource types that support
    # tagging on creation are `fleet`, `instance`, `snapshot`, and `volume`. To
    # tag a resource after it has been created, see CreateTags.
    resource_type: "ResourceType" = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # The tags to apply to the resource.
    tags: typing.List["Tag"] = dataclasses.field(default_factory=list, )


@dataclasses.dataclass
class TargetCapacitySpecification(ShapeBase):
    """
    The number of units to request. You can choose to set the target capacity in
    terms of instances or a performance characteristic that is important to your
    application workload, such as vCPUs, memory, or I/O. If the request type is
    `maintain`, you can specify a target capacity of 0 and add capacity later.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "total_target_capacity",
                "TotalTargetCapacity",
                TypeInfo(int),
            ),
            (
                "on_demand_target_capacity",
                "OnDemandTargetCapacity",
                TypeInfo(int),
            ),
            (
                "spot_target_capacity",
                "SpotTargetCapacity",
                TypeInfo(int),
            ),
            (
                "default_target_capacity_type",
                "DefaultTargetCapacityType",
                TypeInfo(DefaultTargetCapacityType),
            ),
        ]

    # The number of units to request, filled using `DefaultTargetCapacityType`.
    total_target_capacity: int = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The number of On-Demand units to request.
    on_demand_target_capacity: int = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # The maximum number of Spot units to launch.
    spot_target_capacity: int = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The default `TotalTargetCapacity`, which is either `Spot` or `On-Demand`.
    default_target_capacity_type: "DefaultTargetCapacityType" = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )


@dataclasses.dataclass
class TargetCapacitySpecificationRequest(ShapeBase):
    """
    The number of units to request. You can choose to set the target capacity in
    terms of instances or a performance characteristic that is important to your
    application workload, such as vCPUs, memory, or I/O. If the request type is
    `maintain`, you can specify a target capacity of 0 and add capacity later.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "total_target_capacity",
                "TotalTargetCapacity",
                TypeInfo(int),
            ),
            (
                "on_demand_target_capacity",
                "OnDemandTargetCapacity",
                TypeInfo(int),
            ),
            (
                "spot_target_capacity",
                "SpotTargetCapacity",
                TypeInfo(int),
            ),
            (
                "default_target_capacity_type",
                "DefaultTargetCapacityType",
                TypeInfo(DefaultTargetCapacityType),
            ),
        ]

    # The number of units to request, filled using `DefaultTargetCapacityType`.
    total_target_capacity: int = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The number of On-Demand units to request.
    on_demand_target_capacity: int = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # The number of Spot units to request.
    spot_target_capacity: int = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The default `TotalTargetCapacity`, which is either `Spot` or `On-Demand`.
    default_target_capacity_type: "DefaultTargetCapacityType" = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )


@dataclasses.dataclass
class TargetConfiguration(ShapeBase):
    """
    Information about the Convertible Reserved Instance offering.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "instance_count",
                "InstanceCount",
                TypeInfo(int),
            ),
            (
                "offering_id",
                "OfferingId",
                TypeInfo(str),
            ),
        ]

    # The number of instances the Convertible Reserved Instance offering can be
    # applied to. This parameter is reserved and cannot be specified in a request
    instance_count: int = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The ID of the Convertible Reserved Instance offering.
    offering_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class TargetConfigurationRequest(ShapeBase):
    """
    Details about the target configuration.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "offering_id",
                "OfferingId",
                TypeInfo(str),
            ),
            (
                "instance_count",
                "InstanceCount",
                TypeInfo(int),
            ),
        ]

    # The Convertible Reserved Instance offering ID.
    offering_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The number of instances the Covertible Reserved Instance offering can be
    # applied to. This parameter is reserved and cannot be specified in a request
    instance_count: int = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class TargetGroup(ShapeBase):
    """
    Describes a load balancer target group.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "arn",
                "Arn",
                TypeInfo(str),
            ),
        ]

    # The Amazon Resource Name (ARN) of the target group.
    arn: str = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class TargetGroupsConfig(ShapeBase):
    """
    Describes the target groups to attach to a Spot Fleet. Spot Fleet registers the
    running Spot Instances with these target groups.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "target_groups",
                "TargetGroups",
                TypeInfo(typing.List[TargetGroup]),
            ),
        ]

    # One or more target groups.
    target_groups: typing.List["TargetGroup"] = dataclasses.field(
        default_factory=list,
    )


@dataclasses.dataclass
class TargetReservationValue(ShapeBase):
    """
    The total value of the new Convertible Reserved Instances.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "reservation_value",
                "ReservationValue",
                TypeInfo(ReservationValue),
            ),
            (
                "target_configuration",
                "TargetConfiguration",
                TypeInfo(TargetConfiguration),
            ),
        ]

    # The total value of the Convertible Reserved Instances that make up the
    # exchange. This is the sum of the list value, remaining upfront price, and
    # additional upfront cost of the exchange.
    reservation_value: "ReservationValue" = dataclasses.field(
        default_factory=dict,
    )

    # The configuration of the Convertible Reserved Instances that make up the
    # exchange.
    target_configuration: "TargetConfiguration" = dataclasses.field(
        default_factory=dict,
    )


class TelemetryStatus(Enum):
    UP = "UP"
    DOWN = "DOWN"


class Tenancy(Enum):
    default = "default"
    dedicated = "dedicated"
    host = "host"


@dataclasses.dataclass
class TerminateInstancesRequest(ShapeBase):
    """
    Contains the parameters for TerminateInstances.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "instance_ids",
                "InstanceIds",
                TypeInfo(typing.List[str]),
            ),
            (
                "dry_run",
                "DryRun",
                TypeInfo(bool),
            ),
        ]

    # One or more instance IDs.

    # Constraints: Up to 1000 instance IDs. We recommend breaking up this request
    # into smaller batches.
    instance_ids: typing.List[str] = dataclasses.field(default_factory=list, )

    # Checks whether you have the required permissions for the action, without
    # actually making the request, and provides an error response. If you have
    # the required permissions, the error response is `DryRunOperation`.
    # Otherwise, it is `UnauthorizedOperation`.
    dry_run: bool = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class TerminateInstancesResult(OutputShapeBase):
    """
    Contains the output of TerminateInstances.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "response_metadata",
                "ResponseMetadata",
                TypeInfo(typing.Dict[str, str]),
            ),
            (
                "terminating_instances",
                "TerminatingInstances",
                TypeInfo(typing.List[InstanceStateChange]),
            ),
        ]

    response_metadata: typing.Dict[str, str] = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # Information about one or more terminated instances.
    terminating_instances: typing.List["InstanceStateChange"
                                      ] = dataclasses.field(
                                          default_factory=list,
                                      )


class TrafficType(Enum):
    ACCEPT = "ACCEPT"
    REJECT = "REJECT"
    ALL = "ALL"


@dataclasses.dataclass
class UnassignIpv6AddressesRequest(ShapeBase):
    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "ipv6_addresses",
                "Ipv6Addresses",
                TypeInfo(typing.List[str]),
            ),
            (
                "network_interface_id",
                "NetworkInterfaceId",
                TypeInfo(str),
            ),
        ]

    # The IPv6 addresses to unassign from the network interface.
    ipv6_addresses: typing.List[str] = dataclasses.field(default_factory=list, )

    # The ID of the network interface.
    network_interface_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class UnassignIpv6AddressesResult(OutputShapeBase):
    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "response_metadata",
                "ResponseMetadata",
                TypeInfo(typing.Dict[str, str]),
            ),
            (
                "network_interface_id",
                "NetworkInterfaceId",
                TypeInfo(str),
            ),
            (
                "unassigned_ipv6_addresses",
                "UnassignedIpv6Addresses",
                TypeInfo(typing.List[str]),
            ),
        ]

    response_metadata: typing.Dict[str, str] = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # The ID of the network interface.
    network_interface_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The IPv6 addresses that have been unassigned from the network interface.
    unassigned_ipv6_addresses: typing.List[str] = dataclasses.field(
        default_factory=list,
    )


@dataclasses.dataclass
class UnassignPrivateIpAddressesRequest(ShapeBase):
    """
    Contains the parameters for UnassignPrivateIpAddresses.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "network_interface_id",
                "NetworkInterfaceId",
                TypeInfo(str),
            ),
            (
                "private_ip_addresses",
                "PrivateIpAddresses",
                TypeInfo(typing.List[str]),
            ),
        ]

    # The ID of the network interface.
    network_interface_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The secondary private IP addresses to unassign from the network interface.
    # You can specify this option multiple times to unassign more than one IP
    # address.
    private_ip_addresses: typing.List[str] = dataclasses.field(
        default_factory=list,
    )


@dataclasses.dataclass
class UnmonitorInstancesRequest(ShapeBase):
    """
    Contains the parameters for UnmonitorInstances.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "instance_ids",
                "InstanceIds",
                TypeInfo(typing.List[str]),
            ),
            (
                "dry_run",
                "DryRun",
                TypeInfo(bool),
            ),
        ]

    # One or more instance IDs.
    instance_ids: typing.List[str] = dataclasses.field(default_factory=list, )

    # Checks whether you have the required permissions for the action, without
    # actually making the request, and provides an error response. If you have
    # the required permissions, the error response is `DryRunOperation`.
    # Otherwise, it is `UnauthorizedOperation`.
    dry_run: bool = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class UnmonitorInstancesResult(OutputShapeBase):
    """
    Contains the output of UnmonitorInstances.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "response_metadata",
                "ResponseMetadata",
                TypeInfo(typing.Dict[str, str]),
            ),
            (
                "instance_monitorings",
                "InstanceMonitorings",
                TypeInfo(typing.List[InstanceMonitoring]),
            ),
        ]

    response_metadata: typing.Dict[str, str] = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # The monitoring information.
    instance_monitorings: typing.List["InstanceMonitoring"] = dataclasses.field(
        default_factory=list,
    )


class UnsuccessfulInstanceCreditSpecificationErrorCode(Enum):
    InvalidInstanceID_Malformed = "InvalidInstanceID.Malformed"
    InvalidInstanceID_NotFound = "InvalidInstanceID.NotFound"
    IncorrectInstanceState = "IncorrectInstanceState"
    InstanceCreditSpecification_NotSupported = "InstanceCreditSpecification.NotSupported"


@dataclasses.dataclass
class UnsuccessfulInstanceCreditSpecificationItem(ShapeBase):
    """
    Describes the T2 instance whose credit option for CPU usage was not modified.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "instance_id",
                "InstanceId",
                TypeInfo(str),
            ),
            (
                "error",
                "Error",
                TypeInfo(UnsuccessfulInstanceCreditSpecificationItemError),
            ),
        ]

    # The ID of the instance.
    instance_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The applicable error for the T2 instance whose credit option for CPU usage
    # was not modified.
    error: "UnsuccessfulInstanceCreditSpecificationItemError" = dataclasses.field(
        default_factory=dict,
    )


@dataclasses.dataclass
class UnsuccessfulInstanceCreditSpecificationItemError(ShapeBase):
    """
    Information about the error for the T2 instance whose credit option for CPU
    usage was not modified.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "code",
                "Code",
                TypeInfo(UnsuccessfulInstanceCreditSpecificationErrorCode),
            ),
            (
                "message",
                "Message",
                TypeInfo(str),
            ),
        ]

    # The error code.
    code: "UnsuccessfulInstanceCreditSpecificationErrorCode" = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # The applicable error message.
    message: str = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class UnsuccessfulItem(ShapeBase):
    """
    Information about items that were not successfully processed in a batch call.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "error",
                "Error",
                TypeInfo(UnsuccessfulItemError),
            ),
            (
                "resource_id",
                "ResourceId",
                TypeInfo(str),
            ),
        ]

    # Information about the error.
    error: "UnsuccessfulItemError" = dataclasses.field(default_factory=dict, )

    # The ID of the resource.
    resource_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class UnsuccessfulItemError(ShapeBase):
    """
    Information about the error that occurred. For more information about errors,
    see [Error Codes](http://docs.aws.amazon.com/AWSEC2/latest/APIReference/errors-
    overview.html).
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "code",
                "Code",
                TypeInfo(str),
            ),
            (
                "message",
                "Message",
                TypeInfo(str),
            ),
        ]

    # The error code.
    code: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The error message accompanying the error code.
    message: str = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class UpdateSecurityGroupRuleDescriptionsEgressRequest(ShapeBase):
    """
    Contains the parameters for UpdateSecurityGroupRuleDescriptionsEgress.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "ip_permissions",
                "IpPermissions",
                TypeInfo(typing.List[IpPermission]),
            ),
            (
                "dry_run",
                "DryRun",
                TypeInfo(bool),
            ),
            (
                "group_id",
                "GroupId",
                TypeInfo(str),
            ),
            (
                "group_name",
                "GroupName",
                TypeInfo(str),
            ),
        ]

    # The IP permissions for the security group rule.
    ip_permissions: typing.List["IpPermission"] = dataclasses.field(
        default_factory=list,
    )

    # Checks whether you have the required permissions for the action, without
    # actually making the request, and provides an error response. If you have
    # the required permissions, the error response is `DryRunOperation`.
    # Otherwise, it is `UnauthorizedOperation`.
    dry_run: bool = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The ID of the security group. You must specify either the security group ID
    # or the security group name in the request. For security groups in a
    # nondefault VPC, you must specify the security group ID.
    group_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # [Default VPC] The name of the security group. You must specify either the
    # security group ID or the security group name in the request.
    group_name: str = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class UpdateSecurityGroupRuleDescriptionsEgressResult(OutputShapeBase):
    """
    Contains the output of UpdateSecurityGroupRuleDescriptionsEgress.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "response_metadata",
                "ResponseMetadata",
                TypeInfo(typing.Dict[str, str]),
            ),
            (
                "return_",
                "Return",
                TypeInfo(bool),
            ),
        ]

    response_metadata: typing.Dict[str, str] = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # Returns `true` if the request succeeds; otherwise, returns an error.
    return_: bool = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class UpdateSecurityGroupRuleDescriptionsIngressRequest(ShapeBase):
    """
    Contains the parameters for UpdateSecurityGroupRuleDescriptionsIngress.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "ip_permissions",
                "IpPermissions",
                TypeInfo(typing.List[IpPermission]),
            ),
            (
                "dry_run",
                "DryRun",
                TypeInfo(bool),
            ),
            (
                "group_id",
                "GroupId",
                TypeInfo(str),
            ),
            (
                "group_name",
                "GroupName",
                TypeInfo(str),
            ),
        ]

    # The IP permissions for the security group rule.
    ip_permissions: typing.List["IpPermission"] = dataclasses.field(
        default_factory=list,
    )

    # Checks whether you have the required permissions for the action, without
    # actually making the request, and provides an error response. If you have
    # the required permissions, the error response is `DryRunOperation`.
    # Otherwise, it is `UnauthorizedOperation`.
    dry_run: bool = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The ID of the security group. You must specify either the security group ID
    # or the security group name in the request. For security groups in a
    # nondefault VPC, you must specify the security group ID.
    group_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # [EC2-Classic, default VPC] The name of the security group. You must specify
    # either the security group ID or the security group name in the request.
    group_name: str = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class UpdateSecurityGroupRuleDescriptionsIngressResult(OutputShapeBase):
    """
    Contains the output of UpdateSecurityGroupRuleDescriptionsIngress.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "response_metadata",
                "ResponseMetadata",
                TypeInfo(typing.Dict[str, str]),
            ),
            (
                "return_",
                "Return",
                TypeInfo(bool),
            ),
        ]

    response_metadata: typing.Dict[str, str] = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # Returns `true` if the request succeeds; otherwise, returns an error.
    return_: bool = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class UserBucket(ShapeBase):
    """
    Describes the S3 bucket for the disk image.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "s3_bucket",
                "S3Bucket",
                TypeInfo(str),
            ),
            (
                "s3_key",
                "S3Key",
                TypeInfo(str),
            ),
        ]

    # The name of the S3 bucket where the disk image is located.
    s3_bucket: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The file name of the disk image.
    s3_key: str = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class UserBucketDetails(ShapeBase):
    """
    Describes the S3 bucket for the disk image.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "s3_bucket",
                "S3Bucket",
                TypeInfo(str),
            ),
            (
                "s3_key",
                "S3Key",
                TypeInfo(str),
            ),
        ]

    # The S3 bucket from which the disk image was created.
    s3_bucket: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The file name of the disk image.
    s3_key: str = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class UserData(ShapeBase):
    """
    Describes the user data for an instance.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "data",
                "Data",
                TypeInfo(str),
            ),
        ]

    # The user data. If you are using an AWS SDK or command line tool,
    # Base64-encoding is performed for you, and you can load the text from a
    # file. Otherwise, you must provide Base64-encoded text.
    data: str = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class UserIdGroupPair(ShapeBase):
    """
    Describes a security group and AWS account ID pair.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "description",
                "Description",
                TypeInfo(str),
            ),
            (
                "group_id",
                "GroupId",
                TypeInfo(str),
            ),
            (
                "group_name",
                "GroupName",
                TypeInfo(str),
            ),
            (
                "peering_status",
                "PeeringStatus",
                TypeInfo(str),
            ),
            (
                "user_id",
                "UserId",
                TypeInfo(str),
            ),
            (
                "vpc_id",
                "VpcId",
                TypeInfo(str),
            ),
            (
                "vpc_peering_connection_id",
                "VpcPeeringConnectionId",
                TypeInfo(str),
            ),
        ]

    # A description for the security group rule that references this user ID
    # group pair.

    # Constraints: Up to 255 characters in length. Allowed characters are a-z,
    # A-Z, 0-9, spaces, and ._-:/()#,@[]+=;{}!$*
    description: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The ID of the security group.
    group_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The name of the security group. In a request, use this parameter for a
    # security group in EC2-Classic or a default VPC only. For a security group
    # in a nondefault VPC, use the security group ID.

    # For a referenced security group in another VPC, this value is not returned
    # if the referenced security group is deleted.
    group_name: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The status of a VPC peering connection, if applicable.
    peering_status: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The ID of an AWS account.

    # For a referenced security group in another VPC, the account ID of the
    # referenced security group is returned in the response. If the referenced
    # security group is deleted, this value is not returned.

    # [EC2-Classic] Required when adding or removing rules that reference a
    # security group in another AWS account.
    user_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The ID of the VPC for the referenced security group, if applicable.
    vpc_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The ID of the VPC peering connection, if applicable.
    vpc_peering_connection_id: str = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )


@dataclasses.dataclass
class VgwTelemetry(ShapeBase):
    """
    Describes telemetry for a VPN tunnel.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "accepted_route_count",
                "AcceptedRouteCount",
                TypeInfo(int),
            ),
            (
                "last_status_change",
                "LastStatusChange",
                TypeInfo(datetime.datetime),
            ),
            (
                "outside_ip_address",
                "OutsideIpAddress",
                TypeInfo(str),
            ),
            (
                "status",
                "Status",
                TypeInfo(TelemetryStatus),
            ),
            (
                "status_message",
                "StatusMessage",
                TypeInfo(str),
            ),
        ]

    # The number of accepted routes.
    accepted_route_count: int = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The date and time of the last change in status.
    last_status_change: datetime.datetime = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # The Internet-routable IP address of the virtual private gateway's outside
    # interface.
    outside_ip_address: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The status of the VPN tunnel.
    status: "TelemetryStatus" = dataclasses.field(default=ShapeBase.NOT_SET, )

    # If an error occurs, a description of the error.
    status_message: str = dataclasses.field(default=ShapeBase.NOT_SET, )


class VirtualizationType(Enum):
    hvm = "hvm"
    paravirtual = "paravirtual"


@dataclasses.dataclass
class Volume(OutputShapeBase):
    """
    Describes a volume.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "response_metadata",
                "ResponseMetadata",
                TypeInfo(typing.Dict[str, str]),
            ),
            (
                "attachments",
                "Attachments",
                TypeInfo(typing.List[VolumeAttachment]),
            ),
            (
                "availability_zone",
                "AvailabilityZone",
                TypeInfo(str),
            ),
            (
                "create_time",
                "CreateTime",
                TypeInfo(datetime.datetime),
            ),
            (
                "encrypted",
                "Encrypted",
                TypeInfo(bool),
            ),
            (
                "kms_key_id",
                "KmsKeyId",
                TypeInfo(str),
            ),
            (
                "size",
                "Size",
                TypeInfo(int),
            ),
            (
                "snapshot_id",
                "SnapshotId",
                TypeInfo(str),
            ),
            (
                "state",
                "State",
                TypeInfo(VolumeState),
            ),
            (
                "volume_id",
                "VolumeId",
                TypeInfo(str),
            ),
            (
                "iops",
                "Iops",
                TypeInfo(int),
            ),
            (
                "tags",
                "Tags",
                TypeInfo(typing.List[Tag]),
            ),
            (
                "volume_type",
                "VolumeType",
                TypeInfo(VolumeType),
            ),
        ]

    response_metadata: typing.Dict[str, str] = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # Information about the volume attachments.
    attachments: typing.List["VolumeAttachment"] = dataclasses.field(
        default_factory=list,
    )

    # The Availability Zone for the volume.
    availability_zone: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The time stamp when volume creation was initiated.
    create_time: datetime.datetime = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # Indicates whether the volume will be encrypted.
    encrypted: bool = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The full ARN of the AWS Key Management Service (AWS KMS) customer master
    # key (CMK) that was used to protect the volume encryption key for the
    # volume.
    kms_key_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The size of the volume, in GiBs.
    size: int = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The snapshot from which the volume was created, if applicable.
    snapshot_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The volume state.
    state: "VolumeState" = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The ID of the volume.
    volume_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The number of I/O operations per second (IOPS) that the volume supports.
    # For Provisioned IOPS SSD volumes, this represents the number of IOPS that
    # are provisioned for the volume. For General Purpose SSD volumes, this
    # represents the baseline performance of the volume and the rate at which the
    # volume accumulates I/O credits for bursting. For more information about
    # General Purpose SSD baseline performance, I/O credits, and bursting, see
    # [Amazon EBS Volume
    # Types](http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSVolumeTypes.html)
    # in the _Amazon Elastic Compute Cloud User Guide_.

    # Constraint: Range is 100-32000 IOPS for io1 volumes and 100-10000 IOPS for
    # `gp2` volumes.

    # Condition: This parameter is required for requests to create `io1` volumes;
    # it is not used in requests to create `gp2`, `st1`, `sc1`, or `standard`
    # volumes.
    iops: int = dataclasses.field(default=ShapeBase.NOT_SET, )

    # Any tags assigned to the volume.
    tags: typing.List["Tag"] = dataclasses.field(default_factory=list, )

    # The volume type. This can be `gp2` for General Purpose SSD, `io1` for
    # Provisioned IOPS SSD, `st1` for Throughput Optimized HDD, `sc1` for Cold
    # HDD, or `standard` for Magnetic volumes.
    volume_type: "VolumeType" = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class VolumeAttachment(OutputShapeBase):
    """
    Describes volume attachment details.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "response_metadata",
                "ResponseMetadata",
                TypeInfo(typing.Dict[str, str]),
            ),
            (
                "attach_time",
                "AttachTime",
                TypeInfo(datetime.datetime),
            ),
            (
                "device",
                "Device",
                TypeInfo(str),
            ),
            (
                "instance_id",
                "InstanceId",
                TypeInfo(str),
            ),
            (
                "state",
                "State",
                TypeInfo(VolumeAttachmentState),
            ),
            (
                "volume_id",
                "VolumeId",
                TypeInfo(str),
            ),
            (
                "delete_on_termination",
                "DeleteOnTermination",
                TypeInfo(bool),
            ),
        ]

    response_metadata: typing.Dict[str, str] = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # The time stamp when the attachment initiated.
    attach_time: datetime.datetime = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # The device name.
    device: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The ID of the instance.
    instance_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The attachment state of the volume.
    state: "VolumeAttachmentState" = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # The ID of the volume.
    volume_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # Indicates whether the EBS volume is deleted on instance termination.
    delete_on_termination: bool = dataclasses.field(default=ShapeBase.NOT_SET, )


class VolumeAttachmentState(Enum):
    attaching = "attaching"
    attached = "attached"
    detaching = "detaching"
    detached = "detached"
    busy = "busy"


class VolumeAttributeName(Enum):
    autoEnableIO = "autoEnableIO"
    productCodes = "productCodes"


@dataclasses.dataclass
class VolumeDetail(ShapeBase):
    """
    Describes an EBS volume.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "size",
                "Size",
                TypeInfo(int),
            ),
        ]

    # The size of the volume, in GiB.
    size: int = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class VolumeModification(ShapeBase):
    """
    Describes the modification status of an EBS volume.

    If the volume has never been modified, some element values will be null.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "volume_id",
                "VolumeId",
                TypeInfo(str),
            ),
            (
                "modification_state",
                "ModificationState",
                TypeInfo(VolumeModificationState),
            ),
            (
                "status_message",
                "StatusMessage",
                TypeInfo(str),
            ),
            (
                "target_size",
                "TargetSize",
                TypeInfo(int),
            ),
            (
                "target_iops",
                "TargetIops",
                TypeInfo(int),
            ),
            (
                "target_volume_type",
                "TargetVolumeType",
                TypeInfo(VolumeType),
            ),
            (
                "original_size",
                "OriginalSize",
                TypeInfo(int),
            ),
            (
                "original_iops",
                "OriginalIops",
                TypeInfo(int),
            ),
            (
                "original_volume_type",
                "OriginalVolumeType",
                TypeInfo(VolumeType),
            ),
            (
                "progress",
                "Progress",
                TypeInfo(int),
            ),
            (
                "start_time",
                "StartTime",
                TypeInfo(datetime.datetime),
            ),
            (
                "end_time",
                "EndTime",
                TypeInfo(datetime.datetime),
            ),
        ]

    # The ID of the volume.
    volume_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The current modification state. The modification state is null for
    # unmodified volumes.
    modification_state: "VolumeModificationState" = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # A status message about the modification progress or failure.
    status_message: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The target size of the volume, in GiB.
    target_size: int = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The target IOPS rate of the volume.
    target_iops: int = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The target EBS volume type of the volume.
    target_volume_type: "VolumeType" = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # The original size of the volume.
    original_size: int = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The original IOPS rate of the volume.
    original_iops: int = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The original EBS volume type of the volume.
    original_volume_type: "VolumeType" = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # The modification progress, from 0 to 100 percent complete.
    progress: int = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The modification start time.
    start_time: datetime.datetime = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # The modification completion or failure time.
    end_time: datetime.datetime = dataclasses.field(default=ShapeBase.NOT_SET, )


class VolumeModificationState(Enum):
    modifying = "modifying"
    optimizing = "optimizing"
    completed = "completed"
    failed = "failed"


class VolumeState(Enum):
    creating = "creating"
    available = "available"
    in_use = "in-use"
    deleting = "deleting"
    deleted = "deleted"
    error = "error"


@dataclasses.dataclass
class VolumeStatusAction(ShapeBase):
    """
    Describes a volume status operation code.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "code",
                "Code",
                TypeInfo(str),
            ),
            (
                "description",
                "Description",
                TypeInfo(str),
            ),
            (
                "event_id",
                "EventId",
                TypeInfo(str),
            ),
            (
                "event_type",
                "EventType",
                TypeInfo(str),
            ),
        ]

    # The code identifying the operation, for example, `enable-volume-io`.
    code: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # A description of the operation.
    description: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The ID of the event associated with this operation.
    event_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The event type associated with this operation.
    event_type: str = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class VolumeStatusDetails(ShapeBase):
    """
    Describes a volume status.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "name",
                "Name",
                TypeInfo(VolumeStatusName),
            ),
            (
                "status",
                "Status",
                TypeInfo(str),
            ),
        ]

    # The name of the volume status.
    name: "VolumeStatusName" = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The intended status of the volume status.
    status: str = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class VolumeStatusEvent(ShapeBase):
    """
    Describes a volume status event.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "description",
                "Description",
                TypeInfo(str),
            ),
            (
                "event_id",
                "EventId",
                TypeInfo(str),
            ),
            (
                "event_type",
                "EventType",
                TypeInfo(str),
            ),
            (
                "not_after",
                "NotAfter",
                TypeInfo(datetime.datetime),
            ),
            (
                "not_before",
                "NotBefore",
                TypeInfo(datetime.datetime),
            ),
        ]

    # A description of the event.
    description: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The ID of this event.
    event_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The type of this event.
    event_type: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The latest end time of the event.
    not_after: datetime.datetime = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # The earliest start time of the event.
    not_before: datetime.datetime = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )


@dataclasses.dataclass
class VolumeStatusInfo(ShapeBase):
    """
    Describes the status of a volume.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "details",
                "Details",
                TypeInfo(typing.List[VolumeStatusDetails]),
            ),
            (
                "status",
                "Status",
                TypeInfo(VolumeStatusInfoStatus),
            ),
        ]

    # The details of the volume status.
    details: typing.List["VolumeStatusDetails"] = dataclasses.field(
        default_factory=list,
    )

    # The status of the volume.
    status: "VolumeStatusInfoStatus" = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )


class VolumeStatusInfoStatus(Enum):
    ok = "ok"
    impaired = "impaired"
    insufficient_data = "insufficient-data"


@dataclasses.dataclass
class VolumeStatusItem(ShapeBase):
    """
    Describes the volume status.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "actions",
                "Actions",
                TypeInfo(typing.List[VolumeStatusAction]),
            ),
            (
                "availability_zone",
                "AvailabilityZone",
                TypeInfo(str),
            ),
            (
                "events",
                "Events",
                TypeInfo(typing.List[VolumeStatusEvent]),
            ),
            (
                "volume_id",
                "VolumeId",
                TypeInfo(str),
            ),
            (
                "volume_status",
                "VolumeStatus",
                TypeInfo(VolumeStatusInfo),
            ),
        ]

    # The details of the operation.
    actions: typing.List["VolumeStatusAction"] = dataclasses.field(
        default_factory=list,
    )

    # The Availability Zone of the volume.
    availability_zone: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # A list of events associated with the volume.
    events: typing.List["VolumeStatusEvent"] = dataclasses.field(
        default_factory=list,
    )

    # The volume ID.
    volume_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The volume status.
    volume_status: "VolumeStatusInfo" = dataclasses.field(
        default_factory=dict,
    )


class VolumeStatusName(Enum):
    io_enabled = "io-enabled"
    io_performance = "io-performance"


class VolumeType(Enum):
    standard = "standard"
    io1 = "io1"
    gp2 = "gp2"
    sc1 = "sc1"
    st1 = "st1"


@dataclasses.dataclass
class Vpc(ShapeBase):
    """
    Describes a VPC.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "cidr_block",
                "CidrBlock",
                TypeInfo(str),
            ),
            (
                "dhcp_options_id",
                "DhcpOptionsId",
                TypeInfo(str),
            ),
            (
                "state",
                "State",
                TypeInfo(VpcState),
            ),
            (
                "vpc_id",
                "VpcId",
                TypeInfo(str),
            ),
            (
                "instance_tenancy",
                "InstanceTenancy",
                TypeInfo(Tenancy),
            ),
            (
                "ipv6_cidr_block_association_set",
                "Ipv6CidrBlockAssociationSet",
                TypeInfo(typing.List[VpcIpv6CidrBlockAssociation]),
            ),
            (
                "cidr_block_association_set",
                "CidrBlockAssociationSet",
                TypeInfo(typing.List[VpcCidrBlockAssociation]),
            ),
            (
                "is_default",
                "IsDefault",
                TypeInfo(bool),
            ),
            (
                "tags",
                "Tags",
                TypeInfo(typing.List[Tag]),
            ),
        ]

    # The primary IPv4 CIDR block for the VPC.
    cidr_block: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The ID of the set of DHCP options you've associated with the VPC (or
    # `default` if the default options are associated with the VPC).
    dhcp_options_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The current state of the VPC.
    state: "VpcState" = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The ID of the VPC.
    vpc_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The allowed tenancy of instances launched into the VPC.
    instance_tenancy: "Tenancy" = dataclasses.field(default=ShapeBase.NOT_SET, )

    # Information about the IPv6 CIDR blocks associated with the VPC.
    ipv6_cidr_block_association_set: typing.List["VpcIpv6CidrBlockAssociation"
                                                ] = dataclasses.field(
                                                    default_factory=list,
                                                )

    # Information about the IPv4 CIDR blocks associated with the VPC.
    cidr_block_association_set: typing.List["VpcCidrBlockAssociation"
                                           ] = dataclasses.field(
                                               default_factory=list,
                                           )

    # Indicates whether the VPC is the default VPC.
    is_default: bool = dataclasses.field(default=ShapeBase.NOT_SET, )

    # Any tags assigned to the VPC.
    tags: typing.List["Tag"] = dataclasses.field(default_factory=list, )


@dataclasses.dataclass
class VpcAttachment(ShapeBase):
    """
    Describes an attachment between a virtual private gateway and a VPC.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "state",
                "State",
                TypeInfo(AttachmentStatus),
            ),
            (
                "vpc_id",
                "VpcId",
                TypeInfo(str),
            ),
        ]

    # The current state of the attachment.
    state: "AttachmentStatus" = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The ID of the VPC.
    vpc_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )


class VpcAttributeName(Enum):
    enableDnsSupport = "enableDnsSupport"
    enableDnsHostnames = "enableDnsHostnames"


@dataclasses.dataclass
class VpcCidrBlockAssociation(ShapeBase):
    """
    Describes an IPv4 CIDR block associated with a VPC.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "association_id",
                "AssociationId",
                TypeInfo(str),
            ),
            (
                "cidr_block",
                "CidrBlock",
                TypeInfo(str),
            ),
            (
                "cidr_block_state",
                "CidrBlockState",
                TypeInfo(VpcCidrBlockState),
            ),
        ]

    # The association ID for the IPv4 CIDR block.
    association_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The IPv4 CIDR block.
    cidr_block: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # Information about the state of the CIDR block.
    cidr_block_state: "VpcCidrBlockState" = dataclasses.field(
        default_factory=dict,
    )


@dataclasses.dataclass
class VpcCidrBlockState(ShapeBase):
    """
    Describes the state of a CIDR block.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "state",
                "State",
                TypeInfo(VpcCidrBlockStateCode),
            ),
            (
                "status_message",
                "StatusMessage",
                TypeInfo(str),
            ),
        ]

    # The state of the CIDR block.
    state: "VpcCidrBlockStateCode" = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # A message about the status of the CIDR block, if applicable.
    status_message: str = dataclasses.field(default=ShapeBase.NOT_SET, )


class VpcCidrBlockStateCode(Enum):
    associating = "associating"
    associated = "associated"
    disassociating = "disassociating"
    disassociated = "disassociated"
    failing = "failing"
    failed = "failed"


@dataclasses.dataclass
class VpcClassicLink(ShapeBase):
    """
    Describes whether a VPC is enabled for ClassicLink.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "classic_link_enabled",
                "ClassicLinkEnabled",
                TypeInfo(bool),
            ),
            (
                "tags",
                "Tags",
                TypeInfo(typing.List[Tag]),
            ),
            (
                "vpc_id",
                "VpcId",
                TypeInfo(str),
            ),
        ]

    # Indicates whether the VPC is enabled for ClassicLink.
    classic_link_enabled: bool = dataclasses.field(default=ShapeBase.NOT_SET, )

    # Any tags assigned to the VPC.
    tags: typing.List["Tag"] = dataclasses.field(default_factory=list, )

    # The ID of the VPC.
    vpc_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class VpcEndpoint(ShapeBase):
    """
    Describes a VPC endpoint.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "vpc_endpoint_id",
                "VpcEndpointId",
                TypeInfo(str),
            ),
            (
                "vpc_endpoint_type",
                "VpcEndpointType",
                TypeInfo(VpcEndpointType),
            ),
            (
                "vpc_id",
                "VpcId",
                TypeInfo(str),
            ),
            (
                "service_name",
                "ServiceName",
                TypeInfo(str),
            ),
            (
                "state",
                "State",
                TypeInfo(State),
            ),
            (
                "policy_document",
                "PolicyDocument",
                TypeInfo(str),
            ),
            (
                "route_table_ids",
                "RouteTableIds",
                TypeInfo(typing.List[str]),
            ),
            (
                "subnet_ids",
                "SubnetIds",
                TypeInfo(typing.List[str]),
            ),
            (
                "groups",
                "Groups",
                TypeInfo(typing.List[SecurityGroupIdentifier]),
            ),
            (
                "private_dns_enabled",
                "PrivateDnsEnabled",
                TypeInfo(bool),
            ),
            (
                "network_interface_ids",
                "NetworkInterfaceIds",
                TypeInfo(typing.List[str]),
            ),
            (
                "dns_entries",
                "DnsEntries",
                TypeInfo(typing.List[DnsEntry]),
            ),
            (
                "creation_timestamp",
                "CreationTimestamp",
                TypeInfo(datetime.datetime),
            ),
        ]

    # The ID of the VPC endpoint.
    vpc_endpoint_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The type of endpoint.
    vpc_endpoint_type: "VpcEndpointType" = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # The ID of the VPC to which the endpoint is associated.
    vpc_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The name of the service to which the endpoint is associated.
    service_name: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The state of the VPC endpoint.
    state: "State" = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The policy document associated with the endpoint, if applicable.
    policy_document: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # (Gateway endpoint) One or more route tables associated with the endpoint.
    route_table_ids: typing.List[str] = dataclasses.field(
        default_factory=list,
    )

    # (Interface endpoint) One or more subnets in which the endpoint is located.
    subnet_ids: typing.List[str] = dataclasses.field(default_factory=list, )

    # (Interface endpoint) Information about the security groups associated with
    # the network interface.
    groups: typing.List["SecurityGroupIdentifier"] = dataclasses.field(
        default_factory=list,
    )

    # (Interface endpoint) Indicates whether the VPC is associated with a private
    # hosted zone.
    private_dns_enabled: bool = dataclasses.field(default=ShapeBase.NOT_SET, )

    # (Interface endpoint) One or more network interfaces for the endpoint.
    network_interface_ids: typing.List[str] = dataclasses.field(
        default_factory=list,
    )

    # (Interface endpoint) The DNS entries for the endpoint.
    dns_entries: typing.List["DnsEntry"] = dataclasses.field(
        default_factory=list,
    )

    # The date and time the VPC endpoint was created.
    creation_timestamp: datetime.datetime = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )


@dataclasses.dataclass
class VpcEndpointConnection(ShapeBase):
    """
    Describes a VPC endpoint connection to a service.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "service_id",
                "ServiceId",
                TypeInfo(str),
            ),
            (
                "vpc_endpoint_id",
                "VpcEndpointId",
                TypeInfo(str),
            ),
            (
                "vpc_endpoint_owner",
                "VpcEndpointOwner",
                TypeInfo(str),
            ),
            (
                "vpc_endpoint_state",
                "VpcEndpointState",
                TypeInfo(State),
            ),
            (
                "creation_timestamp",
                "CreationTimestamp",
                TypeInfo(datetime.datetime),
            ),
        ]

    # The ID of the service to which the endpoint is connected.
    service_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The ID of the VPC endpoint.
    vpc_endpoint_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The AWS account ID of the owner of the VPC endpoint.
    vpc_endpoint_owner: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The state of the VPC endpoint.
    vpc_endpoint_state: "State" = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The date and time the VPC endpoint was created.
    creation_timestamp: datetime.datetime = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )


class VpcEndpointType(Enum):
    Interface = "Interface"
    Gateway = "Gateway"


@dataclasses.dataclass
class VpcIpv6CidrBlockAssociation(ShapeBase):
    """
    Describes an IPv6 CIDR block associated with a VPC.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "association_id",
                "AssociationId",
                TypeInfo(str),
            ),
            (
                "ipv6_cidr_block",
                "Ipv6CidrBlock",
                TypeInfo(str),
            ),
            (
                "ipv6_cidr_block_state",
                "Ipv6CidrBlockState",
                TypeInfo(VpcCidrBlockState),
            ),
        ]

    # The association ID for the IPv6 CIDR block.
    association_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The IPv6 CIDR block.
    ipv6_cidr_block: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # Information about the state of the CIDR block.
    ipv6_cidr_block_state: "VpcCidrBlockState" = dataclasses.field(
        default_factory=dict,
    )


@dataclasses.dataclass
class VpcPeeringConnection(ShapeBase):
    """
    Describes a VPC peering connection.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "accepter_vpc_info",
                "AccepterVpcInfo",
                TypeInfo(VpcPeeringConnectionVpcInfo),
            ),
            (
                "expiration_time",
                "ExpirationTime",
                TypeInfo(datetime.datetime),
            ),
            (
                "requester_vpc_info",
                "RequesterVpcInfo",
                TypeInfo(VpcPeeringConnectionVpcInfo),
            ),
            (
                "status",
                "Status",
                TypeInfo(VpcPeeringConnectionStateReason),
            ),
            (
                "tags",
                "Tags",
                TypeInfo(typing.List[Tag]),
            ),
            (
                "vpc_peering_connection_id",
                "VpcPeeringConnectionId",
                TypeInfo(str),
            ),
        ]

    # Information about the accepter VPC. CIDR block information is only returned
    # when describing an active VPC peering connection.
    accepter_vpc_info: "VpcPeeringConnectionVpcInfo" = dataclasses.field(
        default_factory=dict,
    )

    # The time that an unaccepted VPC peering connection will expire.
    expiration_time: datetime.datetime = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # Information about the requester VPC. CIDR block information is only
    # returned when describing an active VPC peering connection.
    requester_vpc_info: "VpcPeeringConnectionVpcInfo" = dataclasses.field(
        default_factory=dict,
    )

    # The status of the VPC peering connection.
    status: "VpcPeeringConnectionStateReason" = dataclasses.field(
        default_factory=dict,
    )

    # Any tags assigned to the resource.
    tags: typing.List["Tag"] = dataclasses.field(default_factory=list, )

    # The ID of the VPC peering connection.
    vpc_peering_connection_id: str = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )


@dataclasses.dataclass
class VpcPeeringConnectionOptionsDescription(ShapeBase):
    """
    Describes the VPC peering connection options.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "allow_dns_resolution_from_remote_vpc",
                "AllowDnsResolutionFromRemoteVpc",
                TypeInfo(bool),
            ),
            (
                "allow_egress_from_local_classic_link_to_remote_vpc",
                "AllowEgressFromLocalClassicLinkToRemoteVpc",
                TypeInfo(bool),
            ),
            (
                "allow_egress_from_local_vpc_to_remote_classic_link",
                "AllowEgressFromLocalVpcToRemoteClassicLink",
                TypeInfo(bool),
            ),
        ]

    # Indicates whether a local VPC can resolve public DNS hostnames to private
    # IP addresses when queried from instances in a peer VPC.
    allow_dns_resolution_from_remote_vpc: bool = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # Indicates whether a local ClassicLink connection can communicate with the
    # peer VPC over the VPC peering connection.
    allow_egress_from_local_classic_link_to_remote_vpc: bool = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # Indicates whether a local VPC can communicate with a ClassicLink connection
    # in the peer VPC over the VPC peering connection.
    allow_egress_from_local_vpc_to_remote_classic_link: bool = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )


@dataclasses.dataclass
class VpcPeeringConnectionStateReason(ShapeBase):
    """
    Describes the status of a VPC peering connection.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "code",
                "Code",
                TypeInfo(VpcPeeringConnectionStateReasonCode),
            ),
            (
                "message",
                "Message",
                TypeInfo(str),
            ),
        ]

    # The status of the VPC peering connection.
    code: "VpcPeeringConnectionStateReasonCode" = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # A message that provides more information about the status, if applicable.
    message: str = dataclasses.field(default=ShapeBase.NOT_SET, )


class VpcPeeringConnectionStateReasonCode(Enum):
    initiating_request = "initiating-request"
    pending_acceptance = "pending-acceptance"
    active = "active"
    deleted = "deleted"
    rejected = "rejected"
    failed = "failed"
    expired = "expired"
    provisioning = "provisioning"
    deleting = "deleting"


@dataclasses.dataclass
class VpcPeeringConnectionVpcInfo(ShapeBase):
    """
    Describes a VPC in a VPC peering connection.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "cidr_block",
                "CidrBlock",
                TypeInfo(str),
            ),
            (
                "ipv6_cidr_block_set",
                "Ipv6CidrBlockSet",
                TypeInfo(typing.List[Ipv6CidrBlock]),
            ),
            (
                "cidr_block_set",
                "CidrBlockSet",
                TypeInfo(typing.List[CidrBlock]),
            ),
            (
                "owner_id",
                "OwnerId",
                TypeInfo(str),
            ),
            (
                "peering_options",
                "PeeringOptions",
                TypeInfo(VpcPeeringConnectionOptionsDescription),
            ),
            (
                "vpc_id",
                "VpcId",
                TypeInfo(str),
            ),
            (
                "region",
                "Region",
                TypeInfo(str),
            ),
        ]

    # The IPv4 CIDR block for the VPC.
    cidr_block: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The IPv6 CIDR block for the VPC.
    ipv6_cidr_block_set: typing.List["Ipv6CidrBlock"] = dataclasses.field(
        default_factory=list,
    )

    # Information about the IPv4 CIDR blocks for the VPC.
    cidr_block_set: typing.List["CidrBlock"] = dataclasses.field(
        default_factory=list,
    )

    # The AWS account ID of the VPC owner.
    owner_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # Information about the VPC peering connection options for the accepter or
    # requester VPC.
    peering_options: "VpcPeeringConnectionOptionsDescription" = dataclasses.field(
        default_factory=dict,
    )

    # The ID of the VPC.
    vpc_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The region in which the VPC is located.
    region: str = dataclasses.field(default=ShapeBase.NOT_SET, )


class VpcState(Enum):
    pending = "pending"
    available = "available"


class VpcTenancy(Enum):
    default = "default"


@dataclasses.dataclass
class VpnConnection(ShapeBase):
    """
    Describes a VPN connection.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "customer_gateway_configuration",
                "CustomerGatewayConfiguration",
                TypeInfo(str),
            ),
            (
                "customer_gateway_id",
                "CustomerGatewayId",
                TypeInfo(str),
            ),
            (
                "category",
                "Category",
                TypeInfo(str),
            ),
            (
                "state",
                "State",
                TypeInfo(VpnState),
            ),
            (
                "type",
                "Type",
                TypeInfo(GatewayType),
            ),
            (
                "vpn_connection_id",
                "VpnConnectionId",
                TypeInfo(str),
            ),
            (
                "vpn_gateway_id",
                "VpnGatewayId",
                TypeInfo(str),
            ),
            (
                "options",
                "Options",
                TypeInfo(VpnConnectionOptions),
            ),
            (
                "routes",
                "Routes",
                TypeInfo(typing.List[VpnStaticRoute]),
            ),
            (
                "tags",
                "Tags",
                TypeInfo(typing.List[Tag]),
            ),
            (
                "vgw_telemetry",
                "VgwTelemetry",
                TypeInfo(typing.List[VgwTelemetry]),
            ),
        ]

    # The configuration information for the VPN connection's customer gateway (in
    # the native XML format). This element is always present in the
    # CreateVpnConnection response; however, it's present in the
    # DescribeVpnConnections response only if the VPN connection is in the
    # `pending` or `available` state.
    customer_gateway_configuration: str = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # The ID of the customer gateway at your end of the VPN connection.
    customer_gateway_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The category of the VPN connection. A value of `VPN` indicates an AWS VPN
    # connection. A value of `VPN-Classic` indicates an AWS Classic VPN
    # connection. For more information, see [AWS Managed VPN
    # Categories](http://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/VPC_VPN.html#vpn-
    # categories) in the _Amazon Virtual Private Cloud User Guide_.
    category: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The current state of the VPN connection.
    state: "VpnState" = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The type of VPN connection.
    type: "GatewayType" = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The ID of the VPN connection.
    vpn_connection_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The ID of the virtual private gateway at the AWS side of the VPN
    # connection.
    vpn_gateway_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The VPN connection options.
    options: "VpnConnectionOptions" = dataclasses.field(default_factory=dict, )

    # The static routes associated with the VPN connection.
    routes: typing.List["VpnStaticRoute"] = dataclasses.field(
        default_factory=list,
    )

    # Any tags assigned to the VPN connection.
    tags: typing.List["Tag"] = dataclasses.field(default_factory=list, )

    # Information about the VPN tunnel.
    vgw_telemetry: typing.List["VgwTelemetry"] = dataclasses.field(
        default_factory=list,
    )


@dataclasses.dataclass
class VpnConnectionOptions(ShapeBase):
    """
    Describes VPN connection options.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "static_routes_only",
                "StaticRoutesOnly",
                TypeInfo(bool),
            ),
        ]

    # Indicates whether the VPN connection uses static routes only. Static routes
    # must be used for devices that don't support BGP.
    static_routes_only: bool = dataclasses.field(default=ShapeBase.NOT_SET, )


@dataclasses.dataclass
class VpnConnectionOptionsSpecification(ShapeBase):
    """
    Describes VPN connection options.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "static_routes_only",
                "StaticRoutesOnly",
                TypeInfo(bool),
            ),
            (
                "tunnel_options",
                "TunnelOptions",
                TypeInfo(typing.List[VpnTunnelOptionsSpecification]),
            ),
        ]

    # Indicate whether the VPN connection uses static routes only. If you are
    # creating a VPN connection for a device that does not support BGP, you must
    # specify `true`. Use CreateVpnConnectionRoute to create a static route.

    # Default: `false`
    static_routes_only: bool = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The tunnel options for the VPN connection.
    tunnel_options: typing.List["VpnTunnelOptionsSpecification"
                               ] = dataclasses.field(
                                   default_factory=list,
                               )


@dataclasses.dataclass
class VpnGateway(ShapeBase):
    """
    Describes a virtual private gateway.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "availability_zone",
                "AvailabilityZone",
                TypeInfo(str),
            ),
            (
                "state",
                "State",
                TypeInfo(VpnState),
            ),
            (
                "type",
                "Type",
                TypeInfo(GatewayType),
            ),
            (
                "vpc_attachments",
                "VpcAttachments",
                TypeInfo(typing.List[VpcAttachment]),
            ),
            (
                "vpn_gateway_id",
                "VpnGatewayId",
                TypeInfo(str),
            ),
            (
                "amazon_side_asn",
                "AmazonSideAsn",
                TypeInfo(int),
            ),
            (
                "tags",
                "Tags",
                TypeInfo(typing.List[Tag]),
            ),
        ]

    # The Availability Zone where the virtual private gateway was created, if
    # applicable. This field may be empty or not returned.
    availability_zone: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The current state of the virtual private gateway.
    state: "VpnState" = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The type of VPN connection the virtual private gateway supports.
    type: "GatewayType" = dataclasses.field(default=ShapeBase.NOT_SET, )

    # Any VPCs attached to the virtual private gateway.
    vpc_attachments: typing.List["VpcAttachment"] = dataclasses.field(
        default_factory=list,
    )

    # The ID of the virtual private gateway.
    vpn_gateway_id: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The private Autonomous System Number (ASN) for the Amazon side of a BGP
    # session.
    amazon_side_asn: int = dataclasses.field(default=ShapeBase.NOT_SET, )

    # Any tags assigned to the virtual private gateway.
    tags: typing.List["Tag"] = dataclasses.field(default_factory=list, )


class VpnState(Enum):
    pending = "pending"
    available = "available"
    deleting = "deleting"
    deleted = "deleted"


@dataclasses.dataclass
class VpnStaticRoute(ShapeBase):
    """
    Describes a static route for a VPN connection.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "destination_cidr_block",
                "DestinationCidrBlock",
                TypeInfo(str),
            ),
            (
                "source",
                "Source",
                TypeInfo(VpnStaticRouteSource),
            ),
            (
                "state",
                "State",
                TypeInfo(VpnState),
            ),
        ]

    # The CIDR block associated with the local subnet of the customer data
    # center.
    destination_cidr_block: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # Indicates how the routes were provided.
    source: "VpnStaticRouteSource" = dataclasses.field(
        default=ShapeBase.NOT_SET,
    )

    # The current state of the static route.
    state: "VpnState" = dataclasses.field(default=ShapeBase.NOT_SET, )


class VpnStaticRouteSource(Enum):
    Static = "Static"


@dataclasses.dataclass
class VpnTunnelOptionsSpecification(ShapeBase):
    """
    The tunnel options for a VPN connection.
    """

    @classmethod
    def _get_boto_mapping(cls):
        return [
            (
                "tunnel_inside_cidr",
                "TunnelInsideCidr",
                TypeInfo(str),
            ),
            (
                "pre_shared_key",
                "PreSharedKey",
                TypeInfo(str),
            ),
        ]

    # The range of inside IP addresses for the tunnel. Any specified CIDR blocks
    # must be unique across all VPN connections that use the same virtual private
    # gateway.

    # Constraints: A size /30 CIDR block from the `169.254.0.0/16` range. The
    # following CIDR blocks are reserved and cannot be used:

    #   * `169.254.0.0/30`

    #   * `169.254.1.0/30`

    #   * `169.254.2.0/30`

    #   * `169.254.3.0/30`

    #   * `169.254.4.0/30`

    #   * `169.254.5.0/30`

    #   * `169.254.169.252/30`
    tunnel_inside_cidr: str = dataclasses.field(default=ShapeBase.NOT_SET, )

    # The pre-shared key (PSK) to establish initial authentication between the
    # virtual private gateway and customer gateway.

    # Constraints: Allowed characters are alphanumeric characters and ._. Must be
    # between 8 and 64 characters in length and cannot start with zero (0).
    pre_shared_key: str = dataclasses.field(default=ShapeBase.NOT_SET, )


class scope(Enum):
    Availability_Zone = "Availability Zone"
    Region = "Region"
