import datetime
import typing
import boto3
from autoboto import ClientBase, ShapeBase, OutputShapeBase
from . import shapes


class Client(ClientBase):
    def __init__(self, *args, **kwargs):
        super().__init__("inspector", *args, **kwargs)

    def add_attributes_to_findings(
        self,
        _request: shapes.AddAttributesToFindingsRequest = None,
        *,
        finding_arns: typing.List[str],
        attributes: typing.List[shapes.Attribute],
    ) -> shapes.AddAttributesToFindingsResponse:
        """
        Assigns attributes (key and value pairs) to the findings that are specified by
        the ARNs of the findings.
        """
        if _request is None:
            _params = {}
            if finding_arns is not ShapeBase.NOT_SET:
                _params['finding_arns'] = finding_arns
            if attributes is not ShapeBase.NOT_SET:
                _params['attributes'] = attributes
            _request = shapes.AddAttributesToFindingsRequest(**_params)
        response = self._boto_client.add_attributes_to_findings(
            **_request.to_boto_dict()
        )

        return shapes.AddAttributesToFindingsResponse.from_boto_dict(response)

    def create_assessment_target(
        self,
        _request: shapes.CreateAssessmentTargetRequest = None,
        *,
        assessment_target_name: str,
        resource_group_arn: str = ShapeBase.NOT_SET,
    ) -> shapes.CreateAssessmentTargetResponse:
        """
        Creates a new assessment target using the ARN of the resource group that is
        generated by CreateResourceGroup. If resourceGroupArn is not specified, all EC2
        instances in the current AWS account and region are included in the assessment
        target. If the [service-linked
        role](https://docs.aws.amazon.com/inspector/latest/userguide/inspector_slr.html)
        isn’t already registered, this action also creates and registers a service-
        linked role to grant Amazon Inspector access to AWS Services needed to perform
        security assessments. You can create up to 50 assessment targets per AWS
        account. You can run up to 500 concurrent agents per AWS account. For more
        information, see [ Amazon Inspector Assessment
        Targets](http://docs.aws.amazon.com/inspector/latest/userguide/inspector_applications.html).
        """
        if _request is None:
            _params = {}
            if assessment_target_name is not ShapeBase.NOT_SET:
                _params['assessment_target_name'] = assessment_target_name
            if resource_group_arn is not ShapeBase.NOT_SET:
                _params['resource_group_arn'] = resource_group_arn
            _request = shapes.CreateAssessmentTargetRequest(**_params)
        response = self._boto_client.create_assessment_target(
            **_request.to_boto_dict()
        )

        return shapes.CreateAssessmentTargetResponse.from_boto_dict(response)

    def create_assessment_template(
        self,
        _request: shapes.CreateAssessmentTemplateRequest = None,
        *,
        assessment_target_arn: str,
        assessment_template_name: str,
        duration_in_seconds: int,
        rules_package_arns: typing.List[str],
        user_attributes_for_findings: typing.List[shapes.Attribute
                                                 ] = ShapeBase.NOT_SET,
    ) -> shapes.CreateAssessmentTemplateResponse:
        """
        Creates an assessment template for the assessment target that is specified by
        the ARN of the assessment target. If the [service-linked
        role](https://docs.aws.amazon.com/inspector/latest/userguide/inspector_slr.html)
        isn’t already registered, this action also creates and registers a service-
        linked role to grant Amazon Inspector access to AWS Services needed to perform
        security assessments.
        """
        if _request is None:
            _params = {}
            if assessment_target_arn is not ShapeBase.NOT_SET:
                _params['assessment_target_arn'] = assessment_target_arn
            if assessment_template_name is not ShapeBase.NOT_SET:
                _params['assessment_template_name'] = assessment_template_name
            if duration_in_seconds is not ShapeBase.NOT_SET:
                _params['duration_in_seconds'] = duration_in_seconds
            if rules_package_arns is not ShapeBase.NOT_SET:
                _params['rules_package_arns'] = rules_package_arns
            if user_attributes_for_findings is not ShapeBase.NOT_SET:
                _params['user_attributes_for_findings'
                       ] = user_attributes_for_findings
            _request = shapes.CreateAssessmentTemplateRequest(**_params)
        response = self._boto_client.create_assessment_template(
            **_request.to_boto_dict()
        )

        return shapes.CreateAssessmentTemplateResponse.from_boto_dict(response)

    def create_exclusions_preview(
        self,
        _request: shapes.CreateExclusionsPreviewRequest = None,
        *,
        assessment_template_arn: str,
    ) -> shapes.CreateExclusionsPreviewResponse:
        """
        Starts the generation of an exclusions preview for the specified assessment
        template. The exclusions preview lists the potential exclusions
        (ExclusionPreview) that Inspector can detect before it runs the assessment.
        """
        if _request is None:
            _params = {}
            if assessment_template_arn is not ShapeBase.NOT_SET:
                _params['assessment_template_arn'] = assessment_template_arn
            _request = shapes.CreateExclusionsPreviewRequest(**_params)
        response = self._boto_client.create_exclusions_preview(
            **_request.to_boto_dict()
        )

        return shapes.CreateExclusionsPreviewResponse.from_boto_dict(response)

    def create_resource_group(
        self,
        _request: shapes.CreateResourceGroupRequest = None,
        *,
        resource_group_tags: typing.List[shapes.ResourceGroupTag],
    ) -> shapes.CreateResourceGroupResponse:
        """
        Creates a resource group using the specified set of tags (key and value pairs)
        that are used to select the EC2 instances to be included in an Amazon Inspector
        assessment target. The created resource group is then used to create an Amazon
        Inspector assessment target. For more information, see CreateAssessmentTarget.
        """
        if _request is None:
            _params = {}
            if resource_group_tags is not ShapeBase.NOT_SET:
                _params['resource_group_tags'] = resource_group_tags
            _request = shapes.CreateResourceGroupRequest(**_params)
        response = self._boto_client.create_resource_group(
            **_request.to_boto_dict()
        )

        return shapes.CreateResourceGroupResponse.from_boto_dict(response)

    def delete_assessment_run(
        self,
        _request: shapes.DeleteAssessmentRunRequest = None,
        *,
        assessment_run_arn: str,
    ) -> None:
        """
        Deletes the assessment run that is specified by the ARN of the assessment run.
        """
        if _request is None:
            _params = {}
            if assessment_run_arn is not ShapeBase.NOT_SET:
                _params['assessment_run_arn'] = assessment_run_arn
            _request = shapes.DeleteAssessmentRunRequest(**_params)
        response = self._boto_client.delete_assessment_run(
            **_request.to_boto_dict()
        )

    def delete_assessment_target(
        self,
        _request: shapes.DeleteAssessmentTargetRequest = None,
        *,
        assessment_target_arn: str,
    ) -> None:
        """
        Deletes the assessment target that is specified by the ARN of the assessment
        target.
        """
        if _request is None:
            _params = {}
            if assessment_target_arn is not ShapeBase.NOT_SET:
                _params['assessment_target_arn'] = assessment_target_arn
            _request = shapes.DeleteAssessmentTargetRequest(**_params)
        response = self._boto_client.delete_assessment_target(
            **_request.to_boto_dict()
        )

    def delete_assessment_template(
        self,
        _request: shapes.DeleteAssessmentTemplateRequest = None,
        *,
        assessment_template_arn: str,
    ) -> None:
        """
        Deletes the assessment template that is specified by the ARN of the assessment
        template.
        """
        if _request is None:
            _params = {}
            if assessment_template_arn is not ShapeBase.NOT_SET:
                _params['assessment_template_arn'] = assessment_template_arn
            _request = shapes.DeleteAssessmentTemplateRequest(**_params)
        response = self._boto_client.delete_assessment_template(
            **_request.to_boto_dict()
        )

    def describe_assessment_runs(
        self,
        _request: shapes.DescribeAssessmentRunsRequest = None,
        *,
        assessment_run_arns: typing.List[str],
    ) -> shapes.DescribeAssessmentRunsResponse:
        """
        Describes the assessment runs that are specified by the ARNs of the assessment
        runs.
        """
        if _request is None:
            _params = {}
            if assessment_run_arns is not ShapeBase.NOT_SET:
                _params['assessment_run_arns'] = assessment_run_arns
            _request = shapes.DescribeAssessmentRunsRequest(**_params)
        response = self._boto_client.describe_assessment_runs(
            **_request.to_boto_dict()
        )

        return shapes.DescribeAssessmentRunsResponse.from_boto_dict(response)

    def describe_assessment_targets(
        self,
        _request: shapes.DescribeAssessmentTargetsRequest = None,
        *,
        assessment_target_arns: typing.List[str],
    ) -> shapes.DescribeAssessmentTargetsResponse:
        """
        Describes the assessment targets that are specified by the ARNs of the
        assessment targets.
        """
        if _request is None:
            _params = {}
            if assessment_target_arns is not ShapeBase.NOT_SET:
                _params['assessment_target_arns'] = assessment_target_arns
            _request = shapes.DescribeAssessmentTargetsRequest(**_params)
        response = self._boto_client.describe_assessment_targets(
            **_request.to_boto_dict()
        )

        return shapes.DescribeAssessmentTargetsResponse.from_boto_dict(response)

    def describe_assessment_templates(
        self,
        _request: shapes.DescribeAssessmentTemplatesRequest = None,
        *,
        assessment_template_arns: typing.List[str],
    ) -> shapes.DescribeAssessmentTemplatesResponse:
        """
        Describes the assessment templates that are specified by the ARNs of the
        assessment templates.
        """
        if _request is None:
            _params = {}
            if assessment_template_arns is not ShapeBase.NOT_SET:
                _params['assessment_template_arns'] = assessment_template_arns
            _request = shapes.DescribeAssessmentTemplatesRequest(**_params)
        response = self._boto_client.describe_assessment_templates(
            **_request.to_boto_dict()
        )

        return shapes.DescribeAssessmentTemplatesResponse.from_boto_dict(
            response
        )

    def describe_cross_account_access_role(
        self,
    ) -> shapes.DescribeCrossAccountAccessRoleResponse:
        """
        Describes the IAM role that enables Amazon Inspector to access your AWS account.
        """
        response = self._boto_client.describe_cross_account_access_role()

        return shapes.DescribeCrossAccountAccessRoleResponse.from_boto_dict(
            response
        )

    def describe_exclusions(
        self,
        _request: shapes.DescribeExclusionsRequest = None,
        *,
        exclusion_arns: typing.List[str],
        locale: shapes.Locale = ShapeBase.NOT_SET,
    ) -> shapes.DescribeExclusionsResponse:
        """
        Describes the exclusions that are specified by the exclusions' ARNs.
        """
        if _request is None:
            _params = {}
            if exclusion_arns is not ShapeBase.NOT_SET:
                _params['exclusion_arns'] = exclusion_arns
            if locale is not ShapeBase.NOT_SET:
                _params['locale'] = locale
            _request = shapes.DescribeExclusionsRequest(**_params)
        response = self._boto_client.describe_exclusions(
            **_request.to_boto_dict()
        )

        return shapes.DescribeExclusionsResponse.from_boto_dict(response)

    def describe_findings(
        self,
        _request: shapes.DescribeFindingsRequest = None,
        *,
        finding_arns: typing.List[str],
        locale: shapes.Locale = ShapeBase.NOT_SET,
    ) -> shapes.DescribeFindingsResponse:
        """
        Describes the findings that are specified by the ARNs of the findings.
        """
        if _request is None:
            _params = {}
            if finding_arns is not ShapeBase.NOT_SET:
                _params['finding_arns'] = finding_arns
            if locale is not ShapeBase.NOT_SET:
                _params['locale'] = locale
            _request = shapes.DescribeFindingsRequest(**_params)
        response = self._boto_client.describe_findings(
            **_request.to_boto_dict()
        )

        return shapes.DescribeFindingsResponse.from_boto_dict(response)

    def describe_resource_groups(
        self,
        _request: shapes.DescribeResourceGroupsRequest = None,
        *,
        resource_group_arns: typing.List[str],
    ) -> shapes.DescribeResourceGroupsResponse:
        """
        Describes the resource groups that are specified by the ARNs of the resource
        groups.
        """
        if _request is None:
            _params = {}
            if resource_group_arns is not ShapeBase.NOT_SET:
                _params['resource_group_arns'] = resource_group_arns
            _request = shapes.DescribeResourceGroupsRequest(**_params)
        response = self._boto_client.describe_resource_groups(
            **_request.to_boto_dict()
        )

        return shapes.DescribeResourceGroupsResponse.from_boto_dict(response)

    def describe_rules_packages(
        self,
        _request: shapes.DescribeRulesPackagesRequest = None,
        *,
        rules_package_arns: typing.List[str],
        locale: shapes.Locale = ShapeBase.NOT_SET,
    ) -> shapes.DescribeRulesPackagesResponse:
        """
        Describes the rules packages that are specified by the ARNs of the rules
        packages.
        """
        if _request is None:
            _params = {}
            if rules_package_arns is not ShapeBase.NOT_SET:
                _params['rules_package_arns'] = rules_package_arns
            if locale is not ShapeBase.NOT_SET:
                _params['locale'] = locale
            _request = shapes.DescribeRulesPackagesRequest(**_params)
        response = self._boto_client.describe_rules_packages(
            **_request.to_boto_dict()
        )

        return shapes.DescribeRulesPackagesResponse.from_boto_dict(response)

    def get_assessment_report(
        self,
        _request: shapes.GetAssessmentReportRequest = None,
        *,
        assessment_run_arn: str,
        report_file_format: shapes.ReportFileFormat,
        report_type: shapes.ReportType,
    ) -> shapes.GetAssessmentReportResponse:
        """
        Produces an assessment report that includes detailed and comprehensive results
        of a specified assessment run.
        """
        if _request is None:
            _params = {}
            if assessment_run_arn is not ShapeBase.NOT_SET:
                _params['assessment_run_arn'] = assessment_run_arn
            if report_file_format is not ShapeBase.NOT_SET:
                _params['report_file_format'] = report_file_format
            if report_type is not ShapeBase.NOT_SET:
                _params['report_type'] = report_type
            _request = shapes.GetAssessmentReportRequest(**_params)
        response = self._boto_client.get_assessment_report(
            **_request.to_boto_dict()
        )

        return shapes.GetAssessmentReportResponse.from_boto_dict(response)

    def get_exclusions_preview(
        self,
        _request: shapes.GetExclusionsPreviewRequest = None,
        *,
        assessment_template_arn: str,
        preview_token: str,
        next_token: str = ShapeBase.NOT_SET,
        max_results: int = ShapeBase.NOT_SET,
        locale: shapes.Locale = ShapeBase.NOT_SET,
    ) -> shapes.GetExclusionsPreviewResponse:
        """
        Retrieves the exclusions preview (a list of ExclusionPreview objects) specified
        by the preview token. You can obtain the preview token by running the
        CreateExclusionsPreview API.
        """
        if _request is None:
            _params = {}
            if assessment_template_arn is not ShapeBase.NOT_SET:
                _params['assessment_template_arn'] = assessment_template_arn
            if preview_token is not ShapeBase.NOT_SET:
                _params['preview_token'] = preview_token
            if next_token is not ShapeBase.NOT_SET:
                _params['next_token'] = next_token
            if max_results is not ShapeBase.NOT_SET:
                _params['max_results'] = max_results
            if locale is not ShapeBase.NOT_SET:
                _params['locale'] = locale
            _request = shapes.GetExclusionsPreviewRequest(**_params)
        response = self._boto_client.get_exclusions_preview(
            **_request.to_boto_dict()
        )

        return shapes.GetExclusionsPreviewResponse.from_boto_dict(response)

    def get_telemetry_metadata(
        self,
        _request: shapes.GetTelemetryMetadataRequest = None,
        *,
        assessment_run_arn: str,
    ) -> shapes.GetTelemetryMetadataResponse:
        """
        Information about the data that is collected for the specified assessment run.
        """
        if _request is None:
            _params = {}
            if assessment_run_arn is not ShapeBase.NOT_SET:
                _params['assessment_run_arn'] = assessment_run_arn
            _request = shapes.GetTelemetryMetadataRequest(**_params)
        response = self._boto_client.get_telemetry_metadata(
            **_request.to_boto_dict()
        )

        return shapes.GetTelemetryMetadataResponse.from_boto_dict(response)

    def list_assessment_run_agents(
        self,
        _request: shapes.ListAssessmentRunAgentsRequest = None,
        *,
        assessment_run_arn: str,
        filter: shapes.AgentFilter = ShapeBase.NOT_SET,
        next_token: str = ShapeBase.NOT_SET,
        max_results: int = ShapeBase.NOT_SET,
    ) -> shapes.ListAssessmentRunAgentsResponse:
        """
        Lists the agents of the assessment runs that are specified by the ARNs of the
        assessment runs.
        """
        if _request is None:
            _params = {}
            if assessment_run_arn is not ShapeBase.NOT_SET:
                _params['assessment_run_arn'] = assessment_run_arn
            if filter is not ShapeBase.NOT_SET:
                _params['filter'] = filter
            if next_token is not ShapeBase.NOT_SET:
                _params['next_token'] = next_token
            if max_results is not ShapeBase.NOT_SET:
                _params['max_results'] = max_results
            _request = shapes.ListAssessmentRunAgentsRequest(**_params)
        paginator = self.get_paginator("list_assessment_run_agents").paginate(
            **_request.to_boto_dict()
        )
        page_generator = (page for page in paginator)
        first_page = next(page_generator)
        result = shapes.ListAssessmentRunAgentsResponse.from_boto_dict(
            first_page
        )
        result._page_iterator = page_generator
        return result

        return shapes.ListAssessmentRunAgentsResponse.from_boto_dict(response)

    def list_assessment_runs(
        self,
        _request: shapes.ListAssessmentRunsRequest = None,
        *,
        assessment_template_arns: typing.List[str] = ShapeBase.NOT_SET,
        filter: shapes.AssessmentRunFilter = ShapeBase.NOT_SET,
        next_token: str = ShapeBase.NOT_SET,
        max_results: int = ShapeBase.NOT_SET,
    ) -> shapes.ListAssessmentRunsResponse:
        """
        Lists the assessment runs that correspond to the assessment templates that are
        specified by the ARNs of the assessment templates.
        """
        if _request is None:
            _params = {}
            if assessment_template_arns is not ShapeBase.NOT_SET:
                _params['assessment_template_arns'] = assessment_template_arns
            if filter is not ShapeBase.NOT_SET:
                _params['filter'] = filter
            if next_token is not ShapeBase.NOT_SET:
                _params['next_token'] = next_token
            if max_results is not ShapeBase.NOT_SET:
                _params['max_results'] = max_results
            _request = shapes.ListAssessmentRunsRequest(**_params)
        paginator = self.get_paginator("list_assessment_runs").paginate(
            **_request.to_boto_dict()
        )
        page_generator = (page for page in paginator)
        first_page = next(page_generator)
        result = shapes.ListAssessmentRunsResponse.from_boto_dict(first_page)
        result._page_iterator = page_generator
        return result

        return shapes.ListAssessmentRunsResponse.from_boto_dict(response)

    def list_assessment_targets(
        self,
        _request: shapes.ListAssessmentTargetsRequest = None,
        *,
        filter: shapes.AssessmentTargetFilter = ShapeBase.NOT_SET,
        next_token: str = ShapeBase.NOT_SET,
        max_results: int = ShapeBase.NOT_SET,
    ) -> shapes.ListAssessmentTargetsResponse:
        """
        Lists the ARNs of the assessment targets within this AWS account. For more
        information about assessment targets, see [Amazon Inspector Assessment
        Targets](http://docs.aws.amazon.com/inspector/latest/userguide/inspector_applications.html).
        """
        if _request is None:
            _params = {}
            if filter is not ShapeBase.NOT_SET:
                _params['filter'] = filter
            if next_token is not ShapeBase.NOT_SET:
                _params['next_token'] = next_token
            if max_results is not ShapeBase.NOT_SET:
                _params['max_results'] = max_results
            _request = shapes.ListAssessmentTargetsRequest(**_params)
        paginator = self.get_paginator("list_assessment_targets").paginate(
            **_request.to_boto_dict()
        )
        page_generator = (page for page in paginator)
        first_page = next(page_generator)
        result = shapes.ListAssessmentTargetsResponse.from_boto_dict(first_page)
        result._page_iterator = page_generator
        return result

        return shapes.ListAssessmentTargetsResponse.from_boto_dict(response)

    def list_assessment_templates(
        self,
        _request: shapes.ListAssessmentTemplatesRequest = None,
        *,
        assessment_target_arns: typing.List[str] = ShapeBase.NOT_SET,
        filter: shapes.AssessmentTemplateFilter = ShapeBase.NOT_SET,
        next_token: str = ShapeBase.NOT_SET,
        max_results: int = ShapeBase.NOT_SET,
    ) -> shapes.ListAssessmentTemplatesResponse:
        """
        Lists the assessment templates that correspond to the assessment targets that
        are specified by the ARNs of the assessment targets.
        """
        if _request is None:
            _params = {}
            if assessment_target_arns is not ShapeBase.NOT_SET:
                _params['assessment_target_arns'] = assessment_target_arns
            if filter is not ShapeBase.NOT_SET:
                _params['filter'] = filter
            if next_token is not ShapeBase.NOT_SET:
                _params['next_token'] = next_token
            if max_results is not ShapeBase.NOT_SET:
                _params['max_results'] = max_results
            _request = shapes.ListAssessmentTemplatesRequest(**_params)
        paginator = self.get_paginator("list_assessment_templates").paginate(
            **_request.to_boto_dict()
        )
        page_generator = (page for page in paginator)
        first_page = next(page_generator)
        result = shapes.ListAssessmentTemplatesResponse.from_boto_dict(
            first_page
        )
        result._page_iterator = page_generator
        return result

        return shapes.ListAssessmentTemplatesResponse.from_boto_dict(response)

    def list_event_subscriptions(
        self,
        _request: shapes.ListEventSubscriptionsRequest = None,
        *,
        resource_arn: str = ShapeBase.NOT_SET,
        next_token: str = ShapeBase.NOT_SET,
        max_results: int = ShapeBase.NOT_SET,
    ) -> shapes.ListEventSubscriptionsResponse:
        """
        Lists all the event subscriptions for the assessment template that is specified
        by the ARN of the assessment template. For more information, see
        SubscribeToEvent and UnsubscribeFromEvent.
        """
        if _request is None:
            _params = {}
            if resource_arn is not ShapeBase.NOT_SET:
                _params['resource_arn'] = resource_arn
            if next_token is not ShapeBase.NOT_SET:
                _params['next_token'] = next_token
            if max_results is not ShapeBase.NOT_SET:
                _params['max_results'] = max_results
            _request = shapes.ListEventSubscriptionsRequest(**_params)
        paginator = self.get_paginator("list_event_subscriptions").paginate(
            **_request.to_boto_dict()
        )
        page_generator = (page for page in paginator)
        first_page = next(page_generator)
        result = shapes.ListEventSubscriptionsResponse.from_boto_dict(
            first_page
        )
        result._page_iterator = page_generator
        return result

        return shapes.ListEventSubscriptionsResponse.from_boto_dict(response)

    def list_exclusions(
        self,
        _request: shapes.ListExclusionsRequest = None,
        *,
        assessment_run_arn: str,
        next_token: str = ShapeBase.NOT_SET,
        max_results: int = ShapeBase.NOT_SET,
    ) -> shapes.ListExclusionsResponse:
        """
        List exclusions that are generated by the assessment run.
        """
        if _request is None:
            _params = {}
            if assessment_run_arn is not ShapeBase.NOT_SET:
                _params['assessment_run_arn'] = assessment_run_arn
            if next_token is not ShapeBase.NOT_SET:
                _params['next_token'] = next_token
            if max_results is not ShapeBase.NOT_SET:
                _params['max_results'] = max_results
            _request = shapes.ListExclusionsRequest(**_params)
        response = self._boto_client.list_exclusions(**_request.to_boto_dict())

        return shapes.ListExclusionsResponse.from_boto_dict(response)

    def list_findings(
        self,
        _request: shapes.ListFindingsRequest = None,
        *,
        assessment_run_arns: typing.List[str] = ShapeBase.NOT_SET,
        filter: shapes.FindingFilter = ShapeBase.NOT_SET,
        next_token: str = ShapeBase.NOT_SET,
        max_results: int = ShapeBase.NOT_SET,
    ) -> shapes.ListFindingsResponse:
        """
        Lists findings that are generated by the assessment runs that are specified by
        the ARNs of the assessment runs.
        """
        if _request is None:
            _params = {}
            if assessment_run_arns is not ShapeBase.NOT_SET:
                _params['assessment_run_arns'] = assessment_run_arns
            if filter is not ShapeBase.NOT_SET:
                _params['filter'] = filter
            if next_token is not ShapeBase.NOT_SET:
                _params['next_token'] = next_token
            if max_results is not ShapeBase.NOT_SET:
                _params['max_results'] = max_results
            _request = shapes.ListFindingsRequest(**_params)
        paginator = self.get_paginator("list_findings").paginate(
            **_request.to_boto_dict()
        )
        page_generator = (page for page in paginator)
        first_page = next(page_generator)
        result = shapes.ListFindingsResponse.from_boto_dict(first_page)
        result._page_iterator = page_generator
        return result

        return shapes.ListFindingsResponse.from_boto_dict(response)

    def list_rules_packages(
        self,
        _request: shapes.ListRulesPackagesRequest = None,
        *,
        next_token: str = ShapeBase.NOT_SET,
        max_results: int = ShapeBase.NOT_SET,
    ) -> shapes.ListRulesPackagesResponse:
        """
        Lists all available Amazon Inspector rules packages.
        """
        if _request is None:
            _params = {}
            if next_token is not ShapeBase.NOT_SET:
                _params['next_token'] = next_token
            if max_results is not ShapeBase.NOT_SET:
                _params['max_results'] = max_results
            _request = shapes.ListRulesPackagesRequest(**_params)
        paginator = self.get_paginator("list_rules_packages").paginate(
            **_request.to_boto_dict()
        )
        page_generator = (page for page in paginator)
        first_page = next(page_generator)
        result = shapes.ListRulesPackagesResponse.from_boto_dict(first_page)
        result._page_iterator = page_generator
        return result

        return shapes.ListRulesPackagesResponse.from_boto_dict(response)

    def list_tags_for_resource(
        self,
        _request: shapes.ListTagsForResourceRequest = None,
        *,
        resource_arn: str,
    ) -> shapes.ListTagsForResourceResponse:
        """
        Lists all tags associated with an assessment template.
        """
        if _request is None:
            _params = {}
            if resource_arn is not ShapeBase.NOT_SET:
                _params['resource_arn'] = resource_arn
            _request = shapes.ListTagsForResourceRequest(**_params)
        response = self._boto_client.list_tags_for_resource(
            **_request.to_boto_dict()
        )

        return shapes.ListTagsForResourceResponse.from_boto_dict(response)

    def preview_agents(
        self,
        _request: shapes.PreviewAgentsRequest = None,
        *,
        preview_agents_arn: str,
        next_token: str = ShapeBase.NOT_SET,
        max_results: int = ShapeBase.NOT_SET,
    ) -> shapes.PreviewAgentsResponse:
        """
        Previews the agents installed on the EC2 instances that are part of the
        specified assessment target.
        """
        if _request is None:
            _params = {}
            if preview_agents_arn is not ShapeBase.NOT_SET:
                _params['preview_agents_arn'] = preview_agents_arn
            if next_token is not ShapeBase.NOT_SET:
                _params['next_token'] = next_token
            if max_results is not ShapeBase.NOT_SET:
                _params['max_results'] = max_results
            _request = shapes.PreviewAgentsRequest(**_params)
        paginator = self.get_paginator("preview_agents").paginate(
            **_request.to_boto_dict()
        )
        page_generator = (page for page in paginator)
        first_page = next(page_generator)
        result = shapes.PreviewAgentsResponse.from_boto_dict(first_page)
        result._page_iterator = page_generator
        return result

        return shapes.PreviewAgentsResponse.from_boto_dict(response)

    def register_cross_account_access_role(
        self,
        _request: shapes.RegisterCrossAccountAccessRoleRequest = None,
        *,
        role_arn: str,
    ) -> None:
        """
        Registers the IAM role that grants Amazon Inspector access to AWS Services
        needed to perform security assessments.
        """
        if _request is None:
            _params = {}
            if role_arn is not ShapeBase.NOT_SET:
                _params['role_arn'] = role_arn
            _request = shapes.RegisterCrossAccountAccessRoleRequest(**_params)
        response = self._boto_client.register_cross_account_access_role(
            **_request.to_boto_dict()
        )

    def remove_attributes_from_findings(
        self,
        _request: shapes.RemoveAttributesFromFindingsRequest = None,
        *,
        finding_arns: typing.List[str],
        attribute_keys: typing.List[str],
    ) -> shapes.RemoveAttributesFromFindingsResponse:
        """
        Removes entire attributes (key and value pairs) from the findings that are
        specified by the ARNs of the findings where an attribute with the specified key
        exists.
        """
        if _request is None:
            _params = {}
            if finding_arns is not ShapeBase.NOT_SET:
                _params['finding_arns'] = finding_arns
            if attribute_keys is not ShapeBase.NOT_SET:
                _params['attribute_keys'] = attribute_keys
            _request = shapes.RemoveAttributesFromFindingsRequest(**_params)
        response = self._boto_client.remove_attributes_from_findings(
            **_request.to_boto_dict()
        )

        return shapes.RemoveAttributesFromFindingsResponse.from_boto_dict(
            response
        )

    def set_tags_for_resource(
        self,
        _request: shapes.SetTagsForResourceRequest = None,
        *,
        resource_arn: str,
        tags: typing.List[shapes.Tag] = ShapeBase.NOT_SET,
    ) -> None:
        """
        Sets tags (key and value pairs) to the assessment template that is specified by
        the ARN of the assessment template.
        """
        if _request is None:
            _params = {}
            if resource_arn is not ShapeBase.NOT_SET:
                _params['resource_arn'] = resource_arn
            if tags is not ShapeBase.NOT_SET:
                _params['tags'] = tags
            _request = shapes.SetTagsForResourceRequest(**_params)
        response = self._boto_client.set_tags_for_resource(
            **_request.to_boto_dict()
        )

    def start_assessment_run(
        self,
        _request: shapes.StartAssessmentRunRequest = None,
        *,
        assessment_template_arn: str,
        assessment_run_name: str = ShapeBase.NOT_SET,
    ) -> shapes.StartAssessmentRunResponse:
        """
        Starts the assessment run specified by the ARN of the assessment template. For
        this API to function properly, you must not exceed the limit of running up to
        500 concurrent agents per AWS account.
        """
        if _request is None:
            _params = {}
            if assessment_template_arn is not ShapeBase.NOT_SET:
                _params['assessment_template_arn'] = assessment_template_arn
            if assessment_run_name is not ShapeBase.NOT_SET:
                _params['assessment_run_name'] = assessment_run_name
            _request = shapes.StartAssessmentRunRequest(**_params)
        response = self._boto_client.start_assessment_run(
            **_request.to_boto_dict()
        )

        return shapes.StartAssessmentRunResponse.from_boto_dict(response)

    def stop_assessment_run(
        self,
        _request: shapes.StopAssessmentRunRequest = None,
        *,
        assessment_run_arn: str,
        stop_action: shapes.StopAction = ShapeBase.NOT_SET,
    ) -> None:
        """
        Stops the assessment run that is specified by the ARN of the assessment run.
        """
        if _request is None:
            _params = {}
            if assessment_run_arn is not ShapeBase.NOT_SET:
                _params['assessment_run_arn'] = assessment_run_arn
            if stop_action is not ShapeBase.NOT_SET:
                _params['stop_action'] = stop_action
            _request = shapes.StopAssessmentRunRequest(**_params)
        response = self._boto_client.stop_assessment_run(
            **_request.to_boto_dict()
        )

    def subscribe_to_event(
        self,
        _request: shapes.SubscribeToEventRequest = None,
        *,
        resource_arn: str,
        event: shapes.InspectorEvent,
        topic_arn: str,
    ) -> None:
        """
        Enables the process of sending Amazon Simple Notification Service (SNS)
        notifications about a specified event to a specified SNS topic.
        """
        if _request is None:
            _params = {}
            if resource_arn is not ShapeBase.NOT_SET:
                _params['resource_arn'] = resource_arn
            if event is not ShapeBase.NOT_SET:
                _params['event'] = event
            if topic_arn is not ShapeBase.NOT_SET:
                _params['topic_arn'] = topic_arn
            _request = shapes.SubscribeToEventRequest(**_params)
        response = self._boto_client.subscribe_to_event(
            **_request.to_boto_dict()
        )

    def unsubscribe_from_event(
        self,
        _request: shapes.UnsubscribeFromEventRequest = None,
        *,
        resource_arn: str,
        event: shapes.InspectorEvent,
        topic_arn: str,
    ) -> None:
        """
        Disables the process of sending Amazon Simple Notification Service (SNS)
        notifications about a specified event to a specified SNS topic.
        """
        if _request is None:
            _params = {}
            if resource_arn is not ShapeBase.NOT_SET:
                _params['resource_arn'] = resource_arn
            if event is not ShapeBase.NOT_SET:
                _params['event'] = event
            if topic_arn is not ShapeBase.NOT_SET:
                _params['topic_arn'] = topic_arn
            _request = shapes.UnsubscribeFromEventRequest(**_params)
        response = self._boto_client.unsubscribe_from_event(
            **_request.to_boto_dict()
        )

    def update_assessment_target(
        self,
        _request: shapes.UpdateAssessmentTargetRequest = None,
        *,
        assessment_target_arn: str,
        assessment_target_name: str,
        resource_group_arn: str = ShapeBase.NOT_SET,
    ) -> None:
        """
        Updates the assessment target that is specified by the ARN of the assessment
        target.

        If resourceGroupArn is not specified, all EC2 instances in the current AWS
        account and region are included in the assessment target.
        """
        if _request is None:
            _params = {}
            if assessment_target_arn is not ShapeBase.NOT_SET:
                _params['assessment_target_arn'] = assessment_target_arn
            if assessment_target_name is not ShapeBase.NOT_SET:
                _params['assessment_target_name'] = assessment_target_name
            if resource_group_arn is not ShapeBase.NOT_SET:
                _params['resource_group_arn'] = resource_group_arn
            _request = shapes.UpdateAssessmentTargetRequest(**_params)
        response = self._boto_client.update_assessment_target(
            **_request.to_boto_dict()
        )
