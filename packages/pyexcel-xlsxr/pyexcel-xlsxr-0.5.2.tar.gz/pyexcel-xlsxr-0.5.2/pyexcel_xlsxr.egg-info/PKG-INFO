Metadata-Version: 1.1
Name: pyexcel-xlsxr
Version: 0.5.2
Summary: Read xlsx file using partial xml
Home-page: https://github.com/pyexcel/pyexcel-xlsxr
Author: C.W.
Author-email: wangc_2011@hotmail.com
License: New BSD
Download-URL: https://github.com/pyexcel/pyexcel-xlsxr/archive/0.5.2.tar.gz
Description-Content-Type: UNKNOWN
Description: ================================================================================
        pyexcel-xlsxr - Let you focus on data, instead of xlsx format
        ================================================================================
        
        .. image:: https://raw.githubusercontent.com/pyexcel/pyexcel.github.io/master/images/patreon.png
           :target: https://www.patreon.com/pyexcel
        
        .. image:: https://api.bountysource.com/badge/team?team_id=288537
           :target: https://salt.bountysource.com/teams/chfw-pyexcel
        
        .. image:: https://travis-ci.org/pyexcel/pyexcel-xlsxr.svg?branch=master
           :target: http://travis-ci.org/pyexcel/pyexcel-xlsxr
        
        .. image:: https://codecov.io/gh/pyexcel/pyexcel-xlsxr/branch/master/graph/badge.svg
           :target: https://codecov.io/gh/pyexcel/pyexcel-xlsxr
        
        .. image:: https://img.shields.io/gitter/room/gitterHQ/gitter.svg
           :target: https://gitter.im/pyexcel/Lobby
        
        
        **pyexcel-xlsxr** is a specialized xlsx reader using lxml. It does partial reading, meaning
        it wont load all content into memory.
        
        
        lxml installation
        =================
        
        This library depends on lxml. Because its availablity, the use of this library is restricted.
        
        for PyPy, lxml == 3.4.4 are tested to work well. But lxml above 3.4.4 is difficult to get installed.
        
        for Python 3.7, please use lxml==4.1.1.
        
        Otherwise, this library works OK with lxml 3.4.4 or above.
        
        
        
        Known constraints
        ==================
        
        Fonts, colors and charts are not supported.
        
        Installation
        ================================================================================
        
        
        You can install pyexcel-xlsxr via pip:
        
        .. code-block:: bash
        
            $ pip install pyexcel-xlsxr
        
        
        or clone it and install it:
        
        .. code-block:: bash
        
            $ git clone https://github.com/pyexcel/pyexcel-xlsxr.git
            $ cd pyexcel-xlsxr
            $ python setup.py install
        
        Support the project
        ================================================================================
        
        If your company has embedded pyexcel and its components into a revenue generating
        product, please support me on `patreon <https://www.patreon.com/bePatron?u=5537627>`_
        or `bounty source <https://salt.bountysource.com/teams/chfw-pyexcel>`_ to maintain
        the project and develop it further.
        
        If you are an individual, you are welcome to support me too and for however long
        you feel like. As my backer, you will receive
        `early access to pyexcel related contents <https://www.patreon.com/pyexcel/posts>`_.
        
        And your issues will get prioritized if you would like to become my patreon as `pyexcel pro user`.
        
        With your financial support, I will be able to invest
        a little bit more time in coding, documentation and writing interesting posts.
        
        
        Usage
        ================================================================================
        
        As a standalone library
        --------------------------------------------------------------------------------
        
        Read from an xlsx file
        ********************************************************************************
        
        Here's the sample code:
        
        .. code-block:: python
        
            >>> from pyexcel_xlsxr import get_data
            >>> data = get_data("your_file.xlsx")
            >>> import json
            >>> print(json.dumps(data))
            {"Sheet 1": [[1, 2, 3], [4, 5, 6]], "Sheet 2": [["row 1", "row 2", "row 3"]]}
        
        
        
        Read from an xlsx from memory
        ********************************************************************************
        
        Continue from previous example:
        
        .. code-block:: python
        
            >>> # This is just an illustration
            >>> # In reality, you might deal with xlsx file upload
            >>> # where you will read from requests.FILES['YOUR_XLSX_FILE']
            >>> data = get_data(io)
            >>> print(json.dumps(data))
            {"Sheet 1": [[1, 2, 3], [4, 5, 6]], "Sheet 2": [[7, 8, 9], [10, 11, 12]]}
        
        
        Pagination feature
        ********************************************************************************
        
        
        
        Let's assume the following file is a huge xlsx file:
        
        .. code-block:: python
        
           >>> huge_data = [
           ...     [1, 21, 31],
           ...     [2, 22, 32],
           ...     [3, 23, 33],
           ...     [4, 24, 34],
           ...     [5, 25, 35],
           ...     [6, 26, 36]
           ... ]
           >>> sheetx = {
           ...     "huge": huge_data
           ... }
           >>> save_data("huge_file.xlsx", sheetx)
        
        And let's pretend to read partial data:
        
        .. code-block:: python
        
           >>> partial_data = get_data("huge_file.xlsx", start_row=2, row_limit=3)
           >>> print(json.dumps(partial_data))
           {"huge": [[3, 23, 33], [4, 24, 34], [5, 25, 35]]}
        
        And you could as well do the same for columns:
        
        .. code-block:: python
        
           >>> partial_data = get_data("huge_file.xlsx", start_column=1, column_limit=2)
           >>> print(json.dumps(partial_data))
           {"huge": [[21, 31], [22, 32], [23, 33], [24, 34], [25, 35], [26, 36]]}
        
        Obvious, you could do both at the same time:
        
        .. code-block:: python
        
           >>> partial_data = get_data("huge_file.xlsx",
           ...     start_row=2, row_limit=3,
           ...     start_column=1, column_limit=2)
           >>> print(json.dumps(partial_data))
           {"huge": [[23, 33], [24, 34], [25, 35]]}
        
        As a pyexcel plugin
        --------------------------------------------------------------------------------
        
        No longer, explicit import is needed since pyexcel version 0.2.2. Instead,
        this library is auto-loaded. So if you want to read data in xlsx format,
        installing it is enough.
        
        
        Reading from an xlsx file
        ********************************************************************************
        
        Here is the sample code:
        
        .. code-block:: python
        
            >>> import pyexcel as pe
            >>> sheet = pe.get_book(file_name="your_file.xlsx")
            >>> sheet
            Sheet 1:
            +---+---+---+
            | 1 | 2 | 3 |
            +---+---+---+
            | 4 | 5 | 6 |
            +---+---+---+
            Sheet 2:
            +-------+-------+-------+
            | row 1 | row 2 | row 3 |
            +-------+-------+-------+
        
        
        
        Reading from a IO instance
        ********************************************************************************
        
        You got to wrap the binary content with stream to get xlsx working:
        
        .. code-block:: python
        
            >>> # This is just an illustration
            >>> # In reality, you might deal with xlsx file upload
            >>> # where you will read from requests.FILES['YOUR_XLSX_FILE']
            >>> xlsxfile = "another_file.xlsx"
            >>> with open(xlsxfile, "rb") as f:
            ...     content = f.read()
            ...     r = pe.get_book(file_type="xlsx", file_content=content)
            ...     print(r)
            ...
            Sheet 1:
            +---+---+---+
            | 1 | 2 | 3 |
            +---+---+---+
            | 4 | 5 | 6 |
            +---+---+---+
            Sheet 2:
            +-------+-------+-------+
            | row 1 | row 2 | row 3 |
            +-------+-------+-------+
        
        
        
        
        License
        ================================================================================
        
        New BSD License
        
        Developer guide
        ==================
        
        Development steps for code changes
        
        #. git clone https://github.com/pyexcel/pyexcel-xlsxr.git
        #. cd pyexcel-xlsxr
        
        Upgrade your setup tools and pip. They are needed for development and testing only:
        
        #. pip install --upgrade setuptools pip
        
        Then install relevant development requirements:
        
        #. pip install -r rnd_requirements.txt # if such a file exists
        #. pip install -r requirements.txt
        #. pip install -r tests/requirements.txt
        
        Once you have finished your changes, please provide test case(s), relevant documentation
        and update CHANGELOG.rst.
        
        .. note::
        
            As to rnd_requirements.txt, usually, it is created when a dependent
            library is not released. Once the dependecy is installed
            (will be released), the future
            version of the dependency in the requirements.txt will be valid.
        
        
        How to test your contribution
        ------------------------------
        
        Although `nose` and `doctest` are both used in code testing, it is adviable that unit tests are put in tests. `doctest` is incorporated only to make sure the code examples in documentation remain valid across different development releases.
        
        On Linux/Unix systems, please launch your tests like this::
        
            $ make
        
        On Windows systems, please issue this command::
        
            > test.bat
        
        How to update test environment and update documentation
        ---------------------------------------------------------
        
        Additional steps are required:
        
        #. pip install moban
        #. git clone https://github.com/moremoban/setupmobans.git # generic setup
        #. git clone https://github.com/pyexcel/pyexcel-commons.git commons
        #. make your changes in `.moban.d` directory, then issue command `moban`
        
        What is pyexcel-commons
        ---------------------------------
        
        Many information that are shared across pyexcel projects, such as: this developer guide, license info, etc. are stored in `pyexcel-commons` project.
        
        What is .moban.d
        ---------------------------------
        
        `.moban.d` stores the specific meta data for the library.
        
        Acceptance criteria
        -------------------
        
        #. Has Test cases written
        #. Has all code lines tested
        #. Passes all Travis CI builds
        #. Has fair amount of documentation if your change is complex
        #. Please update CHANGELOG.rst
        #. Please add yourself to CONTRIBUTORS.rst
        #. Agree on NEW BSD License for your contribution
        
        
        
        Change log
        ================================================================================
        
        0.5.2 - 15.09.2018
        --------------------------------------------------------------------------------
        
        Updated
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
        
        #. Fix python 3 compactibility
        
        0.5.1 - 14.07.2018
        --------------------------------------------------------------------------------
        
        Updated
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
        
        #. `#1 <https://github.com/pyexcel/pyexcel-xlsxr/issues/1>`_: fix xml parsing
           problem when the microsoft spreadsheetml 2009 ac name space 'x14ac' made lxml
           an idiot
        
        0.5.0 - 24.11.2017
        --------------------------------------------------------------------------------
        
        Added
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
        
        #. Initial release. In order align it with pyexcel 0.5.0 release, its version
           start from 0.5.0
        
        
Keywords: python
Platform: UNKNOWN
Classifier: Topic :: Software Development :: Libraries
Classifier: Programming Language :: Python
Classifier: Intended Audience :: Developers
Classifier: Programming Language :: Python :: 2.6
Classifier: Programming Language :: Python :: 2.7
Classifier: Programming Language :: Python :: 3.3
Classifier: Programming Language :: Python :: 3.4
Classifier: Programming Language :: Python :: 3.5
Classifier: Programming Language :: Python :: 3.6
