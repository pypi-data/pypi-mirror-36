{"version":3,"sources":["webpack:///./src/pages/ide/microide.py.js"],"names":["Object","defineProperty","__webpack_exports__","value","__webpack_require__","d","microide_codes"],"mappings":"oDAAAA,OAAAC,eAAAC,EAAA,cAAAC,OAAA,IAAAC,EAAAC,EAAAH,EAAA,mCAAAI,IAAA,IAAIA","file":"static/js/3.b41eb52acbc0b79aec97.js","sourcesContent":["var microide_codes=`import os\nimport json\nimport gc\n\n\ndef tree(path='/'):\n    root = dict(name=path, children=[])\n    index = 0\n    dirs = os.listdir(path)\n    for i in dirs:\n        try:\n            root['children'].append(\n                dict(name=i, children=[dict(name=j) for j in os.listdir(i)]))\n        except:\n            root['children'].append(dict(name=i))\n\n    for i in root['children']:\n        if not i.get('children', False):\n            i['index'] = index\n            index += 1\n        else:\n            for j in i['children']:\n                j['index'] = index\n                index += 1\n    print(json.dumps(root))\n    gc.collect()\n\n\ndef get_code(filename):\n    gc.collect()\n    with open(filename, 'r') as f:\n        print(f.read())\n\n\ndef update_code(filename, content):\n    gc.collect()\n    with open(filename, 'w') as f:\n        print(f.write(content))\n\n\ndef create_folder(folder):\n    try:\n        os.mkdir(folder)\n    except:\n        pass\n    tree()\n\n\ndef new_file(filename):\n    update_code(filename, '')\n    tree()\n\n\ndef del_folder(folder):\n    for i in os.listdir(folder):\n        os.remove(folder + '/' + i)\n    os.rmdir(folder)\n    tree()\n\n\ndef del_file(filename):\n    os.remove(filename)\n    tree()\n\n\ndef rainbow(output, color=None):\n    \"\"\"\n    字符串,彩色输出\n    \"\"\"\n    if color:\n        if color == 'green':\n            return '\\\\033[1;32m%s\\\\033[0m' % output\n        if color == 'red':\n            return '\\\\033[1;31m%s\\\\033[0m' % output\n        if color == 'blue':\n            return '\\\\033[1;34m%s\\\\033[0m' % output\n    else:\n        return output\n\n\ndef mem_analyze(func):\n    \"\"\"\n    装饰器:内存分析\n    \"\"\"\n\n    def wrapper(*args, **kwargs):\n        memory_alloc = 'memory alloced: %s kb' % str(gc.mem_alloc() / 1024)\n        memory_free = 'memory free: %s kb' % str(gc.mem_free() / 1024)\n        gc.collect()\n        memory_after_collect = 'after collect: %s kb available' % str(\n            gc.mem_free() / 1024)\n        print(rainbow(memory_alloc, color='red'))\n        print(rainbow(memory_free, color='green'))\n        print(rainbow(memory_after_collect, color='blue'))\n        func(*args, **kwargs)\n        memory_after_func_excute = 'after %s excuted: %s kb available' % (\n            func.__name__, str(gc.mem_free() / 1024))\n        print(rainbow(memory_after_func_excute, color='red'))\n\n    return wrapper\n`;\nexport {\n  microide_codes\n}\n\n\n// WEBPACK FOOTER //\n// ./src/pages/ide/microide.py.js"],"sourceRoot":""}