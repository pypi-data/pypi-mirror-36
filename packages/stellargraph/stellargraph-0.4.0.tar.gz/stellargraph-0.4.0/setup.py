# -*- coding: utf-8 -*-
from distutils.core import setup

packages = \
['stellargraph',
 'stellargraph.core',
 'stellargraph.data',
 'stellargraph.layer',
 'stellargraph.mapper']

package_data = \
{'': ['*']}

install_requires = \
['Keras>=2.1,<3.0',
 'gensim>=3.4,<4.0',
 'matplotlib>=2.2,<3.0',
 'networkx>=2.1,<3.0',
 'numba>=0.39,<0.40',
 'numpy>=1.14,<2.0',
 'pandas>=0.20,<0.21',
 'scikit-learn>=0.18,<0.19',
 'tensorflow>=1.8,<2.0']

setup_kwargs = {
    'name': 'stellargraph',
    'version': '0.4.0',
    'description': 'Python library for machine learning on graphs',
    'long_description': '![StellarGraph Machine Learning library logo](https://raw.githubusercontent.com/stellargraph/stellargraph/develop/stellar-graph-banner.png)\n\n# Stellar Graph Machine Learning Library\n\n<p align="center">\n  <a href="https://github.com/ambv/black" alt="Code style">\n    <img src="https://img.shields.io/badge/code%20style-black-000000.svg" /></a>\n  <a href="http://stellargraph.readthedocs.io/" alt="Docs">\n    <img src="https://readthedocs.org/projects/stellargraph/badge/?version=latest" /></a>\n  <a href="https://pypi.org/project/stellargraph/" alt="PyPI">\n    <img src="https://img.shields.io/pypi/v/stellargraph.svg" /></a>\n  <a href="https://buildkite.com/stellar/stellar-ml?branch=master/" alt="Build status: master">\n    <img src="https://img.shields.io/buildkite/34d537a018c6bf27cf154aa5bcc287b2e170d6e3391cd40c64/master.svg?label=branch:+master"/></a>\n    <a href="https://buildkite.com/stellar/stellar-ml?branch=develop/" alt="Build status: develop">\n      <img src="https://img.shields.io/buildkite/34d537a018c6bf27cf154aa5bcc287b2e170d6e3391cd40c64/develop.svg?label=branch:+develop"/></a>\n</p>\n\n<!--\n![Buildkite]()\nBranch: **master** [![Build status](https://badge.buildkite.com/34d537a018c6bf27cf154aa5bcc287b2e170d6e3391cd40c64.svg)](https://buildkite.com/stellar/stellar-ml?branch=master)\n\nBranch: **devel** [![Build status](https://badge.buildkite.com/34d537a018c6bf27cf154aa5bcc287b2e170d6e3391cd40c64.svg)](https://buildkite.com/stellar/stellar-ml?branch=develop)\n-->\n\n## Introduction\n**StellarGraph** is a Python library for machine learning on graph-structured (or equivalently, network-structured) data.\n\nGraph-structured data represent entities, e.g., people, as nodes (or equivalently, vertices),\nand relationships between entities, e.g., friendship, as links (or\nequivalently, edges). Nodes and links may have associated attributes such as age, income, time when\na friendship was established, etc. StellarGraph supports analysis of both homogeneous networks (with nodes and links of one type)\nand heterogeneous networks (with more than one type of nodes and/or links).\n\nThe StellarGraph library implements several state-of-the-art algorithms for applying machine learning methods to\ndiscover patterns and answer questions using graph-structured data.\n\nThe StellarGraph library can be used to solve tasks using graph-structured data, such as:\n- Representation learning for nodes and edges, to be used for visualisation and various downstream machine learning tasks;\n- Classification and attribute inference of nodes or edges;\n- Link prediction.\n\nWe provide [examples](https://github.com/stellargraph/stellargraph/tree/master/demos/) of using `StellarGraph` to solve\nsuch tasks using several real-world datasets.\n\n\n## Guiding Principles\n\nStellarGraph uses the [Keras](https://keras.io/) library, and adheres to the same guiding principles\nas Keras: user friendliness, modularity, and easy extendability. Modules and layers\nof StellarGraph library are designed so that they can be used together with\nstandard Keras layers and modules, if required. This enables flexibility in using existing,\nor creating new models and workflows for machine learning on graphs.\n\n## Getting Started\n\nTo get started with StellarGraph you\'ll need data structured as homogeneous or heterogeneous graph, including\nattributes for the entities represented as graph nodes.\n[NetworkX](https://networkx.github.io/) is used to represent the graph and [Pandas](https://pandas.pydata.org/)\nor [Numpy](http://www.numpy.org/) are used to store node attributes.\n\nDetailed and narrated [examples](https://github.com/stellargraph/stellargraph/tree/master/demos/) of various machine learning workflows on network data, supported by StellarGraph, from data ingestion into graph structure to inference, are given in the `demos` directory of this repository.\n\n<!--\nStellarGraph supports different machine learning use-cases, including:\n\n* Representation learning for nodes\n  - See the demos in folder `demos/embeddings` for examples of unsupervised node representation learning using the\n  random walk-based methods Node2Vec [1], and Metapath2Vec [2].\n\n* Node classification and regression\n  - See the demo in folder `demos/node-classification-graphsage` for an example of how to predict attributes of nodes\n  using the GraphSAGE [3] algorithm given node features and training labels.\n  - See the demo in folder `demos/node-classification-node2vec` for an example of how to predict attributes of nodes\n  using the Node2Vec [1] algorithm for nodes without features, unsupervised node representation learning, and\n  supervised classifier training for the downstream task.\n  - See the demo in folder `demos/node-classification-hinsage` for examples of how to predict attributes of nodes\n  using the HinSAGE algorithm for given node features and training labels.\n\n* Link prediction\n  - See the demo in folder `demos/link-prediction-random-walks` for an example of how to predict the existence of links between nodes\n  without node features, using the Node2Vec [1] and Metapath2Vec [2] algorithms.\n  - See the demo in folder `demos/link-prediction-graphsage` for an example of how to predict the existence of links between\n  nodes with node features using the GraphSAGE [3] algorithm.\n\n* Recommender systems\n  - See the demo in folder `demos/link-prediction-hinsage` for an example of how to predict\n  movie ratings between users and movies using a Heterogeneous generalisation of GraphSAGE model, which we call HinSAGE.\n\n-->\n\n\n## Installation\nStellarGraph is a Python 3 library and requires Python version 3.6 to function (note that the library\nuses Keras with the Tensorflow backend, and thus does not currently work in python 3.7). The required Python version\ncan be downloaded and installed from [python.org](http://python.org/). Alternatively, use the Anaconda Python\nenvironment, available from [anaconda.com](https://www.anaconda.com/download/).\n\n<!--\nThe StellarGraph library requires [Keras](https://keras.io/), so you\'ll need to install Keras and a selected backend (we recommend tensorflow, which is used to test StellarGraph).  Other requirements are the NetworkX library (to create and modify graphs and networks), numpy (to manipulate numeric arrays), pandas (to manipulate tabular data), and gensim (to use the Word2Vec model), scikit-learn (to prepare datasets for machine learning), and matplotlib (for plotting).\n-->\n\nThe StellarGraph library can be installed in one of two ways, described next.\n\n#### Install StellarGraph using pip:\nTo install StellarGraph library from [PyPi](http://pypi.org) using `pip`, execute the following command:\n```\npip install stellargraph\n```\n\nSome of the examples require installing additional dependencies as well as `stellargraph`.\nTo install these dependencies using `pip`, execute the following command:\n```\npip install stellargraph[demos]\n```\n\n\n#### Install StellarGraph from Github source:\nFirst, clone the StellarGraph repository using `git`:\n```\ngit clone https://github.com/stellargraph/stellargraph.git\n```\n\nThen, `cd` to the StellarGraph folder, and install the libraray by executing the following commands:\n```\ncd stellargraph\npip install -r requirements.txt\npip install .\n```\n\n## Running the examples\n\nSee the [README](demos/README.md) in the `demos` directory for more information about the examples and how to run them.\n\n## Algorithms\nThe StellarGraph library currently includes the following algorithms for graph machine learning:\n\n* GraphSAGE [1]\n  - Supports representation learning, node classification/regression, and link prediction for homogeneous networks.\n  The current implementation supports mean aggregation of neighbour nodes only.\n\n* HinSAGE\n  - Extension of GraphSAGE algorithm to heterogeneous networks.\n  Supports representation learning, node classification/regression, and link prediction/regression for heterogeneous graphs.\n  The current implementation supports mean aggregation of neighbour nodes,\n  taking into account their types and the types of links between them.\n\n* Node2Vec [2]\n  - Unsupervised representation learning for homogeneous networks, taking into account network structure while ignoring\n  node attributes. The node2vec algorithm is implemented by combining StellarGraph\'s random walk generator with the word2vec\n  algorithm from [Gensim](https://radimrehurek.com/gensim/).\n  Learned node representations can be used in downstream machine learning models\n  implemented using [Scikit-learn](http://scikit-learn.org/stable/), [Keras](https://keras.io/),\n  [Tensorflow](https://www.tensorflow.org/) or any other Python machine learning library.\n\n* Metapath2Vec [3]\n  - Unsupervised, metapath-guided representation learning for heterogeneous networks, taking into account network structure while ignoring\n  node attributes. The implementation combines StellarGraph\'s metapath-guided random walk\n  generator and [Gensim](https://radimrehurek.com/gensim/) word2vec algorithm.\n  As with node2vec, the learned node representations (node embeddings) can be used in\n  downstream machine learning models to solve tasks such as node classification, link prediction, etc,\n  for heterogeneous networks.\n\n\n## Getting Help\n\nDocumentation for StellarGraph can be found [here.](https://stellargraph.readthedocs.io)\n\n## CI\n\n### buildkite integration\n\nPipeline is defined in `.buildkite/pipeline.yml`\n\n### Docker images\n\n* Tests: Uses the official [python:3.6](https://hub.docker.com/_/python/) image.\n* Style: Uses [black](https://hub.docker.com/r/stellargraph/black/) from the `stellargraph` docker hub organisation.\n\n## References\n\n1. Inductive Representation Learning on Large Graphs. W.L. Hamilton, R. Ying, and J. Leskovec arXiv:1706.02216\n[cs.SI], 2017. ([link](http://snap.stanford.edu/graphsage/))\n\n2. Node2Vec: Scalable Feature Learning for Networks. A. Grover, J. Leskovec. ACM SIGKDD International Conference on\nKnowledge Discovery and Data Mining (KDD), 2016. ([link](https://snap.stanford.edu/node2vec/))\n\n3. Metapath2Vec: Scalable Representation Learning for Heterogeneous Networks. Yuxiao Dong, Nitesh V. Chawla, and\nAnanthram Swami. ACM SIGKDD International Conference on Knowledge Discovery and Data Mining (KDD), 135–144, 2017\n([link](https://ericdongyx.github.io/metapath2vec/m2v.html))\n',
    'author': 'Data61, CSIRO',
    'author_email': 'stellar.admin@csiro.au',
    'url': 'https://github.com/stellargraph/stellargraph',
    'packages': packages,
    'package_data': package_data,
    'install_requires': install_requires,
    'python_requires': '>=3.6,<3.7',
}


setup(**setup_kwargs)
