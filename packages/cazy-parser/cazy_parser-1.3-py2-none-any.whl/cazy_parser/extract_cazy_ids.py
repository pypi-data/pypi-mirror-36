#!/usr/bin/env python
#==============================================================================#
# Copyright (C) 2016  Rodrigo Honorato
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>
#==============================================================================#

#==============================================================================#
# Modules
import os, sys, itertools, urllib, argparse
#==============================================================================#

def main(argv=sys.argv[1:]):

	print '''

	┌─┐┌─┐┌─┐┬ ┬   ┌─┐┌─┐┬─┐┌─┐┌─┐┬─┐
	│  ├─┤┌─┘└┬┘───├─┘├─┤├┬┘└─┐├┤ ├┬┘
	└─┘┴ ┴└─┘ ┴    ┴  ┴ ┴┴└─└─┘└─┘┴└─ v1.3

	This is the accession code retrieval script

	'''

	#==============================================================================#
	# Options
	#==============================================================================#
	parser = argparse.ArgumentParser(description='Select accession codes for a given protein family. Optional: Select subfamilies and/or characterized enzymes')

	parser.add_argument('--db', action = "store", dest = 'db_file',
		help = 'Database file generated by cazy-parser')

	parser.add_argument('--family', action = "store", dest = 'target_family',
		help = 'Family to be searched ex. GH5')

	parser.add_argument('--subfamily', action = "store_true", default = False,
		help = '(Optional) Create a file with accession codes for each subfamily')

	parser.add_argument('--characterized', action = "store_true", default = False,
		help = '(Optional) Create a file with accession codes only for characterized enzymes')

	results = parser.parse_args()

	check = False
	if results.db_file == None:
		print '\n>> [ERROR] Missing database file\n'
		check = True

	if results.target_family == None:
		print '\n>> [ERROR] Missing target family\n'
		check = True

	if check == True:
		parser.print_help()
		sys.exit(0)

	#==============================================================================#
	# Input
	#==============================================================================#
	db_f = open(results.db_file).readlines()
	header = db_f[0].split('\t')

	print '>> Loading %s' % results.db_file
	db = {}
	for i, l in enumerate(db_f[1:]):
		db[i] = {}
		data = l.split('\t')
		# init dictionary
		for c, idx in enumerate(header):
			try:
				db[i][idx] = data[c]
			except IndexError:
				db[i][idx] = ''

	#==============================================================================#
	# Select all family
	#==============================================================================#
	if bool(results.target_family):

		selection_list = []
		for e in db:
			if db[e]['family'] == results.target_family:
				selection_list.append(db[e]['genbank'])

		print '>> Retrieving all %i accession codes for Family %s' % (len(selection_list), results.target_family)

		l = list(set(selection_list))
		out_f = '%s.csv' % results.target_family
		print '>> Creating %s' % out_f
		out = open(out_f, 'w')
		out.write('\n'.join(l))
		out.close()

	#==============================================================================#
	# Select by subfamily
	#==============================================================================#

	if bool(results.subfamily):

		selection_dic = {}
		for e in db:
			if db[e]['family'] == results.target_family and bool(db[e]['subfamily']):
				try:
					selection_dic[db[e]['subfamily']].append(db[e]['genbank'])
				except:
					selection_dic[db[e]['subfamily']] = [db[e]['genbank']]

		# output
		print '>> Retrieving accession codes for %i subfamilies for Family %s' % (len(selection_dic), results.target_family)
		for sub in selection_dic:

			l = list(set(selection_dic[sub]))

			out_f = '%s_sub%s.csv' % (results.target_family, sub)
			print '>> Creating %s' % out_f
			out = open(out_f,'w')
			out.write('\n'.join(l))
			out.close()

	#==============================================================================#
	# Select by characterization
	#==============================================================================#

	if bool(results.characterized):

		selection_list = []
		for e in db:
			if db[e]['family'] == results.target_family and bool(db[e]['tag']):
				selection_list.append(db[e]['genbank'])

		print '>> Selecting %i CHARACTERIZED proteins for Family %s' % (len(selection_list), results.target_family)

		l = list(set(selection_list))

		out_f = '%s_characterized.csv' % results.target_family
		out = open(out_f, 'w')
		print '>> Creating %s' % out_f
		out.write('\n'.join(selection_list))
		out.close()

	sys.exit(0)

if __name__ == '__main__':
	main()
