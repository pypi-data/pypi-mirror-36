# coding: utf-8

"""
Copyright 2015 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from datetime import datetime
from pprint import pformat
from six import iteritems


class BpmTaskRest(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        BpmTaskRest - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'task_id': 'int',
            'process_instance_id': 'int',
            'process_name': 'str',
            'events': 'list[BpmNotificationRest]'
        }

        self.attribute_map = {
            'task_id': 'taskId',
            'process_instance_id': 'processInstanceId',
            'process_name': 'processName',
            'events': 'events'
        }

        self._task_id = None
        self._process_instance_id = None
        self._process_name = None
        self._events = None

    @property
    def task_id(self):
        """
        Gets the task_id of this BpmTaskRest.


        :return: The task_id of this BpmTaskRest.
        :rtype: int
        """
        return self._task_id

    @task_id.setter
    def task_id(self, task_id):
        """
        Sets the task_id of this BpmTaskRest.


        :param task_id: The task_id of this BpmTaskRest.
        :type: int
        """
        self._task_id = task_id

    @property
    def process_instance_id(self):
        """
        Gets the process_instance_id of this BpmTaskRest.


        :return: The process_instance_id of this BpmTaskRest.
        :rtype: int
        """
        return self._process_instance_id

    @process_instance_id.setter
    def process_instance_id(self, process_instance_id):
        """
        Sets the process_instance_id of this BpmTaskRest.


        :param process_instance_id: The process_instance_id of this BpmTaskRest.
        :type: int
        """
        self._process_instance_id = process_instance_id

    @property
    def process_name(self):
        """
        Gets the process_name of this BpmTaskRest.


        :return: The process_name of this BpmTaskRest.
        :rtype: str
        """
        return self._process_name

    @process_name.setter
    def process_name(self, process_name):
        """
        Sets the process_name of this BpmTaskRest.


        :param process_name: The process_name of this BpmTaskRest.
        :type: str
        """
        self._process_name = process_name

    @property
    def events(self):
        """
        Gets the events of this BpmTaskRest.


        :return: The events of this BpmTaskRest.
        :rtype: list[BpmNotificationRest]
        """
        return self._events

    @events.setter
    def events(self, events):
        """
        Sets the events of this BpmTaskRest.


        :param events: The events of this BpmTaskRest.
        :type: list[BpmNotificationRest]
        """
        self._events = events

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
	    elif isinstance(value, datetime):
		result[attr] = str(value.date())
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()
