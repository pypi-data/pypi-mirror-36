# coding: utf-8

"""
Copyright 2015 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from datetime import datetime
from pprint import pformat
from six import iteritems


class UserRest(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        UserRest - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'id': 'int',
            'email': 'str',
            'first_name': 'str',
            'last_name': 'str',
            'username': 'str'
        }

        self.attribute_map = {
            'id': 'id',
            'email': 'email',
            'first_name': 'firstName',
            'last_name': 'lastName',
            'username': 'username'
        }

        self._id = None
        self._email = None
        self._first_name = None
        self._last_name = None
        self._username = None

    @property
    def id(self):
        """
        Gets the id of this UserRest.


        :return: The id of this UserRest.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this UserRest.


        :param id: The id of this UserRest.
        :type: int
        """
        self._id = id

    @property
    def email(self):
        """
        Gets the email of this UserRest.


        :return: The email of this UserRest.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """
        Sets the email of this UserRest.


        :param email: The email of this UserRest.
        :type: str
        """
        self._email = email

    @property
    def first_name(self):
        """
        Gets the first_name of this UserRest.


        :return: The first_name of this UserRest.
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """
        Sets the first_name of this UserRest.


        :param first_name: The first_name of this UserRest.
        :type: str
        """
        self._first_name = first_name

    @property
    def last_name(self):
        """
        Gets the last_name of this UserRest.


        :return: The last_name of this UserRest.
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """
        Sets the last_name of this UserRest.


        :param last_name: The last_name of this UserRest.
        :type: str
        """
        self._last_name = last_name

    @property
    def username(self):
        """
        Gets the username of this UserRest.


        :return: The username of this UserRest.
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """
        Sets the username of this UserRest.


        :param username: The username of this UserRest.
        :type: str
        """
        self._username = username

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
	    elif isinstance(value, datetime):
		result[attr] = str(value.date())
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()
