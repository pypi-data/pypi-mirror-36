"""
*******************************************************
*
*  Demo_01 - DEMO USED TO TEST BAYESFIT 
*  
*  License:      Apache 2.0
*  Written by:   Michael Slugocki
*  Created on:   September 10, 2018
*  Last updated: September 12, 2018
*
*******************************************************
"""

#################################################################
#  IMPORT MODULES
#################################################################

import numpy as np
import bayesfit as bf

#################################################################
#  GENERATE DATAFRAME OF RESPONSES USING MOCS / MLE
#################################################################
data = np.array([[0.0010,   45.0000,   90.0000],
                 [0.0015,   50.0000,   90.0000],
                 [0.0020,   44.0000,   90.0000],
                 [0.0025,   44.0000,   90.0000],
                 [0.0030,   52.0000,   90.0000],
                 [0.0035,   53.0000,   90.0000],
                 [0.0040,   62.0000,   90.0000],
                 [0.0045,   64.0000,   90.0000],
                 [0.0050,   76.0000,   90.0000],
                 [0.0060,   79.0000,   90.0000],
                 [0.0070,   88.0000,   90.0000],
                 [0.0080,   90.0000,   90.0000],
                 [0.0100,   90.0000,   90.0000]]);

metrics, options = bf.fitmodel(data, sigmoid_type='logistic')


#################################################################
#  GENERATE DATAFRAME OF RESPONSES USING STAIRCASE / MLE
#################################################################
data_stairs = np.array([[0.0010,   3.0000,   7.0000],
                         [0.0015,   11.0000,   20.0000],
                         [0.0020,   17.0000,   35.0000],
                         [0.0025,   7.0000,   15.0000],
                         [0.0030,   26.0000,   45.0000],
                         [0.0035,   45.0000,   78.0000],
                         [0.0040,   55.0000,   80.0000],
                         [0.0045,   64.0000,   90.0000],
                         [0.0050,   75.0000,   89.0000],
                         [0.0060,   44.0000,   51.0000],
                         [0.0070,   19.0000,   20.0000],
                         [0.0080,   7.0000,   7.0000],
                         [0.0100,   2.0000,   2.0000]]);

metrics, options = bf.fitmodel(data_stairs, sigmoid_type='norm')


#################################################################
#  GENERATE DATAFRAME OF RESPONSES USING MOCS / BAYES
#################################################################
data = np.array([[0.0010,   45.0000,   90.0000],
                 [0.0015,   50.0000,   90.0000],
                 [0.0020,   44.0000,   90.0000],
                 [0.0025,   44.0000,   90.0000],
                 [0.0030,   52.0000,   90.0000],
                 [0.0035,   53.0000,   90.0000],
                 [0.0040,   62.0000,   90.0000],
                 [0.0045,   64.0000,   90.0000],
                 [0.0050,   76.0000,   90.0000],
                 [0.0060,   79.0000,   90.0000],
                 [0.0070,   88.0000,   90.0000],
                 [0.0080,   90.0000,   90.0000],
                 [0.0100,   90.0000,   90.0000]]);

priors = ['Norm(0.005,0.001)', 'Norm(3,0.75)', None, None]
metrics, options = bf.fitmodel(data, priors = priors, sigmoid_type='weibull', logspace=False)
bf.plot_priors(options, metrics)
bf.plot_marginals(metrics)
bf.plot_psyfcn(data, options, metrics)
bf.plot_posterior(metrics)

#################################################################
#  GENERATE DATAFRAME OF RESPONSES USING STAIRCASE / BAYES
#################################################################
data_stairs = np.array([[0.0010,   3.0000,   7.0000],
                         [0.0015,   11.0000,   20.0000],
                         [0.0020,   17.0000,   35.0000],
                         [0.0025,   7.0000,   15.0000],
                         [0.0030,   26.0000,   45.0000],
                         [0.0035,   45.0000,   78.0000],
                         [0.0040,   55.0000,   80.0000],
                         [0.0045,   64.0000,   90.0000],
                         [0.0050,   75.0000,   89.0000],
                         [0.0060,   44.0000,   51.0000],
                         [0.0070,   19.0000,   20.0000],
                         [0.0080,   7.0000,   7.0000],
                         [0.0100,   2.0000,   2.0000]]);

priors = ['Norm(0.005,0.001)', 'Norm(3,0.75)']
metrics, options = bf.fitmodel(data_stairs, priors = priors, sigmoid_type='weibull', logspace=False)
bf.plot_priors(options, metrics)
bf.plot_marginals(metrics)
bf.plot_psyfcn(data_stairs, options, metrics)


#################################################################
#  BATCH FIT RESPONSES USING MOCS / MLE
#################################################################
data01 = np.array([[0.0010,   45.0000,   90.0000],
                     [0.0015,   50.0000,   90.0000],
                     [0.0020,   44.0000,   90.0000],
                     [0.0025,   44.0000,   90.0000],
                     [0.0030,   52.0000,   90.0000],
                     [0.0035,   53.0000,   90.0000],
                     [0.0040,   62.0000,   90.0000],
                     [0.0045,   64.0000,   90.0000],
                     [0.0050,   76.0000,   90.0000],
                     [0.0060,   79.0000,   90.0000],
                     [0.0070,   88.0000,   90.0000],
                     [0.0080,   90.0000,   90.0000],
                     [0.0100,   90.0000,   90.0000]]);

data02 = np.array([[0.0010,   3.0000,   7.0000],
                     [0.0015,   11.0000,   20.0000],
                     [0.0020,   17.0000,   35.0000],
                     [0.0025,   7.0000,   15.0000],
                     [0.0030,   26.0000,   45.0000],
                     [0.0035,   45.0000,   78.0000],
                     [0.0040,   55.0000,   80.0000],
                     [0.0045,   64.0000,   90.0000],
                     [0.0050,   75.0000,   89.0000],
                     [0.0060,   44.0000,   51.0000],
                     [0.0070,   19.0000,   20.0000],
                     [0.0080,   7.0000,   7.0000],
                     [0.0100,   2.0000,   2.0000]]);

data = dict()
data['data01'] = data01
data['data02'] = data02

metrics, options = bf.fitmodel(data, batch=True, sigmoid_type='norm', logspace=False)
bf.plot_priors(options, metrics)
bf.plot_marginals(metrics)
bf.plot_psyfcn(data, options, metrics)
