from distutils.core import setup

with open("README", "r") as fh:
    long_description = fh.read()

setup(
    name="PyRQA",
    packages=[
        "pyrqa",
        "pyrqa.operators",
        "pyrqa.operators.copy_matrix",
        "pyrqa.operators.create_matrix",
        "pyrqa.operators.create_matrix.fixed_radius",
        "pyrqa.operators.create_matrix.fixed_radius.brute_force",
        "pyrqa.operators.create_matrix.fixed_radius.tree",
        "pyrqa.operators.create_matrix.fixed_radius.uniform_grid",
        "pyrqa.operators.create_uniform_grid",
        "pyrqa.operators.detect_diagonal_lines",
        "pyrqa.operators.detect_diagonal_lines.fixed_radius",
        "pyrqa.operators.detect_diagonal_lines.fixed_radius.brute_force",
        "pyrqa.operators.detect_vertical_lines",
        "pyrqa.operators.detect_vertical_lines.fixed_radius",
        "pyrqa.operators.detect_vertical_lines.fixed_radius.brute_force",
        "pyrqa.variants",
        "pyrqa.variants.recurrence_plot",
        "pyrqa.variants.recurrence_plot.fixed_radius",
        "pyrqa.variants.recurrence_plot.fixed_radius.brute_force",
        "pyrqa.variants.recurrence_plot.fixed_radius.uniform_grid",
        "pyrqa.variants.rqa",
        "pyrqa.variants.rqa.fixed_radius",
        "pyrqa.variants.rqa.fixed_radius.brute_force",
        "pyrqa.variants.rqa.fixed_radius.tree",
        "pyrqa.variants.rqa.fixed_radius.uniform_grid",
        ],
    package_data={
        "pyrqa": [
            "config.json",
            "kernels/clear_buffer/*.cl",
            "kernels/create_matrix/fixed_radius/brute_force/euclidean_metric/*.cl",
            "kernels/create_matrix/fixed_radius/brute_force/maximum_metric/*.cl",
            "kernels/create_matrix/fixed_radius/brute_force/taxicab_metric/*.cl",
            "kernels/create_matrix/fixed_radius/uniform_grid/euclidean_metric/*.cl",
            "kernels/create_matrix/fixed_radius/uniform_grid/maximum_metric/*.cl",
            "kernels/create_matrix/fixed_radius/uniform_grid/taxicab_metric/*.cl",
            "kernels/create_uniform_grid/*.cl",
            "kernels/detect_diagonal_lines/*.cl",
            "kernels/detect_diagonal_lines/fixed_radius/brute_force/euclidean_metric/*.cl",
            "kernels/detect_diagonal_lines/fixed_radius/brute_force/maximum_metric/*.cl",
            "kernels/detect_diagonal_lines/fixed_radius/brute_force/taxicab_metric/*.cl",
            "kernels/detect_vertical_lines/*.cl",
            "kernels/detect_vertical_lines/fixed_radius/brute_force/euclidean_metric/*.cl",
            "kernels/detect_vertical_lines/fixed_radius/brute_force/maximum_metric/*.cl",
            "kernels/detect_vertical_lines/fixed_radius/brute_force/taxicab_metric/*.cl",
            ],
        },
    version="1.0.6",
    description="A tool to conduct recurrence quantification analysis and to create recurrence plots in a massively parallel manner using the OpenCL framework.",
    long_description=long_description,
    author="Tobias Rawald",
    author_email="PyRQA@gmx.net",
    keywords=["time series analysis", "recurrence quantification analysis", "RQA", "recurrence plot"],
    classifiers=[
        "Programming Language :: Python :: 2.7",
        "Programming Language :: Python :: 3.6",
        "Development Status :: 4 - Beta",
        "Intended Audience :: Science/Research",
        "Intended Audience :: Developers",
        "Operating System :: OS Independent",
        "Topic :: Scientific/Engineering :: Mathematics",
        "Topic :: Scientific/Engineering :: Physics",
        ],
    install_requires=['numpy', 'Pillow', 'pyopencl', 'scikit-learn', 'scipy'],
)