#sidebar: p Generated by DnaChisel version {{__version__}} on {{ pdf_tools.now() }}

.logos
  img(src="file:///{{ dnachisel_logo_url }}" style="height:35px; width: auto")
  img(src="file:///{{ egf_logo_url }}" style="height:35px; width: auto")


h1 Sequence optimization report
h2(style="text-align:center") {{ project_name }}
center
  .ui.statistic.tiny
    .value= len(problem.sequence)
    .label basepairs
  .ui.statistic.tiny
    .value= len(problem.constraints)
    .label constraints
  .ui.statistic.tiny
    .value= len(problem.objectives)
    .label objectives
    
.ui.container
  if constraints_evaluations.all_evaluations_pass()
    
    .ui.icon.message.teal.block-center
      i.check.circle.icon
      .content
        .header The optimization was succesfull
        p  Below is an overview of the sequence modifications.
        
  else
    
    .ui.icon.message.yellow.block-center
      i.check.circle.icon
      .content
        .header
          | Have you heard about our mailing list?
        p Get the best news in your e-mail every day.

table.ui.compact.table.groups.celled.definition(style="text-align: center;")
  thead
    th
    th Failing constraints
    th Objectives score
    th Nucleotide changes
    th Identicon
  tr
    td Before
    td= len( problem.constraints_before.filter('failing') )
    td= problem.objectives_before.scores_sum(as_text=True)
    td -
    td !{sequenticons['before']}
  tr
    td After
    td= len( constraints_evaluations.filter('failing') )
    td= objectives_evaluations.scores_sum(as_text=True)
    td= edits
    td !{sequenticons['after']}
//- 
//- .ui.statistics.tiny
//-   .ui.statistic
//-     .value= entries.index.size
//-     .label Visits
//-   .ui.statistic
//-     .value= entries.IP.unique().size
//-     .label Unique visitors
//-   .ui.statistic
//-     .value= requests.index.size
//-     .label Requests


//- <div class="header">
//-     <a href='https://github.com/Edinburgh-Genome-Foundry/DnaFeaturesViewer'>
//-       <img class=header-logo src="logo.png"/></a>
//-     <p>
//-       version {{dnachisel_version}} <br />
//-       Made with &hearts; at the Edinburgh Genome Foundry
//-     </p>
//- </div>
//- 
//- <h1>
//- Project {{project_name}}
//- <br />
//- Sequence Optimization Report
//- <br />
//- <span class='outcome-{{outcome.lower()}}'>({{outcome}})</span>
//- </h1>
//- 
//- <h2>Summary</h2>
//-   <p>
//-     to satisfy <b>{{ problem.constraints_before | length }}</b> constraints and
//-     <b>{{problem.objectives_before | length}}</b> objectives.
//- 
//-   </p>
//- 
//- <table class='fancy-table summary'>
//-   <th>
//-     <td>
//-       Before
//-     </td>
//-     <td>
//-       After
//-     </td>
//-   </th>
//- 
//-   <tr>
//-     <td>
//-       Failing constraints
//-     </td>
//-     <td>
//-       {{problem.constraints_before.filter('failing') | length }}
//-     </td>
//-     <td>
//-       {{ constraints_after.filter('failing') | length}}
//-     </td>
//-   </tr>
//-   <tr>
//-     <td>
//-       Total objectives score
//-     </td>
//-     <td>
//-       {{ problem.objectives_before.scores_sum(as_text=True) }}
//-     </td>
//-     <td>
//-       {{ objectives_after.scores_sum(as_text=True) }}
//-     </td>
//-   </tr>
//- </table>
//- 
//- <h2> Constraints </h2>
//- 
//-   <table class='fancy-table'>
//-     <th>
//-       <td>
//-         Before
//-       </td>
//-       <td>
//-         After
//-       </td>
//-     </th>
//-     {% for (before, after) in zip(problem.constraints_before, constraints_after) %}
//-     <tr>
//-       <td class='first'>
//-         {{ before.specification }}
//-       </td>
//-       {% for eval in [before, after] %}
//-         {% if eval.passes %}
//-           <td>PASS</td>
//-         {% else %}
//-           <td class='red'> FAIL at {{ len(eval.locations) }} locations</td>
//-         {% endif %}
//-       {% endfor %}
//-     </tr>
//-     {% endfor %}
//-   </table>
//- 
//-   <h2> Objectives </h2>
//- 
//-     <table class='fancy-table'>
//-       <th>
//-         <td>
//-           Before
//-         </td>
//-         <td>
//-           After
//-         </td>
//-       </th>
//-       {% for (before, after) in zip(problem.objectives_before, objectives_after) %}
//-       <tr>
//-         <td class='first'>
//-           {{ before.specification }}
//-         </td>
//-         {% for eval in [before, after] %}
//-           <td class={{'green' if eval.is_optimal else ''}}>
//-             {{ eval.score_as_text }}
//-           </td>
//-         {% endfor %}
//-       </tr>
//-       {% endfor %}
//-     </table>
    
