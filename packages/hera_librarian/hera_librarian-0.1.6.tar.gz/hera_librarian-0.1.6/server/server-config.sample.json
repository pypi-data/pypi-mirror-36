# DELETE ALL LINES beginning with "#" before deploying! JSON does not allow comments.

{
    # "server" is the code used to run the web server: "flask", the simple
    # Flask builtin server, or "tornado", using the Tornado stack. "flask" is
    # single-threaded and not suited for production use, but has useful
    # debugging facilities. "tornado" is multithreaded and more robust.
    # Default is "flask".
    "server": "flask",

    # SECRET_KEY should be a random string. The Librarian uses it to prevent forgery
    # of login information. Easy way to generate some randomish numbers: "date |md5sum".
    # No configuration file containing a real SECRET_KEY should be posted anywhere it
    # might leak onto the open internet.
    "SECRET_KEY": "change me or die",

    # The SQLAlchemy database URI for connecting to the backing database. This example
    # value uses sqlite to avoid needing a server:
    "SQLALCHEMY_DATABASE_URI": "sqlite:///librarian_testing.sqlite",

    # Some kind of magic that you shouldn't change.
    "SQLALCHEMY_TRACK_MODIFICATIONS": false,

    # Logging verbosity level. "debug", "info", "warning", "error". Default "info".
    #"log_level": "info",

    # The web UI bills itself as "<displayed_site_name> HERA Librarian".
    "displayed_site_name": "Sample",

    # Listen on the specified IP addresses. If unspecified, the Librarian will only
    # accept non-network connections, which is what you want for testing. Use
    # "0.0.0.0" to accept connections from anywhere on the network.
    #"host": "0.0.0.0",

    # Listen on the specified port number. Default is 21106.
    #"port": 80,

    # If set to "true", Flask will start up in debug mode, which means that it will
    # print tracebacks and auto-reload itself if you edit files in the running server.
    # This should always be disabled for production use. Default is false.
    #"flask_debug": true,

    # If set to "true", the Librarian will attempt to connect to the HERA M&C database
    # and report status information to it. This REQUIRES the use of the Tornado
    # server rather than Flask. Default is false
    #"report_to_mandc": true,

    # Use this many subprocesses to handle requests. TODO: CLARIFY THIS CONFUSING
    # setup
    #"n_server_processes": 1,

    # Use this many worker threads for background activities.
    #"n_worker_threads": 8,

    # Control over processing of standing orders. Default "normal". If "disabled",
    # then standing order uploads are disabled. (Implemented for the time that Penn
    # ran out of disk space.) If "nighttime", uploads are *not* launched between
    # 8 AM and 8 PM local time. (Implemented because we were sucking up Karoo
    # bandwidth used by humans.)
    #"standing_order_mode": "normal",

    # How to set the permissions on files that are uploaded to the Librarian.
    # If "unchanged", do not change from whatever the upload left us
    # with. If "readonly", the default, remove write permissions.
    #"permissions_mode": "unchanged",

    # Optional support for inferring the obsid associated with a file. This
    # should not be needed on Librarian servers that only accept uploads from
    # other Librarians; it *is* needed on ones on which users create and
    # ingest new files. The "hera" choice looks at the first three pieces of
    # the filename as separated by periods, e.g. the "zen.2458002.1234" part.
    # The "none" choice, the default, refuses to guess in this way.
    #"obsid_inference_mode": "hera",

    # Optional support for "staging" files from the Librarian server to a
    # filesystem local to the server machine. This functionality is *highly*
    # specialized to the NRAO Librarian, where the Librarian server machine
    # is connected to both local RAID arrays (where the data are stored) and
    # a Lustre network filesystem (where users do their data processing).
    #"local_disk_staging": {
    #   "ssh_host": "xxx", # The store "SSH host" field indicating a local machine
    #   "dest_prefix": "yyy", # Hardwired directory prefix inside which copies land
    #   "displayed_dest": "Lustre", # Displayed name for staging destination
    #   "username_placeholder": "your username", # Displayed placeholder for username prompts
    #   "chown_command": ["arg0", "arg1"] # Command to fix up file ownership
    #},

    # Here is a set of "sources" of data. Programs or people logging into the
    # Librarian provide an authenticator, which indirectly associates them
    # with one of the following usernames. As the name suggests, the
    # authenticators should be treated as secrets.

    "sources": {
        "HumanUser": { # <- essentially, the user name
            "authenticator": "I am a human" # <- essentially, the password
        }
    },

    # If initialize-database is True, the database will be filled in with
    # information about available data stores if the named stores are not
    # already present. This should probably not be used in production.

    #"add-stores": {
    #    "samplestore": { # <- the store name
    #	    # This is the directory where data are stored.
    #	    "path_prefix": "/data4/HERA",
    #
    #	    # This is the hostname by which others can SSH into the store
    #	    # machine. If another Librarian is going to upload data into
    #	    # this one, this hostname must be something they can understand,
    #	    # i.e. "enterprise.sese.asu.edu" and not just "enterprise".
    #	    "ssh_host": "server.university.edu",
    #
    #	    # If set to false, the store will be marked as "unavailable". This
    #	    # feature is barely implemented. Default is true.
    #	    "available": true
    #	 }
    #},

    # Ignore this dummy entry. It is to make it so that the previous entries
    # can all end with commas; JSON does not allow trailing commas in lists.
    # Also, remember to delete all of these comments! JSON does not allow
    # them.
    "_ignore_me_dummy": 1
}
