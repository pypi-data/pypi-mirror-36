# -*- coding: UTF-8 -*-

print("selfcmp是一款其实没什么用的自动对拍程序的小软件。\n下面为使用说明：\n使用pip install selfcmp安装程序，前提为已经配好python的使用环境\n然后在一个文件夹下使用指令python -m selfcmp.spw -s <dir_name>生成对拍场地,-s后的参数为你的场地名称\n在生成目录下，使用指令python -m selfcmp.pro -n <soure/problem/data_name> -f <language/format_name> -d <data_maker_name> -o <system_name>生成对应题目工作目录，其中-n的参数为你的题目名称（也可自己命名，现在只支持英文）；-f为语言类型，目前只支持cpp(c++)，-d为你的数据生成器的名称；-o为你的系统类型，目前支持windows，linux的正在开发ing。（所有名称不带后缀）\n将你的三份源文件，你的程序，标准程序，数据生成程序，分别放入*-soure,*-std,*-data文件夹目录下，不能在这些目录下创建任何子目录\n然后有两种使用方式：\n使用自带的批处理文件runner.bat，你可以更改里面参数\n使用指令python -m selfcmp.work -t <run_times>，其中run_times为对拍次数\n对拍完成后，命令框消失，对拍结果在文件log.info中，最后一组数据在*-data的目录下，输入数据为.in，你的输出为.out，答案输出为.ans\nNote\n配置数据文件conj.yaml，在最外层目录下的内容为你的目录名称，在题目目录下方的第一行为题目名称，第二行为系统类型，第三行为编译命令，你可以自行更改编译命令。\n可使用 -h 或者 --help 来获得帮助，总体指令为python -m selfcmp.help。")

print("New Add【2018.10.5】:\n 使用指令`python -m selfcmp.pro -n <soure/problem/data_name> -f <language/format_name> -d <data_maker_name> -o <system_name> -u <mode>`生成对应题目工作目录,其中新增的`-u`为你的比对模式，如果后面为`datamaker`,则使用数据生成器比对（除了你的源程序之外还需要数据生成器源码和对比源程序），如果为`datafile`，则只需你的数据（按照`name1.in`和`name1.ans`的格式，`name`可自行替换）和你的源程序，并且不用输入`-d`一项。（所有名称除了有输入输出文件比对时不带后缀）\n用文件输入输出比对，则只需将你的源程序放入`*-soure`，数据按照规定格式命名后放入`*-data`中即可。（你的源程序在两种模式下均不用添加文件读入输出句柄，也就是例如在`cpp`(C++)语言下，不需要写`freopen(\".in\",\"r\",stdin)`之类的句柄）")

print("使用的更新：如果为文件比对，使用指令`python -m selfcmp.filewk -n <file_name> -s <start_num> -t <end_num> -a <ans_format> -i <input_format>`，其中`file_name`为数据文件名（不要后缀和编号，若无名称如`1.in`，则输入下划线`_`），其中`start_num`为你的开始文件编号，`end_num`为你的结束文件编号。（注意：开始文件编号必须小于等于结束文件编号）,其中的`ans_format`为你的答案文件的后缀，默认为`.ans`，如果要修改可以在`-a`后输入，如`.out`，如果为空则输入`_`，`input_format`同`ans_format`为输入文件后缀。\n最开始输入输出名字默认为目录名，后缀默认为`.in`和`.ans`，\n如果为文件输入输出对比模式，会显示你在第几组数据开始有错误。")
