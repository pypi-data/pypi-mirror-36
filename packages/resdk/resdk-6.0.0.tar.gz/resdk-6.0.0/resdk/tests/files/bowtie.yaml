# ================
# Aligner - Bowtie
# ================
---

- slug: alignment-bowtie
  name: Bowtie 1.0.0
  data_name: "Alignment ({{ reads.fastq.file|basename|default:'?' }})"
  version: 1.0.13
  type: data:alignment:bam:bowtie1
  category: analyses:alignment
  flow_collection: sample
  persistence: CACHED
  description: >
    An ultrafast memory-efficient short read aligner.
  input:
    - name: genome
      label: Reference genome
      type: data:genome:fasta
    - name: reads
      label: Reads
      type: data:reads:fastq
    - name: mode
      label: Alignment mode
      type: basic:string
      description: >
        When the -n option is specified (which is the default), bowtie determines which alignments are valid according to the following policy, which is similar to Maq's default policy.
        1. Alignments may have no more than N mismatches (where N is a number 0-3, set with -n) in the first L bases (where L is a number 5 or greater, set with -l) on the high-quality (left) end of the read. The first L bases are called the "seed".
        2. The sum of the Phred quality values at all mismatched positions (not just in the seed) may not exceed E (set with -e). Where qualities are unavailable (e.g. if the reads are from a FASTA file), the Phred quality defaults to 40.
        In -v mode, alignments may have no more than V mismatches, where V may be a number from 0 through 3 set using the -v option. Quality values are ignored. The -v option is mutually exclusive with the -n option.
      default: -n
      choices:
        - label: Use qualities (-n)
          value: -n
        - label: Use mismatches (-v)
          value: -v
    - name: m
      label: Allowed mismatches
      type: basic:integer
      description: >
        When used with "Use qualities (-n)" it is the maximum number of mismatches permitted in the "seed", i.e. the first L base pairs of the read (where L is set with -l/--seedlen). This may be 0, 1, 2 or 3 and the default is 2
        When used with "Use mismatches (-v)" report alignments with at most <int> mismatches.
      default: 2
    - name: l
      label: Seed length (for -n only)
      type: basic:integer
      description: >
        Only for "Use qualities (-n)". Seed length (-l) is the number of bases on the high-quality end of the read to which the -n ceiling applies. The lowest permitted setting is 5 and the default is 28. bowtie is faster for larger values of -l.
      default: 28
    - name: use_SE
      label: Map as single-ended (for paired end reads only)
      type: basic:boolean
      description: >
        If this option is selected paired-end reads will be mapped as single-ended.
    - name: start_trimming
      label: Initial trimming
      group:
        - name: trim_5
          label: Bases to trim from 5'
          type: basic:integer
          description: >
            Number of bases to trim from from 5' (left) end of each read before alignment
          default: 0
        - name: trim_3
          label: Bases to trim from 3'
          type: basic:integer
          description: >
            Number of bases to trim from from 3' (right) end of each read before alignment
          default: 0
    - name: trimming
      label: Iterative trimming
      group:
        - name: trim_nucl
          label: Bases to trim
          type: basic:integer
          description: >
            Number of bases to trimm from 3' end in each iteration.
          default: 2
        - name: trim_iter
          label: Iterations
          type: basic:integer
          description: >
            Number of iterations.
          default: 0
    - name: reporting
      label: Reporting
      group:
        - name: r
          label: Reporting mode
          type: basic:string
          description: >
            Report up to <int> valid alignments per read or pair (-k) (default: 1). Validity of alignments is determined by the alignment policy (combined effects of -n, -v, -l, and -e). If more than one valid alignment exists and the --best and --strata options are specified, then only those alignments belonging to the best alignment "stratum" will be reported. Bowtie is designed to be very fast for small -k but bowtie can become significantly slower as -k increases. If you would like to use Bowtie for larger values of -k, consider building an index with a denser suffix-array sample, i.e. specify a smaller -o/--offrate when invoking bowtie-build for the relevant index (see the Performance tuning section for details).
          default: -a -m 1 --best --strata
          choices:
            - label: Report unique alignments
              value: -a -m 1 --best --strata
            - label: Report all alignments
              value: -a --best
            - label: Report all alignments in the best stratum
              value: -a --best --strata
  output:
    - name: bam
      label: Alignment file
      type: basic:file
      description: Position sorted alignment
    - name: bai
      label: Index BAI
      type: basic:file
    - name: unmapped
      label: Unmapped reads
      type: basic:file
    - name: stats
      label: Statistics
      type: basic:file
  run:
    runtime: polyglot
    bash: |
      echo "UNCOMPRESSING genome:"
      GENOME_NAME=`basename '{{ genome.fasta.file }}' .fasta.gz`
      echo {{ genome.fasta.file }}
      gzip -cd {{ genome.fasta.file }} > "${GENOME_NAME}.fasta"
      echo "{\"proc.progress\":0.1}"

      if [ {{ genome.index_bt.file }} ]; then
        echo "Genome index found, uncompressing it"
        tar -zxvf {{ genome.index_bt.file }}
        mv ./bowtie_index/* .
      else
        echo "index not found, UNCOMPRESSING genome:"
        gzip -cd {{ genome.fasta.file }} > "${GENOME_NAME}.fasta"
        echo "{\"proc.progress\":0.1}"
        echo "BUILDING genome index:"
        bowtie-build "${GENOME_NAME}.fasta" "${GENOME_NAME}_index"
      fi
      echo "{\"proc.progress\":0.2}"

      echo "UNCOMPRESSING reads:"
      NAME=`basename '{{ reads.fastq.file }}' .fastq.gz`
      gzip -cd {{ reads.fastq.file }} > "${NAME}.fastq"
      echo "{\"proc.progress\":0.3}"

      #quals detection
      encoding_t=$(awk 'NR % 4 == 0' "${NAME}.fastq" | get_encoding_type.py -n 5000)
      if [ "$encoding_t" = "Illumina_old" ]; then
        encoding=--phred64-quals
      else
        encoding=
      fi

      STATS="0 ${NAME}_align_unsorted.stats"

      echo "ALIGNING with bowtie:"
      {% if reads|type|subtype:'data:reads:fastq:single:' or use_SE %}
        {% if use_SE and reads|type|subtype:'data:reads:fastq:paired:' %}
          NAME2=`basename '{{ reads.fastq2.file }}' .fastq.gz`
          gzip -cd {{ reads.fastq2.file }} > "${NAME2}.fastq"
          cat "${NAME2}.fastq" >> "${NAME}.fastq"
        {% endif %}
        bowtie $encoding --un "${NAME}_unmapped1.fq" --trim5 {{start_trimming.trim_5}} --trim3 {{start_trimming.trim_3}} --chunkmbs 200 {{ mode }} {{ m }} -l {{ l }} {{ reporting.r }} --sam "${GENOME_NAME}_index" "${NAME}.fastq" 1>"${NAME}_align_unsorted.sam" 2>"${NAME}_align_unsorted.stats"
        {% if trimming.trim_iter >= 1 %}
        echo "iterative alignment of unmapped reads:"
          for (( c=1; c<={{ trimming.trim_iter }}; c++ ))
            do
            bowtie $encoding --un "${NAME}_unmapped$((c+1)).fq" --trim5 {{start_trimming.trim_5}} --trim3 $(($c * {{ trimming.trim_nucl }} + {{start_trimming.trim_3}} )) --chunkmbs 200 {{ mode }} {{ m }} -l {{ l }} {{ reporting.r }} --sam "${GENOME_NAME}_index" "${NAME}_unmapped$((c)).fq" 1>"${NAME}_new_mapped$((c+1)).sam" 2>"${NAME}_new_mapped$((c+1)).stats"
            samtools view -bS "${NAME}_new_mapped$((c+1)).sam" > "${NAME}_new_mapped$((c+1)).bam"
            STATS="$STATS $(($c * {{ trimming.trim_nucl }} )) ${NAME}_new_mapped$((c+1)).stats"
            done
          mv "${NAME}_unmapped$((c)).fq" "${NAME}_unmapped.fastq" && gzip -c "${NAME}_unmapped.fastq" > "${NAME}_unmapped.fastq.gz"
        {% else %}
          mv "${NAME}_unmapped1.fq" "${NAME}_unmapped.fastq" && gzip -c "${NAME}_unmapped.fastq" > "${NAME}_unmapped.fastq.gz"
        {% endif %}
      {% else %}
        NAME2=`basename '{{ reads.fastq2.file }}' .fastq.gz`
        gzip -cd {{ reads.fastq2.file }} > "${NAME2}.fastq"
        echo "{\"proc.progress\":0.4}"
        bowtie $encoding --un "${NAME}_unmapped1.fq" --trim5 {{start_trimming.trim_5}} --trim3 {{start_trimming.trim_3}} --chunkmbs 200 {{ mode }} {{ m }} -l {{ l }} {{ reporting.r }} --sam "${GENOME_NAME}_index" -1 "${NAME}.fastq" -2 "${NAME2}.fastq" 1>"${NAME}_align_unsorted.sam" 2>"${NAME}_align_unsorted.stats"

        {% if trimming.trim_iter >= 1 %}
        echo "iterative alignment of unmapped reads:"
        for (( c=1; c<={{ trimming.trim_iter }}; c++ ))
          do
            bowtie $encoding --un "${NAME}_unmapped$((c+1)).fq" --trim5 {{start_trimming.trim_5}} --trim3 $(($c* {{ trimming.trim_nucl }} + {{start_trimming.trim_3}} )) --chunkmbs 200 {{ mode }} {{ m }} -l {{ l }} {{ reporting.r }} --sam "${GENOME_NAME}_index" -1 "${NAME}_unmapped$((c))_1.fq" -2 "${NAME}_unmapped$((c))_2.fq" 1>"${NAME}_new_mapped$((c+1)).sam" 2>"${NAME}_new_mapped$((c+1)).stats"
            samtools view -bS "${NAME}_new_mapped$((c+1)).sam" > "${NAME}_new_mapped$((c+1)).bam"
            STATS="$STATS $(($c * {{ trimming.trim_nucl }} )) ${NAME}_new_mapped$((c+1)).stats"
          done
          cat "${NAME}_unmapped$((c))_1.fq" "${NAME}_unmapped$((c))_2.fq" | gzip -c - > "${NAME}_unmapped.fastq.gz"
        {% else %}
          cat "${NAME}_unmapped1_1.fq" "${NAME}_unmapped1_2.fq" | gzip -c - >"${NAME}_unmapped.fastq.gz"
        {% endif %}
      {% endif %}
      echo "{\"proc.progress\":0.5,\"proc.rc\":$?}"

      echo "Formating, merging and sorting reads:"
      samtools view -bS "${NAME}_align_unsorted.sam" > "${NAME}_align_unsorted.bam"

      {% if trimming.trim_iter >= 1 %}
        samtools merge -h "${NAME}_align_unsorted.sam" "${NAME}_align_merged_unsorted.bam" ${NAME}_*.bam
        samtools sort "${NAME}_align_merged_unsorted.bam" "${NAME}_align"
      {% else %}
        samtools sort "${NAME}_align_unsorted.bam" "${NAME}_align"
      {% endif %}

      samtools view -b -F 4 "${NAME}_align.bam" > "${NAME}_mapped.bam"
      #samtools view -b -f 4 "${NAME}_align.bam" > "${NAME}_unmapped.bam"

      echo "{\"proc.progress\":0.6}"

      echo -e "\nINDEXING bam:"
      samtools index "${NAME}_mapped.bam" "${NAME}_mapped.bam.bai"

      echo "Computing BigWig file:"
      samtools idxstats "${NAME}_mapped.bam" | cut -f -2 | head -n -1 > chrom.sizes
      genomeCoverageBed -bg -ibam "${NAME}_mapped.bam" -g chrom.sizes > tmp.bedgraph
      bedGraphToBigWig tmp.bedgraph chrom.sizes "${NAME}_mapped.bam.bw"
      rm chrom.sizes && rm tmp.bedgraph

      mergebowtiestats.py $STATS
      gzip stats.tab

      # TODO: test if all outputs exists, else return proc.rc 1

      echo "{\"proc.progress\":1,\"bam\":{\"file\":\"${NAME}_mapped.bam\",\"refs\":[\"${NAME}_mapped.bam.bw\"]},\"bai\":{\"file\":\"${NAME}_mapped.bam.bai\"},\"unmapped\":{\"file\":\"${NAME}_unmapped.fastq.gz\"},\"stats\":{\"file\":\"stats.tab.gz\"}}"