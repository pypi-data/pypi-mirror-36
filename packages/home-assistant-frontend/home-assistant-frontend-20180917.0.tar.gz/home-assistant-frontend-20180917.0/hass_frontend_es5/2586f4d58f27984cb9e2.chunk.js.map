{"version":3,"sources":["webpack:///./src/components/ha-paper-slider.js","webpack:///./src/components/ha-form.js","webpack:///./src/panels/config/config-entries/ha-config-flow.js"],"names":["PaperSliderClass","customElements","get","HaPaperSlider","tpl","document","createElement","innerHTML","template","styleEl","content","querySelector","setAttribute","define","HaForm","Object","_mixins_events_mixin_js__WEBPACK_IMPORTED_MODULE_9__","_polymer_polymer_polymer_element_js__WEBPACK_IMPORTED_MODULE_7__","_createClass","key","value","val","Array","isArray","schema","a","b","indexOf","obj","item","name","ev","this","set","model","detail","unmaskedPassword","_polymer_polymer_lib_utils_html_tag_js__WEBPACK_IMPORTED_MODULE_6__","_templateObject","data","type","notify","error","computeLabel","Function","computeError","instance","HaConfigFlow","_mixins_localize_mixin_js__WEBPACK_IMPORTED_MODULE_11__","_mixins_events_mixin_js__WEBPACK_IMPORTED_MODULE_10__","_polymer_polymer_polymer_element_js__WEBPACK_IMPORTED_MODULE_6__","_this2","prototype","__proto__","getPrototypeOf","call","addEventListener","keyCode","_submitStep","_this3","hass","_ref","continueFlowId","newFlowForHandler","dialogClosedCallback","_instance","_dialogClosedCallback","_createdFromHandler","_loading","_opened","fetchStep","callApi","handler","curInstance","then","step","_processStep","setTimeout","$","dialog","center","_this4","_errorMsg","keys","_stepData","forEach","includes","_step","flow_id","err","body","message","errors","length","data_schema","field","default","flowFinished","_flowDone","localize","reason","step_id","args","placeholders","description_placeholders","push","stepData","every","optional","_counter","_polymer_polymer_lib_utils_html_tag_js__WEBPACK_IMPORTED_MODULE_5__","_hass","Number","Boolean","String","_canSubmit","computed"],"mappings":"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","file":"2586f4d58f27984cb9e2.chunk.js","sourcesContent":["import '@polymer/paper-slider/paper-slider.js';\n\n/**\n* @polymer\n* @customElement\n* @appliesMixin paper-slider\n*/\nconst PaperSliderClass = customElements.get('paper-slider');\n\nclass HaPaperSlider extends PaperSliderClass {\n  static get template() {\n    const tpl = document.createElement('template');\n    tpl.innerHTML = PaperSliderClass.template.innerHTML;\n    const styleEl = tpl.content.querySelector('style');\n    styleEl.setAttribute('include', 'paper-slider');\n    styleEl.innerHTML = `\n      .pin > .slider-knob > .slider-knob-inner {\n        font-size:  var(--ha-paper-slider-pin-font-size, 10px);\n        line-height: normal;\n      }\n\n      .pin > .slider-knob > .slider-knob-inner::before {\n        top: unset;\n        margin-left: unset;\n\n        bottom: calc(15px + var(--calculated-paper-slider-height)/2);\n        left: 50%;\n        width: 2.2em;\n        height: 2.2em;\n\n        -webkit-transform-origin: left bottom;\n        transform-origin: left bottom;\n        -webkit-transform: rotate(-45deg) scale(0) translate(0);\n        transform: rotate(-45deg) scale(0) translate(0);\n      }\n\n      .pin.expand > .slider-knob > .slider-knob-inner::before {\n        -webkit-transform: rotate(-45deg) scale(1) translate(7px, -7px);\n        transform: rotate(-45deg) scale(1) translate(7px, -7px);\n      }\n\n      .pin > .slider-knob > .slider-knob-inner::after {\n        top: unset;\n        font-size: unset;\n\n        bottom: calc(15px + var(--calculated-paper-slider-height)/2);\n        left: 50%;\n        margin-left: -1.1em;\n        width: 2.2em;\n        height: 2.1em;\n\n        -webkit-transform-origin: center bottom;\n        transform-origin: center bottom;\n        -webkit-transform: scale(0) translate(0);\n        transform: scale(0) translate(0);\n      }\n\n      .pin.expand > .slider-knob > .slider-knob-inner::after {\n        -webkit-transform: scale(1) translate(0, -10px);\n        transform: scale(1) translate(0, -10px);\n      }\n    `;\n    return tpl;\n  }\n}\ncustomElements.define('ha-paper-slider', HaPaperSlider);\n","import '@polymer/paper-checkbox/paper-checkbox.js';\nimport '@polymer/paper-dropdown-menu/paper-dropdown-menu.js';\nimport '@polymer/paper-icon-button/paper-icon-button.js';\nimport '@polymer/paper-input/paper-input.js';\nimport '@polymer/paper-item/paper-item.js';\nimport '@polymer/paper-listbox/paper-listbox.js';\nimport { html } from '@polymer/polymer/lib/utils/html-tag.js';\nimport { PolymerElement } from '@polymer/polymer/polymer-element.js';\n\nimport './ha-paper-slider.js';\nimport EventsMixin from '../mixins/events-mixin.js';\n\n/*\n * @appliesMixin EventsMixin\n */\nclass HaForm extends EventsMixin(PolymerElement) {\n  static get template() {\n    return html`\n    <style>\n      .error {\n        color: red;\n      }\n    </style>\n    <template is=\"dom-if\" if=\"[[_isArray(schema)]]\" restamp=\"\">\n      <template is=\"dom-if\" if=\"[[error.base]]\">\n          <div class='error'>[[computeError(error.base, schema)]]</div>\n      </template>\n\n      <template is=\"dom-repeat\" items=\"[[schema]]\">\n        <ha-form data=\"[[_getValue(data, item)]]\" schema=\"[[item]]\" error=\"[[_getValue(error, item)]]\" on-data-changed=\"_valueChanged\" compute-label=\"[[computeLabel]]\" compute-error=\"[[computeError]]\"></ha-form>\n      </template>\n    </template>\n    <template is=\"dom-if\" if=\"[[!_isArray(schema)]]\" restamp=\"\">\n      <template is=\"dom-if\" if=\"[[error]]\">\n        <div class=\"error\">[[computeError(error, schema)]]</div>\n      </template>\n\n      <template is=\"dom-if\" if=\"[[_equals(schema.type, &quot;string&quot;)]]\" restamp=\"\">\n        <template is=\"dom-if\" if=\"[[_includes(schema.name, &quot;password&quot;)]]\" restamp=\"\">\n          <paper-input\n            type=\"[[_passwordFieldType(unmaskedPassword)]]\"\n            label=\"[[computeLabel(schema)]]\"\n            value=\"{{data}}\"\n            required=\"[[schema.required]]\"\n            auto-validate=\"[[schema.required]]\"\n            error-message='Required'\n          >\n            <paper-icon-button toggles\n              active=\"{{unmaskedPassword}}\"\n              slot=\"suffix\"\n              icon=\"[[_passwordFieldIcon(unmaskedPassword)]]\"\n              id=\"iconButton\"\n              title=\"Click to toggle between masked and clear password\">\n            </paper-icon-button>\n          </paper-input>\n        </template>\n        <template is=\"dom-if\" if=\"[[!_includes(schema.name, &quot;password&quot;)]]\" restamp=\"\">\n          <paper-input\n            label=\"[[computeLabel(schema)]]\"\n            value=\"{{data}}\"\n            required=\"[[schema.required]]\"\n            auto-validate=\"[[schema.required]]\"\n            error-message='Required'\n          ></paper-input>\n        </template>\n      </template>\n\n      <template is=\"dom-if\" if=\"[[_equals(schema.type, &quot;integer&quot;)]]\" restamp=\"\">\n        <template is=\"dom-if\" if=\"[[_isRange(schema)]]\" restamp=\"\">\n          <div>\n            [[computeLabel(schema)]]\n            <ha-paper-slider pin=\"\" value=\"{{data}}\" min=\"[[schema.valueMin]]\" max=\"[[schema.valueMax]]\"></ha-paper-slider>\n          </div>\n        </template>\n        <template is=\"dom-if\" if=\"[[!_isRange(schema)]]\" restamp=\"\">\n          <paper-input\n            label=\"[[computeLabel(schema)]]\"\n            value=\"{{data}}\"\n            type=\"number\"\n            required=\"[[schema.required]]\"\n            auto-validate=\"[[schema.required]]\"\n            error-message='Required'\n          ></paper-input>\n        </template>\n      </template>\n\n      <template is=\"dom-if\" if=\"[[_equals(schema.type, &quot;float&quot;)]]\" restamp=\"\">\n        <!--TODO-->\n        <paper-input\n          label=\"[[computeLabel(schema)]]\"\n          value=\"{{data}}\"\n          required=\"[[schema.required]]\"\n          auto-validate=\"[[schema.required]]\"\n          error-message='Required'\n        ></paper-input>\n      </template>\n\n      <template is=\"dom-if\" if=\"[[_equals(schema.type, &quot;boolean&quot;)]]\" restamp=\"\">\n        <paper-checkbox checked=\"{{data}}\">[[computeLabel(schema)]]</paper-checkbox>\n      </template>\n\n      <template is=\"dom-if\" if=\"[[_equals(schema.type, &quot;select&quot;)]]\" restamp=\"\">\n        <paper-dropdown-menu label=\"[[computeLabel(schema)]]\">\n          <paper-listbox slot=\"dropdown-content\" attr-for-selected=\"item-name\" selected=\"{{data}}\">\n            <template is=\"dom-repeat\" items=\"[[schema.options]]\">\n              <paper-item item-name$=\"[[_optionValue(item)]]\">[[_optionLabel(item)]]</paper-item>\n            </template>\n          </paper-listbox>\n        </paper-dropdown-menu>\n      </template>\n\n    </template>\n`;\n  }\n\n  static get properties() {\n    return {\n      data: {\n        type: Object,\n        notify: true,\n      },\n      schema: Object,\n      error: Object,\n\n      // A function that will computes the label to be displayed for a given\n      // schema object.\n      computeLabel: {\n        type: Function,\n        value: () => schema => schema && schema.name,\n      },\n\n      // A function that will computes an error message to be displayed for a\n      // given error ID, and relevant schema object\n      computeError: {\n        type: Function,\n        value: () => (error, schema) => error, // eslint-disable-line no-unused-vars\n      },\n    };\n  }\n\n  _isArray(val) {\n    return Array.isArray(val);\n  }\n\n  _isRange(schema) {\n    return ('valueMin' in schema) && ('valueMax' in schema);\n  }\n\n  _equals(a, b) {\n    return a === b;\n  }\n\n  _includes(a, b) {\n    return a.indexOf(b) >= 0;\n  }\n\n  _getValue(obj, item) {\n    if (obj) {\n      return obj[item.name];\n    }\n    return null;\n  }\n\n  _valueChanged(ev) {\n    this.set(['data', ev.model.item.name], ev.detail.value);\n  }\n\n  _passwordFieldType(unmaskedPassword) {\n    return unmaskedPassword ? 'text' : 'password';\n  }\n\n  _passwordFieldIcon(unmaskedPassword) {\n    return unmaskedPassword ? 'hass:eye-off' : 'hass:eye';\n  }\n\n  _optionValue(item) {\n    return Array.isArray(item) ? item[0] : item;\n  }\n\n  _optionLabel(item) {\n    return Array.isArray(item) ? item[1] : item;\n  }\n}\n\ncustomElements.define('ha-form', HaForm);\n","import '@polymer/paper-button/paper-button.js';\nimport '@polymer/paper-dialog-scrollable/paper-dialog-scrollable.js';\nimport '@polymer/paper-dialog/paper-dialog.js';\nimport '@polymer/paper-tooltip/paper-tooltip.js';\nimport '@polymer/paper-spinner/paper-spinner.js';\nimport { html } from '@polymer/polymer/lib/utils/html-tag.js';\nimport { PolymerElement } from '@polymer/polymer/polymer-element.js';\n\nimport '../../../components/ha-form.js';\nimport '../../../components/ha-markdown.js';\nimport '../../../resources/ha-style.js';\n\nimport EventsMixin from '../../../mixins/events-mixin.js';\nimport LocalizeMixin from '../../../mixins/localize-mixin.js';\n\nlet instance = 0;\n\n/*\n * @appliesMixin LocalizeMixin\n * @appliesMixin EventsMixin\n */\nclass HaConfigFlow extends\n  LocalizeMixin(EventsMixin(PolymerElement)) {\n  static get template() {\n    return html`\n    <style include=\"ha-style-dialog\">\n      .error {\n        color: red;\n      }\n      paper-dialog {\n        max-width: 500px;\n      }\n      ha-markdown img:first-child:last-child {\n        display: block;\n        margin: 0 auto;\n      }\n      .init-spinner {\n        padding: 10px 100px 34px;\n        text-align: center;\n      }\n      .submit-spinner {\n        margin-right: 16px;\n      }\n    </style>\n    <paper-dialog id=\"dialog\" with-backdrop=\"\" opened=\"{{_opened}}\" on-opened-changed=\"_openedChanged\">\n      <h2>\n        <template is=\"dom-if\" if=\"[[_equals(_step.type, 'abort')]]\">\n          Aborted\n        </template>\n        <template is=\"dom-if\" if=\"[[_equals(_step.type, 'create_entry')]]\">\n          Success!\n        </template>\n        <template is=\"dom-if\" if=\"[[_equals(_step.type, 'form')]]\">\n          [[_computeStepTitle(localize, _step)]]\n        </template>\n      </h2>\n      <paper-dialog-scrollable>\n        <template is=\"dom-if\" if=\"[[_errorMsg]]\">\n          <div class='error'>[[_errorMsg]]</div>\n        </template>\n        <template is=\"dom-if\" if=\"[[!_step]]\">\n          <div class='init-spinner'><paper-spinner active></paper-spinner></div>\n        </template>\n        <template is=\"dom-if\" if=\"[[_step]]\">\n          <template is=\"dom-if\" if=\"[[_equals(_step.type, 'abort')]]\">\n            <ha-markdown content=\"[[_computeStepAbortedReason(localize, _step)]]\"></ha-markdown>\n          </template>\n\n          <template is=\"dom-if\" if=\"[[_equals(_step.type, 'create_entry')]]\">\n            <p>Created config for [[_step.title]]</p>\n          </template>\n\n          <template is=\"dom-if\" if=\"[[_equals(_step.type, 'form')]]\">\n            <template is=\"dom-if\" if=\"[[_computeStepDescription(localize, _step)]]\">\n              <ha-markdown content=\"[[_computeStepDescription(localize, _step)]]\" allow-svg></ha-markdown>\n            </template>\n\n            <ha-form\n              data=\"{{_stepData}}\"\n              on-data-changed='_increaseCounter'\n              schema=\"[[_step.data_schema]]\"\n              error=\"[[_step.errors]]\"\n              compute-label=\"[[_computeLabelCallback(localize, _step)]]\"\n              compute-error=\"[[_computeErrorCallback(localize, _step)]]\"\n            ></ha-form>\n          </template>\n        </template>\n      </paper-dialog-scrollable>\n      <div class=\"buttons\">\n        <template is=\"dom-if\" if=\"[[_equals(_step.type, 'abort')]]\">\n          <paper-button on-click=\"_flowDone\">Close</paper-button>\n        </template>\n        <template is=\"dom-if\" if=\"[[_equals(_step.type, 'create_entry')]]\">\n          <paper-button on-click=\"_flowDone\">Close</paper-button>\n        </template>\n        <template is=\"dom-if\" if=\"[[_equals(_step.type, 'form')]]\">\n          <template is=\"dom-if\" if=\"[[_loading]]\">\n            <div class='submit-spinner'><paper-spinner active></paper-spinner></div>\n          </template>\n          <template is=\"dom-if\" if=\"[[!_loading]]\">\n            <div>\n              <paper-button\n                on-click=\"_submitStep\"\n                disabled='[[!_canSubmit]]'\n              >Submit</paper-button>\n              <template is='dom-if' if='[[!_canSubmit]]'>\n                <paper-tooltip position=\"left\">\n                  Not all required fields are filled in.\n                </paper-tooltip>\n              </template>\n            </div>\n          </template>\n        </template>\n      </div>\n    </paper-dialog>\n`;\n  }\n\n  static get properties() {\n    return {\n      _hass: Object,\n      _dialogClosedCallback: Function,\n      _instance: Number,\n\n      _loading: {\n        type: Boolean,\n        value: false,\n      },\n\n      // Error message when can't talk to server etc\n      _errorMsg: String,\n\n      _canSubmit: {\n        type: Boolean,\n        computed: '_computeCanSubmit(_step, _stepData, _counter)'\n      },\n\n      // Bogus counter because observing of `_stepData` doesn't seem to work\n      _counter: {\n        type: Number,\n        value: 0,\n      },\n\n      _opened: {\n        type: Boolean,\n        value: false,\n      },\n\n      _step: {\n        type: Object,\n        value: null,\n      },\n\n      /*\n       * Store user entered data.\n       */\n      _stepData: {\n        type: Object,\n        value: null,\n      }\n    };\n  }\n\n  ready() {\n    super.ready();\n    this.addEventListener('keypress', (ev) => {\n      if (ev.keyCode === 13) {\n        this._submitStep();\n      }\n    });\n  }\n\n  showDialog({ hass, continueFlowId, newFlowForHandler, dialogClosedCallback }) {\n    this.hass = hass;\n    this._instance = instance++;\n    this._dialogClosedCallback = dialogClosedCallback;\n    this._createdFromHandler = !!newFlowForHandler;\n    this._loading = true;\n    this._opened = true;\n\n    const fetchStep = continueFlowId ?\n      this.hass.callApi('get', `config/config_entries/flow/${continueFlowId}`) :\n      this.hass.callApi('post', 'config/config_entries/flow', { handler: newFlowForHandler });\n\n    const curInstance = this._instance;\n\n    fetchStep.then((step) => {\n      if (curInstance !== this._instance) return;\n\n      this._processStep(step);\n      this._loading = false;\n      // When the flow changes, center the dialog.\n      // Don't do it on each step or else the dialog keeps bouncing.\n      setTimeout(() => this.$.dialog.center(), 0);\n    });\n  }\n\n  _submitStep() {\n    this._loading = true;\n    this._errorMsg = null;\n\n    const curInstance = this._instance;\n\n    const data = {};\n    Object.keys(this._stepData).forEach((key) => {\n      const value = this._stepData[key];\n      const isEmpty = [undefined, ''].includes(value);\n\n      if (!isEmpty) {\n        data[key] = value;\n      }\n    });\n\n    this.hass.callApi('post', `config/config_entries/flow/${this._step.flow_id}`, data)\n      .then(\n        (step) => {\n          if (curInstance !== this._instance) return;\n\n          this._processStep(step);\n          this._loading = false;\n        },\n        (err) => {\n          this._errorMsg = (err && err.body && err.body.message) || 'Unknown error occurred';\n          this._loading = false;\n        }\n      );\n  }\n\n  _processStep(step) {\n    if (!step.errors) step.errors = {};\n    this._step = step;\n    // We got a new form if there are no errors.\n    if (step.type === 'form' && Object.keys(step.errors).length === 0) {\n      const data = {};\n      step.data_schema.forEach((field) => {\n        if ('default' in field) {\n          data[field.name] = field.default;\n        }\n      });\n      this._stepData = data;\n    }\n  }\n\n  _flowDone() {\n    this._opened = false;\n    const flowFinished = this._step && ['success', 'abort'].includes(this._step.type);\n\n    if (this._step && !flowFinished && this._createdFromHandler) {\n      this.hass.callApi('delete', `config/config_entries/flow/${this._step.flow_id}`);\n    }\n\n    this._dialogClosedCallback({\n      flowFinished,\n    });\n\n    this._errorMsg = null;\n    this._step = null;\n    this._stepData = {};\n    this._dialogClosedCallback = null;\n  }\n\n  _equals(a, b) {\n    return a === b;\n  }\n\n  _openedChanged(ev) {\n    // Closed dialog by clicking on the overlay\n    if (this._step && !ev.detail.value) {\n      this._flowDone();\n    }\n  }\n\n  _computeStepAbortedReason(localize, step) {\n    return localize(`component.${step.handler}.config.abort.${step.reason}`);\n  }\n\n  _computeStepTitle(localize, step) {\n    return localize(`component.${step.handler}.config.step.${step.step_id}.title`);\n  }\n\n  _computeStepDescription(localize, step) {\n    const args = [`component.${step.handler}.config.step.${step.step_id}.description`];\n    const placeholders = step.description_placeholders || {};\n    Object.keys(placeholders).forEach((key) => {\n      args.push(key);\n      args.push(placeholders[key]);\n    });\n    return localize(...args);\n  }\n\n  _computeLabelCallback(localize, step) {\n    // Returns a callback for ha-form to calculate labels per schema object\n    return schema => localize(`component.${step.handler}.config.step.${step.step_id}.data.${schema.name}`);\n  }\n\n  _computeErrorCallback(localize, step) {\n    // Returns a callback for ha-form to calculate error messages\n    return error => localize(`component.${step.handler}.config.error.${error}`);\n  }\n\n  _computeCanSubmit(step, stepData) {\n    // We can submit if all required fields are filled in\n    return step !== null && step.type === 'form' && stepData !== null &&\n      step.data_schema.every(field =>\n        field.optional || !['', undefined].includes(stepData[field.name]));\n  }\n\n  _increaseCounter() {\n    this._counter += 1;\n  }\n}\n\ncustomElements.define('ha-config-flow', HaConfigFlow);\n"],"sourceRoot":""}