{"version":3,"sources":["webpack:///./src/layouts/hass-subpage.js","webpack:///./src/common/string/compare.js","webpack:///./src/panels/config/overview/ha-overview-device-row.js","webpack:///./src/panels/config/overview/ha-config-overview.js"],"names":["customElements","define","_polymer_polymer_polymer_element_js__WEBPACK_IMPORTED_MODULE_5__","a","template","_polymer_polymer_lib_utils_html_tag_js__WEBPACK_IMPORTED_MODULE_4__","properties","header","String","_backTapped","history","back","compare","b","computeEntityName","hass","entity","name","state","states","entity_id","Object","compute_state_name","events_mixin","polymer_element","html_tag","device","devices","Array","entities","_childDevices","type","computed","_computeChildDevices","filter","dev","hub_device_id","id","sort","dev1","dev2","_computeDeviceEntities","device_id","ent1","ent2","_computeStateObj","_computeEntityName","_computeDeviceName","deviceId","find","_openMoreInfo","ev","this","fire","entityId","model","isWide","Boolean","_loading","_configs","value","_devices","_entities","ready","super","_loadData","connectedCallback","disconnectedCallback","callWS","then","callApi","configs","conf1","conf2","title","_computeLoading","_computeIntegrationTitle","localize","integration","_computeConfigEntryDevices","configEntry","config_entries","includes","entry_id"],"mappings":"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","file":"2c4ae6492a3e2c103ac1.chunk.js","sourcesContent":["import '@polymer/app-layout/app-header-layout/app-header-layout.js';\nimport '@polymer/app-layout/app-header/app-header.js';\nimport '@polymer/app-layout/app-toolbar/app-toolbar.js';\nimport '@polymer/paper-icon-button/paper-icon-button.js';\nimport { html } from '@polymer/polymer/lib/utils/html-tag.js';\nimport { PolymerElement } from '@polymer/polymer/polymer-element.js';\n\nclass HassSubpage extends PolymerElement {\n  static get template() {\n    return html`\n    <style include=\"ha-style\"></style>\n    <app-header-layout has-scrolling-region=\"\">\n      <app-header slot=\"header\" fixed=\"\">\n        <app-toolbar>\n          <paper-icon-button icon=\"hass:arrow-left\" on-click=\"_backTapped\"></paper-icon-button>\n          <div main-title=\"\">[[header]]</div>\n        </app-toolbar>\n      </app-header>\n\n      <slot></slot>\n    </app-header-layout>\n`;\n  }\n\n  static get properties() {\n    return {\n      header: String\n    };\n  }\n\n  _backTapped() {\n    history.back();\n  }\n}\n\ncustomElements.define('hass-subpage', HassSubpage);\n","export default (a, b) => {\n  if (a < b) {\n    return -1;\n  }\n  if (a > b) {\n    return 1;\n  }\n\n  return 0;\n};\n","import '@polymer/paper-card/paper-card.js';\nimport { html } from '@polymer/polymer/lib/utils/html-tag.js';\nimport { PolymerElement } from '@polymer/polymer/polymer-element.js';\n\nimport '../../../layouts/hass-subpage.js';\n\nimport EventsMixin from '../../../mixins/events-mixin.js';\nimport computeStateName from '../../../common/entity/compute_state_name.js';\nimport '../../../components/entity/state-badge.js';\nimport compare from '../../../common/string/compare.js';\n\nfunction computeEntityName(hass, entity) {\n  if (entity.name) return entity.name;\n  const state = hass.states[entity.entity_id];\n  return state ? computeStateName(state) : null;\n}\n\n/*\n * @appliesMixin EventsMixin\n */\nclass HaDeviceRow extends EventsMixin(PolymerElement) {\n  static get template() {\n    return html`\n    <style>\n      :host {\n        display: block;\n      }\n      .device-row {\n        display: flex;\n        flex-direction: row;\n        margin-bottom: 8px;\n      }\n      .device {\n        width: 30%;\n      }\n      .device .name {\n        font-weight: bold;\n      }\n      .device .model,\n      .device .manuf {\n        color: var(--secondary-text-color);\n      }\n      .entity-rows {\n        padding-top: 12px;\n        margin-left: 8px;\n      }\n      .entity-row {\n        margin: 8px 0;\n        display: flex;\n        flex-direction: row;\n      }\n      state-badge {\n        margin-right: 8px;\n        cursor: pointer;\n      }\n      .entity-row .entity-id {\n        color: var(--secondary-text-color);\n      }\n      ha-overview-device-row {\n        margin-left: 16px;\n      }\n    </style>\n    <div>\n      <div class='device-row'>\n      <div class='device'>\n        <div class='name'>[[device.name]]</div>\n        <div class='model'>[[device.model]]</div>\n        <div class='manuf'>by [[device.manufacturer]]</div>\n      </div>\n\n      <div class='entity-rows'>\n        <template is='dom-repeat' items='[[_computeDeviceEntities(hass, device, entities)]]' as='entity'>\n          <div class='entity-row'>\n            <state-badge\n              state-obj=\"[[_computeStateObj(entity, hass)]]\"\n              on-click='_openMoreInfo'\n            ></state-badge>\n            <div>\n              <div class='name'>[[_computeEntityName(entity, hass)]]</div>\n              <div class='entity-id'>[[entity.entity_id]]</div>\n            </div>\n          </div class='entity-row'>\n        </template>\n      </div>\n      </div>\n      <template is='dom-repeat' items='[[_childDevices]]' as='device'>\n        <ha-overview-device-row\n          hass='[[hass]]'\n          devices='[[devices]]'\n          device='[[device]]'\n          entities='[[entities]]'\n        ></ha-overview-device-row>\n      </template>\n    </div>\n    `;\n  }\n\n  static get properties() {\n    return {\n      device: Object,\n      devices: Array,\n      entities: Array,\n      hass: Object,\n      _childDevices: {\n        type: Array,\n        computed: '_computeChildDevices(device, devices)',\n      }\n    };\n  }\n\n  _computeChildDevices(device, devices) {\n    return devices\n      .filter(dev => dev.hub_device_id === device.id)\n      .sort((dev1, dev2) => compare(dev1.name, dev2.name));\n  }\n\n  _computeDeviceEntities(hass, device, entities) {\n    return entities\n      .filter(entity => entity.device_id === device.id)\n      .sort((ent1, ent2) => compare(\n        computeEntityName(hass, ent1) || `zzz${ent1.entity_id}`,\n        computeEntityName(hass, ent2) || `zzz${ent2.entity_id}`\n      ));\n  }\n\n  _computeStateObj(entity, hass) {\n    return hass.states[entity.entity_id];\n  }\n\n  _computeEntityName(entity, hass) {\n    return computeEntityName(hass, entity) || '(entity unavailable)';\n  }\n\n  _computeDeviceName(devices, deviceId) {\n    const device = devices.find(dev => dev.id === deviceId);\n    return device ? device.name : '(device unavailable)';\n  }\n\n  _openMoreInfo(ev) {\n    this.fire('hass-more-info', { entityId: ev.model.entity.entity_id });\n  }\n}\n\ncustomElements.define('ha-overview-device-row', HaDeviceRow);\n","import '@polymer/paper-card/paper-card.js';\nimport { html } from '@polymer/polymer/lib/utils/html-tag.js';\nimport { PolymerElement } from '@polymer/polymer/polymer-element.js';\n\nimport '../../../layouts/hass-subpage.js';\n\nimport computeStateName from '../../../common/entity/compute_state_name.js';\nimport '../../../components/entity/state-badge.js';\n\nimport './ha-overview-device-row.js';\nimport compare from '../../../common/string/compare.js';\n\nclass HaConfigOverview extends PolymerElement {\n  static get template() {\n    return html`\n    <style>\n      a {\n        color: var(--primary-color);\n      }\n      paper-card {\n        display: block;\n        margin: 16px auto;\n        max-width: 500px;\n      }\n      li {\n        color: var(--primary-text-color);\n      }\n      .secondary {\n        color: var(--secondary-text-color);\n      }\n      .device-row {\n        display: flex;\n        flex-direction: row;\n        margin-bottom: 8px;\n      }\n      .device {\n        width: 30%;\n      }\n      .device .name {\n        font-weight: bold;\n      }\n      .device .model,\n      .device .manuf,\n      .device .hub {\n        color: var(--secondary-text-color);\n      }\n      .entity-rows {\n        padding-top: 12px;\n        margin-left: 8px;\n      }\n      .entity-row {\n        margin: 8px 0;\n        display: flex;\n        flex-direction: row;\n      }\n      state-badge {\n        margin-right: 8px;\n      }\n      .entity-row .entity-id {\n        color: var(--secondary-text-color);\n      }\n    </style>\n    <hass-subpage header=\"Overview\">\n      <div class='content'>\n        <template is='dom-if' if='[[!_configs.length]]'>\n          <paper-card heading='No integrations'>\n            <div class='card-content'>\n              No integrations found. <a href='/config/integrations'>Configure an integration</a>\n            </div>\n          </paper-card>\n        </template>\n        <template is='dom-repeat' items='[[_configs]]' as='configEntry'>\n          <paper-card heading='[[configEntry.title]]'>\n            <div class='card-content'>\n              <!-- <h1>[[configEntry.title]] ([[_computeIntegrationTitle(localize, configEntry.domain)]])</h1> -->\n\n              <template is='dom-repeat' items='[[_computeConfigEntryDevices(configEntry, _devices)]]' as='device'>\n                <ha-overview-device-row\n                  hass='[[hass]]'\n                  devices='[[_devices]]'\n                  device='[[device]]'\n                  entities='[[_entities]]'\n                ></ha-overview-device-row>\n              </template>\n            </div>\n          </paper-card>\n        </dom-repeat>\n      </div>\n    </hass-subpage>\n`;\n  }\n\n  static get properties() {\n    return {\n      hass: Object,\n      isWide: Boolean,\n\n      _loading: {\n        type: Boolean,\n        computed: '_computeLoading(_configs, _devices, _entities)'\n      },\n      _configs: {\n        type: Array,\n        value: null,\n      },\n      _devices: {\n        type: Array,\n        value: null,\n      },\n      _entities: {\n        type: Array,\n        value: null,\n      }\n    };\n  }\n\n  ready() {\n    super.ready();\n    this._loadData();\n  }\n\n  connectedCallback() {\n    super.connectedCallback();\n  }\n\n  disconnectedCallback() {\n    super.disconnectedCallback();\n  }\n\n  _loadData() {\n    this.hass.callWS({ type: 'config/entity_registry/list' })\n      .then((entities) => { this._entities = entities; });\n    this.hass.callWS({ type: 'config/device_registry/list' })\n      .then((devices) => { this._devices = devices; });\n    this.hass.callApi('get', 'config/config_entries/entry')\n      .then((configs) => {\n        this._configs = configs.sort((conf1, conf2) => compare(conf1.title, conf2.title));\n      });\n  }\n\n  _computeLoading(configs, devices, entities) {\n    return configs && devices && entities;\n  }\n\n  _computeIntegrationTitle(localize, integration) {\n    return localize(`component.${integration}.config.title`);\n  }\n\n  _computeConfigEntryDevices(configEntry, devices) {\n    return devices.filter(device =>\n      device.config_entries.includes(configEntry.entry_id) &&\n      !device.hub_device_id).sort((dev1, dev2) => compare(dev1.name, dev2.name));\n  }\n\n  _computeDeviceEntities(device, entities) {\n    return entities.filter(entity => entity.device_id === device.id);\n  }\n\n  _computeStateObj(entity, hass) {\n    return hass.states[entity.entity_id];\n  }\n\n  _computeEntityName(entity, hass) {\n    const state = hass.states[entity.entity_id];\n\n    if (state) {\n      return computeStateName(state);\n    }\n    return `${entity.name || ''} (entity unavailable)`;\n  }\n\n  _computeDeviceName(devices, deviceId) {\n    const device = devices.find(dev => dev.id === deviceId);\n    return device ? device.name : '(device unavailable)';\n  }\n}\n\ncustomElements.define('ha-config-overview', HaConfigOverview);\n"],"sourceRoot":""}