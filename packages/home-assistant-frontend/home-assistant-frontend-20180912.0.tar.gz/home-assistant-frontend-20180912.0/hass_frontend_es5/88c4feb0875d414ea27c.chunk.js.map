{"version":3,"sources":["webpack:///./node_modules/@polymer/paper-item/paper-item-body.js","webpack:///./node_modules/@polymer/iron-autogrow-textarea/iron-autogrow-textarea.js","webpack:///./node_modules/@polymer/paper-input/paper-textarea.js","webpack:///./src/panels/mailbox/ha-panel-mailbox.js"],"names":["Object","_polymer_polymer_lib_legacy_polymer_fn_js__WEBPACK_IMPORTED_MODULE_4__","a","_template","_polymer_polymer_lib_utils_html_tag_js__WEBPACK_IMPORTED_MODULE_5__","_templateObject","is","209","module","__webpack_exports__","__webpack_require__","iron_control_state","iron_validatable_behavior","polymer_fn","html_tag","polymer_dom","freeze","defineProperties","raw","value","behaviors","properties","observer","type","String","notify","bindValue","rows","Number","maxRows","autocomplete","autofocus","Boolean","inputmode","placeholder","readonly","required","minlength","maxlength","label","listeners","input","textarea","this","$","selectionStart","selectionEnd","attached","navigator","userAgent","match","style","marginLeft","validate","valid","validity","hasValidator","call","invalid","fire","_bindValueChanged","_valueChanged","mirror","innerHTML","_valueForMirror","_onInput","event","eventPath","b","path","target","_constrain","tokens","_tokens","length","slice","push","join","replace","split","_updateCached","paper_textarea_templateObject","paper_input_behavior","iron_form_element_behavior","_ariaLabelledBy","_ariaDescribedBy","start","end","_ariaLabelledByChanged","ariaLabelledBy","_focusableElement","setAttribute","_ariaDescribedByChanged","ariaDescribedBy","inputElement","registeredDialog","HaPanelMailbox","_mixins_localize_mixin_js__WEBPACK_IMPORTED_MODULE_13__","_polymer_polymer_polymer_element_js__WEBPACK_IMPORTED_MODULE_9__","_createClass","key","_get","prototype","__proto__","getPrototypeOf","dialogShowEvent","dialogTag","dialogImport","e","then","bind","hassChanged","hass","connection","subscribeEvents","unsub","_unsubEvents","computePlatforms","platforms","_messages","getMessages","items","message","model","item","map","platform","callApi","values","platformItems","arrayLength","i","datetime","_common_datetime_format_date_time_js__WEBPACK_IMPORTED_MODULE_12__","Date","info","origtime","timestamp","caller","callerid","text","sha","duration","Promise","all","_ref","concat","apply","sort","get","_polymer_polymer_lib_utils_html_tag_js__WEBPACK_IMPORTED_MODULE_8__","narrow","showMenu","Array","customElements","define"],"mappings":"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","file":"88c4feb0875d414ea27c.chunk.js","sourcesContent":["/**\n@license\nCopyright (c) 2015 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n/*\nUse `<paper-item-body>` in a `<paper-item>` or `<paper-icon-item>` to make two- or\nthree- line items. It is a flex item that is a vertical flexbox.\n\n    <paper-item>\n      <paper-item-body two-line>\n        <div>Show your status</div>\n        <div secondary>Your status is visible to everyone</div>\n      </paper-item-body>\n    </paper-item>\n\nThe child elements with the `secondary` attribute is given secondary text styling.\n\n### Styling\n\nThe following custom properties and mixins are available for styling:\n\nCustom property | Description | Default\n----------------|-------------|----------\n`--paper-item-body-two-line-min-height`   | Minimum height of a two-line item          | `72px`\n`--paper-item-body-three-line-min-height` | Minimum height of a three-line item        | `88px`\n`--paper-item-body-secondary-color`       | Foreground color for the `secondary` area  | `--secondary-text-color`\n`--paper-item-body-secondary`             | Mixin applied to the `secondary` area      | `{}`\n\n*/\n/*\n  FIXME(polymer-modulizer): the above comments were extracted\n  from HTML and may be out of place here. Review them and\n  then delete this comment!\n*/\nimport '@polymer/polymer/polymer-legacy.js';\n\nimport '@polymer/iron-flex-layout/iron-flex-layout.js';\nimport '@polymer/paper-styles/default-theme.js';\nimport '@polymer/paper-styles/typography.js';\nimport { Polymer } from '@polymer/polymer/lib/legacy/polymer-fn.js';\nimport { html } from '@polymer/polymer/lib/utils/html-tag.js';\nPolymer({\n  _template: html`\n    <style>\n      :host {\n        overflow: hidden; /* needed for text-overflow: ellipsis to work on ff */\n        @apply --layout-vertical;\n        @apply --layout-center-justified;\n        @apply --layout-flex;\n      }\n\n      :host([two-line]) {\n        min-height: var(--paper-item-body-two-line-min-height, 72px);\n      }\n\n      :host([three-line]) {\n        min-height: var(--paper-item-body-three-line-min-height, 88px);\n      }\n\n      :host > ::slotted(*) {\n        overflow: hidden;\n        text-overflow: ellipsis;\n        white-space: nowrap;\n      }\n\n      :host > ::slotted([secondary]) {\n        @apply --paper-font-body1;\n\n        color: var(--paper-item-body-secondary-color, var(--secondary-text-color));\n\n        @apply --paper-item-body-secondary;\n      }\n    </style>\n\n    <slot></slot>\n`,\n\n  is: 'paper-item-body'\n});\n","/**\n@license\nCopyright (c) 2015 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n/**\n`iron-autogrow-textarea` is an element containing a textarea that grows in height as more\nlines of input are entered. Unless an explicit height or the `maxRows` property is set, it will\nnever scroll.\n\nExample:\n\n    <iron-autogrow-textarea></iron-autogrow-textarea>\n\n### Styling\n\nThe following custom properties and mixins are available for styling:\n\nCustom property | Description | Default\n----------------|-------------|----------\n`--iron-autogrow-textarea` | Mixin applied to the textarea | `{}`\n`--iron-autogrow-textarea-placeholder` | Mixin applied to the textarea placeholder | `{}`\n\n@group Iron Elements\n@hero hero.svg\n@demo demo/index.html\n*/\n/*\n  FIXME(polymer-modulizer): the above comments were extracted\n  from HTML and may be out of place here. Review them and\n  then delete this comment!\n*/\nimport '@polymer/polymer/polymer-legacy.js';\n\nimport { IronControlState } from '@polymer/iron-behaviors/iron-control-state.js';\nimport '@polymer/iron-flex-layout/iron-flex-layout.js';\nimport { IronValidatableBehavior } from '@polymer/iron-validatable-behavior/iron-validatable-behavior.js';\nimport { Polymer } from '@polymer/polymer/lib/legacy/polymer-fn.js';\nimport { html } from '@polymer/polymer/lib/utils/html-tag.js';\nimport { dom } from '@polymer/polymer/lib/legacy/polymer.dom.js';\nPolymer({\n  _template: html`\n    <style>\n      :host {\n        display: inline-block;\n        position: relative;\n        width: 400px;\n        border: 1px solid;\n        padding: 2px;\n        -moz-appearance: textarea;\n        -webkit-appearance: textarea;\n        overflow: hidden;\n      }\n\n      .mirror-text {\n        visibility: hidden;\n        word-wrap: break-word;\n        @apply --iron-autogrow-textarea;\n      }\n\n      .fit {\n        @apply --layout-fit;\n      }\n\n      textarea {\n        position: relative;\n        outline: none;\n        border: none;\n        resize: none;\n        background: inherit;\n        color: inherit;\n        /* see comments in template */\n        width: 100%;\n        height: 100%;\n        font-size: inherit;\n        font-family: inherit;\n        line-height: inherit;\n        text-align: inherit;\n        @apply --iron-autogrow-textarea;\n      }\n\n      textarea::-webkit-input-placeholder {\n        @apply --iron-autogrow-textarea-placeholder;\n      }\n\n      textarea:-moz-placeholder {\n        @apply --iron-autogrow-textarea-placeholder;\n      }\n\n      textarea::-moz-placeholder {\n        @apply --iron-autogrow-textarea-placeholder;\n      }\n\n      textarea:-ms-input-placeholder {\n        @apply --iron-autogrow-textarea-placeholder;\n      }\n    </style>\n\n    <!-- the mirror sizes the input/textarea so it grows with typing -->\n    <!-- use &#160; instead &nbsp; of to allow this element to be used in XHTML -->\n    <div id=\"mirror\" class=\"mirror-text\" aria-hidden=\"true\">&nbsp;</div>\n\n    <!-- size the input/textarea with a div, because the textarea has intrinsic size in ff -->\n    <div class=\"textarea-container fit\">\n      <textarea id=\"textarea\" name\\$=\"[[name]]\" aria-label\\$=\"[[label]]\" autocomplete\\$=\"[[autocomplete]]\" autofocus\\$=\"[[autofocus]]\" inputmode\\$=\"[[inputmode]]\" placeholder\\$=\"[[placeholder]]\" readonly\\$=\"[[readonly]]\" required\\$=\"[[required]]\" disabled\\$=\"[[disabled]]\" rows\\$=\"[[rows]]\" minlength\\$=\"[[minlength]]\" maxlength\\$=\"[[maxlength]]\"></textarea>\n    </div>\n`,\n\n  is: 'iron-autogrow-textarea',\n  behaviors: [IronValidatableBehavior, IronControlState],\n\n  properties: {\n    /**\n     * Use this property instead of `bind-value` for two-way data binding.\n     * @type {string|number}\n     */\n    value: {observer: '_valueChanged', type: String, notify: true},\n\n    /**\n     * This property is deprecated, and just mirrors `value`. Use `value`\n     * instead.\n     * @type {string|number}\n     */\n    bindValue: {observer: '_bindValueChanged', type: String, notify: true},\n\n    /**\n     * The initial number of rows.\n     *\n     * @attribute rows\n     * @type number\n     * @default 1\n     */\n    rows: {type: Number, value: 1, observer: '_updateCached'},\n\n    /**\n     * The maximum number of rows this element can grow to until it\n     * scrolls. 0 means no maximum.\n     *\n     * @attribute maxRows\n     * @type number\n     * @default 0\n     */\n    maxRows: {type: Number, value: 0, observer: '_updateCached'},\n\n    /**\n     * Bound to the textarea's `autocomplete` attribute.\n     */\n    autocomplete: {type: String, value: 'off'},\n\n    /**\n     * Bound to the textarea's `autofocus` attribute.\n     */\n    autofocus: {type: Boolean, value: false},\n\n    /**\n     * Bound to the textarea's `inputmode` attribute.\n     */\n    inputmode: {type: String},\n\n    /**\n     * Bound to the textarea's `placeholder` attribute.\n     */\n    placeholder: {type: String},\n\n    /**\n     * Bound to the textarea's `readonly` attribute.\n     */\n    readonly: {type: String},\n\n    /**\n     * Set to true to mark the textarea as required.\n     */\n    required: {type: Boolean},\n\n    /**\n     * The minimum length of the input value.\n     */\n    minlength: {type: Number},\n\n    /**\n     * The maximum length of the input value.\n     */\n    maxlength: {type: Number},\n\n    /**\n     * Bound to the textarea's `aria-label` attribute.\n     */\n    label: {type: String}\n\n  },\n\n  listeners: {'input': '_onInput'},\n\n  /**\n   * Returns the underlying textarea.\n   * @return {!HTMLTextAreaElement}\n   */\n  get textarea() {\n    return this.$.textarea;\n  },\n\n  /**\n   * Returns textarea's selection start.\n   * @return {number}\n   */\n  get selectionStart() {\n    return this.$.textarea.selectionStart;\n  },\n\n  /**\n   * Returns textarea's selection end.\n   * @return {number}\n   */\n  get selectionEnd() {\n    return this.$.textarea.selectionEnd;\n  },\n\n  /**\n   * Sets the textarea's selection start.\n   */\n  set selectionStart(value) {\n    this.$.textarea.selectionStart = value;\n  },\n\n  /**\n   * Sets the textarea's selection end.\n   */\n  set selectionEnd(value) {\n    this.$.textarea.selectionEnd = value;\n  },\n\n  attached: function() {\n    /* iOS has an arbitrary left margin of 3px that isn't present\n     * in any other browser, and means that the paper-textarea's cursor\n     * overlaps the label.\n     * See https://github.com/PolymerElements/paper-input/issues/468.\n     */\n    var IS_IOS = navigator.userAgent.match(/iP(?:[oa]d|hone)/);\n    if (IS_IOS) {\n      this.$.textarea.style.marginLeft = '-3px';\n    }\n  },\n\n  /**\n   * Returns true if `value` is valid. The validator provided in `validator`\n   * will be used first, if it exists; otherwise, the `textarea`'s validity\n   * is used.\n   * @return {boolean} True if the value is valid.\n   */\n  validate: function() {\n    // Use the nested input's native validity.\n    var valid = this.$.textarea.validity.valid;\n\n    // Only do extra checking if the browser thought this was valid.\n    if (valid) {\n      // Empty, required input is invalid\n      if (this.required && this.value === '') {\n        valid = false;\n      } else if (this.hasValidator()) {\n        valid = IronValidatableBehavior.validate.call(this, this.value);\n      }\n    }\n\n    this.invalid = !valid;\n    this.fire('iron-input-validate');\n    return valid;\n  },\n\n  _bindValueChanged: function(bindValue) {\n    this.value = bindValue;\n  },\n\n  _valueChanged: function(value) {\n    var textarea = this.textarea;\n    if (!textarea) {\n      return;\n    }\n\n    // If the bindValue changed manually, then we need to also update\n    // the underlying textarea's value. Otherwise this change was probably\n    // generated from the _onInput handler, and the two values are already\n    // the same.\n    if (textarea.value !== value) {\n      textarea.value = !(value || value === 0) ? '' : value;\n    }\n\n    this.bindValue = value;\n    this.$.mirror.innerHTML = this._valueForMirror();\n\n    // Manually notify because we don't want to notify until after setting\n    // value.\n    this.fire('bind-value-changed', {value: this.bindValue});\n  },\n\n  _onInput: function(event) {\n    var eventPath = dom(event).path;\n    this.value = eventPath ? eventPath[0].value : event.target.value;\n  },\n\n  _constrain: function(tokens) {\n    var _tokens;\n    tokens = tokens || [''];\n    // Enforce the min and max heights for a multiline input to avoid\n    // measurement\n    if (this.maxRows > 0 && tokens.length > this.maxRows) {\n      _tokens = tokens.slice(0, this.maxRows);\n    } else {\n      _tokens = tokens.slice(0);\n    }\n    while (this.rows > 0 && _tokens.length < this.rows) {\n      _tokens.push('');\n    }\n    // Use &#160; instead &nbsp; of to allow this element to be used in XHTML.\n    return _tokens.join('<br/>') + '&#160;';\n  },\n\n  _valueForMirror: function() {\n    var input = this.textarea;\n    if (!input) {\n      return;\n    }\n    this.tokens = (input && input.value) ? input.value.replace(/&/gm, '&amp;')\n                                               .replace(/\"/gm, '&quot;')\n                                               .replace(/'/gm, '&#39;')\n                                               .replace(/</gm, '&lt;')\n                                               .replace(/>/gm, '&gt;')\n                                               .split('\\n') :\n                                           [''];\n    return this._constrain(this.tokens);\n  },\n\n  _updateCached: function() {\n    this.$.mirror.innerHTML = this._constrain(this.tokens);\n  }\n});\n","/**\n@license\nCopyright (c) 2015 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n/*\n`<paper-textarea>` is a multi-line text field with Material Design styling.\n\n    <paper-textarea label=\"Textarea label\"></paper-textarea>\n\nSee `Polymer.PaperInputBehavior` for more API docs.\n\n### Validation\n\nCurrently only `required` and `maxlength` validation is supported.\n\n### Styling\n\nSee `Polymer.PaperInputContainer` for a list of custom properties used to\nstyle this element.\n*/\n/*\n  FIXME(polymer-modulizer): the above comments were extracted\n  from HTML and may be out of place here. Review them and\n  then delete this comment!\n*/\nimport '@polymer/polymer/polymer-legacy.js';\n\nimport '@polymer/iron-autogrow-textarea/iron-autogrow-textarea.js';\nimport { IronFormElementBehavior } from '@polymer/iron-form-element-behavior/iron-form-element-behavior.js';\nimport { PaperInputBehavior } from './paper-input-behavior.js';\nimport './paper-input-char-counter.js';\nimport './paper-input-container.js';\nimport './paper-input-error.js';\nimport { Polymer } from '@polymer/polymer/lib/legacy/polymer-fn.js';\nimport { html } from '@polymer/polymer/lib/utils/html-tag.js';\nPolymer({\n  _template: html`\n    <style>\n      :host {\n        display: block;\n      }\n\n      :host([hidden]) {\n        display: none !important;\n      }\n\n      label {\n        pointer-events: none;\n      }\n    </style>\n\n    <paper-input-container no-label-float\\$=\"[[noLabelFloat]]\" always-float-label=\"[[_computeAlwaysFloatLabel(alwaysFloatLabel,placeholder)]]\" auto-validate\\$=\"[[autoValidate]]\" disabled\\$=\"[[disabled]]\" invalid=\"[[invalid]]\">\n\n      <label hidden\\$=\"[[!label]]\" aria-hidden=\"true\" for\\$=\"[[_inputId]]\" slot=\"label\">[[label]]</label>\n\n      <iron-autogrow-textarea class=\"paper-input-input\" slot=\"input\" id\\$=\"[[_inputId]]\" aria-labelledby\\$=\"[[_ariaLabelledBy]]\" aria-describedby\\$=\"[[_ariaDescribedBy]]\" bind-value=\"{{value}}\" invalid=\"{{invalid}}\" validator\\$=\"[[validator]]\" disabled\\$=\"[[disabled]]\" autocomplete\\$=\"[[autocomplete]]\" autofocus\\$=\"[[autofocus]]\" inputmode\\$=\"[[inputmode]]\" name\\$=\"[[name]]\" placeholder\\$=\"[[placeholder]]\" readonly\\$=\"[[readonly]]\" required\\$=\"[[required]]\" minlength\\$=\"[[minlength]]\" maxlength\\$=\"[[maxlength]]\" autocapitalize\\$=\"[[autocapitalize]]\" rows\\$=\"[[rows]]\" max-rows\\$=\"[[maxRows]]\" on-change=\"_onChange\"></iron-autogrow-textarea>\n\n      <template is=\"dom-if\" if=\"[[errorMessage]]\">\n        <paper-input-error aria-live=\"assertive\" slot=\"add-on\">[[errorMessage]]</paper-input-error>\n      </template>\n\n      <template is=\"dom-if\" if=\"[[charCounter]]\">\n        <paper-input-char-counter slot=\"add-on\"></paper-input-char-counter>\n      </template>\n\n    </paper-input-container>\n`,\n\n  is: 'paper-textarea',\n\n  behaviors: [\n    PaperInputBehavior,\n    IronFormElementBehavior,\n  ],\n\n  properties: {\n    _ariaLabelledBy: {\n      observer: '_ariaLabelledByChanged',\n      type: String,\n    },\n\n    _ariaDescribedBy: {\n      observer: '_ariaDescribedByChanged',\n      type: String,\n    },\n\n    /**\n     * The initial number of rows.\n     *\n     * @attribute rows\n     * @type number\n     * @default 1\n     */\n    rows: {\n      type: Number,\n      value: 1,\n    },\n\n    /**\n     * The maximum number of rows this element can grow to until it\n     * scrolls. 0 means no maximum.\n     *\n     * @attribute maxRows\n     * @type number\n     * @default 0\n     */\n    maxRows: {\n      type: Number,\n      value: 0,\n    },\n  },\n\n  /**\n   * @return {number}\n   */\n  get selectionStart() {\n    return this.$.input.textarea.selectionStart;\n  },\n\n  set selectionStart(start) {\n    this.$.input.textarea.selectionStart = start;\n  },\n\n  /**\n   * @return {number}\n   */\n  get selectionEnd() {\n    return this.$.input.textarea.selectionEnd;\n  },\n\n  set selectionEnd(end) {\n    this.$.input.textarea.selectionEnd = end;\n  },\n\n  _ariaLabelledByChanged: function(ariaLabelledBy) {\n    this._focusableElement.setAttribute('aria-labelledby', ariaLabelledBy);\n  },\n\n  _ariaDescribedByChanged: function(ariaDescribedBy) {\n    this._focusableElement.setAttribute('aria-describedby', ariaDescribedBy);\n  },\n\n  get _focusableElement() {\n    return this.inputElement.textarea;\n  }\n});\n","import '@polymer/app-layout/app-header-layout/app-header-layout.js';\nimport '@polymer/app-layout/app-header/app-header.js';\nimport '@polymer/app-layout/app-toolbar/app-toolbar.js';\nimport '@polymer/paper-button/paper-button.js';\nimport '@polymer/paper-card/paper-card.js';\nimport '@polymer/paper-input/paper-textarea.js';\nimport '@polymer/paper-item/paper-item-body.js';\nimport '@polymer/paper-item/paper-item.js';\nimport { html } from '@polymer/polymer/lib/utils/html-tag.js';\nimport { PolymerElement } from '@polymer/polymer/polymer-element.js';\n\nimport '../../components/ha-menu-button.js';\nimport '../../resources/ha-style.js';\n\n\nimport formatDateTime from '../../common/datetime/format_date_time.js';\nimport LocalizeMixin from '../../mixins/localize-mixin.js';\n\nlet registeredDialog = false;\n\n/*\n * @appliesMixin LocalizeMixin\n */\nclass HaPanelMailbox extends LocalizeMixin(PolymerElement) {\n  static get template() {\n    return html`\n    <style include='ha-style'>\n      :host {\n        -ms-user-select: initial;\n        -webkit-user-select: initial;\n        -moz-user-select: initial;\n      }\n\n      .content {\n        padding: 16px;\n        max-width: 600px;\n        margin: 0 auto;\n      }\n\n      paper-card {\n        display: block;\n      }\n\n      paper-item {\n        cursor: pointer;\n      }\n\n      .empty {\n        text-align: center;\n        color: var(--secondary-text-color);\n      }\n\n      .header {\n        @apply --paper-font-title;\n      }\n\n      .row {\n        display: flex;\n       justify-content: space-between;\n      }\n\n      @media all and (max-width: 450px) {\n        .content {\n          width: auto;\n          padding: 0;\n        }\n      }\n\n      .tip {\n        color: var(--secondary-text-color);\n        font-size: 14px;\n      }\n      .date {\n        color: var(--primary-text-color);\n      }\n    </style>\n\n    <app-header-layout has-scrolling-region>\n      <app-header slot=\"header\" fixed>\n        <app-toolbar>\n          <ha-menu-button narrow='[[narrow]]' show-menu='[[showMenu]]'></ha-menu-button>\n          <div main-title>[[localize('panel.mailbox')]]</div>\n        </app-toolbar>\n      </app-header>\n      <div class='content'>\n        <paper-card>\n          <template is='dom-if' if='[[!_messages.length]]'>\n            <div class='card-content empty'>\n              [[localize('ui.panel.mailbox.empty')]]\n            </div>\n          </template>\n          <template is='dom-repeat' items='[[_messages]]'>\n            <paper-item on-click='openMP3Dialog'>\n              <paper-item-body style=\"width:100%\" two-line>\n                <div class=\"row\">\n                  <div>[[item.caller]]</div>\n                  <div class=\"tip\">[[localize('ui.duration.second', 'count', item.duration)]]</div>\n                </div>\n                <div secondary>\n                  <span class=\"date\">[[item.timestamp]]</span> - [[item.message]]\n                </div>\n              </paper-item-body>\n            </paper-item>\n          </template>\n        </paper-card>\n      </div>\n    </app-header-layout>\n    `;\n  }\n\n  static get properties() {\n    return {\n      hass: {\n        type: Object,\n      },\n\n      narrow: {\n        type: Boolean,\n        value: false,\n      },\n\n      showMenu: {\n        type: Boolean,\n        value: false,\n      },\n\n      platforms: {\n        type: Array,\n      },\n\n      _messages: {\n        type: Array,\n      },\n    };\n  }\n\n  connectedCallback() {\n    super.connectedCallback();\n    if (!registeredDialog) {\n      registeredDialog = true;\n      this.fire('register-dialog', {\n        dialogShowEvent: 'show-audio-message-dialog',\n        dialogTag: 'ha-dialog-show-audio-message',\n        dialogImport: () => import('./ha-dialog-show-audio-message.js'),\n      });\n    }\n    this.hassChanged = this.hassChanged.bind(this);\n    this.hass.connection.subscribeEvents(this.hassChanged, 'mailbox_updated')\n      .then(function (unsub) { this._unsubEvents = unsub; }.bind(this));\n    this.computePlatforms().then(function (platforms) {\n      this.platforms = platforms;\n      this.hassChanged();\n    }.bind(this));\n  }\n\n  disconnectedCallback() {\n    super.disconnectedCallback();\n    if (this._unsubEvents) this._unsubEvents();\n  }\n\n  hassChanged() {\n    if (!this._messages) {\n      this._messages = [];\n    }\n    this.getMessages().then(function (items) {\n      this._messages = items;\n    }.bind(this));\n  }\n\n  openMP3Dialog(event) {\n    this.fire('show-audio-message-dialog', {\n      hass: this.hass,\n      message: event.model.item,\n    });\n  }\n\n  getMessages() {\n    const items = this.platforms.map(function (platform) {\n      return this.hass.callApi('GET', `mailbox/messages/${platform}`).then(function (values) {\n        const platformItems = [];\n        const arrayLength = values.length;\n        for (let i = 0; i < arrayLength; i++) {\n          const datetime = formatDateTime(new Date(values[i].info.origtime * 1000));\n          platformItems.push({\n            timestamp: datetime,\n            caller: values[i].info.callerid,\n            message: values[i].text,\n            sha: values[i].sha,\n            duration: values[i].info.duration,\n            platform: platform\n          });\n        }\n        return platformItems;\n      });\n    }.bind(this));\n    return Promise.all(items).then(function (platformItems) {\n      return [].concat(...platformItems).sort(function (a, b) {\n        return new Date(b.timestamp) - new Date(a.timestamp);\n      });\n    });\n  }\n\n  computePlatforms() {\n    return this.hass.callApi('GET', 'mailbox/platforms');\n  }\n}\n\ncustomElements.define('ha-panel-mailbox', HaPanelMailbox);\n"],"sourceRoot":""}