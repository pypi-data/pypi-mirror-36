# -*- coding: utf8 -*-

# Copyright (C) 2016 mbukatov@redhat.com
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.


import copy
import sys
import textwrap

import pytest
from lxml import etree

from pylatest.document import TestActions, XmlExportTestCaseDoc
from pylatest.xdocutils.core import register_all
import pylatest.export as export


# HTML namespace URI in lxml notation, see:
# http://lxml.de/tutorial.html#namespaces
HTML = "{%s}" % export.NS['html']


@pytest.fixture
def empty_html_string():
    return textwrap.dedent("""\
    <?xml version="1.0" encoding="utf-8" ?>
    <!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
    <html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
    <head>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
    <meta name="generator" content="Docutils 0.13.1: http://docutils.sourceforge.net/" />
    <title></title>
    <link rel="stylesheet" href="/usr/lib/python3.5/site-packages/docutils/writers/html4css1/html4css1.css" type="text/css" />
    </head>
    <body>
    <div class="document">
    </div>
    </body>
    </html>
    """)


@pytest.fixture
def empty_html_tree(empty_html_string):
    """
    Return element tree of an empty html document as if generated by sphinx.
    """
    return etree.fromstring(empty_html_string.encode("utf8"))


@pytest.fixture
def fulltestcase_html_string():
    return textwrap.dedent("""\
    <?xml version="1.0" encoding="utf-8" ?>
    <!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
    <html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
    <head>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
    <meta name="generator" content="Docutils 0.13.1: http://docutils.sourceforge.net/" />
    <title></title>
    <link rel="stylesheet" href="/usr/lib/python3.5/site-packages/docutils/writers/html4css1/html4css1.css" type="text/css" />
    </head>
    <body>
    <div class="document">
    <div class="section" id="hello-world-test-case">
    <h1>Hello World Test Case</h1>
    <table class="docutils field-list" frame="void" rules="none">
    <col class="field-name" />
    <col class="field-body" />
    <tbody valign="top">
    <tr class="field-odd field"><th class="field-name">author:</th><td class="field-body"><a class="reference external" href="mailto:foo&#37;&#52;&#48;example&#46;com">foo<span>&#64;</span>example<span>&#46;</span>com</a></td>
    </tr>
    <tr class="field-even field"><th class="field-name">date:</th><td class="field-body">2015-11-06</td>
    </tr>
    <tr class="field-odd field"><th class="field-name">comment:</th><td class="field-body">Some value here.</td>
    </tr>
    <tr class="field-odd field"><th class="field-name">empty:</th><td class="field-body"></td>
    </tr>
    </tbody>
    </table>
    <div class="section" id="description">
    <h2>Description</h2>
    <p>This is just demonstration of usage of pylatest rst directives and expected
    structure of rst document.</p>
    <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Donec a diam lectus.
    Sed sit amet ipsum mauris. Maecenas congue ligula ac quam viverra nec
    consectetur ante hendrerit. Donec et mollis dolor. Praesent et diam eget libero
    egestas mattis sit amet vitae augue.</p>
    </div>
    <div class="section" id="setup">
    <h2>Setup</h2>
    <ol class="arabic">
    <li><p class="first">Lorem ipsum dolor sit amet, consectetur adipiscing elit. Donec a diam
    lectus. Sed sit amet ipsum mauris.</p>
    </li>
    <li><p class="first">Use lvm disk paritioning and Leave 10G free space in volume
    called <code class="docutils literal"><span class="pre">lv_helloword</span></code>.</p>
    </li>
    <li><p class="first">When the system is installed, format <code class="docutils literal"><span class="pre">lv_helloword</span></code> volume with
    brtfs using <code class="docutils literal"><span class="pre">--super</span> <span class="pre">--special</span> <span class="pre">--options</span></code>.</p>
    </li>
    <li><p class="first">Mount it on a client:</p>
    <div class="highlight-default"><div class="highlight"><pre><span></span><span class="c1"># mount -t btrfs /dev/mapper/vg_fedora/lv_helloword /mnt/helloworld</span>
    </pre></div>
    </div>
    </li>
    <li><p class="first">Ceterum censeo, lorem ipsum:</p>
    <div class="highlight-default"><div class="highlight"><pre><span></span><span class="c1"># dnf install foobar</span>
    <span class="c1"># systemctl enable foobard</span>
    </pre></div>
    </div>
    </li>
    </ol>
    </div>
    <div class="section" id="test-steps">
    <h2>Test Steps</h2>
    <div action_id="1" action_name="test_step" class="pylatest_action">
    List files in the volume: <code class="docutils literal"><span class="pre">ls</span> <span class="pre">-a</span> <span class="pre">/mnt/helloworld</span></code>
    </div>
    <div action_id="1" action_name="test_result" class="pylatest_action">
    There are no files, output should be empty.
    </div>
    <div action_id="2" action_name="test_step" class="pylatest_action">
    <p>Donec et mollis dolor:</p>
    <div class="highlight-default"><div class="highlight"><pre><span></span>$ foo --extra sth
    $ bar -vvv
    </pre></div>
    </div>

    </div>
    <div action_id="2" action_name="test_result" class="pylatest_action">
    Maecenas congue ligula ac quam viverra nec
    consectetur ante hendrerit.
    </div>
    <div action_id="3" action_name="test_step" class="pylatest_action">
    This one has no matching test result.
    </div>
    <div action_id="4" action_name="test_step" class="pylatest_action">
    And this one has.
    </div>
    <div action_id="4" action_name="test_result" class="pylatest_action">
    Here it is.
    </div>
    </div>
    <div class="section" id="teardown">
    <h2>Teardown</h2>
    <ol class="arabic simple">
    <li>Lorem ipsum dolor sit amet: <code class="docutils literal"><span class="pre">rm</span> <span class="pre">-rf</span> <span class="pre">/mnt/helloworld</span></code>.</li>
    <li>Umount and remove <code class="docutils literal"><span class="pre">lv_helloword</span></code> volume.</li>
    <li>The end.</li>
    </ol>
    </div>
    </div>
    </div>
    </body>
    </html>
    """)


@pytest.fixture
def fulltestcase_html_tree(fulltestcase_html_string):
    """
    Return element tree of an html document with test cases as if generated by sphinx.
    """
    tree = etree.fromstring(fulltestcase_html_string.encode("utf8"))
    return tree


@pytest.fixture
def singleparagraph_html_tree(empty_html_tree):
    """
    Return body of an empty html document with an empty p element
    as the only content.
    """
    doc_div = get_doc_div(empty_html_tree)
    # note: lxml namespace syntax looks like "{http://www.w3.org/1999/xhtml}body"
    p_el = etree.SubElement(doc_div, HTML + 'p')
    p_el.tail = '\n'
    return empty_html_tree, p_el


def get_doc_div(tree):
    doc_div_list = tree.xpath('//html:div[@class="document"]', namespaces=export.NS)
    return doc_div_list[0]


def add_action_div(elem, action_id, action_name):
    """
    Adds an action div element with given action_id and action_name into
    given element.
    """
    div_attrs = {
        'action_id': str(action_id),
        'action_name': str(action_name),
        'class': 'pylatest_action'}
    div_el = etree.SubElement(elem, HTML + 'div', attrib=div_attrs)
    div_el.tail = '\n'
    return div_el


def add_section_div(elem, section_id):
    """
    Adds a section div element (with a headline) with given into given element.
    """
    # note: section_id comes from pylatest.document.XmlExportTestCaseDoc.SECTIONS
    div_attrs = {
        'id': str(section_id),
        'class': 'section'}
    div_el = etree.SubElement(elem, HTML + 'div', attrib=div_attrs)
    div_el.tail = '\n'
    h2_el = etree.SubElement(div_el, HTML + 'h2')
    h2_el.text = section_id.capitalize()
    p_el = etree.SubElement(div_el, HTML + "p")
    p_el.text = "Content of the section"
    return div_el


def xmltostring(xml_tree):
    content_b = etree.tostring(
        xml_tree,
        xml_declaration=False,
        encoding='utf-8',
        pretty_print=True)
    return content_b.decode('utf-8')

#
# Test Cases
#

def test_get_actions_empty(empty_html_tree):
    assert export.get_actions(empty_html_tree) == []


def test_get_actions_singleaction(singleparagraph_html_tree):
    # construct input
    html_tree, p_el = singleparagraph_html_tree
    step_div_el = add_action_div(p_el, '1', 'test_step')
    step_div_el.text = "This is a test step"
    result_div_el = add_action_div(p_el, '1', 'test_result')
    result_div_el.text = "This is the expected result."
    # construct expected output
    exp_res = [
        (1, "test_step", step_div_el),
        (1, "test_result", result_div_el),
        ]
    # run, run
    actions = export.get_actions(html_tree)
    # checking
    assert actions == exp_res


def test_get_metadata_empty(empty_html_tree):
    assert export.get_metadata(empty_html_tree) == []


def test_get_metadata_fulltestcase(fulltestcase_html_tree):
    metadata_list = export.get_metadata(fulltestcase_html_tree)
    exp_metadata = [
        ('author', 'foo@example.com'),
        ('date', '2015-11-06'),
        ('comment', 'Some value here.'),
        ('empty', ''),
        ]
    assert metadata_list == exp_metadata


def test_get_section_empty(empty_html_tree):
    for section in XmlExportTestCaseDoc.SECTIONS:
        assert export.get_section(empty_html_tree, section.html_id) is None


def test_get_section_notempty(fulltestcase_html_tree):
    for section in XmlExportTestCaseDoc.SECTIONS:
        assert export.get_section(fulltestcase_html_tree, section.html_id) is not None


def test_get_section_actually_nothing(empty_html_tree):
    # construct input
    html_tree = empty_html_tree
    doc_div = get_doc_div(html_tree)
    add_section_div(doc_div, 'foo')
    add_section_div(doc_div, 'bar')
    # checking
    for section in XmlExportTestCaseDoc.SECTIONS:
        assert export.get_section(html_tree, section.html_id) is None


@pytest.mark.parametrize("section", XmlExportTestCaseDoc.SECTIONS)
def test_get_section_single(empty_html_tree, section):
    # construct input
    html_tree = empty_html_tree
    doc_div = get_doc_div(html_tree)
    add_section_div(doc_div, 'foo')
    section_el = add_section_div(doc_div, section.html_id)
    add_section_div(doc_div, 'bar')
    # run, run
    result_el = export.get_section(html_tree, section.html_id)
    # checking
    assert result_el is not None
    assert result_el == section_el
    other_sections = []
    for other_section in XmlExportTestCaseDoc.SECTIONS:
        if other_section == section:
            continue
        other_sections.append(other_section)
    for section in other_sections:
        assert export.get_section(html_tree, section.html_id) is None


def test_get_section_drop_header(empty_html_tree):
    # construct input
    html_tree = empty_html_tree
    section_el = add_section_div(get_doc_div(html_tree), "description")
    # just to highlight that we have h2 header as the 1st element in the section
    assert section_el[0].tag == HTML + "h2"
    # run, run
    result_el = export.get_section(html_tree, "description")
    # checking: header should not be there anymore
    assert result_el[0].tag == HTML + "p"


def test_get_title_empty(empty_html_tree):
    assert export.get_title(empty_html_tree) == None


def test_get_title_fulltestcase(fulltestcase_html_tree):
    assert export.get_title(fulltestcase_html_tree) == "Hello World Test Case"


def test_build_xml_testcase_doc_null():
    assert export.build_xml_testcase_doc("") == XmlExportTestCaseDoc()


def test_build_xml_testcase_doc_empty(empty_html_string):
    assert export.build_xml_testcase_doc(empty_html_string) == XmlExportTestCaseDoc()


def test_build_xml_testcase_doc_fulltestcase_title(fulltestcase_html_string):
    doc = export.build_xml_testcase_doc(fulltestcase_html_string)
    assert doc.title == "Hello World Test Case"


def test_build_xml_testcase_doc_fulltestcase_metadata(fulltestcase_html_string):
    doc = export.build_xml_testcase_doc(fulltestcase_html_string)
    # check metadata
    exp_metadata = {
        'author': 'foo@example.com',
        'date': '2015-11-06',
        'comment': 'Some value here.',
        'empty': '',
        }
    assert doc.metadata == exp_metadata


def test_build_xml_testcase_doc_fulltestcase_sections(fulltestcase_html_string):
    doc = export.build_xml_testcase_doc(fulltestcase_html_string)
    # check state of the doc
    assert not doc.is_empty()
    assert XmlExportTestCaseDoc.DESCR in doc.sections
    assert XmlExportTestCaseDoc.SETUP in doc.sections
    assert XmlExportTestCaseDoc.TEARD in doc.sections
    # check actual content
    exp_descr_content = textwrap.dedent('''\
    <div xmlns="http://www.w3.org/1999/xhtml" class="section" id="description">
    <p>This is just demonstration of usage of pylatest rst directives and expected
    structure of rst document.</p>
    <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Donec a diam lectus.
    Sed sit amet ipsum mauris. Maecenas congue ligula ac quam viverra nec
    consectetur ante hendrerit. Donec et mollis dolor. Praesent et diam eget libero
    egestas mattis sit amet vitae augue.</p>
    </div>
    ''')
    assert etree.tostring(doc.get_section(XmlExportTestCaseDoc.DESCR)).decode('utf-8') == exp_descr_content
    exp_setup_content = textwrap.dedent('''\
    <div xmlns="http://www.w3.org/1999/xhtml" class="section" id="setup">
    <ol class="arabic">
    <li><p class="first">Lorem ipsum dolor sit amet, consectetur adipiscing elit. Donec a diam
    lectus. Sed sit amet ipsum mauris.</p>
    </li>
    <li><p class="first">Use lvm disk paritioning and Leave 10G free space in volume
    called <code class="docutils literal"><span class="pre">lv_helloword</span></code>.</p>
    </li>
    <li><p class="first">When the system is installed, format <code class="docutils literal"><span class="pre">lv_helloword</span></code> volume with
    brtfs using <code class="docutils literal"><span class="pre">--super</span> <span class="pre">--special</span> <span class="pre">--options</span></code>.</p>
    </li>
    <li><p class="first">Mount it on a client:</p>
    <div class="highlight-default"><div class="highlight"><pre><span></span><span class="c1"># mount -t btrfs /dev/mapper/vg_fedora/lv_helloword /mnt/helloworld</span>
    </pre></div>
    </div>
    </li>
    <li><p class="first">Ceterum censeo, lorem ipsum:</p>
    <div class="highlight-default"><div class="highlight"><pre><span></span><span class="c1"># dnf install foobar</span>
    <span class="c1"># systemctl enable foobard</span>
    </pre></div>
    </div>
    </li>
    </ol>
    </div>
    ''')
    assert etree.tostring(doc.get_section(XmlExportTestCaseDoc.SETUP)).decode('utf-8') == exp_setup_content
    exp_teard_content = textwrap.dedent('''\
    <div xmlns="http://www.w3.org/1999/xhtml" class="section" id="teardown">
    <ol class="arabic simple">
    <li>Lorem ipsum dolor sit amet: <code class="docutils literal"><span class="pre">rm</span> <span class="pre">-rf</span> <span class="pre">/mnt/helloworld</span></code>.</li>
    <li>Umount and remove <code class="docutils literal"><span class="pre">lv_helloword</span></code> volume.</li>
    <li>The end.</li>
    </ol>
    </div>
    ''')
    assert etree.tostring(doc.get_section(XmlExportTestCaseDoc.TEARD)).decode('utf-8') == exp_teard_content


def test_build_xml_testcase_doc_fulltestcase_actions(fulltestcase_html_string):
    doc = export.build_xml_testcase_doc(fulltestcase_html_string)
    # check state of the doc
    assert len(doc._test_actions) == 4
    # get iterator for all test actions
    actions_i = iter(doc._test_actions)
    # check content of 1st action
    exp_step_content = textwrap.dedent('''\
    <div xmlns="http://www.w3.org/1999/xhtml" action_id="1" action_name="test_step" class="pylatest_action">
    List files in the volume: <code class="docutils literal"><span class="pre">ls</span> <span class="pre">-a</span> <span class="pre">/mnt/helloworld</span></code>
    </div>
    ''')
    exp_result_content = textwrap.dedent('''\
    <div xmlns="http://www.w3.org/1999/xhtml" action_id="1" action_name="test_result" class="pylatest_action">
    There are no files, output should be empty.
    </div>
    ''')
    action_id, step_el, result_el = next(actions_i)
    assert action_id == 1
    assert etree.tostring(step_el).decode('utf-8') == exp_step_content
    assert etree.tostring(result_el).decode('utf-8') == exp_result_content
    # ignoring 2nd action
    next(actions_i)
    # check content of 3th action
    exp_step_content = textwrap.dedent('''\
    <div xmlns="http://www.w3.org/1999/xhtml" action_id="3" action_name="test_step" class="pylatest_action">
    This one has no matching test result.
    </div>
    ''')
    action_id, step_el, result_el = next(actions_i)
    assert action_id == 3
    assert etree.tostring(step_el).decode('utf-8') == exp_step_content
    assert result_el == None


def test_build_xml_export_doc_empty():
    export_doc = export.build_xml_export_doc()
    exp_xml = textwrap.dedent('''\
    <testcases/>
    ''')
    assert xmltostring(export_doc) == exp_xml


def test_build_xml_export_doc_project_id():
    export_doc = export.build_xml_export_doc(project_id="FOOBAR")
    exp_xml = textwrap.dedent('''\
    <testcases project-id="FOOBAR"/>
    ''')
    assert xmltostring(export_doc) == exp_xml


def test_build_xml_export_doc_properties_null():
    export_doc = export.build_xml_export_doc(
        properties={},
        response_properties={},)
    exp_xml = textwrap.dedent('''\
    <testcases/>
    ''')
    assert xmltostring(export_doc) == exp_xml


def test_build_xml_export_doc_properties_single():
    prop_dict = {'lookup-method': 'custom'}
    export_doc = export.build_xml_export_doc(properties=prop_dict)
    exp_xml = textwrap.dedent('''\
    <testcases>
      <properties>
        <property name="lookup-method" value="custom"/>
      </properties>
    </testcases>
    ''')
    assert xmltostring(export_doc) == exp_xml


@pytest.mark.skipif(sys.version_info < (3, 6),
                    reason="Requires order preserving dictionary.")
def test_build_xml_export_doc_properties_many():
    prop_dict = {
        'foo': 'alpha',
        'bar': 'beta',
        }
    resp_prop_dict = {
        'foo': 'gama',
        'bar': 'omega',
        }
    export_doc = export.build_xml_export_doc(
        properties=prop_dict,
        response_properties=resp_prop_dict,
        )
    exp_xml = textwrap.dedent('''\
    <testcases>
      <response-properties>
        <response-property name="foo" value="gama"/>
        <response-property name="bar" value="omega"/>
      </response-properties>
      <properties>
        <property name="foo" value="alpha"/>
        <property name="bar" value="beta"/>
      </properties>
    </testcases>
    ''')
    assert xmltostring(export_doc) == exp_xml


def test_build_xml_export_doc_testcases_single():
    tc_doc = etree.Element("testcase")
    export_doc = export.build_xml_export_doc(testcases=[tc_doc])
    exp_xml = textwrap.dedent('''\
    <testcases>
      <testcase/>
    </testcases>
    ''')
    assert xmltostring(export_doc) == exp_xml


def test_build_xml_export_doc_testcases_many():
    testcases = [
        etree.Element("testcase"),
        etree.Element("testcase"),
        etree.Element("testcase"),
        ]
    export_doc = export.build_xml_export_doc(testcases=testcases)
    exp_xml = textwrap.dedent('''\
    <testcases>
      <testcase/>
      <testcase/>
      <testcase/>
    </testcases>
    ''')
    assert xmltostring(export_doc) == exp_xml
