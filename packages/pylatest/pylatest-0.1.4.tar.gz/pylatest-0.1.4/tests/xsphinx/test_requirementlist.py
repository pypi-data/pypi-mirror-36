# -*- coding: utf-8 -*-

# Copyright (C) 2018 Martin Bukatoviƒç <martin.bukatovic@gmail.com>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.


from lxml import etree
import pytest

from testutil import xmlparse_testcase, get_requirements_from_build, NS


@pytest.mark.parametrize("builder", [
    pytest.mark.sphinx('html', 'html', testroot='requirementlist-nested'),
    pytest.mark.sphinx('xmlexport', 'xmlexport', testroot='requirementlist-nested'),
    ])
def test_requirementlist_minimal(app, status, warning, builder):
    """
    Just checking that this doesn't fail.
    """
    app.builder.build_all()


@pytest.mark.sphinx('html', testroot='requirementlist-nested')
def test_requirementlist_present_nested_html(app, status, warning):
    """
    Check that all requirements are present in the list generated by
    requirementlist directive. Also checking that test cases are listed under
    one (selected) requirement.
    """
    app.builder.build_all()
    # parse requirements overview document
    doc_tree = xmlparse_testcase(app.outdir, "requirements", "html")
    # get the requirement list (list of <li> elements)
    req_list = get_requirements_from_build(doc_tree, "html")
    # check that the list contains all requirements, in given order
    req_items = [i.text for i in req_list]
    req_items_expected = sorted([
        "FOO-ALL",
        "FOO-111",
        "FOO-112",
        "FOO-212",
        ])
    assert req_items == req_items_expected
    # get test cases covering requirement FOO-ALL
    fooall_item = [i for i in req_list if i.text == "FOO-ALL"][0]
    fooall_case_list = fooall_item.xpath('h:ul/h:li', namespaces=NS)
    # check that all test cases are listed under FOO-ALL, in given order
    fooall_case_items = [''.join(i.itertext()) for i in fooall_case_list]
    fooall_case_items_expected = sorted([
        "/test_bar",
        "/test_foo",
        "/baz/test_one",
        "/baz/test_two",
        ])
    assert fooall_case_items == fooall_case_items_expected


@pytest.mark.xfail
@pytest.mark.sphinx('html', testroot='requirementlist-testdefaults')
def test_requirementlist_present_testdefaults_html(app, status, warning):
    """
    Check that all requirements can be specified via testdefaults directive.
    """
    app.builder.build_all()
    # parse requirements overview document
    doc_tree = xmlparse_testcase(app.outdir, "requirements", "html")
    # get the requirement list (list of <li> elements)
    req_list = get_requirements_from_build(doc_tree, "html")
    # check that the list contains all requirements, in given order
    req_items = [i.text for i in req_list]
    req_items_expected = sorted([
        "FOO-ALL",
        "FOO-001",
        "FOO-002",
        ])
    assert req_items == req_items_expected
    # get test cases covering requirement FOO-ALL
    fooall_item = [i for i in req_list if i.text == "FOO-ALL"][0]
    fooall_case_list = fooall_item.xpath('h:ul/h:li', namespaces=NS)
    # check that all test cases are listed under FOO-ALL, in given order
    fooall_case_items = [''.join(i.itertext()) for i in fooall_case_list]
    fooall_case_items_expected = sorted([
        "/baz/test_one",
        "/baz/test_two",
        ])
    assert fooall_case_items == fooall_case_items_expected


@pytest.mark.sphinx('html', testroot='requirementlist-nested')
def test_requirementlist_caselinking_nested_html(app, status, warning):
    app.builder.build_all()
    # parse requirements overview document
    doc_tree = xmlparse_testcase(
        app.outdir, "requirements/requirements", "html")
    # get the requirement list
    req_list = get_requirements_from_build(doc_tree, "html")
    # get references/links of test cases covering requirement FOO-111
    req_item = [i for i in req_list if i.text == "FOO-111"][0]
    case_ref_list = req_item.xpath('h:ul/h:li/h:a', namespaces=NS)
    # there should be just one such requirement
    assert len(case_ref_list) == 1
    # and it should link to /baz/test_one document correctly (wrt the location
    # of document with the requirementlist directive)
    case_ref = case_ref_list[0]
    assert case_ref.get('href') == "../baz/test_one.html"


@pytest.mark.sphinx('html', testroot='requirementlist-url-flat')
def test_requirementlist_url_flat_html(app, status, warning):
    """
    Check that url or rhbz role can be used as a requirement.
    """
    app.builder.build_all()
    # parse requirements overview document
    doc_tree = xmlparse_testcase(app.outdir, "requirements", "html")
    # get the requirement list (list of <li> elements)
    req_list = get_requirements_from_build(doc_tree, "html")
    # TODO: check that the requirements are represented via links
    req_links = [i.xpath('h:a', namespaces=NS) for i in req_list]
    assert len(req_links) == 2
    assert len(req_links[0]) == 1
    assert len(req_links[1]) == 1
