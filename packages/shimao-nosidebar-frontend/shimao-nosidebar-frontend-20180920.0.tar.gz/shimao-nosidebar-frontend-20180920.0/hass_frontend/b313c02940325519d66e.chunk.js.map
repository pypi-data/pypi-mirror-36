{"version":3,"sources":["webpack:///./src/panels/map/ha-entity-marker.js","webpack:///./src/common/dom/setup-leaflet-map.js","webpack:///./src/panels/map/ha-panel-map.js"],"names":["__webpack_require__","_polymer_polymer_lib_utils_html_tag_js__WEBPACK_IMPORTED_MODULE_1__","_polymer_polymer_polymer_element_js__WEBPACK_IMPORTED_MODULE_2__","_mixins_events_mixin_js__WEBPACK_IMPORTED_MODULE_3__","customElements","define","Object","a","template","properties","hass","type","entityId","String","value","entityName","entityPicture","ready","super","this","addEventListener","ev","badgeTap","stopPropagation","fire","d","__webpack_exports__","setupLeafletMap","leaflet__WEBPACK_IMPORTED_MODULE_0__","leaflet__WEBPACK_IMPORTED_MODULE_0___default","n","mapElement","map","style","document","createElement","setAttribute","parentNode","appendChild","setView","tileLayer","Browser","retina","attribution","subdomains","minZoom","maxZoom","addTo","r","leaflet__WEBPACK_IMPORTED_MODULE_3__","leaflet__WEBPACK_IMPORTED_MODULE_3___default","_common_entity_compute_state_domain_js__WEBPACK_IMPORTED_MODULE_7__","_common_entity_compute_state_name_js__WEBPACK_IMPORTED_MODULE_8__","_mixins_localize_mixin_js__WEBPACK_IMPORTED_MODULE_9__","_common_dom_setup_leaflet_map_js__WEBPACK_IMPORTED_MODULE_10__","Icon","Default","imagePath","observer","narrow","Boolean","showMenu","connectedCallback","_map","$","drawEntities","setTimeout","invalidateSize","fitMap","disconnectedCallback","remove","bounds","_mapItems","length","LatLng","config","latitude","longitude","latLngBounds","item","getLatLng","fitBounds","pad","forEach","marker","mapItems","keys","states","entity","title","attributes","hidden","state","icon","passive","iconHTML","el","outerHTML","divIcon","html","iconSize","className","push","interactive","circle","color","radius","entity_picture","split","part","substr","join","entity_id","gps_accuracy"],"mappings":"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","file":"b313c02940325519d66e.chunk.js","sourcesContent":["import '@polymer/iron-image/iron-image.js';\nimport { html } from '@polymer/polymer/lib/utils/html-tag.js';\nimport { PolymerElement } from '@polymer/polymer/polymer-element.js';\n\nimport EventsMixin from '../../mixins/events-mixin.js';\n\n/*\n * @appliesMixin EventsMixin\n */\nclass HaEntityMarker extends EventsMixin(PolymerElement) {\n  static get template() {\n    return html`\n    <style include=\"iron-positioning\"></style>\n    <style>\n    .marker {\n      vertical-align: top;\n      position: relative;\n      display: block;\n      margin: 0 auto;\n      width: 2.5em;\n      text-align: center;\n      height: 2.5em;\n      line-height: 2.5em;\n      font-size: 1.5em;\n      border-radius: 50%;\n      border: 0.1em solid var(--ha-marker-color, var(--default-primary-color));\n      color: rgb(76, 76, 76);\n      background-color: white;\n    }\n    iron-image {\n      border-radius: 50%;\n    }\n    </style>\n\n    <div class=\"marker\">\n      <template is=\"dom-if\" if=\"[[entityName]]\">[[entityName]]</template>\n      <template is=\"dom-if\" if=\"[[entityPicture]]\">\n        <iron-image sizing=\"cover\" class=\"fit\" src=\"[[entityPicture]]\"></iron-image>\n      </template>\n    </div>\n`;\n  }\n\n  static get properties() {\n    return {\n      hass: {\n        type: Object,\n      },\n\n      entityId: {\n        type: String,\n        value: '',\n      },\n\n      entityName: {\n        type: String,\n        value: null,\n      },\n\n      entityPicture: {\n        type: String,\n        value: null,\n      }\n    };\n  }\n\n  ready() {\n    super.ready();\n    this.addEventListener('click', ev => this.badgeTap(ev));\n  }\n\n  badgeTap(ev) {\n    ev.stopPropagation();\n    if (this.entityId) {\n      this.fire('hass-more-info', { entityId: this.entityId });\n    }\n  }\n}\n\ncustomElements.define('ha-entity-marker', HaEntityMarker);\n","import Leaflet from 'leaflet';\n\n// Sets up a Leaflet map on the provided DOM element\nexport default function setupLeafletMap(mapElement) {\n  const map = Leaflet.map(mapElement);\n  const style = document.createElement('link');\n  style.setAttribute('href', '/static/images/leaflet/leaflet.css');\n  style.setAttribute('rel', 'stylesheet');\n  mapElement.parentNode.appendChild(style);\n  map.setView([51.505, -0.09], 13);\n  Leaflet.tileLayer(\n    `https://{s}.basemaps.cartocdn.com/light_all/{z}/{x}/{y}${Leaflet.Browser.retina ? '@2x.png' : '.png'}`,\n    {\n      attribution: '&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a>, &copy; <a href=\"https://carto.com/attributions\">CARTO</a>',\n      subdomains: 'abcd',\n      minZoom: 0,\n      maxZoom: 20,\n    }\n  ).addTo(map);\n\n  return map;\n}\n","import '@polymer/app-layout/app-toolbar/app-toolbar.js';\nimport { html } from '@polymer/polymer/lib/utils/html-tag.js';\nimport { PolymerElement } from '@polymer/polymer/polymer-element.js';\nimport Leaflet from 'leaflet';\n\nimport '../../components/ha-menu-button.js';\nimport '../../components/ha-icon.js';\n\nimport './ha-entity-marker.js';\n\nimport computeStateDomain from '../../common/entity/compute_state_domain.js';\nimport computeStateName from '../../common/entity/compute_state_name.js';\nimport LocalizeMixin from '../../mixins/localize-mixin.js';\nimport setupLeafletMap from '../../common/dom/setup-leaflet-map.js';\n\nLeaflet.Icon.Default.imagePath = '/static/images/leaflet';\n\n/*\n * @appliesMixin LocalizeMixin\n */\nclass HaPanelMap extends LocalizeMixin(PolymerElement) {\n  static get template() {\n    return html`\n    <style include=\"ha-style\">\n      #map {\n        height: calc(100% - 64px);\n        width: 100%;\n        z-index: 0;\n      }\n    </style>\n\n    <app-toolbar>\n      <ha-menu-button narrow='[[narrow]]' show-menu='[[showMenu]]'></ha-menu-button>\n      <div main-title>[[localize('panel.map')]]</div>\n    </app-toolbar>\n\n    <div id='map'></div>\n    `;\n  }\n\n  static get properties() {\n    return {\n      hass: {\n        type: Object,\n        observer: 'drawEntities',\n      },\n\n      narrow: {\n        type: Boolean,\n      },\n\n      showMenu: {\n        type: Boolean,\n        value: false,\n      },\n    };\n  }\n\n  connectedCallback() {\n    super.connectedCallback();\n    var map = this._map = setupLeafletMap(this.$.map);\n\n    this.drawEntities(this.hass);\n\n    setTimeout(() => {\n      map.invalidateSize();\n      this.fitMap();\n    }, 1);\n  }\n\n  disconnectedCallback() {\n    if (this._map) {\n      this._map.remove();\n    }\n  }\n\n  fitMap() {\n    var bounds;\n\n    if (this._mapItems.length === 0) {\n      this._map.setView(\n        new Leaflet.LatLng(this.hass.config.latitude, this.hass.config.longitude),\n        14\n      );\n    } else {\n      bounds = new Leaflet.latLngBounds(this._mapItems.map(item => item.getLatLng()));\n      this._map.fitBounds(bounds.pad(0.5));\n    }\n  }\n\n  drawEntities(hass) {\n    /* eslint-disable vars-on-top */\n    var map = this._map;\n    if (!map) return;\n\n    if (this._mapItems) {\n      this._mapItems.forEach(function (marker) { marker.remove(); });\n    }\n    var mapItems = this._mapItems = [];\n\n    Object.keys(hass.states).forEach(function (entityId) {\n      var entity = hass.states[entityId];\n      var title = computeStateName(entity);\n\n      if ((entity.attributes.hidden &&\n          computeStateDomain(entity) !== 'zone') ||\n          entity.state === 'home' ||\n          !('latitude' in entity.attributes) ||\n          !('longitude' in entity.attributes)) {\n        return;\n      }\n\n      var icon;\n\n      if (computeStateDomain(entity) === 'zone') {\n        // DRAW ZONE\n        if (entity.attributes.passive) return;\n\n        // create icon\n        var iconHTML = '';\n        if (entity.attributes.icon) {\n          const el = document.createElement('ha-icon');\n          el.setAttribute('icon', entity.attributes.icon);\n          iconHTML = el.outerHTML;\n        } else {\n          iconHTML = title;\n        }\n\n        icon = Leaflet.divIcon({\n          html: iconHTML,\n          iconSize: [24, 24],\n          className: '',\n        });\n\n        // create market with the icon\n        mapItems.push(Leaflet.marker(\n          [entity.attributes.latitude, entity.attributes.longitude],\n          {\n            icon: icon,\n            interactive: false,\n            title: title,\n          }\n        ).addTo(map));\n\n        // create circle around it\n        mapItems.push(Leaflet.circle(\n          [entity.attributes.latitude, entity.attributes.longitude],\n          {\n            interactive: false,\n            color: '#FF9800',\n            radius: entity.attributes.radius,\n          }\n        ).addTo(map));\n\n        return;\n      }\n\n      // DRAW ENTITY\n      // create icon\n      var entityPicture = entity.attributes.entity_picture || '';\n      var entityName = title.split(' ').map(function (part) { return part.substr(0, 1); }).join('');\n      /* Leaflet clones this element before adding it to the map. This messes up\n         our Polymer object and we can't pass data through. Thus we hack like this. */\n      icon = Leaflet.divIcon({\n        html: \"<ha-entity-marker entity-id='\" + entity.entity_id + \"' entity-name='\" + entityName + \"' entity-picture='\" + entityPicture + \"'></ha-entity-marker>\",\n        iconSize: [45, 45],\n        className: '',\n      });\n\n      // create market with the icon\n      mapItems.push(Leaflet.marker(\n        [entity.attributes.latitude, entity.attributes.longitude],\n        {\n          icon: icon,\n          title: computeStateName(entity),\n        }\n      ).addTo(map));\n\n      // create circle around if entity has accuracy\n      if (entity.attributes.gps_accuracy) {\n        mapItems.push(Leaflet.circle(\n          [entity.attributes.latitude, entity.attributes.longitude],\n          {\n            interactive: false,\n            color: '#0288D1',\n            radius: entity.attributes.gps_accuracy,\n          }\n        ).addTo(map));\n      }\n    });\n  }\n}\n\ncustomElements.define('ha-panel-map', HaPanelMap);\n"],"sourceRoot":""}