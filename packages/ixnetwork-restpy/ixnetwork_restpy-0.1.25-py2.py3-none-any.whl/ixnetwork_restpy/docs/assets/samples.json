{
    "ixnetwork_restpy.tests.sanity.py": "\"\"\"Sanity script that exercises all major points in the IxNetwork REST API\n- sessions\n- properties returning objects\n- methods returning objects\n- tracing\n- authentication\n- file transfer\n- execs\n- multivalues\n- multivalue steps\n\"\"\"\nimport sys\nimport os\nsys.path[0] = os.path.abspath(sys.path[0] + '\\\\..\\\\..\\\\')\nfrom ixnetwork_restpy.testplatform.testplatform import TestPlatform\nfrom ixnetwork_restpy.errors import IxNetworkError\nfrom ixnetwork_restpy.files import Files\n\nsessions = None\n\ntry:\n    test_platform = TestPlatform('10.36.78.53', platform='linux')\n    # test_platform = TestPlatform('127.0.0.1', rest_port=11009, platform='windows')\n    test_platform.Trace = 'none'\n    test_platform.Authenticate('admin', 'admin')\n    print(test_platform)\n\n    sessions = test_platform.Sessions.add()\n    print(sessions)\n\n    ixnetwork = sessions.Ixnetwork\n    print(ixnetwork)\n\n    views = ixnetwork.Statistics.View.find()\n    print(views)\n\n    try:\n        ixnetwork.LoadConfig('c:/temp/ipv4_traffic.ixncfg')\n        assert ('Type checking failed')\n    except TypeError as e:\n        print(e)\n    ixnetwork.LoadConfig(Files('c:/users/anbalogh/downloads/ipv4_traffic.ixncfg', local_file=True))\n\n    print(ixnetwork.Globals)\n    print(ixnetwork.AvailableHardware)\n    print(ixnetwork.Traffic)\n    print(ixnetwork.Statistics)\n    print(ixnetwork.ResourceManager)\n\n    ixnetwork.NewConfig()\n    \n    assert(len(ixnetwork.Vport.find()) == 0)\n    assert(len(ixnetwork.Topology.find()) == 0)\n    assert(len(ixnetwork.AvailableHardware.Chassis.find()) == 0)\n    assert(len(ixnetwork.Statistics.View.find()) == 0)\n    assert(len(ixnetwork.Traffic.TrafficItem.find()) == 0)\n\n    vport_name = 'Abstract Port 1'\n    vports = ixnetwork.Vport.add(Name=vport_name, Type='pos')\n    assert (vports.Type == 'pos')\n    assert (vports.Name == vport_name)\n    vports.Type = 'ethernet'\n    assert (vports.Type == 'ethernet')\n    vports.refresh()\n    vports.add(Name='Abstract Port 2')\n    vports.add(Name='Abstract Port 3')\n    assert(len(vports) == 3)\n    vports.remove()\n    assert(len(vports) == 0)\n\n    # create 2 ports\n    vports.add().add()\n\n    # create a raw traffic item\n    traffic_item = ixnetwork.Traffic.TrafficItem.add(Name='Raw Traffic Item Test', TrafficType='raw', TrafficItemType='l2L3')\n    protocols = vports.Protocols.find()\n    assert (len(protocols) == 2)\n    protocols.refresh()\n    assert (len(protocols) == 2)\n    endpoint_set = traffic_item.EndpointSet.add(Sources=protocols)\n    assert (len(endpoint_set.Sources) == 2)\n    \n    # create a topology\n    topology = ixnetwork.Topology.add(Name='Topology 1', Ports=vports)\n    assert(len(topology) == 1)\n\n    # create a device group\n    device_group = topology.DeviceGroup.add(Name='Device 1', Multiplier='7')\n    assert(len(device_group) == 1)\n    device_group.Enabled.Alternate('False')\n    assert (device_group.Enabled == 'Alt: False')\n    \n    # create and print ethernet information\n    ethernet = device_group.Ethernet.add()\n    assert(len(ethernet) == 1)\n\n    # get multivalue information\n    # # outputs format, count, possible patterns etc\n    print(ethernet.Mac.Info)\n\n    # multivalue steps\n    steps = ethernet.Mac.Steps()\n    for step in steps:\n        print(step)\n        step.Enabled = False\n        step.refresh()\n        assert (step.Enabled is False)\n        \n    # update multivalue on server immediately\n    ethernet.Mac.Decrement(start_value='00:00:de:ad:be:ef', step_value='00:00:fa:ce:fa:ce')\n    assert (ethernet.Mac == 'Dec: 00:00:de:ad:be:ef, 00:00:fa:ce:fa:ce')\n    ethernet.Mac.Increment(start_value='00:00:fa:ce:fa:ce', step_value='00:00:de:ad:be:ef')\n    assert (ethernet.Mac == 'Inc: 00:00:fa:ce:fa:ce, 00:00:de:ad:be:ef')\n    ethernet.Mac.Random()\n    assert (ethernet.Mac == 'Rand')\n    ethernet.Mac.RandomRange()\n    assert (ethernet.Mac.Pattern.startswith('Randr:'))\n    ethernet.Mac.RandomMask()\n    assert (ethernet.Mac.Pattern.startswith('Randb:'))\n    ethernet.Mac.Distributed(algorithm='autoEven', mode='perPort', values=[('00:00:fa:ce:fa:ce', 60), ('0:00:de:ad:be:ef', 40)])\n    assert (ethernet.Mac.Pattern.startswith('Dist:'))\n    ethernet.Mac.ValueList(values=['00:00:fa:ce:fa:ce', '00:00:de:ad:be:ef'])\n    assert (ethernet.Mac.Pattern.startswith('List:'))\n    ethernet.Mac.Custom(start_value='00:00:fa:ce:fa:ce', step_value='00:00:de:ad:be:ef', increments=[('00:00:ab:ab:ab:ab', 6, [('00:00:01:01:01:01', 2, None)])])\n    assert (ethernet.Mac.Pattern.startswith('Custom:'))\n    print(ethernet.Mac.Values)\n    \n    ipv4 = ethernet.Ipv4.add(Name='Ipv4 1')\n    print(ipv4)\n    ipv4.Address.Increment(start_value='1.1.1.1', step_value='0.1.1.1')\n    assert(ipv4.Address == 'Inc: 1.1.1.1, 0.1.1.1')\n    \n    bgp4 = ipv4.BgpIpv4Peer.add(Name='Bgp 1')\n    bgp4.Md5Key.String('my-md5-key-{Dec: 1,1}')\n    print(bgp4)\n\n    # release all vports\n    ixnetwork.Vport.find().ReleasePort()\n\n    # add bgp6 in one line\n    bgp6 = topology.DeviceGroup.add(Name='Device 2').Ethernet.add().Ipv6.add().BgpIpv6Peer.add()\n    print(bgp6)\n\n    # add one quick flow group per vport\n    vports = ixnetwork.Vport.find()\n    vports.AddQuickFlowGroups(1)\n    \n    # number of quick flow groups should equal the number of vports\n    traffic_items = ixnetwork.Traffic.TrafficItem.find()\n    high_level_streams = traffic_items.HighLevelStream.find()\n\n    # config = ixnetwork.ResourceManager.ExportConfig(['/descendant-or-self::*'], False, 'json')\n    # ixnetwork.ResourceManager.ImportConfig(config, True)\n\n    # errors = ixnetwork.Globals.AppErrors()[0].Error(Name='JSON Import Errors')\n    # for instance in errors[0].Instance():\n    # \tprint(instance)\n\n    # chassis = ixnetwork.AvailableHardware.add_Chassis(Hostname='10.36.24.55')\nexcept IxNetworkError as e:\n    print(e)\n\nif sessions is not None:\n    sessions.remove()\n\n\n", 
    "ixnetwork_restpy.tests.assign_ports.py": "\"\"\"This sample demonstrates the best practice for connecting abstract ports to test ports.\n\nThe AssignPorts method on the test platform does the following:\n\t- adds chassis to /availableHardware using Arg1\n\t- creates abstract ports if the abstract port list (Arg3) cannot meet the number of Arg1 test ports\n\t- clears ownership of test ports if Arg4 is True\n\t- waits until port statistic view for all test ports are ready\n\t- returns a list of abstract test ports that have not been connected to test ports\n\"\"\"\n\nimport sys\nimport os\nsys.path[0] = os.path.abspath(sys.path[0] + '\\\\..\\\\..\\\\')\n\nfrom ixnetwork_restpy.testplatform.testplatform import TestPlatform\n\n\n# connect to a test platform, create a session and get the root IxNetwork object\ntest_platform = TestPlatform('127.0.0.1', rest_port=11009)\ntest_platform.Trace = 'request_response'\nsessions = test_platform.Sessions.find(Id=1)\nixnetwork = sessions.Ixnetwork\nixnetwork.NewConfig()\n\n# add abstract ports\nvports = ixnetwork.Vport.find()\nfor i in range(2):\n\tvports.add(Name='Abstract Port %s' % i)\nprint(vports)\n\n# connect the abstract ports to test ports\nchassis_ip = '10.36.24.55'\ntest_ports = [\n\tdict(Arg1=chassis_ip, Arg2=1, Arg3=1),\n\tdict(Arg1=chassis_ip, Arg2=1, Arg3=2)\n]\nunconnected_ports = ixnetwork.AssignPorts(test_ports, [], vports, True)\n\n", 
    "ixnetwork_restpy.tests.logging.py": "\nimport sys\nimport os\nsys.path[0] = os.path.abspath(sys.path[0] + '\\\\..\\\\..\\\\')\n\nfrom ixnetwork_restpy.testplatform.testplatform import TestPlatform\n\n# default output is to the sys.stdout\n# to output to a log file, use the log_file_name param\n# default tracing is 'none' which is no tracing of request and response messages\ntest_platform = TestPlatform('127.0.0.1', rest_port=11009, log_file_name='test.log')\nsessions = test_platform.Sessions.add()\n\n# trace requests\n# the next add vport should show a debug message for the request\nprint('LOG REQUEST ONLY')\ntest_platform.Trace='request'\nsessions.Ixnetwork.Vport.add()\n\n# trace requests and responses\n# the next add vport should show debug messages for the request and response\nprint('LOG REQUEST AND RESPONSES')\ntest_platform.Trace='request_response'\nsessions.Ixnetwork.Vport.add()\n\n# turn off tracing\n# the next add vport should not show debug messages for the request and response\nprint('LOG NOTHING')\ntest_platform.Trace='none'\nsessions.Ixnetwork.Vport.add()\n", 
    "ixnetwork_restpy.tests.windows_sessions.py": "import sys\nimport os\nsys.path[0] = os.path.abspath(sys.path[0] + '\\\\..\\\\..\\\\')\nfrom ixnetwork_restpy.testplatform.testplatform import TestPlatform\nfrom ixnetwork_restpy.errors import IxNetworkError\n\n\n# setup the connection information for a windows gui test platform that has a default session of 1\ntest_platform=TestPlatform('127.0.0.1', rest_port=11009, platform='windows')\n\n# get a list of sessions\nfor session in test_platform.Sessions.find():\n\tprint(session)\n\n# add a session and remove the session\nsessions = test_platform.Sessions.add()\nprint(sessions)\nsessions.remove()\n\n# get an invalid session\nsessions = test_platform.Sessions.find(Id=6)\nassert(len(sessions) == 0)\n\n# get a valid session\nsessions = test_platform.Sessions.find(Id=1)\nassert(len(sessions) == 1)", 
    "ixnetwork_restpy.tests.linux_sessions.py": "import sys\nimport os\nsys.path[0] = os.path.abspath(sys.path[0] + '\\\\..\\\\..\\\\')\nfrom ixnetwork_restpy.testplatform.testplatform import TestPlatform\nfrom ixnetwork_restpy.errors import IxNetworkError\n\n\n# setup the connection information for a windows gui test platform that has a default session of 1\ntest_platform=TestPlatform('10.36.78.53', platform='linux')\ntest_platform.Trace = 'request_response'\ntest_platform.Authenticate('admin', 'admin')\n\n# get a list of sessions\nfor session in test_platform.Sessions.find():\n\tprint(session)\n\n# add a session\nsessions = test_platform.Sessions.add()\nsession_id = sessions.Id\nprint(sessions)\n\n# remove the session\nsessions.remove()\nassert (len(sessions) == 0)\n\n# attempt to get the removed session\nsessions = test_platform.Sessions.find(session_id)\nassert(len(sessions) == 0)\n", 
    "ixnetwork_restpy.tests.connect.py": "\"\"\"Demonstrates different methods of connecting to IxNetwork test platforms\n\"\"\"\nimport sys\nimport os\nsys.path[0] = os.path.abspath(sys.path[0] + '\\\\..\\\\..\\\\')\nfrom ixnetwork_restpy.testplatform.testplatform import TestPlatform\n\n\n# connect to a windows platform using the default api server rest port\ntest_platform = TestPlatform('127.0.0.1', rest_port=11009, platform='windows')\n\n# connect to a windows connection manager platform using the default api server rest port\ntest_platform = TestPlatform('127.0.0.1', platform='windows')\n\n# connect to a linux api server platform using the default api server rest port\ntest_platform = TestPlatform('127.0.0.1', platform='linux')\n\n\n"
}