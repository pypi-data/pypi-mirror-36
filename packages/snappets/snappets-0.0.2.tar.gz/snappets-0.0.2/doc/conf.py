# -*- coding: utf-8 -*-
#
# Configuration file for the Sphinx documentation builder.
#
# This file does only contain a selection of the most common options. For a
# full list see the documentation:
# http://www.sphinx-doc.org/en/master/config

# -- Path setup --------------------------------------------------------------

# If extensions (or modules to document with autodoc) are in another directory,
# add these directories to sys.path here. If the directory is relative to the
# documentation root, use os.path.abspath to make it absolute, like shown here.
#
# import os
# import sys
# sys.path.insert(0, os.path.abspath('.'))

# |:here:|
import sys, os

def setdefaultencoding(encoding=None, quiet=False):
    if encoding is None:
        encoding='utf-8'
    try:
        isinstance('', basestring)
        if not hasattr(sys, '_setdefaultencoding'):
            reload(sys)
            setattr(sys, '_setdefaultencoding',
                    getattr(sys, 'setdefaultencoding'))
        sys._setdefaultencoding(encoding)
    except NameError:
        # python3 already has utf-8 default encoding ;-)
        pass

setdefaultencoding('utf-8')

# adapted from http://www.daniweb.com/software-development/python/code/217214
try:
    printf = eval("print") # python 3.0 case
except SyntaxError:
    printf_dict = dict()
    try:
        exec("from __future__ import print_function\nprintf=print", printf_dict)
        printf = printf_dict["printf"] # 2.6 case
    except SyntaxError:
        def printf(*args, **kwd): # 2.4, 2.5, define our own Print function
            fout = kwd.get("file", sys.stdout)
            w = fout.write
            if args:
                w(str(args[0]))
            sep = kwd.get("sep", " ")
            for a in args[1:]:
                w(sep)
                w(str(a))
            w(kwd.get("end", "\n"))
    del printf_dict

try:
    ('{0}').format(0)
    def sformat (fmtspec, *args, **kwargs):
        return fmtspec.format(*args, **kwargs)
except AttributeError:
    try:
        import stringformat
        def sformat (fmtspec, *args, **kwargs):
            return stringformat.FormattableString(fmtspec).format(
                *args, **kwargs)
    except ImportError:
        printf('error: stringformat missing. Try `easy_install stringformat`.', file=sys.stderr)

printe = printf

dbg_fwid = globals().get('dbg_fwid', 15)

# re-arrange sys.path (strangely enough,
# `/usr/lib/python2.7/dist-packages` appears before many
# `/usr/local/lib/python2.7/dist-packages` eggs)

_last_local = None
_new_path = []
_std_path = []
for _dir in sys.path:
    if _dir.startswith('/usr/local/'):
        _last_local = _dir
    else:
        if _dir.endswith('/dist-packages') or _dir.endswith('/site-packages'):
            _std_path.append(_dir)
            continue
    _new_path.append(_dir)

if _std_path and _last_local is not None:
    _first_std_indx = sys.path.index(_std_path[0])
    _last_local_indx = sys.path.index(_last_local)
    if _last_local_indx > _first_std_indx:
        printe(sformat(
            "#    "":PRC:    moved {0} from {1} to {2}",
            _std_path,
            [sys.path.index(_d) for _d in _std_path],
            _last_local_indx + 1))
        _insert_indx = _new_path.index(_last_local) + 1
        _new_path[_insert_indx:_insert_indx] = _std_path
        sys.path = _new_path

here = os.path.abspath(os.path.dirname(__file__))
top_dir = os.path.abspath(os.path.join(here, os.path.pardir))
sys.path.insert(0, top_dir)

# |:here:|

# -- Project information -----------------------------------------------------

project = u'Snappets'
copyright = u'2018, Wolfgang Scherer'
author = u'Wolfgang Scherer'

with open(os.path.join(top_dir, ".version"), "r") as fh:
    # The full version, including alpha/beta/rc tags
    release = fh.read().strip()

# The short X.Y version
version = '.'.join(release.split('.')[:3]) # use 3 parts in alpha phase

# -- General configuration ---------------------------------------------------

# If your documentation needs a minimal Sphinx version, state it here.
#
# needs_sphinx = '1.0'

# Add any Sphinx extension module names here, as strings. They can be
# extensions coming with Sphinx (named 'sphinx.ext.*') or your custom
# ones.
extensions = [
    'sphinx.ext.autodoc',
    'sphinx.ext.doctest',
    'sphinx.ext.intersphinx',
    'sphinx.ext.todo',
    'sphinx.ext.coverage',
    'sphinx.ext.mathjax',
    'sphinx.ext.ifconfig',
    'sphinx.ext.viewcode',
]

# Add any paths that contain templates here, relative to this directory.
templates_path = ['_templates']

# The suffix(es) of source filenames.
# You can specify multiple suffix as a list of string:
#
# source_suffix = ['.rst', '.md']
source_suffix = '.rst'

# The master toctree document.
master_doc = 'index'

# The language for content autogenerated by Sphinx. Refer to documentation
# for a list of supported languages.
#
# This is also used if you do content translation via gettext catalogs.
# Usually you set "language" from the command line for these cases.
language = None

# List of patterns, relative to source directory, that match files and
# directories to ignore when looking for source files.
# This pattern also affects html_static_path and html_extra_path .
exclude_patterns = [u'_build', 'Thumbs.db', '.DS_Store']

# The name of the Pygments (syntax highlighting) style to use.
pygments_style = 'sphinx'

# -- Options for HTML output -------------------------------------------------

# The theme to use for HTML and HTML Help pages.  See the documentation for
# a list of builtin themes.
#
html_theme = 'alabaster'

# Theme options are theme-specific and customize the look and feel of a theme
# further.  For a list of options available for each theme, see the
# documentation.
#
# html_theme_options = {}

# Add any paths that contain custom static files (such as style sheets) here,
# relative to this directory. They are copied after the builtin static files,
# so a file named "default.css" will overwrite the builtin "default.css".
html_static_path = ['_static']

# Custom sidebar templates, must be a dictionary that maps document names
# to template names.
#
# The default sidebars (for documents that don't match any pattern) are
# defined by theme itself.  Builtin themes are using these templates by
# default: ``['localtoc.html', 'relations.html', 'sourcelink.html',
# 'searchbox.html']``.
#
# html_sidebars = {}

# -- Options for HTMLHelp output ---------------------------------------------

# Output file base name for HTML help builder.
htmlhelp_basename = 'Snappetsdoc'

# -- Options for LaTeX output ------------------------------------------------

latex_elements = {
    # The paper size ('letterpaper' or 'a4paper').
    #
    # 'papersize': 'letterpaper',

    # The font size ('10pt', '11pt' or '12pt').
    #
    # 'pointsize': '10pt',

    # Additional stuff for the LaTeX preamble.
    #
    # 'preamble': '',

    # Latex figure (float) alignment
    #
    # 'figure_align': 'htbp',
}

# Grouping the document tree into LaTeX files. List of tuples
# (source start file, target name, title,
#  author, documentclass [howto, manual, or own class]).
latex_documents = [
    (master_doc, 'Snappets.tex', u'Snappets Documentation',
     u'Wolfgang Scherer', 'manual'),
]

# -- Options for manual page output ------------------------------------------

# One entry per manual page. List of tuples
# (source start file, name, description, authors, manual section).
man_pages = [
    (master_doc, 'snappets', u'Snappets Documentation',
     [author], 1)
]

# -- Options for Texinfo output ----------------------------------------------

# Grouping the document tree into Texinfo files. List of tuples
# (source start file, target name, title, author,
#  dir menu entry, description, category)
texinfo_documents = [
    (master_doc, 'Snappets', u'Snappets Documentation',
     author, 'Snappets', 'One line description of project.',
     'Miscellaneous'),
]

# -- Options for Epub output -------------------------------------------------

# Bibliographic Dublin Core info.
epub_title = project
epub_author = author
epub_publisher = author
epub_copyright = copyright

# The unique identifier of the text. This can be a ISBN number
# or the project homepage.
#
# epub_identifier = ''

# A unique identification for the text.
#
# epub_uid = ''

# A list of files that should not be packed into the epub file.
epub_exclude_files = ['search.html']

# -- Extension configuration -------------------------------------------------

# -- Options for intersphinx extension ---------------------------------------

# Example configuration for intersphinx: refer to the Python standard library.
intersphinx_mapping = {'https://docs.python.org/': None}

# -- Options for todo extension ----------------------------------------------

# If true, `todo` and `todoList` produce output, else they produce nothing.
todo_include_todos = True

# |:here:|

# --------------------------------------------------
# |||:sec:||| Theme
# --------------------------------------------------

my_preferred_themes = [
    # arrange as needed
    'bootstrap',
    'guzzle',
    'sphinx_rtd_theme',
    'alabaster',
    'default',
]

for _my_preferred_theme in my_preferred_themes:

    if _my_preferred_theme == 'bootstrap':
        try:
            import sphinx_bootstrap_theme
            printe(sformat("#    "":DBG:    {1:<{0}s}: ]{2!s}[", dbg_fwid,
                           "bootstrap", (sphinx_bootstrap_theme.__version__)))
            html_theme = 'bootstrap'
            html_theme_path = sphinx_bootstrap_theme.get_html_theme_path()
            #html_sidebars = {'**': ['localtoc.html', 'relations.html', 'sourcelink.html', 'searchbox.html']}
            html_theme_options = {
                'navbar_title': project,
                'navbar_links': [
                    # ('Index', 'genindex'),
                    # ('Modules', 'py-modindex'),
                    # ('Some', 'http://where.over.com', True), # arbitrary link
                ],
                # Global TOC depth for "site" navbar tab. (Default: 1)
                # Switching to -1 shows all levels.
                # 'globaltoc_depth': 2,

                # Choose Bootstrap version.
                # Values: "3" (default) or "2" (in quotes)
                # 'bootstrap_version': "3",

                # Currently, the supported themes are:
                # - Bootstrap 2: https://bootswatch.com/2
                # - Bootstrap 3: https://bootswatch.com/3
                'bootswatch_theme': "flatly",
            }
            break
        except ImportError:
            continue

    if _my_preferred_theme == 'guzzle':
        try:
            import guzzle_sphinx_theme
            html_theme = 'guzzle_sphinx_theme'
            # # Adds an HTML table visitor to apply Bootstrap table classes
            html_translator_class = "guzzle_sphinx_theme.HTMLTranslator"
            html_theme_path = guzzle_sphinx_theme.html_theme_path()
            # html_theme = "guzzle_sphinx_theme"
            # # Register the theme as an extension to generate a sitemap.xml
            extensions.append("guzzle_sphinx_theme")
            # # Guzzle theme options (see theme.conf for more information)
            html_theme_options = {
                # Set the name of the project to appear in the sidebar
                "project_nav_name": project,
            }
            break
        except ImportError:
            continue

    if _my_preferred_theme == 'sphinx_rtd_theme':
        try:
            import sphinx_rtd_theme
            html_theme = 'sphinx_rtd_theme'
            html_theme_path = [sphinx_rtd_theme.get_html_theme_path()]
            break
        except ImportError:
            continue

    if _my_preferred_theme == 'alabaster':
        try:
            import alabaster
            html_theme = 'alabaster'
            break
        except ImportError:
            continue

    html_theme = 'default'
    break

# --------------------------------------------------
# |||:sec:||| Configuraiton overrides
# --------------------------------------------------

source_suffix = ['.rst', '.rst.auto']

latex_elements = {}
latex_elements['papersize'] = 'a4paper'
latex_elements['pointsize'] = '10pt'
latex_elements['preamble'] = r'''
%% box drawing characters used for e.g. RAKE symbol
\usepackage{pmboxdraw}
\ifdefined\DeclareUnicodeCharacter
%% check mark
\DeclareUnicodeCharacter{221A}{{\tiny \raisebox{1ex}[\ht\strutbox][0pt]{$\sqrt{}$}}}
\fi
'''

# --------------------------------------------------
# |||:sec:||| Internal Extensions
# --------------------------------------------------

#extensions = [_e for _e in extensions if _e != 'sphinx.ext.mathjax']
#extensions.append('sphinx.ext.imgmath')

imgmath_image_format = 'svg'

# graphviz internal
extensions.append('sphinx.ext.graphviz')

#graphviz_dot
#graphviz_dot_args =
graphviz_output_format = 'svg'

# --------------------------------------------------
# |||:sec:||| Docutils Comment Role
# --------------------------------------------------

try:
    import du_comment_role
    extensions.append('du_comment_role')
except:
    from docutils.parsers.rst import directives
    from docutils.parsers.rst.languages import en
    from docutils.parsers.rst.roles import register_canonical_role
    def icomment_role(role, rawtext, text, lineno, inliner, options={}, content=[]):
        return [], []
    en.roles['icomment']  = 'icomment'
    register_canonical_role('comment', icomment_role)
    icomment_role.options = {
        'format': directives.unchanged,
        'raw': directives.flag,
        }
    en.roles['span']  = 'span'
    register_canonical_role('span', icomment_role)

# --------------------------------------------------
# |||:sec:||| External Extensions
# --------------------------------------------------

check_extensions = []
#check_extensions.append('ws_docutils.span')
check_extensions.append('sphinxcontrib.plantuml')

# plantuml = 'java -jar /path/to/plantuml.jar'
# plantuml_output_format = 'png'
plantuml_output_format = 'svg'
# plantuml_latex_output_format = 'png'
plantuml_latex_output_format = 'pdf'
# plantuml_epstopdf = 'epstopdf'

check_extensions.append('sphinxcontrib.needs')
check_extensions.append('sphinxcontrib.mercurial')
#check_extensions.append('sphinxcontrib.yuml')

# check availability
for _ext in check_extensions:
    try:
        exec("import " + _ext, {})
        extensions.append(_ext)
    except:
        print('warning: extension {0} failed'.format(_ext))

# --------------------------------------------------
# |||:sec:||| Setup
# --------------------------------------------------

def setup(app):
    if os.path.exists('_static/bootstrap3-sub-menu.css'):
        app.add_stylesheet('bootstrap3-sub-menu.css')
    if os.path.exists('_static/wsx-tables.js'):
        app.add_javascript('wsx-tables.js')

# :ide: COMPILE: Standard
# . (let ((args "")) (compile (concat "make -k " args)))

# :ide: COMPILE: images
# . (let ((args "images")) (compile (concat "rm -f table_generator.png; make -k " args)))

# :ide: COMPILE: epub
# . (let ((args "epub")) (compile (concat "make -k " args)))

# :ide: COMPILE: latexpdf
# . (let ((args "latexpdf")) (compile (concat "make -k " args)))

# :ide: COMPILE: html
# . (progn (save-buffer) (compile (concat "make -k html")))

# :ide: +-#+
# . Compile ()

#
# Local Variables:
# mode: python
# comment-start: "#"
# comment-start-skip: "#+"
# comment-column: 0
# truncate-lines: t
# End:
