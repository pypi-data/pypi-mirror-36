.. -*- coding: utf-8 -*-
.. Copyright (C) 2018, Wolfgang Scherer, <Wolfgang.Scherer at gmx.de>
.. Sponsored by Wiedenmann-Seile GmbH, http://ws-gruppe.de
..
.. This file is part of Snappets.
..
.. Permission is granted to copy, distribute and/or modify this document
.. under the terms of the GNU Free Documentation License, Version 1.3
.. or any later version published by the Free Software Foundation;
.. with no Invariant Sections, no Front-Cover Texts, and no Back-Cover Texts.
.. A copy of the license is included in the main documentation of Snappets.

.. inline comments (with du_comment_role)
.. role:: rem(comment)
.. role:: html(raw)
   :format: html
.. role:: shx(code)
   :language: sh

.. \||<-snip->|| start
.. -*- coding: utf-8 -*-

.. \||<-snip->|| rem |:sec:| includes
.. \||<-snap->|| alias inc_standalone     rem
.. \||<-snap->|| alias inc_index          rem
.. \||<-snap->|| alias inc_overview       rem
.. \||<-snap->|| alias inc_chapter        rem

.. \||<-snip->|| rem |:sec:| parts
.. \||<-snap->|| alias part_top           rem
.. \||<-snap->|| alias part_title         rem
.. \||<-snap->|| alias part_contents      rem
.. \||<-snap->|| alias part_abstract      rem
.. \||<-snap->|| alias part_body          rem
.. \||<-snap->|| alias part_defs          rem
.. \||<-snap->|| alias part_bottom        rem

.. \||<-snip->|| rem |:sec:| doc_standalone (sphinx-readme.sh)
.. \||<-snap->|| if defined doc_standalone
.. \||<-snap->|| alias inc_standalone     include
.. \||<-snap->|| alias doc_standalone     rem
.. \||<-snap->|| alias not_doc_standalone skip
.. \||<-snap->|| else
.. \||<-snap->|| alias doc_standalone     skip
.. \||<-snap->|| alias not_doc_standalone rem
.. \||<-snap->|| subst include_directive_combined include::
.. \||<-snap->|| fi defined doc_standalone

.. \||<-snip->|| rem |:sec:| output_latex (sphinx-readme.sh)
.. \||<-snap->|| if defined output_latex
.. \||<-snap->|| alias output_latex       rem
.. \||<-snap->|| alias not_output_latex   skip
.. \||<-snap->|| alias part_contents      skip
.. \||<-snap->|| else
.. \||<-snap->|| alias output_latex       skip
.. \||<-snap->|| alias not_output_latex   rem
.. \||<-snap->|| fi defined output_latex

.. \||<-snip->|| rem |:sec:| doc_index (makefile)
.. \||<-snap->|| if defined doc_index
.. \||<-snap->|| alias inc_index          include
.. \||<-snap->|| alias doc_index          rem
.. \||<-snap->|| alias not_doc_index      skip
.. \||<-snap->|| alias part_top           rem
.. \||<-snap->|| alias part_title         rem
.. \||<-snap->|| alias part_contents      skip
.. \||<-snap->|| alias part_abstract      rem
.. \||<-snap->|| alias part_body          skip
.. \||<-snap->|| alias part_defs          rem
.. \||<-snap->|| alias part_bottom        rem
.. \||<-snap->|| else
.. \||<-snap->|| alias doc_index          skip
.. \||<-snap->|| alias not_doc_index      rem
.. \||<-snap->|| fi defined doc_index

.. \||<-snip->|| rem |:sec:| doc_overview (makefile)
.. \||<-snap->|| if defined doc_overview
.. \||<-snap->|| alias inc_overview       include
.. \||<-snap->|| alias part_top           rem
.. \||<-snap->|| alias part_title         skip
.. \||<-snap->|| alias part_contents      skip
.. \||<-snap->|| alias part_abstract      skip
.. \||<-snap->|| alias part_body          rem
.. \||<-snap->|| alias part_defs          rem
.. \||<-snap->|| alias part_bottom        rem
.. \||<-snap->|| alias doc_overview       rem
.. \||<-snap->|| alias not_doc_overview   skip
.. \||<-snap->|| else
.. \||<-snap->|| alias doc_overview       skip
.. \||<-snap->|| alias not_doc_overview   rem
.. \||<-snap->|| fi defined doc_overview

.. \||<-snip->|| rem |:sec:| doc_chapter (makefile)
.. \||<-snap->|| if defined doc_chapter
.. \||<-snap->|| alias inc_chapter        include
.. \||<-snap->|| alias part_top           rem
.. \||<-snap->|| alias part_title         rem
.. \||<-snap->|| alias part_contents      skip
.. \||<-snap->|| alias part_abstract      rem
.. \||<-snap->|| alias part_body          rem
.. \||<-snap->|| alias part_defs          rem
.. \||<-snap->|| alias part_bottom        rem
.. \||<-snap->|| alias doc_chapter        rem
.. \||<-snap->|| alias not_doc_chapter    skip
.. \||<-snap->|| else
.. \||<-snap->|| alias doc_chapter        skip
.. \||<-snap->|| alias not_doc_chapter    rem
.. \||<-snap->|| fi defined doc_chapter

.. \||<-snap->|| trim right
.. \||<-snip->|| stop

.. (progn (forward-line 1) (snip-insert "rst_t.ide-update" t t "rst") (insert "\n"))
.. 
.. :ide-menu: Emacs IDE Main Menu - Buffer @BUFFER@
.. . M-x `eIDE-menu' ()(eIDE-menu "z")

.. :ide: COMPILE: latexpdf
.. . (progn (save-buffer) (compile (concat "make -k latexpdf")))

.. :ide: COMPILE: html
.. . (progn (save-buffer) (compile (concat "make -k html")))

.. :ide: COMPILE: render reST as pseudoXML
.. . (let* ((fp (buffer-file-name)) (fn (file-name-nondirectory fp))) (save-match-data (if (string-match-t "[.][^.]*$" fn) (setq fn (replace-match "" nil t fn)))) (let ((args (concat " --traceback " (shell-quote-argument fp) " 2>&1 #| tee " (shell-quote-argument fn) ".pxml"))) (save-buffer) (compile (concat "PATH=\".:$PATH\"; ws_rst2pseudoxml.py " args))))

.. :ide: +#-
.. . Process ()

.. :ide: QUO: ~~ Subsubsection ~~
.. . (insert "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\:rem\:`|\:sec\:|`\\ ::fillme\::\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n" )

.. :ide: QUO: -- Subsection --
.. . (insert "--------------------------------------------------\n\:rem\:`||\:sec\:||`\\ ::fillme\::\n--------------------------------------------------\n" )

.. :ide: QUO: == Section ==
.. . (insert "==================================================\n\:rem\:`|||\:sec\:|||`\\ ::fillme\::\n==================================================\n" )

.. :ide: +#-
.. . Sections ()

.. :ide: OCCUR-OUTLINE:  `|||: sec :|||' + ^.. + command comments
.. . (x-symbol-tag-occur-outline "sec" '("|:" ":|") (cons (cons "^" ".. ") (cons nil nil)) "\\(_`[^`\n]+`\\|\\[[^]\n]+\\]\\|[|][^|\n]+[|]\\|[^:\n]+::\\)")

.. :ide: MENU-OUTLINE:  `|||: sec :|||' + ^.. + command comments
.. . (x-eIDE-menu-outline "sec" '("|:" ":|") (cons (cons "^" ".. ") (cons nil nil)) "\\(_`[^`\n]+`\\|\\[[^]\n]+\\]\\|[|][^|\n]+[|]\\|[^:\n]+::\\)")

.. 
.. Local Variables:
.. mode: rst
.. mode: snip-minor
.. snip-show-inactive: t
.. snip-mode: rst
.. truncate-lines: t
.. symbol-tag-symbol-regexp: "[-0-9A-Za-z_#]\\([-0-9A-Za-z_. ]*[-0-9A-Za-z_]\\|\\)"
.. symbol-tag-auto-comment-mode: nil
.. symbol-tag-srx-is-safe-with-nil-delimiters: nil
.. End:
