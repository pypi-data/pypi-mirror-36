[{
  "total_tests_failed": 0,
  "total_tests": 25,
  "date_time": "2018-08-06 23:13:48.702537",
  "total_tests_skipped": 0,
  "test_results": [{
    "test_description": "Test to check if info-endpoint returns 200 OK with appropriate headers",
    "name": "test_info_implement",
    "result": 1,
    "parents": ["test_base_algorithm"],
    "warning": false,
    "text": "Info endpoint implemented by the server",
    "children": ["test_info_implement_default", "test_info_circular", "test_info_algorithms", "test_info_subsequence", "test_info_api_version"]
  }, {
    "test_description": "Test to check if info-endpoint returns 200 OK without headers",
    "name": "test_info_implement_default",
    "result": 1,
    "parents": ["test_info_implement"],
    "warning": false,
    "text": "Info endpoint implemented with default encoding",
    "children": []
  }, {
    "test_description": "Test to check if info-endpoint has circular in the response object. If the key is present we update session_params['circular'] as per the value",
    "name": "test_info_circular",
    "result": 1,
    "parents": ["test_info_implement"],
    "warning": false,
    "text": "circular key in info response object",
    "children": ["test_metadata_query_circular_sequence"]
  }, {
    "test_description": "Test if metadata endpoint returns 200 using circular test sequence if the server supports circular sequences. Value stored in session_params. If not skip test and set skip text appropriately",
    "name": "test_metadata_query_circular_sequence",
    "result": 1,
    "parents": ["test_metadata_implement", "test_info_circular"],
    "warning": false,
    "text": "Circular sequence metadata can be retrieved",
    "children": []
  }, {
    "test_description": "Test to check if info-endpoint has algorithms in the response object. If the key is present we update session_params['trunc512'] as per the value",
    "name": "test_info_algorithms",
    "result": 1,
    "parents": ["test_info_implement"],
    "warning": false,
    "text": "algorithms key in info response object",
    "children": ["test_metadata_query_by_trunc512", "test_metadata_trunc512", "test_sequence_query_by_trunc512"]
  }, {
    "test_description": "Test if metadata endpoint returns 200 using trunc512 with I test sequence if the server supports. Value stored in session_params. If not skip test and set skip text appropriately",
    "name": "test_metadata_query_by_trunc512",
    "result": 1,
    "parents": ["test_metadata_implement", "test_info_algorithms"],
    "warning": false,
    "text": "TRUNC512 algorithm is working in the server for metadata endpoint",
    "children": []
  }, {
    "test_description": "Test if trunc512 in metadata response object. Skip if server does not support trunc512",
    "name": "test_metadata_trunc512",
    "result": 1,
    "parents": ["test_metadata_implement", "test_info_algorithms"],
    "warning": false,
    "text": "trunc512 key in metadata response object",
    "children": []
  }, {
    "test_description": "Test to check if server returns 200 using I test sequence trunc512 and appropriate headers if the server supports trunc512",
    "name": "test_sequence_query_by_trunc512",
    "result": 1,
    "parents": ["test_sequence_implement", "test_info_algorithms"],
    "warning": false,
    "text": "TRUNC512 algorithm is working in the server for sequence endpoint",
    "children": []
  }, {
    "test_description": "Test to check if info-endpoint has subsequence_limit in the response object. If the key is present we update session_params['subsequence_limit'] as per the value",
    "name": "test_info_subsequence",
    "result": 1,
    "parents": ["test_info_implement"],
    "warning": false,
    "text": "subsequence_limit key in info response object",
    "children": []
  }, {
    "test_description": "Test to check if info-endpoint has supported_api_versions in the response object.",
    "name": "test_info_api_version",
    "result": 1,
    "parents": ["test_info_implement"],
    "warning": false,
    "text": "supported_api_versions key in info response object",
    "children": []
  }, {
    "test_description": "Test if metadata endpoint returns 200 with appropriate headers using I test sequence",
    "name": "test_metadata_implement",
    "result": 1,
    "parents": ["test_base_algorithm"],
    "warning": false,
    "text": "Metadata endpoint implemented by the server",
    "children": ["test_metadata_implement_default", "test_metadata_query_by_trunc512", "test_metadata_query_circular_sequence", "test_metadata_md5", "test_metadata_trunc512", "test_metadata_length", "test_metadata_aliases", "test_metadata_invalid_checksum_404_error", "test_metadata_invalid_encoding_415_error"]
  }, {
    "test_description": "Test if metadata endpoint returns 200 without headers using I test sequence",
    "name": "test_metadata_implement_default",
    "result": 1,
    "parents": ["test_metadata_implement"],
    "warning": false,
    "text": "Metadata endpoint implemented with default encoding",
    "children": []
  }, {
    "test_description": "Test if md5 in metadata response object",
    "name": "test_metadata_md5",
    "result": 1,
    "parents": ["test_metadata_implement"],
    "warning": false,
    "text": "md5 key in metadata response object",
    "children": []
  }, {
    "test_description": "Test if length in metadata response object",
    "name": "test_metadata_length",
    "result": 1,
    "parents": ["test_metadata_implement"],
    "warning": false,
    "text": "length key in metadata response object",
    "children": []
  }, {
    "test_description": "Test if aliases in metadata response object",
    "name": "test_metadata_aliases",
    "result": 1,
    "parents": ["test_metadata_implement"],
    "warning": false,
    "text": "aliases key in metadata response object",
    "children": []
  }, {
    "test_description": "Test if 404 on invalid checksum in metadata response",
    "name": "test_metadata_invalid_checksum_404_error",
    "result": 1,
    "parents": ["test_metadata_implement"],
    "warning": false,
    "text": "Server is correctly sending 404 on invalid checksum",
    "children": []
  }, {
    "test_description": "Test if 415 on invalid encoding in Accept header",
    "name": "test_metadata_invalid_encoding_415_error",
    "result": 1,
    "parents": ["test_metadata_implement"],
    "warning": false,
    "text": "Server is correctly sending 415 on invalid encoding",
    "children": []
  }, {
    "test_description": "Test to check if server returns 200 using I test sequence and appropriate headers",
    "name": "test_sequence_implement",
    "result": 1,
    "parents": ["test_base_algorithm"],
    "warning": false,
    "text": "Sequence endpoint implemented in the server",
    "children": ["test_sequence_implement_default", "test_sequence_start_end", "test_sequence_range", "test_sequence_query_by_trunc512", "test_sequence_invalid_checksum_404_error", "test_sequence_invalid_encoding_415_error"]
  }, {
    "test_description": "Test to check if server returns 200 using I test sequence and no headers",
    "name": "test_sequence_implement_default",
    "result": 1,
    "parents": ["test_sequence_implement"],
    "warning": false,
    "text": "Sequence endpoint implemented with default encoding",
    "children": []
  }, {
    "test_description": "Test to check if server returns 200 and appropriate text using I test sequence and start/end query params set to 10 and 20 respectively",
    "name": "test_sequence_start_end",
    "result": 1,
    "parents": ["test_sequence_implement"],
    "warning": false,
    "text": "Server supports start end query params",
    "children": ["test_sequence_start_end_success_cases"]
  }, {
    "test_description": "Test to check if server passes all the edge cases related to success queries using start/end params",
    "name": "test_sequence_start_end_success_cases",
    "result": 1,
    "parents": ["test_sequence_start_end"],
    "warning": false,
    "text": "Server passed all the success edge cases with start end query params",
    "children": []
  }, {
    "test_description": "Test to check if server returns 200 and appropriate text using I test sequence and range header set to 10 and 19 respectively",
    "name": "test_sequence_range",
    "result": 1,
    "parents": ["test_sequence_implement"],
    "warning": false,
    "text": "Server supports range header",
    "children": ["test_sequence_range_success_cases"]
  }, {
    "test_description": "Test to check if server passes all the edge cases related to range header success queries",
    "name": "test_sequence_range_success_cases",
    "result": 1,
    "parents": ["test_sequence_range"],
    "warning": false,
    "text": "Server passed all the success edge cases with range header query",
    "children": []
  }, {
    "test_description": "Test to check if server returns 404 using some garbage checksum and appropriate headers",
    "name": "test_sequence_invalid_checksum_404_error",
    "result": 1,
    "parents": ["test_sequence_implement"],
    "warning": false,
    "text": "Server is correctly sending 404 on invalid checksum",
    "children": []
  }, {
    "test_description": "Test to check if server returns 200 using I test sequence and garbage encoding in Accept header",
    "name": "test_sequence_invalid_encoding_415_error",
    "result": 1,
    "parents": ["test_sequence_implement"],
    "warning": false,
    "text": "Server is correctly sending 415 on invalid encoding",
    "children": []
  }],
  "total_warnings": 0,
  "total_tests_passed": 25,
  "server": "http://localhost:5000/"
}]