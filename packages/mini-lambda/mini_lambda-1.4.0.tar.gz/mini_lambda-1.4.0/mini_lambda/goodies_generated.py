# ----
# This file is generated by mini_lambda_methods_generation.py - do not modify it !
# ----
from mini_lambda.main import C, make_lambda_friendly_class, make_lambda_friendly_method
# from warnings import warn


try:
    from math import acos
    Acos = make_lambda_friendly_method(acos, 'acos')
except ImportError as e:
    # new: silently escape, as this is annoying
    # warn("Error performing 'from math import acos': " + str(e))
    pass


try:
    from math import acosh
    Acosh = make_lambda_friendly_method(acosh, 'acosh')
except ImportError as e:
    # new: silently escape, as this is annoying
    # warn("Error performing 'from math import acosh': " + str(e))
    pass


try:
    from math import asin
    Asin = make_lambda_friendly_method(asin, 'asin')
except ImportError as e:
    # new: silently escape, as this is annoying
    # warn("Error performing 'from math import asin': " + str(e))
    pass


try:
    from math import asinh
    Asinh = make_lambda_friendly_method(asinh, 'asinh')
except ImportError as e:
    # new: silently escape, as this is annoying
    # warn("Error performing 'from math import asinh': " + str(e))
    pass


try:
    from math import atan
    Atan = make_lambda_friendly_method(atan, 'atan')
except ImportError as e:
    # new: silently escape, as this is annoying
    # warn("Error performing 'from math import atan': " + str(e))
    pass


try:
    from math import atan2
    Atan2 = make_lambda_friendly_method(atan2, 'atan2')
except ImportError as e:
    # new: silently escape, as this is annoying
    # warn("Error performing 'from math import atan2': " + str(e))
    pass


try:
    from math import atanh
    Atanh = make_lambda_friendly_method(atanh, 'atanh')
except ImportError as e:
    # new: silently escape, as this is annoying
    # warn("Error performing 'from math import atanh': " + str(e))
    pass


try:
    from math import ceil
    Ceil = make_lambda_friendly_method(ceil, 'ceil')
except ImportError as e:
    # new: silently escape, as this is annoying
    # warn("Error performing 'from math import ceil': " + str(e))
    pass


try:
    from math import copysign
    Copysign = make_lambda_friendly_method(copysign, 'copysign')
except ImportError as e:
    # new: silently escape, as this is annoying
    # warn("Error performing 'from math import copysign': " + str(e))
    pass


try:
    from math import cos
    Cos = make_lambda_friendly_method(cos, 'cos')
except ImportError as e:
    # new: silently escape, as this is annoying
    # warn("Error performing 'from math import cos': " + str(e))
    pass


try:
    from math import cosh
    Cosh = make_lambda_friendly_method(cosh, 'cosh')
except ImportError as e:
    # new: silently escape, as this is annoying
    # warn("Error performing 'from math import cosh': " + str(e))
    pass


try:
    from math import degrees
    Degrees = make_lambda_friendly_method(degrees, 'degrees')
except ImportError as e:
    # new: silently escape, as this is annoying
    # warn("Error performing 'from math import degrees': " + str(e))
    pass


try:
    from math import e
    E = C(e, 'e')
except ImportError as e:
    # new: silently escape, as this is annoying
    # warn("Error performing 'from math import e': " + str(e))
    pass


try:
    from math import erf
    Erf = make_lambda_friendly_method(erf, 'erf')
except ImportError as e:
    # new: silently escape, as this is annoying
    # warn("Error performing 'from math import erf': " + str(e))
    pass


try:
    from math import erfc
    Erfc = make_lambda_friendly_method(erfc, 'erfc')
except ImportError as e:
    # new: silently escape, as this is annoying
    # warn("Error performing 'from math import erfc': " + str(e))
    pass


try:
    from math import exp
    Exp = make_lambda_friendly_method(exp, 'exp')
except ImportError as e:
    # new: silently escape, as this is annoying
    # warn("Error performing 'from math import exp': " + str(e))
    pass


try:
    from math import expm1
    Expm1 = make_lambda_friendly_method(expm1, 'expm1')
except ImportError as e:
    # new: silently escape, as this is annoying
    # warn("Error performing 'from math import expm1': " + str(e))
    pass


try:
    from math import fabs
    Fabs = make_lambda_friendly_method(fabs, 'fabs')
except ImportError as e:
    # new: silently escape, as this is annoying
    # warn("Error performing 'from math import fabs': " + str(e))
    pass


try:
    from math import factorial
    Factorial = make_lambda_friendly_method(factorial, 'factorial')
except ImportError as e:
    # new: silently escape, as this is annoying
    # warn("Error performing 'from math import factorial': " + str(e))
    pass


try:
    from math import floor
    Floor = make_lambda_friendly_method(floor, 'floor')
except ImportError as e:
    # new: silently escape, as this is annoying
    # warn("Error performing 'from math import floor': " + str(e))
    pass


try:
    from math import fmod
    Fmod = make_lambda_friendly_method(fmod, 'fmod')
except ImportError as e:
    # new: silently escape, as this is annoying
    # warn("Error performing 'from math import fmod': " + str(e))
    pass


try:
    from math import frexp
    Frexp = make_lambda_friendly_method(frexp, 'frexp')
except ImportError as e:
    # new: silently escape, as this is annoying
    # warn("Error performing 'from math import frexp': " + str(e))
    pass


try:
    from math import fsum
    Fsum = make_lambda_friendly_method(fsum, 'fsum')
except ImportError as e:
    # new: silently escape, as this is annoying
    # warn("Error performing 'from math import fsum': " + str(e))
    pass


try:
    from math import gamma
    Gamma = make_lambda_friendly_method(gamma, 'gamma')
except ImportError as e:
    # new: silently escape, as this is annoying
    # warn("Error performing 'from math import gamma': " + str(e))
    pass


try:
    from math import gcd
    Gcd = make_lambda_friendly_method(gcd, 'gcd')
except ImportError as e:
    # new: silently escape, as this is annoying
    # warn("Error performing 'from math import gcd': " + str(e))
    pass


try:
    from math import hypot
    Hypot = make_lambda_friendly_method(hypot, 'hypot')
except ImportError as e:
    # new: silently escape, as this is annoying
    # warn("Error performing 'from math import hypot': " + str(e))
    pass


try:
    from math import inf
    Inf = C(inf, 'inf')
except ImportError as e:
    # new: silently escape, as this is annoying
    # warn("Error performing 'from math import inf': " + str(e))
    pass


try:
    from math import isclose
    Isclose = make_lambda_friendly_method(isclose, 'isclose')
except ImportError as e:
    # new: silently escape, as this is annoying
    # warn("Error performing 'from math import isclose': " + str(e))
    pass


try:
    from math import isfinite
    Isfinite = make_lambda_friendly_method(isfinite, 'isfinite')
except ImportError as e:
    # new: silently escape, as this is annoying
    # warn("Error performing 'from math import isfinite': " + str(e))
    pass


try:
    from math import isinf
    Isinf = make_lambda_friendly_method(isinf, 'isinf')
except ImportError as e:
    # new: silently escape, as this is annoying
    # warn("Error performing 'from math import isinf': " + str(e))
    pass


try:
    from math import isnan
    Isnan = make_lambda_friendly_method(isnan, 'isnan')
except ImportError as e:
    # new: silently escape, as this is annoying
    # warn("Error performing 'from math import isnan': " + str(e))
    pass


try:
    from math import ldexp
    Ldexp = make_lambda_friendly_method(ldexp, 'ldexp')
except ImportError as e:
    # new: silently escape, as this is annoying
    # warn("Error performing 'from math import ldexp': " + str(e))
    pass


try:
    from math import lgamma
    Lgamma = make_lambda_friendly_method(lgamma, 'lgamma')
except ImportError as e:
    # new: silently escape, as this is annoying
    # warn("Error performing 'from math import lgamma': " + str(e))
    pass


try:
    from math import log
    Log = make_lambda_friendly_method(log, 'log')
except ImportError as e:
    # new: silently escape, as this is annoying
    # warn("Error performing 'from math import log': " + str(e))
    pass


try:
    from math import log10
    Log10 = make_lambda_friendly_method(log10, 'log10')
except ImportError as e:
    # new: silently escape, as this is annoying
    # warn("Error performing 'from math import log10': " + str(e))
    pass


try:
    from math import log1p
    Log1p = make_lambda_friendly_method(log1p, 'log1p')
except ImportError as e:
    # new: silently escape, as this is annoying
    # warn("Error performing 'from math import log1p': " + str(e))
    pass


try:
    from math import log2
    Log2 = make_lambda_friendly_method(log2, 'log2')
except ImportError as e:
    # new: silently escape, as this is annoying
    # warn("Error performing 'from math import log2': " + str(e))
    pass


try:
    from math import modf
    Modf = make_lambda_friendly_method(modf, 'modf')
except ImportError as e:
    # new: silently escape, as this is annoying
    # warn("Error performing 'from math import modf': " + str(e))
    pass


try:
    from math import nan
    Nan = C(nan, 'nan')
except ImportError as e:
    # new: silently escape, as this is annoying
    # warn("Error performing 'from math import nan': " + str(e))
    pass


try:
    from math import pi
    Pi = C(pi, 'pi')
except ImportError as e:
    # new: silently escape, as this is annoying
    # warn("Error performing 'from math import pi': " + str(e))
    pass


try:
    from math import pow
    Pow = make_lambda_friendly_method(pow, 'pow')
except ImportError as e:
    # new: silently escape, as this is annoying
    # warn("Error performing 'from math import pow': " + str(e))
    pass


try:
    from math import radians
    Radians = make_lambda_friendly_method(radians, 'radians')
except ImportError as e:
    # new: silently escape, as this is annoying
    # warn("Error performing 'from math import radians': " + str(e))
    pass


try:
    from math import sin
    Sin = make_lambda_friendly_method(sin, 'sin')
except ImportError as e:
    # new: silently escape, as this is annoying
    # warn("Error performing 'from math import sin': " + str(e))
    pass


try:
    from math import sinh
    Sinh = make_lambda_friendly_method(sinh, 'sinh')
except ImportError as e:
    # new: silently escape, as this is annoying
    # warn("Error performing 'from math import sinh': " + str(e))
    pass


try:
    from math import sqrt
    Sqrt = make_lambda_friendly_method(sqrt, 'sqrt')
except ImportError as e:
    # new: silently escape, as this is annoying
    # warn("Error performing 'from math import sqrt': " + str(e))
    pass


try:
    from math import tan
    Tan = make_lambda_friendly_method(tan, 'tan')
except ImportError as e:
    # new: silently escape, as this is annoying
    # warn("Error performing 'from math import tan': " + str(e))
    pass


try:
    from math import tanh
    Tanh = make_lambda_friendly_method(tanh, 'tanh')
except ImportError as e:
    # new: silently escape, as this is annoying
    # warn("Error performing 'from math import tanh': " + str(e))
    pass


try:
    from math import tau
    Tau = C(tau, 'tau')
except ImportError as e:
    # new: silently escape, as this is annoying
    # warn("Error performing 'from math import tau': " + str(e))
    pass


try:
    from math import trunc
    Trunc = make_lambda_friendly_method(trunc, 'trunc')
except ImportError as e:
    # new: silently escape, as this is annoying
    # warn("Error performing 'from math import trunc': " + str(e))
    pass


try:
    from decimal import BasicContext
    Basiccontext = C(BasicContext, 'BasicContext')
except ImportError as e:
    # new: silently escape, as this is annoying
    # warn("Error performing 'from decimal import BasicContext': " + str(e))
    pass


try:
    from decimal import Clamped
    CClamped = make_lambda_friendly_class(Clamped)
except ImportError as e:
    # new: silently escape, as this is annoying
    # warn("Error performing 'from decimal import Clamped': " + str(e))
    pass


try:
    from decimal import Context
    CContext = make_lambda_friendly_class(Context)
except ImportError as e:
    # new: silently escape, as this is annoying
    # warn("Error performing 'from decimal import Context': " + str(e))
    pass


try:
    from decimal import ConversionSyntax
    CConversionSyntax = make_lambda_friendly_class(ConversionSyntax)
except ImportError as e:
    # new: silently escape, as this is annoying
    # warn("Error performing 'from decimal import ConversionSyntax': " + str(e))
    pass


try:
    from decimal import Decimal
    DDecimal = make_lambda_friendly_class(Decimal)
except ImportError as e:
    # new: silently escape, as this is annoying
    # warn("Error performing 'from decimal import Decimal': " + str(e))
    pass


try:
    from decimal import DecimalException
    DDecimalException = make_lambda_friendly_class(DecimalException)
except ImportError as e:
    # new: silently escape, as this is annoying
    # warn("Error performing 'from decimal import DecimalException': " + str(e))
    pass


try:
    from decimal import DecimalTuple
    DDecimalTuple = make_lambda_friendly_class(DecimalTuple)
except ImportError as e:
    # new: silently escape, as this is annoying
    # warn("Error performing 'from decimal import DecimalTuple': " + str(e))
    pass


try:
    from decimal import DefaultContext
    Defaultcontext = C(DefaultContext, 'DefaultContext')
except ImportError as e:
    # new: silently escape, as this is annoying
    # warn("Error performing 'from decimal import DefaultContext': " + str(e))
    pass


try:
    from decimal import DivisionByZero
    DDivisionByZero = make_lambda_friendly_class(DivisionByZero)
except ImportError as e:
    # new: silently escape, as this is annoying
    # warn("Error performing 'from decimal import DivisionByZero': " + str(e))
    pass


try:
    from decimal import DivisionImpossible
    DDivisionImpossible = make_lambda_friendly_class(DivisionImpossible)
except ImportError as e:
    # new: silently escape, as this is annoying
    # warn("Error performing 'from decimal import DivisionImpossible': " + str(e))
    pass


try:
    from decimal import DivisionUndefined
    DDivisionUndefined = make_lambda_friendly_class(DivisionUndefined)
except ImportError as e:
    # new: silently escape, as this is annoying
    # warn("Error performing 'from decimal import DivisionUndefined': " + str(e))
    pass


try:
    from decimal import ExtendedContext
    Extendedcontext = C(ExtendedContext, 'ExtendedContext')
except ImportError as e:
    # new: silently escape, as this is annoying
    # warn("Error performing 'from decimal import ExtendedContext': " + str(e))
    pass


try:
    from decimal import FloatOperation
    FFloatOperation = make_lambda_friendly_class(FloatOperation)
except ImportError as e:
    # new: silently escape, as this is annoying
    # warn("Error performing 'from decimal import FloatOperation': " + str(e))
    pass


try:
    from decimal import HAVE_THREADS
    Have_threads = C(HAVE_THREADS, 'HAVE_THREADS')
except ImportError as e:
    # new: silently escape, as this is annoying
    # warn("Error performing 'from decimal import HAVE_THREADS': " + str(e))
    pass


try:
    from decimal import Inexact
    IInexact = make_lambda_friendly_class(Inexact)
except ImportError as e:
    # new: silently escape, as this is annoying
    # warn("Error performing 'from decimal import Inexact': " + str(e))
    pass


try:
    from decimal import InvalidContext
    IInvalidContext = make_lambda_friendly_class(InvalidContext)
except ImportError as e:
    # new: silently escape, as this is annoying
    # warn("Error performing 'from decimal import InvalidContext': " + str(e))
    pass


try:
    from decimal import InvalidOperation
    IInvalidOperation = make_lambda_friendly_class(InvalidOperation)
except ImportError as e:
    # new: silently escape, as this is annoying
    # warn("Error performing 'from decimal import InvalidOperation': " + str(e))
    pass


try:
    from decimal import MAX_EMAX
    Max_emax = C(MAX_EMAX, 'MAX_EMAX')
except ImportError as e:
    # new: silently escape, as this is annoying
    # warn("Error performing 'from decimal import MAX_EMAX': " + str(e))
    pass


try:
    from decimal import MAX_PREC
    Max_prec = C(MAX_PREC, 'MAX_PREC')
except ImportError as e:
    # new: silently escape, as this is annoying
    # warn("Error performing 'from decimal import MAX_PREC': " + str(e))
    pass


try:
    from decimal import MIN_EMIN
    Min_emin = C(MIN_EMIN, 'MIN_EMIN')
except ImportError as e:
    # new: silently escape, as this is annoying
    # warn("Error performing 'from decimal import MIN_EMIN': " + str(e))
    pass


try:
    from decimal import MIN_ETINY
    Min_etiny = C(MIN_ETINY, 'MIN_ETINY')
except ImportError as e:
    # new: silently escape, as this is annoying
    # warn("Error performing 'from decimal import MIN_ETINY': " + str(e))
    pass


try:
    from decimal import Overflow
    OOverflow = make_lambda_friendly_class(Overflow)
except ImportError as e:
    # new: silently escape, as this is annoying
    # warn("Error performing 'from decimal import Overflow': " + str(e))
    pass


try:
    from decimal import ROUND_05UP
    Round_05up = C(ROUND_05UP, 'ROUND_05UP')
except ImportError as e:
    # new: silently escape, as this is annoying
    # warn("Error performing 'from decimal import ROUND_05UP': " + str(e))
    pass


try:
    from decimal import ROUND_CEILING
    Round_ceiling = C(ROUND_CEILING, 'ROUND_CEILING')
except ImportError as e:
    # new: silently escape, as this is annoying
    # warn("Error performing 'from decimal import ROUND_CEILING': " + str(e))
    pass


try:
    from decimal import ROUND_DOWN
    Round_down = C(ROUND_DOWN, 'ROUND_DOWN')
except ImportError as e:
    # new: silently escape, as this is annoying
    # warn("Error performing 'from decimal import ROUND_DOWN': " + str(e))
    pass


try:
    from decimal import ROUND_FLOOR
    Round_floor = C(ROUND_FLOOR, 'ROUND_FLOOR')
except ImportError as e:
    # new: silently escape, as this is annoying
    # warn("Error performing 'from decimal import ROUND_FLOOR': " + str(e))
    pass


try:
    from decimal import ROUND_HALF_DOWN
    Round_half_down = C(ROUND_HALF_DOWN, 'ROUND_HALF_DOWN')
except ImportError as e:
    # new: silently escape, as this is annoying
    # warn("Error performing 'from decimal import ROUND_HALF_DOWN': " + str(e))
    pass


try:
    from decimal import ROUND_HALF_EVEN
    Round_half_even = C(ROUND_HALF_EVEN, 'ROUND_HALF_EVEN')
except ImportError as e:
    # new: silently escape, as this is annoying
    # warn("Error performing 'from decimal import ROUND_HALF_EVEN': " + str(e))
    pass


try:
    from decimal import ROUND_HALF_UP
    Round_half_up = C(ROUND_HALF_UP, 'ROUND_HALF_UP')
except ImportError as e:
    # new: silently escape, as this is annoying
    # warn("Error performing 'from decimal import ROUND_HALF_UP': " + str(e))
    pass


try:
    from decimal import ROUND_UP
    Round_up = C(ROUND_UP, 'ROUND_UP')
except ImportError as e:
    # new: silently escape, as this is annoying
    # warn("Error performing 'from decimal import ROUND_UP': " + str(e))
    pass


try:
    from decimal import Rounded
    RRounded = make_lambda_friendly_class(Rounded)
except ImportError as e:
    # new: silently escape, as this is annoying
    # warn("Error performing 'from decimal import Rounded': " + str(e))
    pass


try:
    from decimal import Subnormal
    SSubnormal = make_lambda_friendly_class(Subnormal)
except ImportError as e:
    # new: silently escape, as this is annoying
    # warn("Error performing 'from decimal import Subnormal': " + str(e))
    pass


try:
    from decimal import Underflow
    UUnderflow = make_lambda_friendly_class(Underflow)
except ImportError as e:
    # new: silently escape, as this is annoying
    # warn("Error performing 'from decimal import Underflow': " + str(e))
    pass


try:
    from decimal import getcontext
    Getcontext = make_lambda_friendly_method(getcontext, 'getcontext')
except ImportError as e:
    # new: silently escape, as this is annoying
    # warn("Error performing 'from decimal import getcontext': " + str(e))
    pass


try:
    from decimal import localcontext
    Localcontext = make_lambda_friendly_method(localcontext, 'localcontext')
except ImportError as e:
    # new: silently escape, as this is annoying
    # warn("Error performing 'from decimal import localcontext': " + str(e))
    pass


try:
    from decimal import setcontext
    Setcontext = make_lambda_friendly_method(setcontext, 'setcontext')
except ImportError as e:
    # new: silently escape, as this is annoying
    # warn("Error performing 'from decimal import setcontext': " + str(e))
    pass


Abs = make_lambda_friendly_method(abs, 'abs')


All = make_lambda_friendly_method(all, 'all')


Any = make_lambda_friendly_method(any, 'any')


Ascii = make_lambda_friendly_method(ascii, 'ascii')


Bin = make_lambda_friendly_method(bin, 'bin')


Bool = make_lambda_friendly_method(bool, 'bool')


Bytearray = make_lambda_friendly_method(bytearray, 'bytearray')


Bytes = make_lambda_friendly_method(bytes, 'bytes')


Callable = make_lambda_friendly_method(callable, 'callable')


Chr = make_lambda_friendly_method(chr, 'chr')


Classmethod = make_lambda_friendly_method(classmethod, 'classmethod')


Compile = make_lambda_friendly_method(compile, 'compile')


Complex = make_lambda_friendly_method(complex, 'complex')


Delattr = make_lambda_friendly_method(delattr, 'delattr')


Dict = make_lambda_friendly_method(dict, 'dict')


Dir = make_lambda_friendly_method(dir, 'dir')


Divmod = make_lambda_friendly_method(divmod, 'divmod')


Enumerate = make_lambda_friendly_method(enumerate, 'enumerate')


Eval = make_lambda_friendly_method(eval, 'eval')


Exec = make_lambda_friendly_method(exec, 'exec')


Filter = make_lambda_friendly_method(filter, 'filter')


Float = make_lambda_friendly_method(float, 'float')


Format = make_lambda_friendly_method(format, 'format')


Frozenset = make_lambda_friendly_method(frozenset, 'frozenset')


Getattr = make_lambda_friendly_method(getattr, 'getattr')


Globals = make_lambda_friendly_method(globals, 'globals')


Hasattr = make_lambda_friendly_method(hasattr, 'hasattr')


Hash = make_lambda_friendly_method(hash, 'hash')


Help = make_lambda_friendly_method(help, 'help')


Hex = make_lambda_friendly_method(hex, 'hex')


Id = make_lambda_friendly_method(id, 'id')


Input = make_lambda_friendly_method(input, 'input')


Int = make_lambda_friendly_method(int, 'int')


Isinstance = make_lambda_friendly_method(isinstance, 'isinstance')


Issubclass = make_lambda_friendly_method(issubclass, 'issubclass')


Iter = make_lambda_friendly_method(iter, 'iter')


Len = make_lambda_friendly_method(len, 'len')


List = make_lambda_friendly_method(list, 'list')


Locals = make_lambda_friendly_method(locals, 'locals')


Map = make_lambda_friendly_method(map, 'map')


Max = make_lambda_friendly_method(max, 'max')


Memoryview = make_lambda_friendly_method(memoryview, 'memoryview')


Min = make_lambda_friendly_method(min, 'min')


Next = make_lambda_friendly_method(next, 'next')


Object = make_lambda_friendly_method(object, 'object')


Oct = make_lambda_friendly_method(oct, 'oct')


Open = make_lambda_friendly_method(open, 'open')


Ord = make_lambda_friendly_method(ord, 'ord')


Pow = make_lambda_friendly_method(pow, 'pow')


Print = make_lambda_friendly_method(print, 'print')


Property = make_lambda_friendly_method(property, 'property')


Range = make_lambda_friendly_method(range, 'range')


Repr = make_lambda_friendly_method(repr, 'repr')


Reversed = make_lambda_friendly_method(reversed, 'reversed')


Round = make_lambda_friendly_method(round, 'round')


Set = make_lambda_friendly_method(set, 'set')


Setattr = make_lambda_friendly_method(setattr, 'setattr')


Slice = make_lambda_friendly_method(slice, 'slice')


Sorted = make_lambda_friendly_method(sorted, 'sorted')


Staticmethod = make_lambda_friendly_method(staticmethod, 'staticmethod')


Str = make_lambda_friendly_method(str, 'str')


Sum = make_lambda_friendly_method(sum, 'sum')


Super = make_lambda_friendly_method(super, 'super')


Tuple = make_lambda_friendly_method(tuple, 'tuple')


Type = make_lambda_friendly_method(type, 'type')


Vars = make_lambda_friendly_method(vars, 'vars')


Zip = make_lambda_friendly_method(zip, 'zip')


