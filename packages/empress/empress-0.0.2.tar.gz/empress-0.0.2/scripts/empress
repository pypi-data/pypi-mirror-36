#!/usr/bin/env python
from empress.model import Model
from empress.webserver import Application
from tornado.httpserver import HTTPServer
from tornado.ioloop import IOLoop
from skbio import TreeNode
import empress.tools as tools
import click


@click.command()
@click.option(
    '--tree-file', '-f', required=True,
    help='The file that contains the tree')
@click.option(
    '--metadata', '-m', required=True,
    help='A file that contains your metadata')
@click.option(
    '--clade-field', '-c', required=True,
    help='The metadata field that contains the clade names. '
    'This is the field that will be to color clades.')
@click.option(
    '--additional-metadata', '-a', default=None,
    help='An additional file that contains metadata'
)
@click.option(
    '--port', '-p', default=8080, show_default=True,
    help='The port to run the local server on.'
)
@click.option(
    '--main-skiprow', '-r', default=0, show_default=True,
    help='The number of rows to ignore in the main metadata file.'
)
@click.option(
    '--additional-skiprow', default=0, show_default=True,
    help='The number of rows to ignore on the additional metadata file.'
)
@click.option(
    '--main-seperator', '-s', default='\t',
    help='The seperator used in the metadata file. [default: <tab>]'
)
@click.option(
    '--additional-seperator',default='\t',
    help='The seperator used in the additional metedata file. [default: <tab>]'
)
@click.option(
    'highlight_file', '-h', default=None, show_default=True
)
def start(
        tree_file, metadata, clade_field, additional_metadata, port,
        main_skiprow, additional_skiprow, main_seperator, additional_seperator,
        highlight_file):

    try:
        import qiime2
        from qiime2 import Metadata
        tree = qiime.Artifact.load(tree_file).view(TreeNode)
        metadata = Metadata.load('sample-metadata.tsv').to_dataframe()
    except:
        tree = tools.read(tree_file)

    metadata = tools.read_metadata(metadata, main_skiprow, main_seperator)

    # read in main metadata

    headers = metadata.columns.values.tolist()
    edge_metadata = pd.merge(edge_metadata, metadata,
                             how='outer', on="Node_id")
    if highlight_file is not None:
        nodes = tools.read_metadata(
            highlight_file, seperator=',')['id'].tolist()
    else:
        nodes = None

    m = Model(tree, metadata, clade_field, highlight_ids=nodes)
    m.center_tree()

    # Create the webserver
    print("build web server")
    http_server = HTTPServer(Application(m))
    http_server.listen(port)
    ioloop = IOLoop.instance()
    print("server started at port", port)
    ioloop.start()
    print("done")


if __name__ == '__main__':
    start()
